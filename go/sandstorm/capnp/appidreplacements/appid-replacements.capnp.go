// Code generated by capnpc-go. DO NOT EDIT.

package appidreplacements

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

// Constants defined in appid-replacements.capnp.
var (
	AppIdReplacementList = AppIdReplacement_List(capnp.MustUnmarshalRoot(x_a53cae3f717a1676[0:712]).List())
)

type AppIdReplacement capnp.Struct

// AppIdReplacement_TypeID is the unique identifier for the type AppIdReplacement.
const AppIdReplacement_TypeID = 0x888dcc6878baa07a

func NewAppIdReplacement(s *capnp.Segment) (AppIdReplacement, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return AppIdReplacement(st), err
}

func NewRootAppIdReplacement(s *capnp.Segment) (AppIdReplacement, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return AppIdReplacement(st), err
}

func ReadRootAppIdReplacement(msg *capnp.Message) (AppIdReplacement, error) {
	root, err := msg.Root()
	return AppIdReplacement(root.Struct()), err
}

func (s AppIdReplacement) String() string {
	str, _ := text.Marshal(0x888dcc6878baa07a, capnp.Struct(s))
	return str
}

func (s AppIdReplacement) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AppIdReplacement) DecodeFromPtr(p capnp.Ptr) AppIdReplacement {
	return AppIdReplacement(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AppIdReplacement) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AppIdReplacement) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AppIdReplacement) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AppIdReplacement) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AppIdReplacement) Original() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s AppIdReplacement) HasOriginal() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AppIdReplacement) OriginalBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s AppIdReplacement) SetOriginal(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s AppIdReplacement) Replacement() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s AppIdReplacement) HasReplacement() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s AppIdReplacement) ReplacementBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s AppIdReplacement) SetReplacement(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s AppIdReplacement) RevokeExceptPackageIds() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s AppIdReplacement) HasRevokeExceptPackageIds() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s AppIdReplacement) SetRevokeExceptPackageIds(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewRevokeExceptPackageIds sets the revokeExceptPackageIds field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s AppIdReplacement) NewRevokeExceptPackageIds(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// AppIdReplacement_List is a list of AppIdReplacement.
type AppIdReplacement_List = capnp.StructList[AppIdReplacement]

// NewAppIdReplacement creates a new list of AppIdReplacement.
func NewAppIdReplacement_List(s *capnp.Segment, sz int32) (AppIdReplacement_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[AppIdReplacement](l), err
}

// AppIdReplacement_Future is a wrapper for a AppIdReplacement promised by a client call.
type AppIdReplacement_Future struct{ *capnp.Future }

func (f AppIdReplacement_Future) Struct() (AppIdReplacement, error) {
	p, err := f.Future.Ptr()
	return AppIdReplacement(p.Struct()), err
}

const schema_a53cae3f717a1676 = "x\xda|\xd0\xbd\x8e\xddD\x14\x07\xf0s\xeckVZ" +
	"-{cm\x08JE\x1a\xca \xcf\xf5\xc7\xcc\xa0H" +
	"!\x88-\x16\x05io\"\xa4P\xa4\x98;\x1e\xdb\xeb" +
	"\x89\x9d\xf1\xd7\\\xdbO\x00\x05\x0d\x05\x1d\x12\x0d\xcd\x95" +
	"\x80\x8a&/@\x01\xbc\x03\x15\xef@\x81\x8c\x16\x11\x05" +
	"\x9a\xb4?\xfdu\xce\xf9\x9f`\x85\x1f\xac\xc8\x9b?;" +
	"\xe0l\xefxo,\xf3\xb7/\xc6\xe2\xd7/?\x07\xff" +
	"6.\xf6\xd6\xdc\xdc\xff\xe1\xdew\xe0\xb9G\x00\xe1\x05" +
	">\xc2\xb3\xa7x\x04p\xf6\x19\xfe\x08\xb8\xfc\xfe\xf6_" +
	"\xdf\x7f\xfd\xd5/\x7f\x80\x7f{\xf5*\x0c\x18\xfaN\x8b" +
	"g\xef:G\x00\x8f\xef8.>\xbe\xe78\x08\x1f." +
	"\xc2\x98\xab\xf4n\xabV\xe6\x99\x90\xaaRu\xdf\xbd'" +
	"\x85\xa9\xcd\xfb\x0f\x8c\xb9H\x1f\xa9\x97\x8e\xfd%\xe2\xf6" +
	"\xc4]\x01\xac\x10\xc0?\xff\x18`\xfb\x91\x8b\xdbK\x07" +
	"}\xc4\x9bx\x8d\x9f\xec\x00\xb6\x0f]\xdc>q\xd0w" +
	"\x9c\x9b\xe8\x00\xf8\x9f\xbe\x00\xd8>qq\xdb;\xb8<" +
	"o\xaf\xf2\xabZ<\x03\x00<\x01\x07O\x00\x97\xf6\xdf" +
	"%p\xa4\xea\xfe?j\x9fku>\xa2T\xa6\xbf\x14" +
	"R\xdf\x17\xb9\xbaH;<\x05\xbct\xf1\x9f\xdc)\xe0" +
	"k\x1a\x88\xff7x\xa7\x7fx\xd5]\xb7x9\xe1\xc6" +
	"\xab\xd7\xc25\x82\x8f\xf9\x83\x1b.\xb9{@r~@" +
	"\xff\xe9)i\x0eH\xbe8 \x00\xf9\xe6\x80\xe4\xa7\x03" +
	"\xfa\xbf\xdd\"\x7f\x1e0\xf4\xf1Z\x17[Z\xa5\x95," +
	"\xbc4\xe4,\xabIOtM\xd2<\xad+\xa1t\xd3" +
	"\xf0R\x976\x9c\xbb|\x9e*\x19\xcd\x9c\x84\xebVe" +
	"\xc1\xb2ox\xdcTC\xefI-\x83)\xab\x94\xb4\x81" +
	"\x9ex\"\x9b17$N\x06\xc3:\xcb\xc84\xdaJ" +
	"\xb5S\xcc\x9a5\xa3eA\xf0\x18\x97]\xbc\xdb\xf1\x94" +
	"\x05.\x89D\x90\xf1\x1dI\x13\xa26DQ\x9e\xa4\x94" +
	"\xa5R^_5*&\xf6r\xf4l_&\xd3\x10\xd8" +
	"\xbc4\x15\xe9;\xa1\x06:2\xcb\xfa\xccP\xd2O\xb6" +
	"\xae\x92Ike\x8a\xf5\xc0\x9b`\xa9\x99\xac)\x89\x02" +
	"\x8f\xd6Q\xa5\xe6\x9aVy\xa0c\xad\xab\x0d)\x87\xc1" +
	"\x14\x85\x92r\x13\x15i\xc6u\x16'\xf34\xae\xabH" +
	"\x14K\x9d5\xc5\xc8B\xeb\xd9\xb9b\x81JM\xae\x8d" +
	"\x18YU4\x86\xd0\xa4)7v\x9f'\xb4\xcd\x9bX" +
	"\x85\xba\x94q\xbb\x8e\xe4T,\"\xdc\xc7AA\"/" +
	"\x8c\xf3n\x94\xf3\x90W$i\x02Q\xeduS\xf1," +
	"\x92\xed\xa4g%\xe2\xb0\xb3\x091=5\xebB\xb3\x82" +
	"x\xc7H\xde:\xc6\x85Dq\xa0\x02)\\\xb1\xe1\xbb" +
	"\x98+\xc9C\xb6\x0b)\x8fw\x19\xa1r\x17l\x00\x16" +
	"\x1a\xb2,Pq\xe2\x0a.E\x94l\x14\xa5\x9b(V" +
	"a\x16\xf2M\xc2\x92\x94\x02,\x15K\x9a nS\xcf" +
	"\x96$\x9alMY^\x88q\xaa\x9b\x99\x0e\x9b\xce\xee" +
	"\x93\xb6\xee{\xd3\x8fc\xc4sBY,\xd7\xa9%\xc5" +
	"\x92\x943\x11b?x-\xd5\xb9\xa0}\xda\x95\\\xe7" +
	"f\x1c\xc94\x17\xc98\x93\xa6jM\xdd\x0cZ\x1a\xd2" +
	"*m\xdau\xca\xb3\xe0\xef\x00\x00\x00\xff\xff\x0c>-" +
	"V"

func init() {
	schemas.Register(schema_a53cae3f717a1676,
		0x888dcc6878baa07a,
		0xe6cb9296adfd17e0)
}

var x_a53cae3f717a1676 = []byte{
	0, 0, 0, 0, 88, 0, 0, 0,
	1, 0, 0, 0, 103, 0, 0, 0,
	16, 0, 0, 0, 0, 0, 3, 0,
	45, 0, 0, 0, 170, 1, 0, 0,
	69, 0, 0, 0, 170, 1, 0, 0,
	93, 0, 0, 0, 14, 0, 0, 0,
	113, 0, 0, 0, 170, 1, 0, 0,
	137, 0, 0, 0, 170, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 0, 0, 170, 1, 0, 0,
	181, 0, 0, 0, 170, 1, 0, 0,
	205, 0, 0, 0, 22, 0, 0, 0,
	249, 0, 0, 0, 170, 1, 0, 0,
	17, 1, 0, 0, 170, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	118, 106, 118, 101, 107, 101, 99, 104,
	100, 51, 57, 56, 102, 110, 49, 116,
	49, 107, 110, 49, 100, 103, 100, 110,
	109, 97, 101, 107, 113, 113, 57, 106,
	107, 106, 118, 51, 122, 115, 103, 122,
	121, 109, 99, 52, 122, 57, 49, 51,
	114, 101, 102, 48, 0, 0, 0, 0,
	119, 113, 57, 53, 113, 109, 117, 116,
	99, 107, 99, 48, 121, 102, 109, 101,
	99, 118, 48, 107, 121, 57, 54, 99,
	113, 120, 103, 112, 49, 53, 54, 117,
	112, 56, 115, 118, 56, 49, 121, 120,
	118, 109, 101, 114, 121, 53, 56, 113,
	56, 55, 106, 104, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 1, 0, 0,
	98, 53, 98, 98, 57, 100, 56, 48,
	49, 52, 97, 48, 102, 57, 98, 49,
	100, 54, 49, 101, 50, 49, 101, 55,
	57, 54, 100, 55, 56, 100, 99, 99,
	0, 0, 0, 0, 0, 0, 0, 0,
	118, 120, 101, 56, 97, 119, 99, 120,
	118, 116, 106, 54, 121, 117, 48, 118,
	103, 106, 112, 109, 49, 116, 115, 97,
	101, 117, 55, 120, 56, 118, 56, 116,
	102, 112, 55, 49, 116, 121, 118, 110,
	109, 54, 121, 107, 107, 101, 112, 104,
	117, 57, 113, 48, 0, 0, 0, 0,
	110, 56, 99, 110, 55, 49, 52, 48,
	55, 110, 52, 109, 101, 122, 110, 55,
	109, 103, 48, 107, 53, 107, 107, 109,
	50, 49, 106, 117, 117, 112, 104, 104,
	101, 99, 99, 50, 52, 104, 100, 102,
	57, 107, 102, 53, 54, 122, 121, 120,
	109, 52, 97, 104, 0, 0, 0, 0,
	110, 102, 113, 104, 120, 56, 51, 118,
	118, 122, 109, 56, 48, 101, 100, 112,
	103, 107, 112, 97, 120, 56, 109, 104,
	113, 112, 49, 55, 54, 113, 106, 50,
	118, 119, 103, 54, 55, 114, 103, 113,
	53, 101, 51, 107, 106, 99, 53, 114,
	52, 99, 121, 104, 0, 0, 0, 0,
	97, 51, 119, 53, 48, 104, 49, 52,
	51, 53, 103, 115, 120, 99, 122, 117,
	103, 109, 49, 54, 113, 48, 97, 109,
	119, 107, 113, 109, 57, 102, 52, 99,
	114, 121, 107, 122, 101, 97, 53, 51,
	115, 118, 54, 49, 112, 116, 55, 112,
	104, 107, 56, 104, 0, 0, 0, 0,
	5, 0, 0, 0, 10, 1, 0, 0,
	21, 0, 0, 0, 10, 1, 0, 0,
	49, 52, 53, 48, 101, 48, 99, 97,
	97, 50, 57, 98, 53, 57, 101, 99,
	57, 51, 56, 98, 51, 55, 57, 53,
	98, 102, 49, 55, 99, 98, 48, 50,
	0, 0, 0, 0, 0, 0, 0, 0,
	55, 51, 56, 102, 48, 101, 53, 54,
	97, 57, 99, 97, 52, 54, 50, 101,
	55, 55, 50, 52, 53, 101, 51, 102,
	51, 57, 50, 54, 56, 54, 100, 55,
	0, 0, 0, 0, 0, 0, 0, 0,
	109, 56, 54, 113, 48, 53, 114, 100,
	118, 106, 49, 52, 121, 118, 110, 55,
	56, 103, 104, 97, 120, 121, 110, 113,
	122, 55, 117, 50, 115, 118, 119, 54,
	114, 110, 116, 116, 112, 116, 120, 120,
	52, 57, 103, 49, 55, 56, 53, 99,
	100, 118, 49, 104, 0, 0, 0, 0,
	54, 106, 122, 49, 97, 97, 119, 117,
	114, 55, 107, 103, 97, 55, 116, 100,
	115, 106, 57, 107, 103, 112, 120, 120,
	49, 121, 122, 104, 54, 120, 122, 49,
	113, 109, 114, 112, 110, 113, 117, 107,
	99, 112, 49, 114, 101, 107, 112, 114,
	100, 57, 102, 48, 0, 0, 0, 0,
}
