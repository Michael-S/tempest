// Code generated by capnpc-go. DO NOT EDIT.

package controlsocket

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	util "zenhack.net/go/sandstorm/capnp/util"
)

// Constants defined in control-socket.capnp.
const (
	Controller_socketPath = "/var/sandstorm/socket/control"
)

type Controller struct{ Client *capnp.Client }

// Controller_TypeID is the unique identifier for the type Controller.
const Controller_TypeID = 0xd2279138704f4cad

func (c Controller) DevShell(ctx context.Context, params func(Controller_devShell_Params) error) (Controller_devShell_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2279138704f4cad,
			MethodID:      0,
			InterfaceName: "control-socket.capnp:Controller",
			MethodName:    "devShell",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Controller_devShell_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Controller_devShell_Results_Future{Future: ans.Future()}, release
}
func (c Controller) Dev(ctx context.Context, params func(Controller_dev_Params) error) (Controller_dev_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2279138704f4cad,
			MethodID:      1,
			InterfaceName: "control-socket.capnp:Controller",
			MethodName:    "dev",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Controller_dev_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Controller_dev_Results_Future{Future: ans.Future()}, release
}

func (c Controller) AddRef() Controller {
	return Controller{
		Client: c.Client.AddRef(),
	}
}

func (c Controller) Release() {
	c.Client.Release()
}

// A Controller_Server is a Controller with a local implementation.
type Controller_Server interface {
	DevShell(context.Context, Controller_devShell) error

	Dev(context.Context, Controller_dev) error
}

// Controller_NewServer creates a new Server from an implementation of Controller_Server.
func Controller_NewServer(s Controller_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Controller_Methods(nil, s), s, c, policy)
}

// Controller_ServerToClient creates a new Client from an implementation of Controller_Server.
// The caller is responsible for calling Release on the returned Client.
func Controller_ServerToClient(s Controller_Server, policy *server.Policy) Controller {
	return Controller{Client: capnp.NewClient(Controller_NewServer(s, policy))}
}

// Controller_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Controller_Methods(methods []server.Method, s Controller_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2279138704f4cad,
			MethodID:      0,
			InterfaceName: "control-socket.capnp:Controller",
			MethodName:    "devShell",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DevShell(ctx, Controller_devShell{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2279138704f4cad,
			MethodID:      1,
			InterfaceName: "control-socket.capnp:Controller",
			MethodName:    "dev",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Dev(ctx, Controller_dev{call})
		},
	})

	return methods
}

// Controller_devShell holds the state for a server call to Controller.devShell.
// See server.Call for documentation.
type Controller_devShell struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Controller_devShell) Args() Controller_devShell_Params {
	return Controller_devShell_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Controller_devShell) AllocResults() (Controller_devShell_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Controller_devShell_Results{Struct: r}, err
}

// Controller_dev holds the state for a server call to Controller.dev.
// See server.Call for documentation.
type Controller_dev struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Controller_dev) Args() Controller_dev_Params {
	return Controller_dev_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Controller_dev) AllocResults() (Controller_dev_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Controller_dev_Results{Struct: r}, err
}

type Controller_devShell_Params struct{ capnp.Struct }

// Controller_devShell_Params_TypeID is the unique identifier for the type Controller_devShell_Params.
const Controller_devShell_Params_TypeID = 0x9780c0aba70a923b

func NewController_devShell_Params(s *capnp.Segment) (Controller_devShell_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Controller_devShell_Params{st}, err
}

func NewRootController_devShell_Params(s *capnp.Segment) (Controller_devShell_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Controller_devShell_Params{st}, err
}

func ReadRootController_devShell_Params(msg *capnp.Message) (Controller_devShell_Params, error) {
	root, err := msg.Root()
	return Controller_devShell_Params{root.Struct()}, err
}

func (s Controller_devShell_Params) String() string {
	str, _ := text.Marshal(0x9780c0aba70a923b, s.Struct)
	return str
}

// Controller_devShell_Params_List is a list of Controller_devShell_Params.
type Controller_devShell_Params_List struct{ capnp.List }

// NewController_devShell_Params creates a new list of Controller_devShell_Params.
func NewController_devShell_Params_List(s *capnp.Segment, sz int32) (Controller_devShell_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Controller_devShell_Params_List{l}, err
}

func (s Controller_devShell_Params_List) At(i int) Controller_devShell_Params {
	return Controller_devShell_Params{s.List.Struct(i)}
}

func (s Controller_devShell_Params_List) Set(i int, v Controller_devShell_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Controller_devShell_Params_List) String() string {
	str, _ := text.MarshalList(0x9780c0aba70a923b, s.List)
	return str
}

// Controller_devShell_Params_Future is a wrapper for a Controller_devShell_Params promised by a client call.
type Controller_devShell_Params_Future struct{ *capnp.Future }

func (p Controller_devShell_Params_Future) Struct() (Controller_devShell_Params, error) {
	s, err := p.Future.Struct()
	return Controller_devShell_Params{s}, err
}

type Controller_devShell_Results struct{ capnp.Struct }

// Controller_devShell_Results_TypeID is the unique identifier for the type Controller_devShell_Results.
const Controller_devShell_Results_TypeID = 0xc98eacc122f91e21

func NewController_devShell_Results(s *capnp.Segment) (Controller_devShell_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Controller_devShell_Results{st}, err
}

func NewRootController_devShell_Results(s *capnp.Segment) (Controller_devShell_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Controller_devShell_Results{st}, err
}

func ReadRootController_devShell_Results(msg *capnp.Message) (Controller_devShell_Results, error) {
	root, err := msg.Root()
	return Controller_devShell_Results{root.Struct()}, err
}

func (s Controller_devShell_Results) String() string {
	str, _ := text.Marshal(0xc98eacc122f91e21, s.Struct)
	return str
}

func (s Controller_devShell_Results) ShellFds() (ShellFDs, error) {
	p, err := s.Struct.Ptr(0)
	return ShellFDs{Struct: p.Struct()}, err
}

func (s Controller_devShell_Results) HasShellFds() bool {
	return s.Struct.HasPtr(0)
}

func (s Controller_devShell_Results) SetShellFds(v ShellFDs) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewShellFds sets the shellFds field to a newly
// allocated ShellFDs struct, preferring placement in s's segment.
func (s Controller_devShell_Results) NewShellFds() (ShellFDs, error) {
	ss, err := NewShellFDs(s.Struct.Segment())
	if err != nil {
		return ShellFDs{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Controller_devShell_Results) Handle() util.Handle {
	p, _ := s.Struct.Ptr(1)
	return util.Handle{Client: p.Interface().Client()}
}

func (s Controller_devShell_Results) HasHandle() bool {
	return s.Struct.HasPtr(1)
}

func (s Controller_devShell_Results) SetHandle(v util.Handle) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Controller_devShell_Results_List is a list of Controller_devShell_Results.
type Controller_devShell_Results_List struct{ capnp.List }

// NewController_devShell_Results creates a new list of Controller_devShell_Results.
func NewController_devShell_Results_List(s *capnp.Segment, sz int32) (Controller_devShell_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Controller_devShell_Results_List{l}, err
}

func (s Controller_devShell_Results_List) At(i int) Controller_devShell_Results {
	return Controller_devShell_Results{s.List.Struct(i)}
}

func (s Controller_devShell_Results_List) Set(i int, v Controller_devShell_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Controller_devShell_Results_List) String() string {
	str, _ := text.MarshalList(0xc98eacc122f91e21, s.List)
	return str
}

// Controller_devShell_Results_Future is a wrapper for a Controller_devShell_Results promised by a client call.
type Controller_devShell_Results_Future struct{ *capnp.Future }

func (p Controller_devShell_Results_Future) Struct() (Controller_devShell_Results, error) {
	s, err := p.Future.Struct()
	return Controller_devShell_Results{s}, err
}

func (p Controller_devShell_Results_Future) ShellFds() ShellFDs_Future {
	return ShellFDs_Future{Future: p.Future.Field(0, nil)}
}

func (p Controller_devShell_Results_Future) Handle() util.Handle {
	return util.Handle{Client: p.Future.Field(1, nil).Client()}
}

type Controller_dev_Params struct{ capnp.Struct }

// Controller_dev_Params_TypeID is the unique identifier for the type Controller_dev_Params.
const Controller_dev_Params_TypeID = 0xaf8f237f68a73560

func NewController_dev_Params(s *capnp.Segment) (Controller_dev_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Controller_dev_Params{st}, err
}

func NewRootController_dev_Params(s *capnp.Segment) (Controller_dev_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Controller_dev_Params{st}, err
}

func ReadRootController_dev_Params(msg *capnp.Message) (Controller_dev_Params, error) {
	root, err := msg.Root()
	return Controller_dev_Params{root.Struct()}, err
}

func (s Controller_dev_Params) String() string {
	str, _ := text.Marshal(0xaf8f237f68a73560, s.Struct)
	return str
}

func (s Controller_dev_Params) AppId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Controller_dev_Params) HasAppId() bool {
	return s.Struct.HasPtr(0)
}

func (s Controller_dev_Params) AppIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Controller_dev_Params) SetAppId(v string) error {
	return s.Struct.SetText(0, v)
}

// Controller_dev_Params_List is a list of Controller_dev_Params.
type Controller_dev_Params_List struct{ capnp.List }

// NewController_dev_Params creates a new list of Controller_dev_Params.
func NewController_dev_Params_List(s *capnp.Segment, sz int32) (Controller_dev_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Controller_dev_Params_List{l}, err
}

func (s Controller_dev_Params_List) At(i int) Controller_dev_Params {
	return Controller_dev_Params{s.List.Struct(i)}
}

func (s Controller_dev_Params_List) Set(i int, v Controller_dev_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Controller_dev_Params_List) String() string {
	str, _ := text.MarshalList(0xaf8f237f68a73560, s.List)
	return str
}

// Controller_dev_Params_Future is a wrapper for a Controller_dev_Params promised by a client call.
type Controller_dev_Params_Future struct{ *capnp.Future }

func (p Controller_dev_Params_Future) Struct() (Controller_dev_Params, error) {
	s, err := p.Future.Struct()
	return Controller_dev_Params{s}, err
}

type Controller_dev_Results struct{ capnp.Struct }

// Controller_dev_Results_TypeID is the unique identifier for the type Controller_dev_Results.
const Controller_dev_Results_TypeID = 0xd4a47427f5ca501b

func NewController_dev_Results(s *capnp.Segment) (Controller_dev_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Controller_dev_Results{st}, err
}

func NewRootController_dev_Results(s *capnp.Segment) (Controller_dev_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Controller_dev_Results{st}, err
}

func ReadRootController_dev_Results(msg *capnp.Message) (Controller_dev_Results, error) {
	root, err := msg.Root()
	return Controller_dev_Results{root.Struct()}, err
}

func (s Controller_dev_Results) String() string {
	str, _ := text.Marshal(0xd4a47427f5ca501b, s.Struct)
	return str
}

func (s Controller_dev_Results) FuseFd() FileDescriptor {
	p, _ := s.Struct.Ptr(0)
	return FileDescriptor{Client: p.Interface().Client()}
}

func (s Controller_dev_Results) HasFuseFd() bool {
	return s.Struct.HasPtr(0)
}

func (s Controller_dev_Results) SetFuseFd(v FileDescriptor) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Controller_dev_Results) Session() DevSession {
	p, _ := s.Struct.Ptr(1)
	return DevSession{Client: p.Interface().Client()}
}

func (s Controller_dev_Results) HasSession() bool {
	return s.Struct.HasPtr(1)
}

func (s Controller_dev_Results) SetSession(v DevSession) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Controller_dev_Results_List is a list of Controller_dev_Results.
type Controller_dev_Results_List struct{ capnp.List }

// NewController_dev_Results creates a new list of Controller_dev_Results.
func NewController_dev_Results_List(s *capnp.Segment, sz int32) (Controller_dev_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Controller_dev_Results_List{l}, err
}

func (s Controller_dev_Results_List) At(i int) Controller_dev_Results {
	return Controller_dev_Results{s.List.Struct(i)}
}

func (s Controller_dev_Results_List) Set(i int, v Controller_dev_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Controller_dev_Results_List) String() string {
	str, _ := text.MarshalList(0xd4a47427f5ca501b, s.List)
	return str
}

// Controller_dev_Results_Future is a wrapper for a Controller_dev_Results promised by a client call.
type Controller_dev_Results_Future struct{ *capnp.Future }

func (p Controller_dev_Results_Future) Struct() (Controller_dev_Results, error) {
	s, err := p.Future.Struct()
	return Controller_dev_Results{s}, err
}

func (p Controller_dev_Results_Future) FuseFd() FileDescriptor {
	return FileDescriptor{Client: p.Future.Field(0, nil).Client()}
}

func (p Controller_dev_Results_Future) Session() DevSession {
	return DevSession{Client: p.Future.Field(1, nil).Client()}
}

type ShellFDs struct{ capnp.Struct }

// ShellFDs_TypeID is the unique identifier for the type ShellFDs.
const ShellFDs_TypeID = 0xa58abe200abe0444

func NewShellFDs(s *capnp.Segment) (ShellFDs, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ShellFDs{st}, err
}

func NewRootShellFDs(s *capnp.Segment) (ShellFDs, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ShellFDs{st}, err
}

func ReadRootShellFDs(msg *capnp.Message) (ShellFDs, error) {
	root, err := msg.Root()
	return ShellFDs{root.Struct()}, err
}

func (s ShellFDs) String() string {
	str, _ := text.Marshal(0xa58abe200abe0444, s.Struct)
	return str
}

func (s ShellFDs) AcceptHttp() FileDescriptor {
	p, _ := s.Struct.Ptr(0)
	return FileDescriptor{Client: p.Interface().Client()}
}

func (s ShellFDs) HasAcceptHttp() bool {
	return s.Struct.HasPtr(0)
}

func (s ShellFDs) SetAcceptHttp(v FileDescriptor) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s ShellFDs) AcceptSmtp() FileDescriptor {
	p, _ := s.Struct.Ptr(1)
	return FileDescriptor{Client: p.Interface().Client()}
}

func (s ShellFDs) HasAcceptSmtp() bool {
	return s.Struct.HasPtr(1)
}

func (s ShellFDs) SetAcceptSmtp(v FileDescriptor) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

func (s ShellFDs) ConnectBackend() FileDescriptor {
	p, _ := s.Struct.Ptr(2)
	return FileDescriptor{Client: p.Interface().Client()}
}

func (s ShellFDs) HasConnectBackend() bool {
	return s.Struct.HasPtr(2)
}

func (s ShellFDs) SetConnectBackend(v FileDescriptor) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(2, in.ToPtr())
}

// ShellFDs_List is a list of ShellFDs.
type ShellFDs_List struct{ capnp.List }

// NewShellFDs creates a new list of ShellFDs.
func NewShellFDs_List(s *capnp.Segment, sz int32) (ShellFDs_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return ShellFDs_List{l}, err
}

func (s ShellFDs_List) At(i int) ShellFDs { return ShellFDs{s.List.Struct(i)} }

func (s ShellFDs_List) Set(i int, v ShellFDs) error { return s.List.SetStruct(i, v.Struct) }

func (s ShellFDs_List) String() string {
	str, _ := text.MarshalList(0xa58abe200abe0444, s.List)
	return str
}

// ShellFDs_Future is a wrapper for a ShellFDs promised by a client call.
type ShellFDs_Future struct{ *capnp.Future }

func (p ShellFDs_Future) Struct() (ShellFDs, error) {
	s, err := p.Future.Struct()
	return ShellFDs{s}, err
}

func (p ShellFDs_Future) AcceptHttp() FileDescriptor {
	return FileDescriptor{Client: p.Future.Field(0, nil).Client()}
}

func (p ShellFDs_Future) AcceptSmtp() FileDescriptor {
	return FileDescriptor{Client: p.Future.Field(1, nil).Client()}
}

func (p ShellFDs_Future) ConnectBackend() FileDescriptor {
	return FileDescriptor{Client: p.Future.Field(2, nil).Client()}
}

type DevSession struct{ Client *capnp.Client }

// DevSession_TypeID is the unique identifier for the type DevSession.
const DevSession_TypeID = 0xc0433f3776e7c305

func (c DevSession) UpdateManifest(ctx context.Context, params func(DevSession_updateManifest_Params) error) (DevSession_updateManifest_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc0433f3776e7c305,
			MethodID:      0,
			InterfaceName: "control-socket.capnp:DevSession",
			MethodName:    "updateManifest",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(DevSession_updateManifest_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return DevSession_updateManifest_Results_Future{Future: ans.Future()}, release
}

func (c DevSession) AddRef() DevSession {
	return DevSession{
		Client: c.Client.AddRef(),
	}
}

func (c DevSession) Release() {
	c.Client.Release()
}

// A DevSession_Server is a DevSession with a local implementation.
type DevSession_Server interface {
	UpdateManifest(context.Context, DevSession_updateManifest) error
}

// DevSession_NewServer creates a new Server from an implementation of DevSession_Server.
func DevSession_NewServer(s DevSession_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(DevSession_Methods(nil, s), s, c, policy)
}

// DevSession_ServerToClient creates a new Client from an implementation of DevSession_Server.
// The caller is responsible for calling Release on the returned Client.
func DevSession_ServerToClient(s DevSession_Server, policy *server.Policy) DevSession {
	return DevSession{Client: capnp.NewClient(DevSession_NewServer(s, policy))}
}

// DevSession_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func DevSession_Methods(methods []server.Method, s DevSession_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc0433f3776e7c305,
			MethodID:      0,
			InterfaceName: "control-socket.capnp:DevSession",
			MethodName:    "updateManifest",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.UpdateManifest(ctx, DevSession_updateManifest{call})
		},
	})

	return methods
}

// DevSession_updateManifest holds the state for a server call to DevSession.updateManifest.
// See server.Call for documentation.
type DevSession_updateManifest struct {
	*server.Call
}

// Args returns the call's arguments.
func (c DevSession_updateManifest) Args() DevSession_updateManifest_Params {
	return DevSession_updateManifest_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c DevSession_updateManifest) AllocResults() (DevSession_updateManifest_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return DevSession_updateManifest_Results{Struct: r}, err
}

type DevSession_updateManifest_Params struct{ capnp.Struct }

// DevSession_updateManifest_Params_TypeID is the unique identifier for the type DevSession_updateManifest_Params.
const DevSession_updateManifest_Params_TypeID = 0xbff8c51eccea5f2d

func NewDevSession_updateManifest_Params(s *capnp.Segment) (DevSession_updateManifest_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return DevSession_updateManifest_Params{st}, err
}

func NewRootDevSession_updateManifest_Params(s *capnp.Segment) (DevSession_updateManifest_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return DevSession_updateManifest_Params{st}, err
}

func ReadRootDevSession_updateManifest_Params(msg *capnp.Message) (DevSession_updateManifest_Params, error) {
	root, err := msg.Root()
	return DevSession_updateManifest_Params{root.Struct()}, err
}

func (s DevSession_updateManifest_Params) String() string {
	str, _ := text.Marshal(0xbff8c51eccea5f2d, s.Struct)
	return str
}

// DevSession_updateManifest_Params_List is a list of DevSession_updateManifest_Params.
type DevSession_updateManifest_Params_List struct{ capnp.List }

// NewDevSession_updateManifest_Params creates a new list of DevSession_updateManifest_Params.
func NewDevSession_updateManifest_Params_List(s *capnp.Segment, sz int32) (DevSession_updateManifest_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return DevSession_updateManifest_Params_List{l}, err
}

func (s DevSession_updateManifest_Params_List) At(i int) DevSession_updateManifest_Params {
	return DevSession_updateManifest_Params{s.List.Struct(i)}
}

func (s DevSession_updateManifest_Params_List) Set(i int, v DevSession_updateManifest_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s DevSession_updateManifest_Params_List) String() string {
	str, _ := text.MarshalList(0xbff8c51eccea5f2d, s.List)
	return str
}

// DevSession_updateManifest_Params_Future is a wrapper for a DevSession_updateManifest_Params promised by a client call.
type DevSession_updateManifest_Params_Future struct{ *capnp.Future }

func (p DevSession_updateManifest_Params_Future) Struct() (DevSession_updateManifest_Params, error) {
	s, err := p.Future.Struct()
	return DevSession_updateManifest_Params{s}, err
}

type DevSession_updateManifest_Results struct{ capnp.Struct }

// DevSession_updateManifest_Results_TypeID is the unique identifier for the type DevSession_updateManifest_Results.
const DevSession_updateManifest_Results_TypeID = 0x93f10e053f665a30

func NewDevSession_updateManifest_Results(s *capnp.Segment) (DevSession_updateManifest_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return DevSession_updateManifest_Results{st}, err
}

func NewRootDevSession_updateManifest_Results(s *capnp.Segment) (DevSession_updateManifest_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return DevSession_updateManifest_Results{st}, err
}

func ReadRootDevSession_updateManifest_Results(msg *capnp.Message) (DevSession_updateManifest_Results, error) {
	root, err := msg.Root()
	return DevSession_updateManifest_Results{root.Struct()}, err
}

func (s DevSession_updateManifest_Results) String() string {
	str, _ := text.Marshal(0x93f10e053f665a30, s.Struct)
	return str
}

// DevSession_updateManifest_Results_List is a list of DevSession_updateManifest_Results.
type DevSession_updateManifest_Results_List struct{ capnp.List }

// NewDevSession_updateManifest_Results creates a new list of DevSession_updateManifest_Results.
func NewDevSession_updateManifest_Results_List(s *capnp.Segment, sz int32) (DevSession_updateManifest_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return DevSession_updateManifest_Results_List{l}, err
}

func (s DevSession_updateManifest_Results_List) At(i int) DevSession_updateManifest_Results {
	return DevSession_updateManifest_Results{s.List.Struct(i)}
}

func (s DevSession_updateManifest_Results_List) Set(i int, v DevSession_updateManifest_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s DevSession_updateManifest_Results_List) String() string {
	str, _ := text.MarshalList(0x93f10e053f665a30, s.List)
	return str
}

// DevSession_updateManifest_Results_Future is a wrapper for a DevSession_updateManifest_Results promised by a client call.
type DevSession_updateManifest_Results_Future struct{ *capnp.Future }

func (p DevSession_updateManifest_Results_Future) Struct() (DevSession_updateManifest_Results, error) {
	s, err := p.Future.Struct()
	return DevSession_updateManifest_Results{s}, err
}

type FileDescriptor struct{ Client *capnp.Client }

// FileDescriptor_TypeID is the unique identifier for the type FileDescriptor.
const FileDescriptor_TypeID = 0xd9ccfac7d7a20cc0

func (c FileDescriptor) AddRef() FileDescriptor {
	return FileDescriptor{
		Client: c.Client.AddRef(),
	}
}

func (c FileDescriptor) Release() {
	c.Client.Release()
}

// A FileDescriptor_Server is a FileDescriptor with a local implementation.
type FileDescriptor_Server interface {
}

// FileDescriptor_NewServer creates a new Server from an implementation of FileDescriptor_Server.
func FileDescriptor_NewServer(s FileDescriptor_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(FileDescriptor_Methods(nil, s), s, c, policy)
}

// FileDescriptor_ServerToClient creates a new Client from an implementation of FileDescriptor_Server.
// The caller is responsible for calling Release on the returned Client.
func FileDescriptor_ServerToClient(s FileDescriptor_Server, policy *server.Policy) FileDescriptor {
	return FileDescriptor{Client: capnp.NewClient(FileDescriptor_NewServer(s, policy))}
}

// FileDescriptor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func FileDescriptor_Methods(methods []server.Method, s FileDescriptor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 0)
	}

	return methods
}

const schema_d4c5feffbd79e908 = "x\xda\x8c\x94M\x88\x1cE\x14\xc7\xdf\xab\x0f{\x136" +
	"\x92\xa2w\x11\x11\xb3\x9bu!.\xb8_\xae\xc1\x18\x0f" +
	"\xbdl&\xab\x86\x04\xbb2\x06d@\xdc\xb6\xa7\x96\x19" +
	"\xd2\xd3\xd3N\xd5\x8c$ \x89\x82\x04rP\xd4\x83\x82" +
	"7Qr0\x12\x10\xbc\x08\xc6\x0d\x12\x82\x12/\x12\x10" +
	"oA\x0f\xa27\xe3\x07\xea\xc1\x92\x9aI\xef\xf4\x9a\x9d" +
	"e\x0f\x0dM\xbd\xf7\xfe\xef\xbd_\xbdWs?\xe2\"" +
	"\x99\xe7\x81\x07 \x9f\xe1w\xd9\xb9\xcaj\xc0\xef\xfe\xf5" +
	"m\x10\xe3\x08\xc0<\x80\x85\xd7\xe8g\x08\xcc>\xfe\xd6" +
	"\xce\x0b\x1f\xad\x9d}\xa7`i\xd3W\x9d\xa5\xc4.\xef" +
	"\x1c\xbf|\xfeC\x10\xa3h\x87~>\xf5\xb9\xfd\xf7\xea" +
	"\x0d\xe0\xd4\x03\xf0#z\xcbot\xff\xea\xf4\x12\xa0]" +
	"\xd9\x7f\xa1v\xe6\x817.\xf5T8:\x99]\xac\x82" +
	"\x80\xfe\xbd,\x00\xb4\xd3\xcf\xffr}\xcf\xd5\xbf\xbe(" +
	"\xa4y\x8c}\xe2\xd2\xf0/\x7f\xea<\x1a\x1cZ\x031" +
	"J\xfbi\x00\x17\xa6\x18A\x7f\xbfs\xf5\xe7\xd9\x13\xfe" +
	"s\xee\xcf\xee\xdd\xf3\xf7\xc4\x95\x8b\xaf\x7fu;\x11q" +
	"B\x87\xd9y\x97\xe8\x04{\x09\xd0~|\xf4\xe9\xec\xc0" +
	"\x9b\xfb\xbe\xbdC\xeeS'w\x85\xdd\x03\xe0\x7f\xc3\xce" +
	"\xf9{\xb9\x93\xbb/\xfc\xfa\x8f}\xe6\x83\x1bE\xb9\x1d" +
	"\xfc\x05'7\xca\x9d\xdc\xda\xf0\xfb\xdf]\xfb\xe7\xfa\xf7" +
	"w\xc8\xbd\xc8'\xd0\x7f\xc5\x89\xf8/s\xcf}\x00\xf6" +
	"\x87?\xdf;\xd7\xfe\xed\xdaM\x10\xe3\xac_\x09\xe0\x82" +
	"\xe2\x15\xf4O9\x9f\xb2\xe1\x14\xcbg9AHm\xdc" +
	"LM\xab\x99Ls\xdd\x8cO*3\x13GY\x9a\x1d" +
	",\xa9NYi]o\xa63\xed\xac\x1a\x19u,J" +
	"\xeb\xabJ\x9b\xc9\xe3\x81\xd2\xed\xc4\xe8\xf5\xc0\xa1\x0d\x81" +
	"\x87z\xa7\x89j\xcdTU\xa7\\SI2\x19F\xad" +
	"\xa8\xa1!\x0f\xd8\xe0_\xae\xa9\xb1$Y.\xe9\x10Q" +
	"\x0eS\x06\xc0\x10@\x1c\xae\x00\xc8\x12E\x19\x12\x14\x88" +
	"#\xe8\x0e\x8f\xb9\xc3\xa3\x14\xe5\xb3\x04\x05!#H\x00" +
	"\xc4\x89\xd3n\xbe(\xca\x15\x826\x8ac\x95\x99'\x0d" +
	"P\x93\xa1\xe8\x93\x03D\x01\xb9\xb9\xdc\x18`\x8e\x9bi" +
	"\xaab\xb3\x04A\x14\x9fTius\x97n\x0fl\x8b" +
	"\xa6\xbb\xfd\xd2\x86\x96l\xbd\x9d]\x0f\x03\xc8!\x8ar" +
	"\x84\xe0X\x94eOUq\x18\x08\x0e\x17\x14\xb7\xcb?" +
	"\x1c\xeb\xd2\\\x8f\xa3\x03\xe2\xc0\x01e\x94\x03\xac\x0f>" +
	"\xe6+(\xc4i b\x87gsm\x08z\xea\x8b\x18" +
	"\xe2\xa0\x926\xbb\xd9\xe3\xbdY\xe86\x97\xf7:u\x04" +
	"@>HQ>R\xb8\xba\xf9\x83\x00\xf2!\x8a\xf2\x00" +
	"A\xab]\xecrU\x03\x00\xee\xee\xef8 \xee\x06\x0c" +
	"jQZM\x14\x0a{sie\xe5\xe2\xe4\xef\xef\xfe" +
	"\x9f=\x1dP\x16H\x86X\x98\x7f\xac\xd8\x9eg\x18\x01" +
	"559\xd4\x85\x91?6\x98\xaf\xb1\x98?\x02DL" +
	"y\xd8\x7fB0\xdfIq\xff\x04\x10!<\x9bw\x0c" +
	"\x00\x8b\xe8UUg#\xa9-\xc7\xc1A\xf2\x12\xa3\x8b" +
	"\x8c\x1c\x8eI\x8ar\xae\xc0hz\xa9\x0f.Xmk" +
	"\xb5\xbc\xc9\x04\x9e\xd1\xbd\xebE\xd1\x7f\xb5\xb6\xe4\xb3\\" +
	"OTI\xe9\xb8U\xcf<\xd3l\x85\x88!\xe5\xdb\xaa" +
	"=\x87GM-D\xbc=\xb0 \xf0\x96\x9d\xedD\xad" +
	"Y\x1d\xa5\xa4\xaaM\xb3\xd5\x98\xedy\xce\xc6\xcd\xb1n" +
	"\xf0\x7f\x01\x00\x00\xff\xff:G\xd1Q"

func init() {
	schemas.Register(schema_d4c5feffbd79e908,
		0x93f10e053f665a30,
		0x9780c0aba70a923b,
		0xa58abe200abe0444,
		0xaf8f237f68a73560,
		0xbff8c51eccea5f2d,
		0xc0433f3776e7c305,
		0xc98eacc122f91e21,
		0xd2279138704f4cad,
		0xd4a47427f5ca501b,
		0xd9ccfac7d7a20cc0,
		0xe0c7f375879bf6e2)
}
