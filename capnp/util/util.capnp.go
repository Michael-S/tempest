// Code generated by capnpc-go. DO NOT EDIT.

package util

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
)

type KeyValue struct{ capnp.Struct }

// KeyValue_TypeID is the unique identifier for the type KeyValue.
const KeyValue_TypeID = 0x94a081e4abb13424

func NewKeyValue(s *capnp.Segment) (KeyValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return KeyValue{st}, err
}

func NewRootKeyValue(s *capnp.Segment) (KeyValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return KeyValue{st}, err
}

func ReadRootKeyValue(msg *capnp.Message) (KeyValue, error) {
	root, err := msg.Root()
	return KeyValue{root.Struct()}, err
}

func (s KeyValue) String() string {
	str, _ := text.Marshal(0x94a081e4abb13424, s.Struct)
	return str
}

func (s KeyValue) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s KeyValue) HasKey() bool {
	return s.Struct.HasPtr(0)
}

func (s KeyValue) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s KeyValue) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s KeyValue) Value() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s KeyValue) HasValue() bool {
	return s.Struct.HasPtr(1)
}

func (s KeyValue) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s KeyValue) SetValue(v string) error {
	return s.Struct.SetText(1, v)
}

// KeyValue_List is a list of KeyValue.
type KeyValue_List struct{ capnp.List }

// NewKeyValue creates a new list of KeyValue.
func NewKeyValue_List(s *capnp.Segment, sz int32) (KeyValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return KeyValue_List{l}, err
}

func (s KeyValue_List) At(i int) KeyValue { return KeyValue{s.List.Struct(i)} }

func (s KeyValue_List) Set(i int, v KeyValue) error { return s.List.SetStruct(i, v.Struct) }

func (s KeyValue_List) String() string {
	str, _ := text.MarshalList(0x94a081e4abb13424, s.List)
	return str
}

// KeyValue_Future is a wrapper for a KeyValue promised by a client call.
type KeyValue_Future struct{ *capnp.Future }

func (p KeyValue_Future) Struct() (KeyValue, error) {
	s, err := p.Future.Struct()
	return KeyValue{s}, err
}

type LocalizedText struct{ capnp.Struct }

// LocalizedText_TypeID is the unique identifier for the type LocalizedText.
const LocalizedText_TypeID = 0x8b5db772377be249

func NewLocalizedText(s *capnp.Segment) (LocalizedText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LocalizedText{st}, err
}

func NewRootLocalizedText(s *capnp.Segment) (LocalizedText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LocalizedText{st}, err
}

func ReadRootLocalizedText(msg *capnp.Message) (LocalizedText, error) {
	root, err := msg.Root()
	return LocalizedText{root.Struct()}, err
}

func (s LocalizedText) String() string {
	str, _ := text.Marshal(0x8b5db772377be249, s.Struct)
	return str
}

func (s LocalizedText) DefaultText() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s LocalizedText) HasDefaultText() bool {
	return s.Struct.HasPtr(0)
}

func (s LocalizedText) DefaultTextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s LocalizedText) SetDefaultText(v string) error {
	return s.Struct.SetText(0, v)
}

func (s LocalizedText) Localizations() (LocalizedText_Localization_List, error) {
	p, err := s.Struct.Ptr(1)
	return LocalizedText_Localization_List{List: p.List()}, err
}

func (s LocalizedText) HasLocalizations() bool {
	return s.Struct.HasPtr(1)
}

func (s LocalizedText) SetLocalizations(v LocalizedText_Localization_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewLocalizations sets the localizations field to a newly
// allocated LocalizedText_Localization_List, preferring placement in s's segment.
func (s LocalizedText) NewLocalizations(n int32) (LocalizedText_Localization_List, error) {
	l, err := NewLocalizedText_Localization_List(s.Struct.Segment(), n)
	if err != nil {
		return LocalizedText_Localization_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// LocalizedText_List is a list of LocalizedText.
type LocalizedText_List struct{ capnp.List }

// NewLocalizedText creates a new list of LocalizedText.
func NewLocalizedText_List(s *capnp.Segment, sz int32) (LocalizedText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return LocalizedText_List{l}, err
}

func (s LocalizedText_List) At(i int) LocalizedText { return LocalizedText{s.List.Struct(i)} }

func (s LocalizedText_List) Set(i int, v LocalizedText) error { return s.List.SetStruct(i, v.Struct) }

func (s LocalizedText_List) String() string {
	str, _ := text.MarshalList(0x8b5db772377be249, s.List)
	return str
}

// LocalizedText_Future is a wrapper for a LocalizedText promised by a client call.
type LocalizedText_Future struct{ *capnp.Future }

func (p LocalizedText_Future) Struct() (LocalizedText, error) {
	s, err := p.Future.Struct()
	return LocalizedText{s}, err
}

type LocalizedText_Localization struct{ capnp.Struct }

// LocalizedText_Localization_TypeID is the unique identifier for the type LocalizedText_Localization.
const LocalizedText_Localization_TypeID = 0xa4f5ae06dd1b7791

func NewLocalizedText_Localization(s *capnp.Segment) (LocalizedText_Localization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LocalizedText_Localization{st}, err
}

func NewRootLocalizedText_Localization(s *capnp.Segment) (LocalizedText_Localization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LocalizedText_Localization{st}, err
}

func ReadRootLocalizedText_Localization(msg *capnp.Message) (LocalizedText_Localization, error) {
	root, err := msg.Root()
	return LocalizedText_Localization{root.Struct()}, err
}

func (s LocalizedText_Localization) String() string {
	str, _ := text.Marshal(0xa4f5ae06dd1b7791, s.Struct)
	return str
}

func (s LocalizedText_Localization) Locale() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s LocalizedText_Localization) HasLocale() bool {
	return s.Struct.HasPtr(0)
}

func (s LocalizedText_Localization) LocaleBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s LocalizedText_Localization) SetLocale(v string) error {
	return s.Struct.SetText(0, v)
}

func (s LocalizedText_Localization) Text() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s LocalizedText_Localization) HasText() bool {
	return s.Struct.HasPtr(1)
}

func (s LocalizedText_Localization) TextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s LocalizedText_Localization) SetText(v string) error {
	return s.Struct.SetText(1, v)
}

// LocalizedText_Localization_List is a list of LocalizedText_Localization.
type LocalizedText_Localization_List struct{ capnp.List }

// NewLocalizedText_Localization creates a new list of LocalizedText_Localization.
func NewLocalizedText_Localization_List(s *capnp.Segment, sz int32) (LocalizedText_Localization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return LocalizedText_Localization_List{l}, err
}

func (s LocalizedText_Localization_List) At(i int) LocalizedText_Localization {
	return LocalizedText_Localization{s.List.Struct(i)}
}

func (s LocalizedText_Localization_List) Set(i int, v LocalizedText_Localization) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LocalizedText_Localization_List) String() string {
	str, _ := text.MarshalList(0xa4f5ae06dd1b7791, s.List)
	return str
}

// LocalizedText_Localization_Future is a wrapper for a LocalizedText_Localization promised by a client call.
type LocalizedText_Localization_Future struct{ *capnp.Future }

func (p LocalizedText_Localization_Future) Struct() (LocalizedText_Localization, error) {
	s, err := p.Future.Struct()
	return LocalizedText_Localization{s}, err
}

type Handle struct{ Client *capnp.Client }

// Handle_TypeID is the unique identifier for the type Handle.
const Handle_TypeID = 0x98f424ac606042e0

func (c Handle) Ping(ctx context.Context, params func(Handle_ping_Params) error) (Handle_ping_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x98f424ac606042e0,
			MethodID:      0,
			InterfaceName: "util.capnp:Handle",
			MethodName:    "ping",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Handle_ping_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Handle_ping_Results_Future{Future: ans.Future()}, release
}

func (c Handle) AddRef() Handle {
	return Handle{
		Client: c.Client.AddRef(),
	}
}

func (c Handle) Release() {
	c.Client.Release()
}

// A Handle_Server is a Handle with a local implementation.
type Handle_Server interface {
	Ping(context.Context, Handle_ping) error
}

// Handle_NewServer creates a new Server from an implementation of Handle_Server.
func Handle_NewServer(s Handle_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Handle_Methods(nil, s), s, c, policy)
}

// Handle_ServerToClient creates a new Client from an implementation of Handle_Server.
// The caller is responsible for calling Release on the returned Client.
func Handle_ServerToClient(s Handle_Server, policy *server.Policy) Handle {
	return Handle{Client: capnp.NewClient(Handle_NewServer(s, policy))}
}

// Handle_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Handle_Methods(methods []server.Method, s Handle_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x98f424ac606042e0,
			MethodID:      0,
			InterfaceName: "util.capnp:Handle",
			MethodName:    "ping",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ping(ctx, Handle_ping{call})
		},
	})

	return methods
}

// Handle_ping holds the state for a server call to Handle.ping.
// See server.Call for documentation.
type Handle_ping struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Handle_ping) Args() Handle_ping_Params {
	return Handle_ping_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Handle_ping) AllocResults() (Handle_ping_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Handle_ping_Results{Struct: r}, err
}

type Handle_ping_Params struct{ capnp.Struct }

// Handle_ping_Params_TypeID is the unique identifier for the type Handle_ping_Params.
const Handle_ping_Params_TypeID = 0x862b50d52c0258b0

func NewHandle_ping_Params(s *capnp.Segment) (Handle_ping_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Handle_ping_Params{st}, err
}

func NewRootHandle_ping_Params(s *capnp.Segment) (Handle_ping_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Handle_ping_Params{st}, err
}

func ReadRootHandle_ping_Params(msg *capnp.Message) (Handle_ping_Params, error) {
	root, err := msg.Root()
	return Handle_ping_Params{root.Struct()}, err
}

func (s Handle_ping_Params) String() string {
	str, _ := text.Marshal(0x862b50d52c0258b0, s.Struct)
	return str
}

// Handle_ping_Params_List is a list of Handle_ping_Params.
type Handle_ping_Params_List struct{ capnp.List }

// NewHandle_ping_Params creates a new list of Handle_ping_Params.
func NewHandle_ping_Params_List(s *capnp.Segment, sz int32) (Handle_ping_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Handle_ping_Params_List{l}, err
}

func (s Handle_ping_Params_List) At(i int) Handle_ping_Params {
	return Handle_ping_Params{s.List.Struct(i)}
}

func (s Handle_ping_Params_List) Set(i int, v Handle_ping_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Handle_ping_Params_List) String() string {
	str, _ := text.MarshalList(0x862b50d52c0258b0, s.List)
	return str
}

// Handle_ping_Params_Future is a wrapper for a Handle_ping_Params promised by a client call.
type Handle_ping_Params_Future struct{ *capnp.Future }

func (p Handle_ping_Params_Future) Struct() (Handle_ping_Params, error) {
	s, err := p.Future.Struct()
	return Handle_ping_Params{s}, err
}

type Handle_ping_Results struct{ capnp.Struct }

// Handle_ping_Results_TypeID is the unique identifier for the type Handle_ping_Results.
const Handle_ping_Results_TypeID = 0xc97765649d6cabe9

func NewHandle_ping_Results(s *capnp.Segment) (Handle_ping_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Handle_ping_Results{st}, err
}

func NewRootHandle_ping_Results(s *capnp.Segment) (Handle_ping_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Handle_ping_Results{st}, err
}

func ReadRootHandle_ping_Results(msg *capnp.Message) (Handle_ping_Results, error) {
	root, err := msg.Root()
	return Handle_ping_Results{root.Struct()}, err
}

func (s Handle_ping_Results) String() string {
	str, _ := text.Marshal(0xc97765649d6cabe9, s.Struct)
	return str
}

// Handle_ping_Results_List is a list of Handle_ping_Results.
type Handle_ping_Results_List struct{ capnp.List }

// NewHandle_ping_Results creates a new list of Handle_ping_Results.
func NewHandle_ping_Results_List(s *capnp.Segment, sz int32) (Handle_ping_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Handle_ping_Results_List{l}, err
}

func (s Handle_ping_Results_List) At(i int) Handle_ping_Results {
	return Handle_ping_Results{s.List.Struct(i)}
}

func (s Handle_ping_Results_List) Set(i int, v Handle_ping_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Handle_ping_Results_List) String() string {
	str, _ := text.MarshalList(0xc97765649d6cabe9, s.List)
	return str
}

// Handle_ping_Results_Future is a wrapper for a Handle_ping_Results promised by a client call.
type Handle_ping_Results_Future struct{ *capnp.Future }

func (p Handle_ping_Results_Future) Struct() (Handle_ping_Results, error) {
	s, err := p.Future.Struct()
	return Handle_ping_Results{s}, err
}

type ByteStream struct{ Client *capnp.Client }

// ByteStream_TypeID is the unique identifier for the type ByteStream.
const ByteStream_TypeID = 0xcd57387729cfe35f

func (c ByteStream) Write(ctx context.Context, params func(ByteStream_write_Params) error) (stream.StreamResult_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      0,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStream_write_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return stream.StreamResult_Future{Future: ans.Future()}, release
}
func (c ByteStream) Done(ctx context.Context, params func(ByteStream_done_Params) error) (ByteStream_done_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      1,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "done",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStream_done_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ByteStream_done_Results_Future{Future: ans.Future()}, release
}
func (c ByteStream) ExpectSize(ctx context.Context, params func(ByteStream_expectSize_Params) error) (ByteStream_expectSize_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      2,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "expectSize",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStream_expectSize_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ByteStream_expectSize_Results_Future{Future: ans.Future()}, release
}

func (c ByteStream) AddRef() ByteStream {
	return ByteStream{
		Client: c.Client.AddRef(),
	}
}

func (c ByteStream) Release() {
	c.Client.Release()
}

// A ByteStream_Server is a ByteStream with a local implementation.
type ByteStream_Server interface {
	Write(context.Context, ByteStream_write) error

	Done(context.Context, ByteStream_done) error

	ExpectSize(context.Context, ByteStream_expectSize) error
}

// ByteStream_NewServer creates a new Server from an implementation of ByteStream_Server.
func ByteStream_NewServer(s ByteStream_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ByteStream_Methods(nil, s), s, c, policy)
}

// ByteStream_ServerToClient creates a new Client from an implementation of ByteStream_Server.
// The caller is responsible for calling Release on the returned Client.
func ByteStream_ServerToClient(s ByteStream_Server, policy *server.Policy) ByteStream {
	return ByteStream{Client: capnp.NewClient(ByteStream_NewServer(s, policy))}
}

// ByteStream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ByteStream_Methods(methods []server.Method, s ByteStream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      0,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, ByteStream_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      1,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "done",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Done(ctx, ByteStream_done{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      2,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "expectSize",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ExpectSize(ctx, ByteStream_expectSize{call})
		},
	})

	return methods
}

// ByteStream_write holds the state for a server call to ByteStream.write.
// See server.Call for documentation.
type ByteStream_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStream_write) Args() ByteStream_write_Params {
	return ByteStream_write_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ByteStream_write) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult{Struct: r}, err
}

// ByteStream_done holds the state for a server call to ByteStream.done.
// See server.Call for documentation.
type ByteStream_done struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStream_done) Args() ByteStream_done_Params {
	return ByteStream_done_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ByteStream_done) AllocResults() (ByteStream_done_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Results{Struct: r}, err
}

// ByteStream_expectSize holds the state for a server call to ByteStream.expectSize.
// See server.Call for documentation.
type ByteStream_expectSize struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStream_expectSize) Args() ByteStream_expectSize_Params {
	return ByteStream_expectSize_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ByteStream_expectSize) AllocResults() (ByteStream_expectSize_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_expectSize_Results{Struct: r}, err
}

type ByteStream_write_Params struct{ capnp.Struct }

// ByteStream_write_Params_TypeID is the unique identifier for the type ByteStream_write_Params.
const ByteStream_write_Params_TypeID = 0x97ed122121126ff2

func NewByteStream_write_Params(s *capnp.Segment) (ByteStream_write_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_write_Params{st}, err
}

func NewRootByteStream_write_Params(s *capnp.Segment) (ByteStream_write_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_write_Params{st}, err
}

func ReadRootByteStream_write_Params(msg *capnp.Message) (ByteStream_write_Params, error) {
	root, err := msg.Root()
	return ByteStream_write_Params{root.Struct()}, err
}

func (s ByteStream_write_Params) String() string {
	str, _ := text.Marshal(0x97ed122121126ff2, s.Struct)
	return str
}

func (s ByteStream_write_Params) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ByteStream_write_Params) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s ByteStream_write_Params) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ByteStream_write_Params_List is a list of ByteStream_write_Params.
type ByteStream_write_Params_List struct{ capnp.List }

// NewByteStream_write_Params creates a new list of ByteStream_write_Params.
func NewByteStream_write_Params_List(s *capnp.Segment, sz int32) (ByteStream_write_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ByteStream_write_Params_List{l}, err
}

func (s ByteStream_write_Params_List) At(i int) ByteStream_write_Params {
	return ByteStream_write_Params{s.List.Struct(i)}
}

func (s ByteStream_write_Params_List) Set(i int, v ByteStream_write_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ByteStream_write_Params_List) String() string {
	str, _ := text.MarshalList(0x97ed122121126ff2, s.List)
	return str
}

// ByteStream_write_Params_Future is a wrapper for a ByteStream_write_Params promised by a client call.
type ByteStream_write_Params_Future struct{ *capnp.Future }

func (p ByteStream_write_Params_Future) Struct() (ByteStream_write_Params, error) {
	s, err := p.Future.Struct()
	return ByteStream_write_Params{s}, err
}

type ByteStream_done_Params struct{ capnp.Struct }

// ByteStream_done_Params_TypeID is the unique identifier for the type ByteStream_done_Params.
const ByteStream_done_Params_TypeID = 0xbc1426493658b76e

func NewByteStream_done_Params(s *capnp.Segment) (ByteStream_done_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Params{st}, err
}

func NewRootByteStream_done_Params(s *capnp.Segment) (ByteStream_done_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Params{st}, err
}

func ReadRootByteStream_done_Params(msg *capnp.Message) (ByteStream_done_Params, error) {
	root, err := msg.Root()
	return ByteStream_done_Params{root.Struct()}, err
}

func (s ByteStream_done_Params) String() string {
	str, _ := text.Marshal(0xbc1426493658b76e, s.Struct)
	return str
}

// ByteStream_done_Params_List is a list of ByteStream_done_Params.
type ByteStream_done_Params_List struct{ capnp.List }

// NewByteStream_done_Params creates a new list of ByteStream_done_Params.
func NewByteStream_done_Params_List(s *capnp.Segment, sz int32) (ByteStream_done_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ByteStream_done_Params_List{l}, err
}

func (s ByteStream_done_Params_List) At(i int) ByteStream_done_Params {
	return ByteStream_done_Params{s.List.Struct(i)}
}

func (s ByteStream_done_Params_List) Set(i int, v ByteStream_done_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ByteStream_done_Params_List) String() string {
	str, _ := text.MarshalList(0xbc1426493658b76e, s.List)
	return str
}

// ByteStream_done_Params_Future is a wrapper for a ByteStream_done_Params promised by a client call.
type ByteStream_done_Params_Future struct{ *capnp.Future }

func (p ByteStream_done_Params_Future) Struct() (ByteStream_done_Params, error) {
	s, err := p.Future.Struct()
	return ByteStream_done_Params{s}, err
}

type ByteStream_done_Results struct{ capnp.Struct }

// ByteStream_done_Results_TypeID is the unique identifier for the type ByteStream_done_Results.
const ByteStream_done_Results_TypeID = 0xd0d8d935ee30b219

func NewByteStream_done_Results(s *capnp.Segment) (ByteStream_done_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Results{st}, err
}

func NewRootByteStream_done_Results(s *capnp.Segment) (ByteStream_done_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Results{st}, err
}

func ReadRootByteStream_done_Results(msg *capnp.Message) (ByteStream_done_Results, error) {
	root, err := msg.Root()
	return ByteStream_done_Results{root.Struct()}, err
}

func (s ByteStream_done_Results) String() string {
	str, _ := text.Marshal(0xd0d8d935ee30b219, s.Struct)
	return str
}

// ByteStream_done_Results_List is a list of ByteStream_done_Results.
type ByteStream_done_Results_List struct{ capnp.List }

// NewByteStream_done_Results creates a new list of ByteStream_done_Results.
func NewByteStream_done_Results_List(s *capnp.Segment, sz int32) (ByteStream_done_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ByteStream_done_Results_List{l}, err
}

func (s ByteStream_done_Results_List) At(i int) ByteStream_done_Results {
	return ByteStream_done_Results{s.List.Struct(i)}
}

func (s ByteStream_done_Results_List) Set(i int, v ByteStream_done_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ByteStream_done_Results_List) String() string {
	str, _ := text.MarshalList(0xd0d8d935ee30b219, s.List)
	return str
}

// ByteStream_done_Results_Future is a wrapper for a ByteStream_done_Results promised by a client call.
type ByteStream_done_Results_Future struct{ *capnp.Future }

func (p ByteStream_done_Results_Future) Struct() (ByteStream_done_Results, error) {
	s, err := p.Future.Struct()
	return ByteStream_done_Results{s}, err
}

type ByteStream_expectSize_Params struct{ capnp.Struct }

// ByteStream_expectSize_Params_TypeID is the unique identifier for the type ByteStream_expectSize_Params.
const ByteStream_expectSize_Params_TypeID = 0x8c9a3c7674c761d3

func NewByteStream_expectSize_Params(s *capnp.Segment) (ByteStream_expectSize_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ByteStream_expectSize_Params{st}, err
}

func NewRootByteStream_expectSize_Params(s *capnp.Segment) (ByteStream_expectSize_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ByteStream_expectSize_Params{st}, err
}

func ReadRootByteStream_expectSize_Params(msg *capnp.Message) (ByteStream_expectSize_Params, error) {
	root, err := msg.Root()
	return ByteStream_expectSize_Params{root.Struct()}, err
}

func (s ByteStream_expectSize_Params) String() string {
	str, _ := text.Marshal(0x8c9a3c7674c761d3, s.Struct)
	return str
}

func (s ByteStream_expectSize_Params) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s ByteStream_expectSize_Params) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

// ByteStream_expectSize_Params_List is a list of ByteStream_expectSize_Params.
type ByteStream_expectSize_Params_List struct{ capnp.List }

// NewByteStream_expectSize_Params creates a new list of ByteStream_expectSize_Params.
func NewByteStream_expectSize_Params_List(s *capnp.Segment, sz int32) (ByteStream_expectSize_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return ByteStream_expectSize_Params_List{l}, err
}

func (s ByteStream_expectSize_Params_List) At(i int) ByteStream_expectSize_Params {
	return ByteStream_expectSize_Params{s.List.Struct(i)}
}

func (s ByteStream_expectSize_Params_List) Set(i int, v ByteStream_expectSize_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ByteStream_expectSize_Params_List) String() string {
	str, _ := text.MarshalList(0x8c9a3c7674c761d3, s.List)
	return str
}

// ByteStream_expectSize_Params_Future is a wrapper for a ByteStream_expectSize_Params promised by a client call.
type ByteStream_expectSize_Params_Future struct{ *capnp.Future }

func (p ByteStream_expectSize_Params_Future) Struct() (ByteStream_expectSize_Params, error) {
	s, err := p.Future.Struct()
	return ByteStream_expectSize_Params{s}, err
}

type ByteStream_expectSize_Results struct{ capnp.Struct }

// ByteStream_expectSize_Results_TypeID is the unique identifier for the type ByteStream_expectSize_Results.
const ByteStream_expectSize_Results_TypeID = 0xf35749d82a51479b

func NewByteStream_expectSize_Results(s *capnp.Segment) (ByteStream_expectSize_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_expectSize_Results{st}, err
}

func NewRootByteStream_expectSize_Results(s *capnp.Segment) (ByteStream_expectSize_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_expectSize_Results{st}, err
}

func ReadRootByteStream_expectSize_Results(msg *capnp.Message) (ByteStream_expectSize_Results, error) {
	root, err := msg.Root()
	return ByteStream_expectSize_Results{root.Struct()}, err
}

func (s ByteStream_expectSize_Results) String() string {
	str, _ := text.Marshal(0xf35749d82a51479b, s.Struct)
	return str
}

// ByteStream_expectSize_Results_List is a list of ByteStream_expectSize_Results.
type ByteStream_expectSize_Results_List struct{ capnp.List }

// NewByteStream_expectSize_Results creates a new list of ByteStream_expectSize_Results.
func NewByteStream_expectSize_Results_List(s *capnp.Segment, sz int32) (ByteStream_expectSize_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ByteStream_expectSize_Results_List{l}, err
}

func (s ByteStream_expectSize_Results_List) At(i int) ByteStream_expectSize_Results {
	return ByteStream_expectSize_Results{s.List.Struct(i)}
}

func (s ByteStream_expectSize_Results_List) Set(i int, v ByteStream_expectSize_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ByteStream_expectSize_Results_List) String() string {
	str, _ := text.MarshalList(0xf35749d82a51479b, s.List)
	return str
}

// ByteStream_expectSize_Results_Future is a wrapper for a ByteStream_expectSize_Results promised by a client call.
type ByteStream_expectSize_Results_Future struct{ *capnp.Future }

func (p ByteStream_expectSize_Results_Future) Struct() (ByteStream_expectSize_Results, error) {
	s, err := p.Future.Struct()
	return ByteStream_expectSize_Results{s}, err
}

type Blob struct{ Client *capnp.Client }

// Blob_TypeID is the unique identifier for the type Blob.
const Blob_TypeID = 0xe53527a75d90198f

func (c Blob) GetSize(ctx context.Context, params func(Blob_getSize_Params) error) (Blob_getSize_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe53527a75d90198f,
			MethodID:      0,
			InterfaceName: "util.capnp:Blob",
			MethodName:    "getSize",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Blob_getSize_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Blob_getSize_Results_Future{Future: ans.Future()}, release
}
func (c Blob) WriteTo(ctx context.Context, params func(Blob_writeTo_Params) error) (Blob_writeTo_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe53527a75d90198f,
			MethodID:      1,
			InterfaceName: "util.capnp:Blob",
			MethodName:    "writeTo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Blob_writeTo_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Blob_writeTo_Results_Future{Future: ans.Future()}, release
}
func (c Blob) GetSlice(ctx context.Context, params func(Blob_getSlice_Params) error) (Blob_getSlice_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe53527a75d90198f,
			MethodID:      2,
			InterfaceName: "util.capnp:Blob",
			MethodName:    "getSlice",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Blob_getSlice_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Blob_getSlice_Results_Future{Future: ans.Future()}, release
}

func (c Blob) AddRef() Blob {
	return Blob{
		Client: c.Client.AddRef(),
	}
}

func (c Blob) Release() {
	c.Client.Release()
}

// A Blob_Server is a Blob with a local implementation.
type Blob_Server interface {
	GetSize(context.Context, Blob_getSize) error

	WriteTo(context.Context, Blob_writeTo) error

	GetSlice(context.Context, Blob_getSlice) error
}

// Blob_NewServer creates a new Server from an implementation of Blob_Server.
func Blob_NewServer(s Blob_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Blob_Methods(nil, s), s, c, policy)
}

// Blob_ServerToClient creates a new Client from an implementation of Blob_Server.
// The caller is responsible for calling Release on the returned Client.
func Blob_ServerToClient(s Blob_Server, policy *server.Policy) Blob {
	return Blob{Client: capnp.NewClient(Blob_NewServer(s, policy))}
}

// Blob_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Blob_Methods(methods []server.Method, s Blob_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe53527a75d90198f,
			MethodID:      0,
			InterfaceName: "util.capnp:Blob",
			MethodName:    "getSize",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetSize(ctx, Blob_getSize{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe53527a75d90198f,
			MethodID:      1,
			InterfaceName: "util.capnp:Blob",
			MethodName:    "writeTo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.WriteTo(ctx, Blob_writeTo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe53527a75d90198f,
			MethodID:      2,
			InterfaceName: "util.capnp:Blob",
			MethodName:    "getSlice",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetSlice(ctx, Blob_getSlice{call})
		},
	})

	return methods
}

// Blob_getSize holds the state for a server call to Blob.getSize.
// See server.Call for documentation.
type Blob_getSize struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Blob_getSize) Args() Blob_getSize_Params {
	return Blob_getSize_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Blob_getSize) AllocResults() (Blob_getSize_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Blob_getSize_Results{Struct: r}, err
}

// Blob_writeTo holds the state for a server call to Blob.writeTo.
// See server.Call for documentation.
type Blob_writeTo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Blob_writeTo) Args() Blob_writeTo_Params {
	return Blob_writeTo_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Blob_writeTo) AllocResults() (Blob_writeTo_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Blob_writeTo_Results{Struct: r}, err
}

// Blob_getSlice holds the state for a server call to Blob.getSlice.
// See server.Call for documentation.
type Blob_getSlice struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Blob_getSlice) Args() Blob_getSlice_Params {
	return Blob_getSlice_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Blob_getSlice) AllocResults() (Blob_getSlice_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Blob_getSlice_Results{Struct: r}, err
}

type Blob_getSize_Params struct{ capnp.Struct }

// Blob_getSize_Params_TypeID is the unique identifier for the type Blob_getSize_Params.
const Blob_getSize_Params_TypeID = 0x8ee5f62e1fab915d

func NewBlob_getSize_Params(s *capnp.Segment) (Blob_getSize_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Blob_getSize_Params{st}, err
}

func NewRootBlob_getSize_Params(s *capnp.Segment) (Blob_getSize_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Blob_getSize_Params{st}, err
}

func ReadRootBlob_getSize_Params(msg *capnp.Message) (Blob_getSize_Params, error) {
	root, err := msg.Root()
	return Blob_getSize_Params{root.Struct()}, err
}

func (s Blob_getSize_Params) String() string {
	str, _ := text.Marshal(0x8ee5f62e1fab915d, s.Struct)
	return str
}

// Blob_getSize_Params_List is a list of Blob_getSize_Params.
type Blob_getSize_Params_List struct{ capnp.List }

// NewBlob_getSize_Params creates a new list of Blob_getSize_Params.
func NewBlob_getSize_Params_List(s *capnp.Segment, sz int32) (Blob_getSize_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Blob_getSize_Params_List{l}, err
}

func (s Blob_getSize_Params_List) At(i int) Blob_getSize_Params {
	return Blob_getSize_Params{s.List.Struct(i)}
}

func (s Blob_getSize_Params_List) Set(i int, v Blob_getSize_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Blob_getSize_Params_List) String() string {
	str, _ := text.MarshalList(0x8ee5f62e1fab915d, s.List)
	return str
}

// Blob_getSize_Params_Future is a wrapper for a Blob_getSize_Params promised by a client call.
type Blob_getSize_Params_Future struct{ *capnp.Future }

func (p Blob_getSize_Params_Future) Struct() (Blob_getSize_Params, error) {
	s, err := p.Future.Struct()
	return Blob_getSize_Params{s}, err
}

type Blob_getSize_Results struct{ capnp.Struct }

// Blob_getSize_Results_TypeID is the unique identifier for the type Blob_getSize_Results.
const Blob_getSize_Results_TypeID = 0x8e48cb1497f3d6f4

func NewBlob_getSize_Results(s *capnp.Segment) (Blob_getSize_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Blob_getSize_Results{st}, err
}

func NewRootBlob_getSize_Results(s *capnp.Segment) (Blob_getSize_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Blob_getSize_Results{st}, err
}

func ReadRootBlob_getSize_Results(msg *capnp.Message) (Blob_getSize_Results, error) {
	root, err := msg.Root()
	return Blob_getSize_Results{root.Struct()}, err
}

func (s Blob_getSize_Results) String() string {
	str, _ := text.Marshal(0x8e48cb1497f3d6f4, s.Struct)
	return str
}

func (s Blob_getSize_Results) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s Blob_getSize_Results) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Blob_getSize_Results_List is a list of Blob_getSize_Results.
type Blob_getSize_Results_List struct{ capnp.List }

// NewBlob_getSize_Results creates a new list of Blob_getSize_Results.
func NewBlob_getSize_Results_List(s *capnp.Segment, sz int32) (Blob_getSize_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Blob_getSize_Results_List{l}, err
}

func (s Blob_getSize_Results_List) At(i int) Blob_getSize_Results {
	return Blob_getSize_Results{s.List.Struct(i)}
}

func (s Blob_getSize_Results_List) Set(i int, v Blob_getSize_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Blob_getSize_Results_List) String() string {
	str, _ := text.MarshalList(0x8e48cb1497f3d6f4, s.List)
	return str
}

// Blob_getSize_Results_Future is a wrapper for a Blob_getSize_Results promised by a client call.
type Blob_getSize_Results_Future struct{ *capnp.Future }

func (p Blob_getSize_Results_Future) Struct() (Blob_getSize_Results, error) {
	s, err := p.Future.Struct()
	return Blob_getSize_Results{s}, err
}

type Blob_writeTo_Params struct{ capnp.Struct }

// Blob_writeTo_Params_TypeID is the unique identifier for the type Blob_writeTo_Params.
const Blob_writeTo_Params_TypeID = 0x9f0719e9a9dccc4b

func NewBlob_writeTo_Params(s *capnp.Segment) (Blob_writeTo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Blob_writeTo_Params{st}, err
}

func NewRootBlob_writeTo_Params(s *capnp.Segment) (Blob_writeTo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Blob_writeTo_Params{st}, err
}

func ReadRootBlob_writeTo_Params(msg *capnp.Message) (Blob_writeTo_Params, error) {
	root, err := msg.Root()
	return Blob_writeTo_Params{root.Struct()}, err
}

func (s Blob_writeTo_Params) String() string {
	str, _ := text.Marshal(0x9f0719e9a9dccc4b, s.Struct)
	return str
}

func (s Blob_writeTo_Params) Stream() ByteStream {
	p, _ := s.Struct.Ptr(0)
	return ByteStream{Client: p.Interface().Client()}
}

func (s Blob_writeTo_Params) HasStream() bool {
	return s.Struct.HasPtr(0)
}

func (s Blob_writeTo_Params) SetStream(v ByteStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Blob_writeTo_Params) StartAtOffset() uint64 {
	return s.Struct.Uint64(0)
}

func (s Blob_writeTo_Params) SetStartAtOffset(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Blob_writeTo_Params_List is a list of Blob_writeTo_Params.
type Blob_writeTo_Params_List struct{ capnp.List }

// NewBlob_writeTo_Params creates a new list of Blob_writeTo_Params.
func NewBlob_writeTo_Params_List(s *capnp.Segment, sz int32) (Blob_writeTo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Blob_writeTo_Params_List{l}, err
}

func (s Blob_writeTo_Params_List) At(i int) Blob_writeTo_Params {
	return Blob_writeTo_Params{s.List.Struct(i)}
}

func (s Blob_writeTo_Params_List) Set(i int, v Blob_writeTo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Blob_writeTo_Params_List) String() string {
	str, _ := text.MarshalList(0x9f0719e9a9dccc4b, s.List)
	return str
}

// Blob_writeTo_Params_Future is a wrapper for a Blob_writeTo_Params promised by a client call.
type Blob_writeTo_Params_Future struct{ *capnp.Future }

func (p Blob_writeTo_Params_Future) Struct() (Blob_writeTo_Params, error) {
	s, err := p.Future.Struct()
	return Blob_writeTo_Params{s}, err
}

func (p Blob_writeTo_Params_Future) Stream() ByteStream {
	return ByteStream{Client: p.Future.Field(0, nil).Client()}
}

type Blob_writeTo_Results struct{ capnp.Struct }

// Blob_writeTo_Results_TypeID is the unique identifier for the type Blob_writeTo_Results.
const Blob_writeTo_Results_TypeID = 0xdb3152bd3bc2aa40

func NewBlob_writeTo_Results(s *capnp.Segment) (Blob_writeTo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Blob_writeTo_Results{st}, err
}

func NewRootBlob_writeTo_Results(s *capnp.Segment) (Blob_writeTo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Blob_writeTo_Results{st}, err
}

func ReadRootBlob_writeTo_Results(msg *capnp.Message) (Blob_writeTo_Results, error) {
	root, err := msg.Root()
	return Blob_writeTo_Results{root.Struct()}, err
}

func (s Blob_writeTo_Results) String() string {
	str, _ := text.Marshal(0xdb3152bd3bc2aa40, s.Struct)
	return str
}

func (s Blob_writeTo_Results) Handle() Handle {
	p, _ := s.Struct.Ptr(0)
	return Handle{Client: p.Interface().Client()}
}

func (s Blob_writeTo_Results) HasHandle() bool {
	return s.Struct.HasPtr(0)
}

func (s Blob_writeTo_Results) SetHandle(v Handle) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Blob_writeTo_Results_List is a list of Blob_writeTo_Results.
type Blob_writeTo_Results_List struct{ capnp.List }

// NewBlob_writeTo_Results creates a new list of Blob_writeTo_Results.
func NewBlob_writeTo_Results_List(s *capnp.Segment, sz int32) (Blob_writeTo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Blob_writeTo_Results_List{l}, err
}

func (s Blob_writeTo_Results_List) At(i int) Blob_writeTo_Results {
	return Blob_writeTo_Results{s.List.Struct(i)}
}

func (s Blob_writeTo_Results_List) Set(i int, v Blob_writeTo_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Blob_writeTo_Results_List) String() string {
	str, _ := text.MarshalList(0xdb3152bd3bc2aa40, s.List)
	return str
}

// Blob_writeTo_Results_Future is a wrapper for a Blob_writeTo_Results promised by a client call.
type Blob_writeTo_Results_Future struct{ *capnp.Future }

func (p Blob_writeTo_Results_Future) Struct() (Blob_writeTo_Results, error) {
	s, err := p.Future.Struct()
	return Blob_writeTo_Results{s}, err
}

func (p Blob_writeTo_Results_Future) Handle() Handle {
	return Handle{Client: p.Future.Field(0, nil).Client()}
}

type Blob_getSlice_Params struct{ capnp.Struct }

// Blob_getSlice_Params_TypeID is the unique identifier for the type Blob_getSlice_Params.
const Blob_getSlice_Params_TypeID = 0x8edb5f3937d96b8a

func NewBlob_getSlice_Params(s *capnp.Segment) (Blob_getSlice_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Blob_getSlice_Params{st}, err
}

func NewRootBlob_getSlice_Params(s *capnp.Segment) (Blob_getSlice_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Blob_getSlice_Params{st}, err
}

func ReadRootBlob_getSlice_Params(msg *capnp.Message) (Blob_getSlice_Params, error) {
	root, err := msg.Root()
	return Blob_getSlice_Params{root.Struct()}, err
}

func (s Blob_getSlice_Params) String() string {
	str, _ := text.Marshal(0x8edb5f3937d96b8a, s.Struct)
	return str
}

func (s Blob_getSlice_Params) Offset() uint64 {
	return s.Struct.Uint64(0)
}

func (s Blob_getSlice_Params) SetOffset(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Blob_getSlice_Params) Size() uint32 {
	return s.Struct.Uint32(8)
}

func (s Blob_getSlice_Params) SetSize(v uint32) {
	s.Struct.SetUint32(8, v)
}

// Blob_getSlice_Params_List is a list of Blob_getSlice_Params.
type Blob_getSlice_Params_List struct{ capnp.List }

// NewBlob_getSlice_Params creates a new list of Blob_getSlice_Params.
func NewBlob_getSlice_Params_List(s *capnp.Segment, sz int32) (Blob_getSlice_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return Blob_getSlice_Params_List{l}, err
}

func (s Blob_getSlice_Params_List) At(i int) Blob_getSlice_Params {
	return Blob_getSlice_Params{s.List.Struct(i)}
}

func (s Blob_getSlice_Params_List) Set(i int, v Blob_getSlice_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Blob_getSlice_Params_List) String() string {
	str, _ := text.MarshalList(0x8edb5f3937d96b8a, s.List)
	return str
}

// Blob_getSlice_Params_Future is a wrapper for a Blob_getSlice_Params promised by a client call.
type Blob_getSlice_Params_Future struct{ *capnp.Future }

func (p Blob_getSlice_Params_Future) Struct() (Blob_getSlice_Params, error) {
	s, err := p.Future.Struct()
	return Blob_getSlice_Params{s}, err
}

type Blob_getSlice_Results struct{ capnp.Struct }

// Blob_getSlice_Results_TypeID is the unique identifier for the type Blob_getSlice_Results.
const Blob_getSlice_Results_TypeID = 0xc65caf9a2d389078

func NewBlob_getSlice_Results(s *capnp.Segment) (Blob_getSlice_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Blob_getSlice_Results{st}, err
}

func NewRootBlob_getSlice_Results(s *capnp.Segment) (Blob_getSlice_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Blob_getSlice_Results{st}, err
}

func ReadRootBlob_getSlice_Results(msg *capnp.Message) (Blob_getSlice_Results, error) {
	root, err := msg.Root()
	return Blob_getSlice_Results{root.Struct()}, err
}

func (s Blob_getSlice_Results) String() string {
	str, _ := text.Marshal(0xc65caf9a2d389078, s.Struct)
	return str
}

func (s Blob_getSlice_Results) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Blob_getSlice_Results) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Blob_getSlice_Results) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Blob_getSlice_Results_List is a list of Blob_getSlice_Results.
type Blob_getSlice_Results_List struct{ capnp.List }

// NewBlob_getSlice_Results creates a new list of Blob_getSlice_Results.
func NewBlob_getSlice_Results_List(s *capnp.Segment, sz int32) (Blob_getSlice_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Blob_getSlice_Results_List{l}, err
}

func (s Blob_getSlice_Results_List) At(i int) Blob_getSlice_Results {
	return Blob_getSlice_Results{s.List.Struct(i)}
}

func (s Blob_getSlice_Results_List) Set(i int, v Blob_getSlice_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Blob_getSlice_Results_List) String() string {
	str, _ := text.MarshalList(0xc65caf9a2d389078, s.List)
	return str
}

// Blob_getSlice_Results_Future is a wrapper for a Blob_getSlice_Results promised by a client call.
type Blob_getSlice_Results_Future struct{ *capnp.Future }

func (p Blob_getSlice_Results_Future) Struct() (Blob_getSlice_Results, error) {
	s, err := p.Future.Struct()
	return Blob_getSlice_Results{s}, err
}

type Assignable struct{ Client *capnp.Client }

// Assignable_TypeID is the unique identifier for the type Assignable.
const Assignable_TypeID = 0xeaf255b498229199

func (c Assignable) Get(ctx context.Context, params func(Assignable_get_Params) error) (Assignable_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xeaf255b498229199,
			MethodID:      0,
			InterfaceName: "util.capnp:Assignable",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Assignable_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Assignable_get_Results_Future{Future: ans.Future()}, release
}
func (c Assignable) AsGetter(ctx context.Context, params func(Assignable_asGetter_Params) error) (Assignable_asGetter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xeaf255b498229199,
			MethodID:      1,
			InterfaceName: "util.capnp:Assignable",
			MethodName:    "asGetter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Assignable_asGetter_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Assignable_asGetter_Results_Future{Future: ans.Future()}, release
}
func (c Assignable) AsSetter(ctx context.Context, params func(Assignable_asSetter_Params) error) (Assignable_asSetter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xeaf255b498229199,
			MethodID:      2,
			InterfaceName: "util.capnp:Assignable",
			MethodName:    "asSetter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Assignable_asSetter_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Assignable_asSetter_Results_Future{Future: ans.Future()}, release
}

func (c Assignable) AddRef() Assignable {
	return Assignable{
		Client: c.Client.AddRef(),
	}
}

func (c Assignable) Release() {
	c.Client.Release()
}

// A Assignable_Server is a Assignable with a local implementation.
type Assignable_Server interface {
	Get(context.Context, Assignable_get) error

	AsGetter(context.Context, Assignable_asGetter) error

	AsSetter(context.Context, Assignable_asSetter) error
}

// Assignable_NewServer creates a new Server from an implementation of Assignable_Server.
func Assignable_NewServer(s Assignable_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Assignable_Methods(nil, s), s, c, policy)
}

// Assignable_ServerToClient creates a new Client from an implementation of Assignable_Server.
// The caller is responsible for calling Release on the returned Client.
func Assignable_ServerToClient(s Assignable_Server, policy *server.Policy) Assignable {
	return Assignable{Client: capnp.NewClient(Assignable_NewServer(s, policy))}
}

// Assignable_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Assignable_Methods(methods []server.Method, s Assignable_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xeaf255b498229199,
			MethodID:      0,
			InterfaceName: "util.capnp:Assignable",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Assignable_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xeaf255b498229199,
			MethodID:      1,
			InterfaceName: "util.capnp:Assignable",
			MethodName:    "asGetter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AsGetter(ctx, Assignable_asGetter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xeaf255b498229199,
			MethodID:      2,
			InterfaceName: "util.capnp:Assignable",
			MethodName:    "asSetter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AsSetter(ctx, Assignable_asSetter{call})
		},
	})

	return methods
}

// Assignable_get holds the state for a server call to Assignable.get.
// See server.Call for documentation.
type Assignable_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Assignable_get) Args() Assignable_get_Params {
	return Assignable_get_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Assignable_get) AllocResults() (Assignable_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Assignable_get_Results{Struct: r}, err
}

// Assignable_asGetter holds the state for a server call to Assignable.asGetter.
// See server.Call for documentation.
type Assignable_asGetter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Assignable_asGetter) Args() Assignable_asGetter_Params {
	return Assignable_asGetter_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Assignable_asGetter) AllocResults() (Assignable_asGetter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_asGetter_Results{Struct: r}, err
}

// Assignable_asSetter holds the state for a server call to Assignable.asSetter.
// See server.Call for documentation.
type Assignable_asSetter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Assignable_asSetter) Args() Assignable_asSetter_Params {
	return Assignable_asSetter_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Assignable_asSetter) AllocResults() (Assignable_asSetter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_asSetter_Results{Struct: r}, err
}

type Assignable_Getter struct{ Client *capnp.Client }

// Assignable_Getter_TypeID is the unique identifier for the type Assignable_Getter.
const Assignable_Getter_TypeID = 0x80f2f65360d64224

func (c Assignable_Getter) Get(ctx context.Context, params func(Assignable_Getter_get_Params) error) (Assignable_Getter_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x80f2f65360d64224,
			MethodID:      0,
			InterfaceName: "util.capnp:Assignable.Getter",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Assignable_Getter_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Assignable_Getter_get_Results_Future{Future: ans.Future()}, release
}
func (c Assignable_Getter) Subscribe(ctx context.Context, params func(Assignable_Getter_subscribe_Params) error) (Assignable_Getter_subscribe_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x80f2f65360d64224,
			MethodID:      1,
			InterfaceName: "util.capnp:Assignable.Getter",
			MethodName:    "subscribe",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Assignable_Getter_subscribe_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Assignable_Getter_subscribe_Results_Future{Future: ans.Future()}, release
}

func (c Assignable_Getter) AddRef() Assignable_Getter {
	return Assignable_Getter{
		Client: c.Client.AddRef(),
	}
}

func (c Assignable_Getter) Release() {
	c.Client.Release()
}

// A Assignable_Getter_Server is a Assignable_Getter with a local implementation.
type Assignable_Getter_Server interface {
	Get(context.Context, Assignable_Getter_get) error

	Subscribe(context.Context, Assignable_Getter_subscribe) error
}

// Assignable_Getter_NewServer creates a new Server from an implementation of Assignable_Getter_Server.
func Assignable_Getter_NewServer(s Assignable_Getter_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Assignable_Getter_Methods(nil, s), s, c, policy)
}

// Assignable_Getter_ServerToClient creates a new Client from an implementation of Assignable_Getter_Server.
// The caller is responsible for calling Release on the returned Client.
func Assignable_Getter_ServerToClient(s Assignable_Getter_Server, policy *server.Policy) Assignable_Getter {
	return Assignable_Getter{Client: capnp.NewClient(Assignable_Getter_NewServer(s, policy))}
}

// Assignable_Getter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Assignable_Getter_Methods(methods []server.Method, s Assignable_Getter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x80f2f65360d64224,
			MethodID:      0,
			InterfaceName: "util.capnp:Assignable.Getter",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Assignable_Getter_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x80f2f65360d64224,
			MethodID:      1,
			InterfaceName: "util.capnp:Assignable.Getter",
			MethodName:    "subscribe",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subscribe(ctx, Assignable_Getter_subscribe{call})
		},
	})

	return methods
}

// Assignable_Getter_get holds the state for a server call to Assignable_Getter.get.
// See server.Call for documentation.
type Assignable_Getter_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Assignable_Getter_get) Args() Assignable_Getter_get_Params {
	return Assignable_Getter_get_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Assignable_Getter_get) AllocResults() (Assignable_Getter_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_Getter_get_Results{Struct: r}, err
}

// Assignable_Getter_subscribe holds the state for a server call to Assignable_Getter.subscribe.
// See server.Call for documentation.
type Assignable_Getter_subscribe struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Assignable_Getter_subscribe) Args() Assignable_Getter_subscribe_Params {
	return Assignable_Getter_subscribe_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Assignable_Getter_subscribe) AllocResults() (Assignable_Getter_subscribe_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_Getter_subscribe_Results{Struct: r}, err
}

type Assignable_Getter_get_Params struct{ capnp.Struct }

// Assignable_Getter_get_Params_TypeID is the unique identifier for the type Assignable_Getter_get_Params.
const Assignable_Getter_get_Params_TypeID = 0xb19fdbd356844119

func NewAssignable_Getter_get_Params(s *capnp.Segment) (Assignable_Getter_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_Getter_get_Params{st}, err
}

func NewRootAssignable_Getter_get_Params(s *capnp.Segment) (Assignable_Getter_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_Getter_get_Params{st}, err
}

func ReadRootAssignable_Getter_get_Params(msg *capnp.Message) (Assignable_Getter_get_Params, error) {
	root, err := msg.Root()
	return Assignable_Getter_get_Params{root.Struct()}, err
}

func (s Assignable_Getter_get_Params) String() string {
	str, _ := text.Marshal(0xb19fdbd356844119, s.Struct)
	return str
}

// Assignable_Getter_get_Params_List is a list of Assignable_Getter_get_Params.
type Assignable_Getter_get_Params_List struct{ capnp.List }

// NewAssignable_Getter_get_Params creates a new list of Assignable_Getter_get_Params.
func NewAssignable_Getter_get_Params_List(s *capnp.Segment, sz int32) (Assignable_Getter_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Assignable_Getter_get_Params_List{l}, err
}

func (s Assignable_Getter_get_Params_List) At(i int) Assignable_Getter_get_Params {
	return Assignable_Getter_get_Params{s.List.Struct(i)}
}

func (s Assignable_Getter_get_Params_List) Set(i int, v Assignable_Getter_get_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_Getter_get_Params_List) String() string {
	str, _ := text.MarshalList(0xb19fdbd356844119, s.List)
	return str
}

// Assignable_Getter_get_Params_Future is a wrapper for a Assignable_Getter_get_Params promised by a client call.
type Assignable_Getter_get_Params_Future struct{ *capnp.Future }

func (p Assignable_Getter_get_Params_Future) Struct() (Assignable_Getter_get_Params, error) {
	s, err := p.Future.Struct()
	return Assignable_Getter_get_Params{s}, err
}

type Assignable_Getter_get_Results struct{ capnp.Struct }

// Assignable_Getter_get_Results_TypeID is the unique identifier for the type Assignable_Getter_get_Results.
const Assignable_Getter_get_Results_TypeID = 0x97ef2da226123492

func NewAssignable_Getter_get_Results(s *capnp.Segment) (Assignable_Getter_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_Getter_get_Results{st}, err
}

func NewRootAssignable_Getter_get_Results(s *capnp.Segment) (Assignable_Getter_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_Getter_get_Results{st}, err
}

func ReadRootAssignable_Getter_get_Results(msg *capnp.Message) (Assignable_Getter_get_Results, error) {
	root, err := msg.Root()
	return Assignable_Getter_get_Results{root.Struct()}, err
}

func (s Assignable_Getter_get_Results) String() string {
	str, _ := text.Marshal(0x97ef2da226123492, s.Struct)
	return str
}

func (s Assignable_Getter_get_Results) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Assignable_Getter_get_Results) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Assignable_Getter_get_Results) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Assignable_Getter_get_Results_List is a list of Assignable_Getter_get_Results.
type Assignable_Getter_get_Results_List struct{ capnp.List }

// NewAssignable_Getter_get_Results creates a new list of Assignable_Getter_get_Results.
func NewAssignable_Getter_get_Results_List(s *capnp.Segment, sz int32) (Assignable_Getter_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Assignable_Getter_get_Results_List{l}, err
}

func (s Assignable_Getter_get_Results_List) At(i int) Assignable_Getter_get_Results {
	return Assignable_Getter_get_Results{s.List.Struct(i)}
}

func (s Assignable_Getter_get_Results_List) Set(i int, v Assignable_Getter_get_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_Getter_get_Results_List) String() string {
	str, _ := text.MarshalList(0x97ef2da226123492, s.List)
	return str
}

// Assignable_Getter_get_Results_Future is a wrapper for a Assignable_Getter_get_Results promised by a client call.
type Assignable_Getter_get_Results_Future struct{ *capnp.Future }

func (p Assignable_Getter_get_Results_Future) Struct() (Assignable_Getter_get_Results, error) {
	s, err := p.Future.Struct()
	return Assignable_Getter_get_Results{s}, err
}

func (p Assignable_Getter_get_Results_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Assignable_Getter_subscribe_Params struct{ capnp.Struct }

// Assignable_Getter_subscribe_Params_TypeID is the unique identifier for the type Assignable_Getter_subscribe_Params.
const Assignable_Getter_subscribe_Params_TypeID = 0xf02783ef982ecea9

func NewAssignable_Getter_subscribe_Params(s *capnp.Segment) (Assignable_Getter_subscribe_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_Getter_subscribe_Params{st}, err
}

func NewRootAssignable_Getter_subscribe_Params(s *capnp.Segment) (Assignable_Getter_subscribe_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_Getter_subscribe_Params{st}, err
}

func ReadRootAssignable_Getter_subscribe_Params(msg *capnp.Message) (Assignable_Getter_subscribe_Params, error) {
	root, err := msg.Root()
	return Assignable_Getter_subscribe_Params{root.Struct()}, err
}

func (s Assignable_Getter_subscribe_Params) String() string {
	str, _ := text.Marshal(0xf02783ef982ecea9, s.Struct)
	return str
}

func (s Assignable_Getter_subscribe_Params) Setter() Assignable_Setter {
	p, _ := s.Struct.Ptr(0)
	return Assignable_Setter{Client: p.Interface().Client()}
}

func (s Assignable_Getter_subscribe_Params) HasSetter() bool {
	return s.Struct.HasPtr(0)
}

func (s Assignable_Getter_subscribe_Params) SetSetter(v Assignable_Setter) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Assignable_Getter_subscribe_Params_List is a list of Assignable_Getter_subscribe_Params.
type Assignable_Getter_subscribe_Params_List struct{ capnp.List }

// NewAssignable_Getter_subscribe_Params creates a new list of Assignable_Getter_subscribe_Params.
func NewAssignable_Getter_subscribe_Params_List(s *capnp.Segment, sz int32) (Assignable_Getter_subscribe_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Assignable_Getter_subscribe_Params_List{l}, err
}

func (s Assignable_Getter_subscribe_Params_List) At(i int) Assignable_Getter_subscribe_Params {
	return Assignable_Getter_subscribe_Params{s.List.Struct(i)}
}

func (s Assignable_Getter_subscribe_Params_List) Set(i int, v Assignable_Getter_subscribe_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_Getter_subscribe_Params_List) String() string {
	str, _ := text.MarshalList(0xf02783ef982ecea9, s.List)
	return str
}

// Assignable_Getter_subscribe_Params_Future is a wrapper for a Assignable_Getter_subscribe_Params promised by a client call.
type Assignable_Getter_subscribe_Params_Future struct{ *capnp.Future }

func (p Assignable_Getter_subscribe_Params_Future) Struct() (Assignable_Getter_subscribe_Params, error) {
	s, err := p.Future.Struct()
	return Assignable_Getter_subscribe_Params{s}, err
}

func (p Assignable_Getter_subscribe_Params_Future) Setter() Assignable_Setter {
	return Assignable_Setter{Client: p.Future.Field(0, nil).Client()}
}

type Assignable_Getter_subscribe_Results struct{ capnp.Struct }

// Assignable_Getter_subscribe_Results_TypeID is the unique identifier for the type Assignable_Getter_subscribe_Results.
const Assignable_Getter_subscribe_Results_TypeID = 0x84e0f802c9af605b

func NewAssignable_Getter_subscribe_Results(s *capnp.Segment) (Assignable_Getter_subscribe_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_Getter_subscribe_Results{st}, err
}

func NewRootAssignable_Getter_subscribe_Results(s *capnp.Segment) (Assignable_Getter_subscribe_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_Getter_subscribe_Results{st}, err
}

func ReadRootAssignable_Getter_subscribe_Results(msg *capnp.Message) (Assignable_Getter_subscribe_Results, error) {
	root, err := msg.Root()
	return Assignable_Getter_subscribe_Results{root.Struct()}, err
}

func (s Assignable_Getter_subscribe_Results) String() string {
	str, _ := text.Marshal(0x84e0f802c9af605b, s.Struct)
	return str
}

func (s Assignable_Getter_subscribe_Results) Handle() Handle {
	p, _ := s.Struct.Ptr(0)
	return Handle{Client: p.Interface().Client()}
}

func (s Assignable_Getter_subscribe_Results) HasHandle() bool {
	return s.Struct.HasPtr(0)
}

func (s Assignable_Getter_subscribe_Results) SetHandle(v Handle) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Assignable_Getter_subscribe_Results_List is a list of Assignable_Getter_subscribe_Results.
type Assignable_Getter_subscribe_Results_List struct{ capnp.List }

// NewAssignable_Getter_subscribe_Results creates a new list of Assignable_Getter_subscribe_Results.
func NewAssignable_Getter_subscribe_Results_List(s *capnp.Segment, sz int32) (Assignable_Getter_subscribe_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Assignable_Getter_subscribe_Results_List{l}, err
}

func (s Assignable_Getter_subscribe_Results_List) At(i int) Assignable_Getter_subscribe_Results {
	return Assignable_Getter_subscribe_Results{s.List.Struct(i)}
}

func (s Assignable_Getter_subscribe_Results_List) Set(i int, v Assignable_Getter_subscribe_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_Getter_subscribe_Results_List) String() string {
	str, _ := text.MarshalList(0x84e0f802c9af605b, s.List)
	return str
}

// Assignable_Getter_subscribe_Results_Future is a wrapper for a Assignable_Getter_subscribe_Results promised by a client call.
type Assignable_Getter_subscribe_Results_Future struct{ *capnp.Future }

func (p Assignable_Getter_subscribe_Results_Future) Struct() (Assignable_Getter_subscribe_Results, error) {
	s, err := p.Future.Struct()
	return Assignable_Getter_subscribe_Results{s}, err
}

func (p Assignable_Getter_subscribe_Results_Future) Handle() Handle {
	return Handle{Client: p.Future.Field(0, nil).Client()}
}

type Assignable_Setter struct{ Client *capnp.Client }

// Assignable_Setter_TypeID is the unique identifier for the type Assignable_Setter.
const Assignable_Setter_TypeID = 0xd5256a3f93589d2f

func (c Assignable_Setter) Set(ctx context.Context, params func(Assignable_Setter_set_Params) error) (Assignable_Setter_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd5256a3f93589d2f,
			MethodID:      0,
			InterfaceName: "util.capnp:Assignable.Setter",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Assignable_Setter_set_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Assignable_Setter_set_Results_Future{Future: ans.Future()}, release
}

func (c Assignable_Setter) AddRef() Assignable_Setter {
	return Assignable_Setter{
		Client: c.Client.AddRef(),
	}
}

func (c Assignable_Setter) Release() {
	c.Client.Release()
}

// A Assignable_Setter_Server is a Assignable_Setter with a local implementation.
type Assignable_Setter_Server interface {
	Set(context.Context, Assignable_Setter_set) error
}

// Assignable_Setter_NewServer creates a new Server from an implementation of Assignable_Setter_Server.
func Assignable_Setter_NewServer(s Assignable_Setter_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Assignable_Setter_Methods(nil, s), s, c, policy)
}

// Assignable_Setter_ServerToClient creates a new Client from an implementation of Assignable_Setter_Server.
// The caller is responsible for calling Release on the returned Client.
func Assignable_Setter_ServerToClient(s Assignable_Setter_Server, policy *server.Policy) Assignable_Setter {
	return Assignable_Setter{Client: capnp.NewClient(Assignable_Setter_NewServer(s, policy))}
}

// Assignable_Setter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Assignable_Setter_Methods(methods []server.Method, s Assignable_Setter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd5256a3f93589d2f,
			MethodID:      0,
			InterfaceName: "util.capnp:Assignable.Setter",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, Assignable_Setter_set{call})
		},
	})

	return methods
}

// Assignable_Setter_set holds the state for a server call to Assignable_Setter.set.
// See server.Call for documentation.
type Assignable_Setter_set struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Assignable_Setter_set) Args() Assignable_Setter_set_Params {
	return Assignable_Setter_set_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Assignable_Setter_set) AllocResults() (Assignable_Setter_set_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_Setter_set_Results{Struct: r}, err
}

type Assignable_Setter_set_Params struct{ capnp.Struct }

// Assignable_Setter_set_Params_TypeID is the unique identifier for the type Assignable_Setter_set_Params.
const Assignable_Setter_set_Params_TypeID = 0x98d0372787b787d1

func NewAssignable_Setter_set_Params(s *capnp.Segment) (Assignable_Setter_set_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_Setter_set_Params{st}, err
}

func NewRootAssignable_Setter_set_Params(s *capnp.Segment) (Assignable_Setter_set_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_Setter_set_Params{st}, err
}

func ReadRootAssignable_Setter_set_Params(msg *capnp.Message) (Assignable_Setter_set_Params, error) {
	root, err := msg.Root()
	return Assignable_Setter_set_Params{root.Struct()}, err
}

func (s Assignable_Setter_set_Params) String() string {
	str, _ := text.Marshal(0x98d0372787b787d1, s.Struct)
	return str
}

func (s Assignable_Setter_set_Params) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Assignable_Setter_set_Params) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Assignable_Setter_set_Params) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Assignable_Setter_set_Params_List is a list of Assignable_Setter_set_Params.
type Assignable_Setter_set_Params_List struct{ capnp.List }

// NewAssignable_Setter_set_Params creates a new list of Assignable_Setter_set_Params.
func NewAssignable_Setter_set_Params_List(s *capnp.Segment, sz int32) (Assignable_Setter_set_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Assignable_Setter_set_Params_List{l}, err
}

func (s Assignable_Setter_set_Params_List) At(i int) Assignable_Setter_set_Params {
	return Assignable_Setter_set_Params{s.List.Struct(i)}
}

func (s Assignable_Setter_set_Params_List) Set(i int, v Assignable_Setter_set_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_Setter_set_Params_List) String() string {
	str, _ := text.MarshalList(0x98d0372787b787d1, s.List)
	return str
}

// Assignable_Setter_set_Params_Future is a wrapper for a Assignable_Setter_set_Params promised by a client call.
type Assignable_Setter_set_Params_Future struct{ *capnp.Future }

func (p Assignable_Setter_set_Params_Future) Struct() (Assignable_Setter_set_Params, error) {
	s, err := p.Future.Struct()
	return Assignable_Setter_set_Params{s}, err
}

func (p Assignable_Setter_set_Params_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Assignable_Setter_set_Results struct{ capnp.Struct }

// Assignable_Setter_set_Results_TypeID is the unique identifier for the type Assignable_Setter_set_Results.
const Assignable_Setter_set_Results_TypeID = 0xdbfbb635d3e6abab

func NewAssignable_Setter_set_Results(s *capnp.Segment) (Assignable_Setter_set_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_Setter_set_Results{st}, err
}

func NewRootAssignable_Setter_set_Results(s *capnp.Segment) (Assignable_Setter_set_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_Setter_set_Results{st}, err
}

func ReadRootAssignable_Setter_set_Results(msg *capnp.Message) (Assignable_Setter_set_Results, error) {
	root, err := msg.Root()
	return Assignable_Setter_set_Results{root.Struct()}, err
}

func (s Assignable_Setter_set_Results) String() string {
	str, _ := text.Marshal(0xdbfbb635d3e6abab, s.Struct)
	return str
}

// Assignable_Setter_set_Results_List is a list of Assignable_Setter_set_Results.
type Assignable_Setter_set_Results_List struct{ capnp.List }

// NewAssignable_Setter_set_Results creates a new list of Assignable_Setter_set_Results.
func NewAssignable_Setter_set_Results_List(s *capnp.Segment, sz int32) (Assignable_Setter_set_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Assignable_Setter_set_Results_List{l}, err
}

func (s Assignable_Setter_set_Results_List) At(i int) Assignable_Setter_set_Results {
	return Assignable_Setter_set_Results{s.List.Struct(i)}
}

func (s Assignable_Setter_set_Results_List) Set(i int, v Assignable_Setter_set_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_Setter_set_Results_List) String() string {
	str, _ := text.MarshalList(0xdbfbb635d3e6abab, s.List)
	return str
}

// Assignable_Setter_set_Results_Future is a wrapper for a Assignable_Setter_set_Results promised by a client call.
type Assignable_Setter_set_Results_Future struct{ *capnp.Future }

func (p Assignable_Setter_set_Results_Future) Struct() (Assignable_Setter_set_Results, error) {
	s, err := p.Future.Struct()
	return Assignable_Setter_set_Results{s}, err
}

type Assignable_get_Params struct{ capnp.Struct }

// Assignable_get_Params_TypeID is the unique identifier for the type Assignable_get_Params.
const Assignable_get_Params_TypeID = 0xbbfd27b5d2515662

func NewAssignable_get_Params(s *capnp.Segment) (Assignable_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_get_Params{st}, err
}

func NewRootAssignable_get_Params(s *capnp.Segment) (Assignable_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_get_Params{st}, err
}

func ReadRootAssignable_get_Params(msg *capnp.Message) (Assignable_get_Params, error) {
	root, err := msg.Root()
	return Assignable_get_Params{root.Struct()}, err
}

func (s Assignable_get_Params) String() string {
	str, _ := text.Marshal(0xbbfd27b5d2515662, s.Struct)
	return str
}

// Assignable_get_Params_List is a list of Assignable_get_Params.
type Assignable_get_Params_List struct{ capnp.List }

// NewAssignable_get_Params creates a new list of Assignable_get_Params.
func NewAssignable_get_Params_List(s *capnp.Segment, sz int32) (Assignable_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Assignable_get_Params_List{l}, err
}

func (s Assignable_get_Params_List) At(i int) Assignable_get_Params {
	return Assignable_get_Params{s.List.Struct(i)}
}

func (s Assignable_get_Params_List) Set(i int, v Assignable_get_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_get_Params_List) String() string {
	str, _ := text.MarshalList(0xbbfd27b5d2515662, s.List)
	return str
}

// Assignable_get_Params_Future is a wrapper for a Assignable_get_Params promised by a client call.
type Assignable_get_Params_Future struct{ *capnp.Future }

func (p Assignable_get_Params_Future) Struct() (Assignable_get_Params, error) {
	s, err := p.Future.Struct()
	return Assignable_get_Params{s}, err
}

type Assignable_get_Results struct{ capnp.Struct }

// Assignable_get_Results_TypeID is the unique identifier for the type Assignable_get_Results.
const Assignable_get_Results_TypeID = 0xb351b437cd426a4f

func NewAssignable_get_Results(s *capnp.Segment) (Assignable_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Assignable_get_Results{st}, err
}

func NewRootAssignable_get_Results(s *capnp.Segment) (Assignable_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Assignable_get_Results{st}, err
}

func ReadRootAssignable_get_Results(msg *capnp.Message) (Assignable_get_Results, error) {
	root, err := msg.Root()
	return Assignable_get_Results{root.Struct()}, err
}

func (s Assignable_get_Results) String() string {
	str, _ := text.Marshal(0xb351b437cd426a4f, s.Struct)
	return str
}

func (s Assignable_get_Results) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Assignable_get_Results) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Assignable_get_Results) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Assignable_get_Results) Setter() Assignable_Setter {
	p, _ := s.Struct.Ptr(1)
	return Assignable_Setter{Client: p.Interface().Client()}
}

func (s Assignable_get_Results) HasSetter() bool {
	return s.Struct.HasPtr(1)
}

func (s Assignable_get_Results) SetSetter(v Assignable_Setter) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Assignable_get_Results_List is a list of Assignable_get_Results.
type Assignable_get_Results_List struct{ capnp.List }

// NewAssignable_get_Results creates a new list of Assignable_get_Results.
func NewAssignable_get_Results_List(s *capnp.Segment, sz int32) (Assignable_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Assignable_get_Results_List{l}, err
}

func (s Assignable_get_Results_List) At(i int) Assignable_get_Results {
	return Assignable_get_Results{s.List.Struct(i)}
}

func (s Assignable_get_Results_List) Set(i int, v Assignable_get_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_get_Results_List) String() string {
	str, _ := text.MarshalList(0xb351b437cd426a4f, s.List)
	return str
}

// Assignable_get_Results_Future is a wrapper for a Assignable_get_Results promised by a client call.
type Assignable_get_Results_Future struct{ *capnp.Future }

func (p Assignable_get_Results_Future) Struct() (Assignable_get_Results, error) {
	s, err := p.Future.Struct()
	return Assignable_get_Results{s}, err
}

func (p Assignable_get_Results_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Assignable_get_Results_Future) Setter() Assignable_Setter {
	return Assignable_Setter{Client: p.Future.Field(1, nil).Client()}
}

type Assignable_asGetter_Params struct{ capnp.Struct }

// Assignable_asGetter_Params_TypeID is the unique identifier for the type Assignable_asGetter_Params.
const Assignable_asGetter_Params_TypeID = 0xf907945b872b26cf

func NewAssignable_asGetter_Params(s *capnp.Segment) (Assignable_asGetter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_asGetter_Params{st}, err
}

func NewRootAssignable_asGetter_Params(s *capnp.Segment) (Assignable_asGetter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_asGetter_Params{st}, err
}

func ReadRootAssignable_asGetter_Params(msg *capnp.Message) (Assignable_asGetter_Params, error) {
	root, err := msg.Root()
	return Assignable_asGetter_Params{root.Struct()}, err
}

func (s Assignable_asGetter_Params) String() string {
	str, _ := text.Marshal(0xf907945b872b26cf, s.Struct)
	return str
}

// Assignable_asGetter_Params_List is a list of Assignable_asGetter_Params.
type Assignable_asGetter_Params_List struct{ capnp.List }

// NewAssignable_asGetter_Params creates a new list of Assignable_asGetter_Params.
func NewAssignable_asGetter_Params_List(s *capnp.Segment, sz int32) (Assignable_asGetter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Assignable_asGetter_Params_List{l}, err
}

func (s Assignable_asGetter_Params_List) At(i int) Assignable_asGetter_Params {
	return Assignable_asGetter_Params{s.List.Struct(i)}
}

func (s Assignable_asGetter_Params_List) Set(i int, v Assignable_asGetter_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_asGetter_Params_List) String() string {
	str, _ := text.MarshalList(0xf907945b872b26cf, s.List)
	return str
}

// Assignable_asGetter_Params_Future is a wrapper for a Assignable_asGetter_Params promised by a client call.
type Assignable_asGetter_Params_Future struct{ *capnp.Future }

func (p Assignable_asGetter_Params_Future) Struct() (Assignable_asGetter_Params, error) {
	s, err := p.Future.Struct()
	return Assignable_asGetter_Params{s}, err
}

type Assignable_asGetter_Results struct{ capnp.Struct }

// Assignable_asGetter_Results_TypeID is the unique identifier for the type Assignable_asGetter_Results.
const Assignable_asGetter_Results_TypeID = 0x8c3d547ef2930e96

func NewAssignable_asGetter_Results(s *capnp.Segment) (Assignable_asGetter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_asGetter_Results{st}, err
}

func NewRootAssignable_asGetter_Results(s *capnp.Segment) (Assignable_asGetter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_asGetter_Results{st}, err
}

func ReadRootAssignable_asGetter_Results(msg *capnp.Message) (Assignable_asGetter_Results, error) {
	root, err := msg.Root()
	return Assignable_asGetter_Results{root.Struct()}, err
}

func (s Assignable_asGetter_Results) String() string {
	str, _ := text.Marshal(0x8c3d547ef2930e96, s.Struct)
	return str
}

func (s Assignable_asGetter_Results) Getter() Assignable_Getter {
	p, _ := s.Struct.Ptr(0)
	return Assignable_Getter{Client: p.Interface().Client()}
}

func (s Assignable_asGetter_Results) HasGetter() bool {
	return s.Struct.HasPtr(0)
}

func (s Assignable_asGetter_Results) SetGetter(v Assignable_Getter) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Assignable_asGetter_Results_List is a list of Assignable_asGetter_Results.
type Assignable_asGetter_Results_List struct{ capnp.List }

// NewAssignable_asGetter_Results creates a new list of Assignable_asGetter_Results.
func NewAssignable_asGetter_Results_List(s *capnp.Segment, sz int32) (Assignable_asGetter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Assignable_asGetter_Results_List{l}, err
}

func (s Assignable_asGetter_Results_List) At(i int) Assignable_asGetter_Results {
	return Assignable_asGetter_Results{s.List.Struct(i)}
}

func (s Assignable_asGetter_Results_List) Set(i int, v Assignable_asGetter_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_asGetter_Results_List) String() string {
	str, _ := text.MarshalList(0x8c3d547ef2930e96, s.List)
	return str
}

// Assignable_asGetter_Results_Future is a wrapper for a Assignable_asGetter_Results promised by a client call.
type Assignable_asGetter_Results_Future struct{ *capnp.Future }

func (p Assignable_asGetter_Results_Future) Struct() (Assignable_asGetter_Results, error) {
	s, err := p.Future.Struct()
	return Assignable_asGetter_Results{s}, err
}

func (p Assignable_asGetter_Results_Future) Getter() Assignable_Getter {
	return Assignable_Getter{Client: p.Future.Field(0, nil).Client()}
}

type Assignable_asSetter_Params struct{ capnp.Struct }

// Assignable_asSetter_Params_TypeID is the unique identifier for the type Assignable_asSetter_Params.
const Assignable_asSetter_Params_TypeID = 0xa01f603357f3b349

func NewAssignable_asSetter_Params(s *capnp.Segment) (Assignable_asSetter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_asSetter_Params{st}, err
}

func NewRootAssignable_asSetter_Params(s *capnp.Segment) (Assignable_asSetter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_asSetter_Params{st}, err
}

func ReadRootAssignable_asSetter_Params(msg *capnp.Message) (Assignable_asSetter_Params, error) {
	root, err := msg.Root()
	return Assignable_asSetter_Params{root.Struct()}, err
}

func (s Assignable_asSetter_Params) String() string {
	str, _ := text.Marshal(0xa01f603357f3b349, s.Struct)
	return str
}

// Assignable_asSetter_Params_List is a list of Assignable_asSetter_Params.
type Assignable_asSetter_Params_List struct{ capnp.List }

// NewAssignable_asSetter_Params creates a new list of Assignable_asSetter_Params.
func NewAssignable_asSetter_Params_List(s *capnp.Segment, sz int32) (Assignable_asSetter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Assignable_asSetter_Params_List{l}, err
}

func (s Assignable_asSetter_Params_List) At(i int) Assignable_asSetter_Params {
	return Assignable_asSetter_Params{s.List.Struct(i)}
}

func (s Assignable_asSetter_Params_List) Set(i int, v Assignable_asSetter_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_asSetter_Params_List) String() string {
	str, _ := text.MarshalList(0xa01f603357f3b349, s.List)
	return str
}

// Assignable_asSetter_Params_Future is a wrapper for a Assignable_asSetter_Params promised by a client call.
type Assignable_asSetter_Params_Future struct{ *capnp.Future }

func (p Assignable_asSetter_Params_Future) Struct() (Assignable_asSetter_Params, error) {
	s, err := p.Future.Struct()
	return Assignable_asSetter_Params{s}, err
}

type Assignable_asSetter_Results struct{ capnp.Struct }

// Assignable_asSetter_Results_TypeID is the unique identifier for the type Assignable_asSetter_Results.
const Assignable_asSetter_Results_TypeID = 0xc6cbc10181c4f397

func NewAssignable_asSetter_Results(s *capnp.Segment) (Assignable_asSetter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_asSetter_Results{st}, err
}

func NewRootAssignable_asSetter_Results(s *capnp.Segment) (Assignable_asSetter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_asSetter_Results{st}, err
}

func ReadRootAssignable_asSetter_Results(msg *capnp.Message) (Assignable_asSetter_Results, error) {
	root, err := msg.Root()
	return Assignable_asSetter_Results{root.Struct()}, err
}

func (s Assignable_asSetter_Results) String() string {
	str, _ := text.Marshal(0xc6cbc10181c4f397, s.Struct)
	return str
}

func (s Assignable_asSetter_Results) Setter() Assignable_Setter {
	p, _ := s.Struct.Ptr(0)
	return Assignable_Setter{Client: p.Interface().Client()}
}

func (s Assignable_asSetter_Results) HasSetter() bool {
	return s.Struct.HasPtr(0)
}

func (s Assignable_asSetter_Results) SetSetter(v Assignable_Setter) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Assignable_asSetter_Results_List is a list of Assignable_asSetter_Results.
type Assignable_asSetter_Results_List struct{ capnp.List }

// NewAssignable_asSetter_Results creates a new list of Assignable_asSetter_Results.
func NewAssignable_asSetter_Results_List(s *capnp.Segment, sz int32) (Assignable_asSetter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Assignable_asSetter_Results_List{l}, err
}

func (s Assignable_asSetter_Results_List) At(i int) Assignable_asSetter_Results {
	return Assignable_asSetter_Results{s.List.Struct(i)}
}

func (s Assignable_asSetter_Results_List) Set(i int, v Assignable_asSetter_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_asSetter_Results_List) String() string {
	str, _ := text.MarshalList(0xc6cbc10181c4f397, s.List)
	return str
}

// Assignable_asSetter_Results_Future is a wrapper for a Assignable_asSetter_Results promised by a client call.
type Assignable_asSetter_Results_Future struct{ *capnp.Future }

func (p Assignable_asSetter_Results_Future) Struct() (Assignable_asSetter_Results, error) {
	s, err := p.Future.Struct()
	return Assignable_asSetter_Results{s}, err
}

func (p Assignable_asSetter_Results_Future) Setter() Assignable_Setter {
	return Assignable_Setter{Client: p.Future.Field(0, nil).Client()}
}

type StaticAsset struct{ Client *capnp.Client }

// StaticAsset_TypeID is the unique identifier for the type StaticAsset.
const StaticAsset_TypeID = 0xfabb5e621fa9a23f

func (c StaticAsset) GetUrl(ctx context.Context, params func(StaticAsset_getUrl_Params) error) (StaticAsset_getUrl_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfabb5e621fa9a23f,
			MethodID:      0,
			InterfaceName: "util.capnp:StaticAsset",
			MethodName:    "getUrl",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StaticAsset_getUrl_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return StaticAsset_getUrl_Results_Future{Future: ans.Future()}, release
}

func (c StaticAsset) AddRef() StaticAsset {
	return StaticAsset{
		Client: c.Client.AddRef(),
	}
}

func (c StaticAsset) Release() {
	c.Client.Release()
}

// A StaticAsset_Server is a StaticAsset with a local implementation.
type StaticAsset_Server interface {
	GetUrl(context.Context, StaticAsset_getUrl) error
}

// StaticAsset_NewServer creates a new Server from an implementation of StaticAsset_Server.
func StaticAsset_NewServer(s StaticAsset_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(StaticAsset_Methods(nil, s), s, c, policy)
}

// StaticAsset_ServerToClient creates a new Client from an implementation of StaticAsset_Server.
// The caller is responsible for calling Release on the returned Client.
func StaticAsset_ServerToClient(s StaticAsset_Server, policy *server.Policy) StaticAsset {
	return StaticAsset{Client: capnp.NewClient(StaticAsset_NewServer(s, policy))}
}

// StaticAsset_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func StaticAsset_Methods(methods []server.Method, s StaticAsset_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfabb5e621fa9a23f,
			MethodID:      0,
			InterfaceName: "util.capnp:StaticAsset",
			MethodName:    "getUrl",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetUrl(ctx, StaticAsset_getUrl{call})
		},
	})

	return methods
}

// StaticAsset_getUrl holds the state for a server call to StaticAsset.getUrl.
// See server.Call for documentation.
type StaticAsset_getUrl struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StaticAsset_getUrl) Args() StaticAsset_getUrl_Params {
	return StaticAsset_getUrl_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c StaticAsset_getUrl) AllocResults() (StaticAsset_getUrl_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StaticAsset_getUrl_Results{Struct: r}, err
}

type StaticAsset_Protocol uint16

// StaticAsset_Protocol_TypeID is the unique identifier for the type StaticAsset_Protocol.
const StaticAsset_Protocol_TypeID = 0x9714437546d80c39

// Values of StaticAsset_Protocol.
const (
	StaticAsset_Protocol_https StaticAsset_Protocol = 0
	StaticAsset_Protocol_http  StaticAsset_Protocol = 1
)

// String returns the enum's constant name.
func (c StaticAsset_Protocol) String() string {
	switch c {
	case StaticAsset_Protocol_https:
		return "https"
	case StaticAsset_Protocol_http:
		return "http"

	default:
		return ""
	}
}

// StaticAsset_ProtocolFromString returns the enum value with a name,
// or the zero value if there's no such value.
func StaticAsset_ProtocolFromString(c string) StaticAsset_Protocol {
	switch c {
	case "https":
		return StaticAsset_Protocol_https
	case "http":
		return StaticAsset_Protocol_http

	default:
		return 0
	}
}

type StaticAsset_Protocol_List struct{ capnp.List }

func NewStaticAsset_Protocol_List(s *capnp.Segment, sz int32) (StaticAsset_Protocol_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return StaticAsset_Protocol_List{l.List}, err
}

func (l StaticAsset_Protocol_List) At(i int) StaticAsset_Protocol {
	ul := capnp.UInt16List{List: l.List}
	return StaticAsset_Protocol(ul.At(i))
}

func (l StaticAsset_Protocol_List) Set(i int, v StaticAsset_Protocol) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type StaticAsset_getUrl_Params struct{ capnp.Struct }

// StaticAsset_getUrl_Params_TypeID is the unique identifier for the type StaticAsset_getUrl_Params.
const StaticAsset_getUrl_Params_TypeID = 0xa75ecf12570b2966

func NewStaticAsset_getUrl_Params(s *capnp.Segment) (StaticAsset_getUrl_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StaticAsset_getUrl_Params{st}, err
}

func NewRootStaticAsset_getUrl_Params(s *capnp.Segment) (StaticAsset_getUrl_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StaticAsset_getUrl_Params{st}, err
}

func ReadRootStaticAsset_getUrl_Params(msg *capnp.Message) (StaticAsset_getUrl_Params, error) {
	root, err := msg.Root()
	return StaticAsset_getUrl_Params{root.Struct()}, err
}

func (s StaticAsset_getUrl_Params) String() string {
	str, _ := text.Marshal(0xa75ecf12570b2966, s.Struct)
	return str
}

// StaticAsset_getUrl_Params_List is a list of StaticAsset_getUrl_Params.
type StaticAsset_getUrl_Params_List struct{ capnp.List }

// NewStaticAsset_getUrl_Params creates a new list of StaticAsset_getUrl_Params.
func NewStaticAsset_getUrl_Params_List(s *capnp.Segment, sz int32) (StaticAsset_getUrl_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return StaticAsset_getUrl_Params_List{l}, err
}

func (s StaticAsset_getUrl_Params_List) At(i int) StaticAsset_getUrl_Params {
	return StaticAsset_getUrl_Params{s.List.Struct(i)}
}

func (s StaticAsset_getUrl_Params_List) Set(i int, v StaticAsset_getUrl_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s StaticAsset_getUrl_Params_List) String() string {
	str, _ := text.MarshalList(0xa75ecf12570b2966, s.List)
	return str
}

// StaticAsset_getUrl_Params_Future is a wrapper for a StaticAsset_getUrl_Params promised by a client call.
type StaticAsset_getUrl_Params_Future struct{ *capnp.Future }

func (p StaticAsset_getUrl_Params_Future) Struct() (StaticAsset_getUrl_Params, error) {
	s, err := p.Future.Struct()
	return StaticAsset_getUrl_Params{s}, err
}

type StaticAsset_getUrl_Results struct{ capnp.Struct }

// StaticAsset_getUrl_Results_TypeID is the unique identifier for the type StaticAsset_getUrl_Results.
const StaticAsset_getUrl_Results_TypeID = 0xa5c3aa75d6b648e2

func NewStaticAsset_getUrl_Results(s *capnp.Segment) (StaticAsset_getUrl_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StaticAsset_getUrl_Results{st}, err
}

func NewRootStaticAsset_getUrl_Results(s *capnp.Segment) (StaticAsset_getUrl_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StaticAsset_getUrl_Results{st}, err
}

func ReadRootStaticAsset_getUrl_Results(msg *capnp.Message) (StaticAsset_getUrl_Results, error) {
	root, err := msg.Root()
	return StaticAsset_getUrl_Results{root.Struct()}, err
}

func (s StaticAsset_getUrl_Results) String() string {
	str, _ := text.Marshal(0xa5c3aa75d6b648e2, s.Struct)
	return str
}

func (s StaticAsset_getUrl_Results) Protocol() StaticAsset_Protocol {
	return StaticAsset_Protocol(s.Struct.Uint16(0))
}

func (s StaticAsset_getUrl_Results) SetProtocol(v StaticAsset_Protocol) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s StaticAsset_getUrl_Results) HostPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s StaticAsset_getUrl_Results) HasHostPath() bool {
	return s.Struct.HasPtr(0)
}

func (s StaticAsset_getUrl_Results) HostPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s StaticAsset_getUrl_Results) SetHostPath(v string) error {
	return s.Struct.SetText(0, v)
}

// StaticAsset_getUrl_Results_List is a list of StaticAsset_getUrl_Results.
type StaticAsset_getUrl_Results_List struct{ capnp.List }

// NewStaticAsset_getUrl_Results creates a new list of StaticAsset_getUrl_Results.
func NewStaticAsset_getUrl_Results_List(s *capnp.Segment, sz int32) (StaticAsset_getUrl_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return StaticAsset_getUrl_Results_List{l}, err
}

func (s StaticAsset_getUrl_Results_List) At(i int) StaticAsset_getUrl_Results {
	return StaticAsset_getUrl_Results{s.List.Struct(i)}
}

func (s StaticAsset_getUrl_Results_List) Set(i int, v StaticAsset_getUrl_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s StaticAsset_getUrl_Results_List) String() string {
	str, _ := text.MarshalList(0xa5c3aa75d6b648e2, s.List)
	return str
}

// StaticAsset_getUrl_Results_Future is a wrapper for a StaticAsset_getUrl_Results promised by a client call.
type StaticAsset_getUrl_Results_Future struct{ *capnp.Future }

func (p StaticAsset_getUrl_Results_Future) Struct() (StaticAsset_getUrl_Results, error) {
	s, err := p.Future.Struct()
	return StaticAsset_getUrl_Results{s}, err
}

const schema_ecd50d792c3d9992 = "x\xda\xacX}l\x14\xd7\x11\x9f\xd9;g\xefc}" +
	"\xc7\xbbu\x83\x9c\xb6:\x19988\xf8\x8am\xa8\xb1" +
	"\x0b:\x9f\xab\xd4\xd8\x01qk\x9b\x0f5!xm/" +
	"\xe6\xc8\xd9\xe7\xdc\xee\xc5\xe0\x8a\xa6niQ\xdb\x90\x06" +
	"\x12j\xa0\x8a\x92\xa2\xa2\x88\xb8j\x0a\xf9\xa0i\x1a\xa9" +
	"i\xab \x9aRB\x11\x14D\x91\xd2\xb4\xa9d\xd44" +
	"\xadI\xa3\x96*\xda\xea\xbd\xdb\xb7\xbbg\xdf\x01N\xfb" +
	"\x0f:\xbc\xb3\xf3~3\xf3\x9b\xdf\x9b\xd9%k\xcbZ" +
	"\x85\xfa\xb2\xdf\x87\x01\x94\x9f\x94\xddfV\xb7]\xe8\xed" +
	"\xfep\xfa+@n\xf7\x98\x07\xf7.8\xf0\xe2\xba\xe9" +
	"\xab\x000\x0f\xe5\xb3\xe2U\xf9\x8a(\x02\xc8\x97\xc4\xdd" +
	"\xf2N\x9f\x08`\xde\xd7\xfb\xfc)\xe1_o\xef\x02\xf2" +
	"i\x04(Cq\x1e6j\xbe1\x04\x94\x1f\xf2\xc5\x01" +
	"\xcd\x1fo\x14\x16\x9fO\xde\xfd\x0d \x11\x04\xf0\xd2\xb7" +
	"\xf7\xfa\xa6\xc1kv\xbc\xf3\xa5\xa6\xec\x89M\xdf\x06\x12" +
	"Ds\xdf\xc1\x95\x8bw\x94\x9f\xff+\x94\x09\xd4\"\xe7" +
	"\xfb\xb5<\xee\x9b\x0f \xef\xf1\x8d\x02\x9a\xdf\x0d=1" +
	"\xfd\xe5\x9e\x95\x8f\x02\xb9\xdd>\x05\xfd-\xf4\x14\xbf\x9f" +
	"\x9erN=i<\xbc\xe2\xd0\xa3\xa0\xdc\x8e\xd61\x8d" +
	"+\xfdm\xd4\xe0\x1ef\xf0\xc1\x85k\x13\x15o\xaez" +
	"\x0c\x94y\xb6\x81\xe6\x17\xa8A\x8a\x19|\xeb\xc1KM" +
	"\xcd\x9b/3\x03\xc12\xf8f\xde`\x8f\x9fb\xd8\xb4" +
	"w2\x1a\xfb\xf0\xdd\xc7\x80\xcc\xe3\x81L\xf9\xaf\x83\xd7" +
	"\xac^zl\xf2\xcf\xe3\xcf<Y,\x90\xd3\xfe\xc3\xf2" +
	"y?\xfdu\x969i\x96.~!\xf7\xf9\x8a\x09 " +
	"\xf3\x053~\xf8h\xb4\xef\x81W\xaf\x03`c]@" +
	"@\xb99@-\x97\x05\x9a\x00\xcd\xe9L\xa4\xaa*\xf2" +
	"\xde\x84\x1d2@cs\xe0\x0e\x8a'\x11\xa0\x80\xf7-" +
	"\x8d,<\\\xf7\xfe\x84;\xf3j\xa0\x93\x1a\x0c1\x83" +
	"\xb3\xbbO\xec\xaeiz\xeb\x80\xdb`O\x80\xe5d?" +
	"3x\xbb\xad\xb7\xf7\x87\xd5\x1f\x1c\x00\x12\xf48\xc0\x01" +
	"\xe5\x97\x02\xfb\xe4\xd7\x18\x96W\x02\xed\xf2\x1f\xe9/\xf3" +
	"\xde\xdf\xfc\xe1\xe8T\xa5\xf8\xb4\x95@\x06H>\x15\xb8" +
	"\x0e(\x9f\x0e\xd0\xd0:^\xb8\xb6\xa1\xb17\xfaL\x1e" +
	"\xb0\x97\x9eV\x17l@\xf0\x9a{G?y\xe5\xb6\x1f" +
	"\xfd\xf3\x07@*\xd1);KP\xe3'\x82\x0d(\xdf" +
	"\x19\xa4\xce\xaa\x82\xd4\xcd;\xab^\xbe\x90{\xee\x97G" +
	"@\x99o\x9f\xd3\xb8\x93:B\xf9\xeb\xccb\xcb\xa2\xe0" +
	"\x86\xc8\x99\x07\x9e\x052\x9fWr*XK\x0f\xaaL" +
	"\xecZ\x7f\xee\xf2\xd3\xc7\xf2\x113\x08g\x83m\xf4\xc9" +
	"\xdamm\xa7\x9b^T^\xb0\xb2)\xd0G\xaf\x04#" +
	"\xd4\xe9\xeb\xcci\xdfz\xe5w/\xd5|\xf4\xaa\x0b}" +
	"\xbd\x14\xa0\xaf\x0e\x9f\xd8\xf8\xd9\x8e\x85\x15?\xe3O\x00" +
	"\x1a+\xa5\x08}\xb2\xfd\xf1\xe5u\x87\x9e\xbf\xff\x8d<" +
	"#\xf2H\x91\xbe\x84\xb2_\xa2\x09\x9e\xb8\xf6\xabq|" +
	"\xfd\xcd7\xdc\xb4]$1\xda\xd63\x83\xa9\xc9\xf4S" +
	"\x03\xda\xe8)Wsh\x12\xe5\xd4\xe6?\x9dY4\xba" +
	"|\xc3\xe9Y\xa5\xe9\x90\x8e\xcb\x8aD\x0d\xd7H'\xe5" +
	"S\xf4\x97Yy|\xc9\xdf\x96]\xba\xf8\x96\x0b\xe11" +
	"\xe9\x0e\x8a\xf03Om|\"\xbe\xed\xce\xf3E\x9a\xf9" +
	"\xa0tU>\xc2\x1c}_j\x97\xff\xc1\x1c\xb5>\xf7" +
	"\x8b\xcf\xbd\xd6U\x7f\xd9\x1d\xd0%\x89\xf5\xc0\x15\x86w" +
	"r\xf2/\xe7\x96\xbd\xfc\x9f\xcb\xae\x04\x7f$u\xd2\x93" +
	"\xbeS\xf9\xf8\xa6gk\x96\xbd;\x0b\xf0\x94\xf4U\xf9" +
	"=v\xce\x94tR\xd6\xca\xe996\x92Bc\x0ak" +
	"M\xf9qy]y\x0d\x80\x9c*?)\xab!QV" +
	"Ca\xf3\xe8oc\x07\xde\xffZ\xcd\xdf\xddT^\x17" +
	"\xcaR`j\x88\x02\xfb^\xbbR{\xb1c\xc35W" +
	"\x0a\xf6\x87\x18\xb03\x0b\xef\xde}\xdf\x93\xe2\xbf]\x85" +
	"\x1d\x0f1Z\xda\xed7\x13r*\xf4S\xf9\xa1\x10U" +
	"\x9f\x9d\xa1v\xf9HH\x84\x8df\xceH\xa5c\xfd\xea" +
	"\x880<\xd2\x92\xd0\xf5\xd4\xe0\xb0\xda\x97\xd6b\xedZ" +
	"\xd80\xb4l\x12Q\xf1y\xcah-,\x0a\"oO" +
	"R\xbf\x00 \xb1\x18\x13+\x90\xac\x11\x11\xedX\x90K" +
	"'It\x01$Z1\x91D\xa2\x8a\xe2\xa0f\x10\x8c" +
	"*^\x01\x9d<\xd1N(\xfa\xc7V4\xf5\\\x9f\xde" +
	"\x9fM\xf5\x01jsy/\x89h\x07\xe5\x9d\x19\x14\x8d" +
	")\xc6\x1dk\xd5]qM\xcf\xa5\x0d]\xf1z\xbc\x00" +
	"^\xea\xb4\xbc\x05@\xf1yP\xa9\x100\xbeU\x1d\x1e" +
	"HkH\x1cE\x01D\x02X\x90\xb5U\xcc(6\x92" +
	"\x1a\x1e\xacNF\xd5\xac:\xa4\x17<_\x9d\xe9W\xd3" +
	"\xa91m\xa0G\xdbn\x00(^D\x97r\xe06\xd3" +
	"2P!l\xa42\xc3\x8a\xcf\xc6\xb2\xa8\x0f@\xb9\xcb" +
	"\x83\xcaR\x01\x09b\x05\x8b\xba>\x0b\xa0,\xf1\xa0\xb2" +
	"Z@s@\xdb\xa2\xe6\xd2F\x0f\x88\xdav\x03%\x10" +
	"P\x024\xd3\xdca\x94:\xd41\x04\x98\xf4 \xces" +
	"\x8e\x05\xa4\x7f\xb4az\x0a\xf3\xa4\xea\xf9L\xdd0?" +
	"w\x09\x18\x1fdfH\x9c\xcb\x95V\xa0ha\x0a\xd2" +
	"F\xeb\xd2\xb6\xc3\xd0\xba\x8d\xac\xa6\x0e\xc5\xb4\xed#Z" +
	"\xbf\xd1\x9d\x1a\xd3\xaa\x93,\x7f\xe0>\xb0\xd6)HX" +
	"O\x8di\xe8\x07\x01\xfd3\xd0\xb7\xa53}\xb1A-" +
	"\xef\xa4+\x8f\xfa\x7f\xf0\x92N\xf5;X\\\x05\xa1\xc1" +
	"W{PYB\x0b\"\xe4\x0bRW\xebT)\x9e\xd9" +
	"\xb2E\xd7\x0c\xee<\x7f\x92\x0f\x04\xf4\xcd M\x01\xde" +
	"x\xb2\x9058<\xd2r\xaf\xb6c\xbd*\xa6sZ" +
	"\xbe\x05m\x04\x0b\xdc\x08,J\xd458\x08\xc4\x07\xb5" +
	"\x1d\x9c\x08\xd1\x87\xd5tN\xb3i\xe1\x8e\xb4\xdbP\x8d" +
	"T\x7fB\xd75#\x96\xccf\x8cL\x7f&\x0d\xec(" +
	":$\x10\xd2\xc0\x98\xee\xaf\x05\x88n5\x8c\x11=L" +
	"\xff-\xcc\x95S\xbf\xd1l\xca\xc8\xa7\xcb3\xa4\x97J" +
	"\xfa\x80j\xa8X\x0e\x02\x96\xc3\xcd\x1atP3\xec\x1a" +
	"\x16\x14\xb1\xc1\xf1g\xc5\x16At\xeb?FJ;\xef" +
	"\xb6\xba_3\x8a\xb1ln\xae\x91\xf7=\xb2\xfax\x99" +
	"D\xf2\x89\x10\xf9\xedGH-\x08\xa4L\x0cSm(" +
	"T&\x9b\x03,w=\x19\xce\x81\x12dc\x95F$" +
	"u\xb4\xf9\x17{PY.`\\g\xd9G\xe2\\\xaa" +
	"\x96:\xe9\x86\x9a5\x12\xc6Z\x88\x16\xb0\xb1t\xbb\xe7" +
	"S3K\xbd<3\xd5+f\xfd/\xaaRa\x99\xc1" +
	"\xcc\x96b\xcct\xf7\x06\x93%\x9b\x8ea\xc3-Y\xa5" +
	"\xb89\xa8\x19\xeb\xb2\xe9\xea.-\x9a\x17\"\xd7y\x9d" +
	"\x8ek[\x1b;-m\\!\xa09\xc2i\x0d\x80a" +
	"g@\x05\xc40\xa0\xb95\xa3\x1bI\xd5\xd8J\x9f\xde" +
	"\"\x88\xa4\x1a.H\x8f\xaf$y-~q\xc3B;" +
	"\x87\xddX\x10OC\xb1\xfc\xb5XA\xae\xba\x11-\xe3" +
	":\xd7a{.\xba5\x1d\xf6\xccFfA\x87R\xbd" +
	">\x90\x19\xb6\x94\x11\xf5\x1bhg\xd1\xf6\xbd\xa9\x1c\x94" +
	"\"\xe6\xcd\xee\xa1\x8f\x1b\xff\xcc\xeb\x9b\x9fS\xd0\xe7," +
	"\xf8(\x8b\x9e2^b\xbd\xce\xb7\x18\x1c>\xf6\xf3\xd1" +
	"\xc6C\x9b\x0f\x12\xa5\x01\x04r\x0f\x1d\x84\xf8`\x8d|" +
	"~%\xcdT\x07\xeaD\x14\xec}\x0e\xf9`G\xaa\xbe" +
	"\x08\x02\xa9\x14\xa3L\x08Z1L\x13\xdc\x8a&\xbf\x13" +
	"\xc13\xa6\x15JG\xb1\x82\xb0t{\x0c\xbd\xd48\xd7" +
	"\xed\x8csy\xad\xe2;\x14\xf2\xc9\x97\x10:\xceI\x98" +
	"\xf8\x14\x92:Q\xd4\xe76\xac\xcd\xc2\xe7\x96\xb6b\xd7" +
	"\xf1\x9c\xa6\xac\xd2Bn\xd3\xac\xb0b\xe9L\x1f8\xb5" +
	"\xe2\x0b.\xf2]\x99(m\xbcV|\xfbC\xbe\"\x90" +
	"\xe66^+\xbe9#\xdf\x87HU'\xab\xd5#\xd6" +
	"\xc5\xdd\x8a\x8fX1\xb6\xa2\xc9\xa9\x0f3\xf3\x81\x1c}" +
	"\x94\xc1W|\x88\xae\x8f\x11\xfe\x16\xd72S\xd6\x12\xcf" +
	"\xabH<\x1f\xa3\x15\x00\xdf\xe1\x90o{D\xa1\xc5Z" +
	"\x8d\x89\xfb\x91\x0c\xd10\xf82\x80\xfc\x83\x02Q;\x01" +
	"\x12\xbd\x98\x18A2N\x83\xe1[,\xf2\xdd\x8d\xe4\xa8" +
	"\x85\x81\x89]H\xf6\xcf}:\xe73\"\x940)\xfd" +
	"^\xf7\xc7y/\x89\x98\xf0\"\xc1\x08\xf6\xdc\xf2to" +
	"]g\xffo\xd1(=\xbc\xcefc\xa9\xc1z\xe6M" +
	"\x8b\xfc\xc6\x89\xe7\xaf\x1c\xb6$8\xdfT\xb0\xd3L:" +
	"\xb7\x99\xd5\xc2\xfcs\x01\xf2/\x0b\x84\xb4\xb0q#\x9e" +
	"\xbf\xafX\xd2\xfe\x1b\x00\x00\xff\xff\xf9~a\x09"

func init() {
	schemas.Register(schema_ecd50d792c3d9992,
		0x80f2f65360d64224,
		0x84e0f802c9af605b,
		0x862b50d52c0258b0,
		0x8b5db772377be249,
		0x8c3d547ef2930e96,
		0x8c9a3c7674c761d3,
		0x8e48cb1497f3d6f4,
		0x8edb5f3937d96b8a,
		0x8ee5f62e1fab915d,
		0x94a081e4abb13424,
		0x9714437546d80c39,
		0x97ed122121126ff2,
		0x97ef2da226123492,
		0x98d0372787b787d1,
		0x98f424ac606042e0,
		0x9f0719e9a9dccc4b,
		0xa01f603357f3b349,
		0xa4f5ae06dd1b7791,
		0xa5c3aa75d6b648e2,
		0xa75ecf12570b2966,
		0xb19fdbd356844119,
		0xb351b437cd426a4f,
		0xbbfd27b5d2515662,
		0xbc1426493658b76e,
		0xc65caf9a2d389078,
		0xc6cbc10181c4f397,
		0xc97765649d6cabe9,
		0xcd57387729cfe35f,
		0xd0d8d935ee30b219,
		0xd5256a3f93589d2f,
		0xdb3152bd3bc2aa40,
		0xdbfbb635d3e6abab,
		0xe53527a75d90198f,
		0xeaf255b498229199,
		0xf02783ef982ecea9,
		0xf35749d82a51479b,
		0xf907945b872b26cf,
		0xfabb5e621fa9a23f)
}
