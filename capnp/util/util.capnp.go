// Code generated by capnpc-go. DO NOT EDIT.

package util

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type KeyValue struct{ capnp.Struct }

// KeyValue_TypeID is the unique identifier for the type KeyValue.
const KeyValue_TypeID = 0x94a081e4abb13424

func NewKeyValue(s *capnp.Segment) (KeyValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return KeyValue{st}, err
}

func NewRootKeyValue(s *capnp.Segment) (KeyValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return KeyValue{st}, err
}

func ReadRootKeyValue(msg *capnp.Message) (KeyValue, error) {
	root, err := msg.Root()
	return KeyValue{root.Struct()}, err
}

func (s KeyValue) String() string {
	str, _ := text.Marshal(0x94a081e4abb13424, s.Struct)
	return str
}

func (s KeyValue) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s KeyValue) HasKey() bool {
	return s.Struct.HasPtr(0)
}

func (s KeyValue) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s KeyValue) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s KeyValue) Value() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s KeyValue) HasValue() bool {
	return s.Struct.HasPtr(1)
}

func (s KeyValue) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s KeyValue) SetValue(v string) error {
	return s.Struct.SetText(1, v)
}

// KeyValue_List is a list of KeyValue.
type KeyValue_List struct{ capnp.List }

// NewKeyValue creates a new list of KeyValue.
func NewKeyValue_List(s *capnp.Segment, sz int32) (KeyValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return KeyValue_List{l}, err
}

func (s KeyValue_List) At(i int) KeyValue { return KeyValue{s.List.Struct(i)} }

func (s KeyValue_List) Set(i int, v KeyValue) error { return s.List.SetStruct(i, v.Struct) }

func (s KeyValue_List) String() string {
	str, _ := text.MarshalList(0x94a081e4abb13424, s.List)
	return str
}

// KeyValue_Future is a wrapper for a KeyValue promised by a client call.
type KeyValue_Future struct{ *capnp.Future }

func (p KeyValue_Future) Struct() (KeyValue, error) {
	s, err := p.Future.Struct()
	return KeyValue{s}, err
}

type LocalizedText struct{ capnp.Struct }

// LocalizedText_TypeID is the unique identifier for the type LocalizedText.
const LocalizedText_TypeID = 0x8b5db772377be249

func NewLocalizedText(s *capnp.Segment) (LocalizedText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LocalizedText{st}, err
}

func NewRootLocalizedText(s *capnp.Segment) (LocalizedText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LocalizedText{st}, err
}

func ReadRootLocalizedText(msg *capnp.Message) (LocalizedText, error) {
	root, err := msg.Root()
	return LocalizedText{root.Struct()}, err
}

func (s LocalizedText) String() string {
	str, _ := text.Marshal(0x8b5db772377be249, s.Struct)
	return str
}

func (s LocalizedText) DefaultText() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s LocalizedText) HasDefaultText() bool {
	return s.Struct.HasPtr(0)
}

func (s LocalizedText) DefaultTextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s LocalizedText) SetDefaultText(v string) error {
	return s.Struct.SetText(0, v)
}

func (s LocalizedText) Localizations() (LocalizedText_Localization_List, error) {
	p, err := s.Struct.Ptr(1)
	return LocalizedText_Localization_List{List: p.List()}, err
}

func (s LocalizedText) HasLocalizations() bool {
	return s.Struct.HasPtr(1)
}

func (s LocalizedText) SetLocalizations(v LocalizedText_Localization_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewLocalizations sets the localizations field to a newly
// allocated LocalizedText_Localization_List, preferring placement in s's segment.
func (s LocalizedText) NewLocalizations(n int32) (LocalizedText_Localization_List, error) {
	l, err := NewLocalizedText_Localization_List(s.Struct.Segment(), n)
	if err != nil {
		return LocalizedText_Localization_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// LocalizedText_List is a list of LocalizedText.
type LocalizedText_List struct{ capnp.List }

// NewLocalizedText creates a new list of LocalizedText.
func NewLocalizedText_List(s *capnp.Segment, sz int32) (LocalizedText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return LocalizedText_List{l}, err
}

func (s LocalizedText_List) At(i int) LocalizedText { return LocalizedText{s.List.Struct(i)} }

func (s LocalizedText_List) Set(i int, v LocalizedText) error { return s.List.SetStruct(i, v.Struct) }

func (s LocalizedText_List) String() string {
	str, _ := text.MarshalList(0x8b5db772377be249, s.List)
	return str
}

// LocalizedText_Future is a wrapper for a LocalizedText promised by a client call.
type LocalizedText_Future struct{ *capnp.Future }

func (p LocalizedText_Future) Struct() (LocalizedText, error) {
	s, err := p.Future.Struct()
	return LocalizedText{s}, err
}

type LocalizedText_Localization struct{ capnp.Struct }

// LocalizedText_Localization_TypeID is the unique identifier for the type LocalizedText_Localization.
const LocalizedText_Localization_TypeID = 0xa4f5ae06dd1b7791

func NewLocalizedText_Localization(s *capnp.Segment) (LocalizedText_Localization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LocalizedText_Localization{st}, err
}

func NewRootLocalizedText_Localization(s *capnp.Segment) (LocalizedText_Localization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LocalizedText_Localization{st}, err
}

func ReadRootLocalizedText_Localization(msg *capnp.Message) (LocalizedText_Localization, error) {
	root, err := msg.Root()
	return LocalizedText_Localization{root.Struct()}, err
}

func (s LocalizedText_Localization) String() string {
	str, _ := text.Marshal(0xa4f5ae06dd1b7791, s.Struct)
	return str
}

func (s LocalizedText_Localization) Locale() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s LocalizedText_Localization) HasLocale() bool {
	return s.Struct.HasPtr(0)
}

func (s LocalizedText_Localization) LocaleBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s LocalizedText_Localization) SetLocale(v string) error {
	return s.Struct.SetText(0, v)
}

func (s LocalizedText_Localization) Text() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s LocalizedText_Localization) HasText() bool {
	return s.Struct.HasPtr(1)
}

func (s LocalizedText_Localization) TextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s LocalizedText_Localization) SetText(v string) error {
	return s.Struct.SetText(1, v)
}

// LocalizedText_Localization_List is a list of LocalizedText_Localization.
type LocalizedText_Localization_List struct{ capnp.List }

// NewLocalizedText_Localization creates a new list of LocalizedText_Localization.
func NewLocalizedText_Localization_List(s *capnp.Segment, sz int32) (LocalizedText_Localization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return LocalizedText_Localization_List{l}, err
}

func (s LocalizedText_Localization_List) At(i int) LocalizedText_Localization {
	return LocalizedText_Localization{s.List.Struct(i)}
}

func (s LocalizedText_Localization_List) Set(i int, v LocalizedText_Localization) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LocalizedText_Localization_List) String() string {
	str, _ := text.MarshalList(0xa4f5ae06dd1b7791, s.List)
	return str
}

// LocalizedText_Localization_Future is a wrapper for a LocalizedText_Localization promised by a client call.
type LocalizedText_Localization_Future struct{ *capnp.Future }

func (p LocalizedText_Localization_Future) Struct() (LocalizedText_Localization, error) {
	s, err := p.Future.Struct()
	return LocalizedText_Localization{s}, err
}

type Handle struct{ Client *capnp.Client }

// Handle_TypeID is the unique identifier for the type Handle.
const Handle_TypeID = 0x98f424ac606042e0

func (c Handle) Ping(ctx context.Context, params func(Handle_ping_Params) error) (Handle_ping_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x98f424ac606042e0,
			MethodID:      0,
			InterfaceName: "util.capnp:Handle",
			MethodName:    "ping",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Handle_ping_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Handle_ping_Results_Future{Future: ans.Future()}, release
}

func (c Handle) AddRef() Handle {
	return Handle{
		Client: c.Client.AddRef(),
	}
}

func (c Handle) Release() {
	c.Client.Release()
}

// A Handle_Server is a Handle with a local implementation.
type Handle_Server interface {
	Ping(context.Context, Handle_ping) error
}

// Handle_NewServer creates a new Server from an implementation of Handle_Server.
func Handle_NewServer(s Handle_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Handle_Methods(nil, s), s, c, policy)
}

// Handle_ServerToClient creates a new Client from an implementation of Handle_Server.
// The caller is responsible for calling Release on the returned Client.
func Handle_ServerToClient(s Handle_Server, policy *server.Policy) Handle {
	return Handle{Client: capnp.NewClient(Handle_NewServer(s, policy))}
}

// Handle_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Handle_Methods(methods []server.Method, s Handle_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x98f424ac606042e0,
			MethodID:      0,
			InterfaceName: "util.capnp:Handle",
			MethodName:    "ping",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ping(ctx, Handle_ping{call})
		},
	})

	return methods
}

// Handle_ping holds the state for a server call to Handle.ping.
// See server.Call for documentation.
type Handle_ping struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Handle_ping) Args() Handle_ping_Params {
	return Handle_ping_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Handle_ping) AllocResults() (Handle_ping_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Handle_ping_Results{Struct: r}, err
}

type Handle_ping_Params struct{ capnp.Struct }

// Handle_ping_Params_TypeID is the unique identifier for the type Handle_ping_Params.
const Handle_ping_Params_TypeID = 0x862b50d52c0258b0

func NewHandle_ping_Params(s *capnp.Segment) (Handle_ping_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Handle_ping_Params{st}, err
}

func NewRootHandle_ping_Params(s *capnp.Segment) (Handle_ping_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Handle_ping_Params{st}, err
}

func ReadRootHandle_ping_Params(msg *capnp.Message) (Handle_ping_Params, error) {
	root, err := msg.Root()
	return Handle_ping_Params{root.Struct()}, err
}

func (s Handle_ping_Params) String() string {
	str, _ := text.Marshal(0x862b50d52c0258b0, s.Struct)
	return str
}

// Handle_ping_Params_List is a list of Handle_ping_Params.
type Handle_ping_Params_List struct{ capnp.List }

// NewHandle_ping_Params creates a new list of Handle_ping_Params.
func NewHandle_ping_Params_List(s *capnp.Segment, sz int32) (Handle_ping_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Handle_ping_Params_List{l}, err
}

func (s Handle_ping_Params_List) At(i int) Handle_ping_Params {
	return Handle_ping_Params{s.List.Struct(i)}
}

func (s Handle_ping_Params_List) Set(i int, v Handle_ping_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Handle_ping_Params_List) String() string {
	str, _ := text.MarshalList(0x862b50d52c0258b0, s.List)
	return str
}

// Handle_ping_Params_Future is a wrapper for a Handle_ping_Params promised by a client call.
type Handle_ping_Params_Future struct{ *capnp.Future }

func (p Handle_ping_Params_Future) Struct() (Handle_ping_Params, error) {
	s, err := p.Future.Struct()
	return Handle_ping_Params{s}, err
}

type Handle_ping_Results struct{ capnp.Struct }

// Handle_ping_Results_TypeID is the unique identifier for the type Handle_ping_Results.
const Handle_ping_Results_TypeID = 0xc97765649d6cabe9

func NewHandle_ping_Results(s *capnp.Segment) (Handle_ping_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Handle_ping_Results{st}, err
}

func NewRootHandle_ping_Results(s *capnp.Segment) (Handle_ping_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Handle_ping_Results{st}, err
}

func ReadRootHandle_ping_Results(msg *capnp.Message) (Handle_ping_Results, error) {
	root, err := msg.Root()
	return Handle_ping_Results{root.Struct()}, err
}

func (s Handle_ping_Results) String() string {
	str, _ := text.Marshal(0xc97765649d6cabe9, s.Struct)
	return str
}

// Handle_ping_Results_List is a list of Handle_ping_Results.
type Handle_ping_Results_List struct{ capnp.List }

// NewHandle_ping_Results creates a new list of Handle_ping_Results.
func NewHandle_ping_Results_List(s *capnp.Segment, sz int32) (Handle_ping_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Handle_ping_Results_List{l}, err
}

func (s Handle_ping_Results_List) At(i int) Handle_ping_Results {
	return Handle_ping_Results{s.List.Struct(i)}
}

func (s Handle_ping_Results_List) Set(i int, v Handle_ping_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Handle_ping_Results_List) String() string {
	str, _ := text.MarshalList(0xc97765649d6cabe9, s.List)
	return str
}

// Handle_ping_Results_Future is a wrapper for a Handle_ping_Results promised by a client call.
type Handle_ping_Results_Future struct{ *capnp.Future }

func (p Handle_ping_Results_Future) Struct() (Handle_ping_Results, error) {
	s, err := p.Future.Struct()
	return Handle_ping_Results{s}, err
}

type ByteStream struct{ Client *capnp.Client }

// ByteStream_TypeID is the unique identifier for the type ByteStream.
const ByteStream_TypeID = 0xcd57387729cfe35f

func (c ByteStream) Write(ctx context.Context, params func(ByteStream_write_Params) error) (ByteStream_write_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      0,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStream_write_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ByteStream_write_Results_Future{Future: ans.Future()}, release
}
func (c ByteStream) Done(ctx context.Context, params func(ByteStream_done_Params) error) (ByteStream_done_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      1,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "done",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStream_done_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ByteStream_done_Results_Future{Future: ans.Future()}, release
}
func (c ByteStream) ExpectSize(ctx context.Context, params func(ByteStream_expectSize_Params) error) (ByteStream_expectSize_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      2,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "expectSize",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStream_expectSize_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ByteStream_expectSize_Results_Future{Future: ans.Future()}, release
}

func (c ByteStream) AddRef() ByteStream {
	return ByteStream{
		Client: c.Client.AddRef(),
	}
}

func (c ByteStream) Release() {
	c.Client.Release()
}

// A ByteStream_Server is a ByteStream with a local implementation.
type ByteStream_Server interface {
	Write(context.Context, ByteStream_write) error

	Done(context.Context, ByteStream_done) error

	ExpectSize(context.Context, ByteStream_expectSize) error
}

// ByteStream_NewServer creates a new Server from an implementation of ByteStream_Server.
func ByteStream_NewServer(s ByteStream_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ByteStream_Methods(nil, s), s, c, policy)
}

// ByteStream_ServerToClient creates a new Client from an implementation of ByteStream_Server.
// The caller is responsible for calling Release on the returned Client.
func ByteStream_ServerToClient(s ByteStream_Server, policy *server.Policy) ByteStream {
	return ByteStream{Client: capnp.NewClient(ByteStream_NewServer(s, policy))}
}

// ByteStream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ByteStream_Methods(methods []server.Method, s ByteStream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      0,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, ByteStream_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      1,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "done",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Done(ctx, ByteStream_done{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      2,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "expectSize",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ExpectSize(ctx, ByteStream_expectSize{call})
		},
	})

	return methods
}

// ByteStream_write holds the state for a server call to ByteStream.write.
// See server.Call for documentation.
type ByteStream_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStream_write) Args() ByteStream_write_Params {
	return ByteStream_write_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ByteStream_write) AllocResults() (ByteStream_write_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_write_Results{Struct: r}, err
}

// ByteStream_done holds the state for a server call to ByteStream.done.
// See server.Call for documentation.
type ByteStream_done struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStream_done) Args() ByteStream_done_Params {
	return ByteStream_done_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ByteStream_done) AllocResults() (ByteStream_done_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Results{Struct: r}, err
}

// ByteStream_expectSize holds the state for a server call to ByteStream.expectSize.
// See server.Call for documentation.
type ByteStream_expectSize struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStream_expectSize) Args() ByteStream_expectSize_Params {
	return ByteStream_expectSize_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ByteStream_expectSize) AllocResults() (ByteStream_expectSize_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_expectSize_Results{Struct: r}, err
}

type ByteStream_write_Params struct{ capnp.Struct }

// ByteStream_write_Params_TypeID is the unique identifier for the type ByteStream_write_Params.
const ByteStream_write_Params_TypeID = 0x97ed122121126ff2

func NewByteStream_write_Params(s *capnp.Segment) (ByteStream_write_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_write_Params{st}, err
}

func NewRootByteStream_write_Params(s *capnp.Segment) (ByteStream_write_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_write_Params{st}, err
}

func ReadRootByteStream_write_Params(msg *capnp.Message) (ByteStream_write_Params, error) {
	root, err := msg.Root()
	return ByteStream_write_Params{root.Struct()}, err
}

func (s ByteStream_write_Params) String() string {
	str, _ := text.Marshal(0x97ed122121126ff2, s.Struct)
	return str
}

func (s ByteStream_write_Params) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ByteStream_write_Params) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s ByteStream_write_Params) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ByteStream_write_Params_List is a list of ByteStream_write_Params.
type ByteStream_write_Params_List struct{ capnp.List }

// NewByteStream_write_Params creates a new list of ByteStream_write_Params.
func NewByteStream_write_Params_List(s *capnp.Segment, sz int32) (ByteStream_write_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ByteStream_write_Params_List{l}, err
}

func (s ByteStream_write_Params_List) At(i int) ByteStream_write_Params {
	return ByteStream_write_Params{s.List.Struct(i)}
}

func (s ByteStream_write_Params_List) Set(i int, v ByteStream_write_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ByteStream_write_Params_List) String() string {
	str, _ := text.MarshalList(0x97ed122121126ff2, s.List)
	return str
}

// ByteStream_write_Params_Future is a wrapper for a ByteStream_write_Params promised by a client call.
type ByteStream_write_Params_Future struct{ *capnp.Future }

func (p ByteStream_write_Params_Future) Struct() (ByteStream_write_Params, error) {
	s, err := p.Future.Struct()
	return ByteStream_write_Params{s}, err
}

type ByteStream_write_Results struct{ capnp.Struct }

// ByteStream_write_Results_TypeID is the unique identifier for the type ByteStream_write_Results.
const ByteStream_write_Results_TypeID = 0xecde2a9c6f3f84c9

func NewByteStream_write_Results(s *capnp.Segment) (ByteStream_write_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_write_Results{st}, err
}

func NewRootByteStream_write_Results(s *capnp.Segment) (ByteStream_write_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_write_Results{st}, err
}

func ReadRootByteStream_write_Results(msg *capnp.Message) (ByteStream_write_Results, error) {
	root, err := msg.Root()
	return ByteStream_write_Results{root.Struct()}, err
}

func (s ByteStream_write_Results) String() string {
	str, _ := text.Marshal(0xecde2a9c6f3f84c9, s.Struct)
	return str
}

// ByteStream_write_Results_List is a list of ByteStream_write_Results.
type ByteStream_write_Results_List struct{ capnp.List }

// NewByteStream_write_Results creates a new list of ByteStream_write_Results.
func NewByteStream_write_Results_List(s *capnp.Segment, sz int32) (ByteStream_write_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ByteStream_write_Results_List{l}, err
}

func (s ByteStream_write_Results_List) At(i int) ByteStream_write_Results {
	return ByteStream_write_Results{s.List.Struct(i)}
}

func (s ByteStream_write_Results_List) Set(i int, v ByteStream_write_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ByteStream_write_Results_List) String() string {
	str, _ := text.MarshalList(0xecde2a9c6f3f84c9, s.List)
	return str
}

// ByteStream_write_Results_Future is a wrapper for a ByteStream_write_Results promised by a client call.
type ByteStream_write_Results_Future struct{ *capnp.Future }

func (p ByteStream_write_Results_Future) Struct() (ByteStream_write_Results, error) {
	s, err := p.Future.Struct()
	return ByteStream_write_Results{s}, err
}

type ByteStream_done_Params struct{ capnp.Struct }

// ByteStream_done_Params_TypeID is the unique identifier for the type ByteStream_done_Params.
const ByteStream_done_Params_TypeID = 0xbc1426493658b76e

func NewByteStream_done_Params(s *capnp.Segment) (ByteStream_done_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Params{st}, err
}

func NewRootByteStream_done_Params(s *capnp.Segment) (ByteStream_done_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Params{st}, err
}

func ReadRootByteStream_done_Params(msg *capnp.Message) (ByteStream_done_Params, error) {
	root, err := msg.Root()
	return ByteStream_done_Params{root.Struct()}, err
}

func (s ByteStream_done_Params) String() string {
	str, _ := text.Marshal(0xbc1426493658b76e, s.Struct)
	return str
}

// ByteStream_done_Params_List is a list of ByteStream_done_Params.
type ByteStream_done_Params_List struct{ capnp.List }

// NewByteStream_done_Params creates a new list of ByteStream_done_Params.
func NewByteStream_done_Params_List(s *capnp.Segment, sz int32) (ByteStream_done_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ByteStream_done_Params_List{l}, err
}

func (s ByteStream_done_Params_List) At(i int) ByteStream_done_Params {
	return ByteStream_done_Params{s.List.Struct(i)}
}

func (s ByteStream_done_Params_List) Set(i int, v ByteStream_done_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ByteStream_done_Params_List) String() string {
	str, _ := text.MarshalList(0xbc1426493658b76e, s.List)
	return str
}

// ByteStream_done_Params_Future is a wrapper for a ByteStream_done_Params promised by a client call.
type ByteStream_done_Params_Future struct{ *capnp.Future }

func (p ByteStream_done_Params_Future) Struct() (ByteStream_done_Params, error) {
	s, err := p.Future.Struct()
	return ByteStream_done_Params{s}, err
}

type ByteStream_done_Results struct{ capnp.Struct }

// ByteStream_done_Results_TypeID is the unique identifier for the type ByteStream_done_Results.
const ByteStream_done_Results_TypeID = 0xd0d8d935ee30b219

func NewByteStream_done_Results(s *capnp.Segment) (ByteStream_done_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Results{st}, err
}

func NewRootByteStream_done_Results(s *capnp.Segment) (ByteStream_done_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Results{st}, err
}

func ReadRootByteStream_done_Results(msg *capnp.Message) (ByteStream_done_Results, error) {
	root, err := msg.Root()
	return ByteStream_done_Results{root.Struct()}, err
}

func (s ByteStream_done_Results) String() string {
	str, _ := text.Marshal(0xd0d8d935ee30b219, s.Struct)
	return str
}

// ByteStream_done_Results_List is a list of ByteStream_done_Results.
type ByteStream_done_Results_List struct{ capnp.List }

// NewByteStream_done_Results creates a new list of ByteStream_done_Results.
func NewByteStream_done_Results_List(s *capnp.Segment, sz int32) (ByteStream_done_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ByteStream_done_Results_List{l}, err
}

func (s ByteStream_done_Results_List) At(i int) ByteStream_done_Results {
	return ByteStream_done_Results{s.List.Struct(i)}
}

func (s ByteStream_done_Results_List) Set(i int, v ByteStream_done_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ByteStream_done_Results_List) String() string {
	str, _ := text.MarshalList(0xd0d8d935ee30b219, s.List)
	return str
}

// ByteStream_done_Results_Future is a wrapper for a ByteStream_done_Results promised by a client call.
type ByteStream_done_Results_Future struct{ *capnp.Future }

func (p ByteStream_done_Results_Future) Struct() (ByteStream_done_Results, error) {
	s, err := p.Future.Struct()
	return ByteStream_done_Results{s}, err
}

type ByteStream_expectSize_Params struct{ capnp.Struct }

// ByteStream_expectSize_Params_TypeID is the unique identifier for the type ByteStream_expectSize_Params.
const ByteStream_expectSize_Params_TypeID = 0x8c9a3c7674c761d3

func NewByteStream_expectSize_Params(s *capnp.Segment) (ByteStream_expectSize_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ByteStream_expectSize_Params{st}, err
}

func NewRootByteStream_expectSize_Params(s *capnp.Segment) (ByteStream_expectSize_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ByteStream_expectSize_Params{st}, err
}

func ReadRootByteStream_expectSize_Params(msg *capnp.Message) (ByteStream_expectSize_Params, error) {
	root, err := msg.Root()
	return ByteStream_expectSize_Params{root.Struct()}, err
}

func (s ByteStream_expectSize_Params) String() string {
	str, _ := text.Marshal(0x8c9a3c7674c761d3, s.Struct)
	return str
}

func (s ByteStream_expectSize_Params) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s ByteStream_expectSize_Params) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

// ByteStream_expectSize_Params_List is a list of ByteStream_expectSize_Params.
type ByteStream_expectSize_Params_List struct{ capnp.List }

// NewByteStream_expectSize_Params creates a new list of ByteStream_expectSize_Params.
func NewByteStream_expectSize_Params_List(s *capnp.Segment, sz int32) (ByteStream_expectSize_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return ByteStream_expectSize_Params_List{l}, err
}

func (s ByteStream_expectSize_Params_List) At(i int) ByteStream_expectSize_Params {
	return ByteStream_expectSize_Params{s.List.Struct(i)}
}

func (s ByteStream_expectSize_Params_List) Set(i int, v ByteStream_expectSize_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ByteStream_expectSize_Params_List) String() string {
	str, _ := text.MarshalList(0x8c9a3c7674c761d3, s.List)
	return str
}

// ByteStream_expectSize_Params_Future is a wrapper for a ByteStream_expectSize_Params promised by a client call.
type ByteStream_expectSize_Params_Future struct{ *capnp.Future }

func (p ByteStream_expectSize_Params_Future) Struct() (ByteStream_expectSize_Params, error) {
	s, err := p.Future.Struct()
	return ByteStream_expectSize_Params{s}, err
}

type ByteStream_expectSize_Results struct{ capnp.Struct }

// ByteStream_expectSize_Results_TypeID is the unique identifier for the type ByteStream_expectSize_Results.
const ByteStream_expectSize_Results_TypeID = 0xf35749d82a51479b

func NewByteStream_expectSize_Results(s *capnp.Segment) (ByteStream_expectSize_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_expectSize_Results{st}, err
}

func NewRootByteStream_expectSize_Results(s *capnp.Segment) (ByteStream_expectSize_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_expectSize_Results{st}, err
}

func ReadRootByteStream_expectSize_Results(msg *capnp.Message) (ByteStream_expectSize_Results, error) {
	root, err := msg.Root()
	return ByteStream_expectSize_Results{root.Struct()}, err
}

func (s ByteStream_expectSize_Results) String() string {
	str, _ := text.Marshal(0xf35749d82a51479b, s.Struct)
	return str
}

// ByteStream_expectSize_Results_List is a list of ByteStream_expectSize_Results.
type ByteStream_expectSize_Results_List struct{ capnp.List }

// NewByteStream_expectSize_Results creates a new list of ByteStream_expectSize_Results.
func NewByteStream_expectSize_Results_List(s *capnp.Segment, sz int32) (ByteStream_expectSize_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ByteStream_expectSize_Results_List{l}, err
}

func (s ByteStream_expectSize_Results_List) At(i int) ByteStream_expectSize_Results {
	return ByteStream_expectSize_Results{s.List.Struct(i)}
}

func (s ByteStream_expectSize_Results_List) Set(i int, v ByteStream_expectSize_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ByteStream_expectSize_Results_List) String() string {
	str, _ := text.MarshalList(0xf35749d82a51479b, s.List)
	return str
}

// ByteStream_expectSize_Results_Future is a wrapper for a ByteStream_expectSize_Results promised by a client call.
type ByteStream_expectSize_Results_Future struct{ *capnp.Future }

func (p ByteStream_expectSize_Results_Future) Struct() (ByteStream_expectSize_Results, error) {
	s, err := p.Future.Struct()
	return ByteStream_expectSize_Results{s}, err
}

type Blob struct{ Client *capnp.Client }

// Blob_TypeID is the unique identifier for the type Blob.
const Blob_TypeID = 0xe53527a75d90198f

func (c Blob) GetSize(ctx context.Context, params func(Blob_getSize_Params) error) (Blob_getSize_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe53527a75d90198f,
			MethodID:      0,
			InterfaceName: "util.capnp:Blob",
			MethodName:    "getSize",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Blob_getSize_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Blob_getSize_Results_Future{Future: ans.Future()}, release
}
func (c Blob) WriteTo(ctx context.Context, params func(Blob_writeTo_Params) error) (Blob_writeTo_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe53527a75d90198f,
			MethodID:      1,
			InterfaceName: "util.capnp:Blob",
			MethodName:    "writeTo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Blob_writeTo_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Blob_writeTo_Results_Future{Future: ans.Future()}, release
}
func (c Blob) GetSlice(ctx context.Context, params func(Blob_getSlice_Params) error) (Blob_getSlice_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe53527a75d90198f,
			MethodID:      2,
			InterfaceName: "util.capnp:Blob",
			MethodName:    "getSlice",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Blob_getSlice_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Blob_getSlice_Results_Future{Future: ans.Future()}, release
}

func (c Blob) AddRef() Blob {
	return Blob{
		Client: c.Client.AddRef(),
	}
}

func (c Blob) Release() {
	c.Client.Release()
}

// A Blob_Server is a Blob with a local implementation.
type Blob_Server interface {
	GetSize(context.Context, Blob_getSize) error

	WriteTo(context.Context, Blob_writeTo) error

	GetSlice(context.Context, Blob_getSlice) error
}

// Blob_NewServer creates a new Server from an implementation of Blob_Server.
func Blob_NewServer(s Blob_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Blob_Methods(nil, s), s, c, policy)
}

// Blob_ServerToClient creates a new Client from an implementation of Blob_Server.
// The caller is responsible for calling Release on the returned Client.
func Blob_ServerToClient(s Blob_Server, policy *server.Policy) Blob {
	return Blob{Client: capnp.NewClient(Blob_NewServer(s, policy))}
}

// Blob_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Blob_Methods(methods []server.Method, s Blob_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe53527a75d90198f,
			MethodID:      0,
			InterfaceName: "util.capnp:Blob",
			MethodName:    "getSize",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetSize(ctx, Blob_getSize{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe53527a75d90198f,
			MethodID:      1,
			InterfaceName: "util.capnp:Blob",
			MethodName:    "writeTo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.WriteTo(ctx, Blob_writeTo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe53527a75d90198f,
			MethodID:      2,
			InterfaceName: "util.capnp:Blob",
			MethodName:    "getSlice",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetSlice(ctx, Blob_getSlice{call})
		},
	})

	return methods
}

// Blob_getSize holds the state for a server call to Blob.getSize.
// See server.Call for documentation.
type Blob_getSize struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Blob_getSize) Args() Blob_getSize_Params {
	return Blob_getSize_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Blob_getSize) AllocResults() (Blob_getSize_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Blob_getSize_Results{Struct: r}, err
}

// Blob_writeTo holds the state for a server call to Blob.writeTo.
// See server.Call for documentation.
type Blob_writeTo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Blob_writeTo) Args() Blob_writeTo_Params {
	return Blob_writeTo_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Blob_writeTo) AllocResults() (Blob_writeTo_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Blob_writeTo_Results{Struct: r}, err
}

// Blob_getSlice holds the state for a server call to Blob.getSlice.
// See server.Call for documentation.
type Blob_getSlice struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Blob_getSlice) Args() Blob_getSlice_Params {
	return Blob_getSlice_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Blob_getSlice) AllocResults() (Blob_getSlice_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Blob_getSlice_Results{Struct: r}, err
}

type Blob_getSize_Params struct{ capnp.Struct }

// Blob_getSize_Params_TypeID is the unique identifier for the type Blob_getSize_Params.
const Blob_getSize_Params_TypeID = 0x8ee5f62e1fab915d

func NewBlob_getSize_Params(s *capnp.Segment) (Blob_getSize_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Blob_getSize_Params{st}, err
}

func NewRootBlob_getSize_Params(s *capnp.Segment) (Blob_getSize_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Blob_getSize_Params{st}, err
}

func ReadRootBlob_getSize_Params(msg *capnp.Message) (Blob_getSize_Params, error) {
	root, err := msg.Root()
	return Blob_getSize_Params{root.Struct()}, err
}

func (s Blob_getSize_Params) String() string {
	str, _ := text.Marshal(0x8ee5f62e1fab915d, s.Struct)
	return str
}

// Blob_getSize_Params_List is a list of Blob_getSize_Params.
type Blob_getSize_Params_List struct{ capnp.List }

// NewBlob_getSize_Params creates a new list of Blob_getSize_Params.
func NewBlob_getSize_Params_List(s *capnp.Segment, sz int32) (Blob_getSize_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Blob_getSize_Params_List{l}, err
}

func (s Blob_getSize_Params_List) At(i int) Blob_getSize_Params {
	return Blob_getSize_Params{s.List.Struct(i)}
}

func (s Blob_getSize_Params_List) Set(i int, v Blob_getSize_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Blob_getSize_Params_List) String() string {
	str, _ := text.MarshalList(0x8ee5f62e1fab915d, s.List)
	return str
}

// Blob_getSize_Params_Future is a wrapper for a Blob_getSize_Params promised by a client call.
type Blob_getSize_Params_Future struct{ *capnp.Future }

func (p Blob_getSize_Params_Future) Struct() (Blob_getSize_Params, error) {
	s, err := p.Future.Struct()
	return Blob_getSize_Params{s}, err
}

type Blob_getSize_Results struct{ capnp.Struct }

// Blob_getSize_Results_TypeID is the unique identifier for the type Blob_getSize_Results.
const Blob_getSize_Results_TypeID = 0x8e48cb1497f3d6f4

func NewBlob_getSize_Results(s *capnp.Segment) (Blob_getSize_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Blob_getSize_Results{st}, err
}

func NewRootBlob_getSize_Results(s *capnp.Segment) (Blob_getSize_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Blob_getSize_Results{st}, err
}

func ReadRootBlob_getSize_Results(msg *capnp.Message) (Blob_getSize_Results, error) {
	root, err := msg.Root()
	return Blob_getSize_Results{root.Struct()}, err
}

func (s Blob_getSize_Results) String() string {
	str, _ := text.Marshal(0x8e48cb1497f3d6f4, s.Struct)
	return str
}

func (s Blob_getSize_Results) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s Blob_getSize_Results) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Blob_getSize_Results_List is a list of Blob_getSize_Results.
type Blob_getSize_Results_List struct{ capnp.List }

// NewBlob_getSize_Results creates a new list of Blob_getSize_Results.
func NewBlob_getSize_Results_List(s *capnp.Segment, sz int32) (Blob_getSize_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Blob_getSize_Results_List{l}, err
}

func (s Blob_getSize_Results_List) At(i int) Blob_getSize_Results {
	return Blob_getSize_Results{s.List.Struct(i)}
}

func (s Blob_getSize_Results_List) Set(i int, v Blob_getSize_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Blob_getSize_Results_List) String() string {
	str, _ := text.MarshalList(0x8e48cb1497f3d6f4, s.List)
	return str
}

// Blob_getSize_Results_Future is a wrapper for a Blob_getSize_Results promised by a client call.
type Blob_getSize_Results_Future struct{ *capnp.Future }

func (p Blob_getSize_Results_Future) Struct() (Blob_getSize_Results, error) {
	s, err := p.Future.Struct()
	return Blob_getSize_Results{s}, err
}

type Blob_writeTo_Params struct{ capnp.Struct }

// Blob_writeTo_Params_TypeID is the unique identifier for the type Blob_writeTo_Params.
const Blob_writeTo_Params_TypeID = 0x9f0719e9a9dccc4b

func NewBlob_writeTo_Params(s *capnp.Segment) (Blob_writeTo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Blob_writeTo_Params{st}, err
}

func NewRootBlob_writeTo_Params(s *capnp.Segment) (Blob_writeTo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Blob_writeTo_Params{st}, err
}

func ReadRootBlob_writeTo_Params(msg *capnp.Message) (Blob_writeTo_Params, error) {
	root, err := msg.Root()
	return Blob_writeTo_Params{root.Struct()}, err
}

func (s Blob_writeTo_Params) String() string {
	str, _ := text.Marshal(0x9f0719e9a9dccc4b, s.Struct)
	return str
}

func (s Blob_writeTo_Params) Stream() ByteStream {
	p, _ := s.Struct.Ptr(0)
	return ByteStream{Client: p.Interface().Client()}
}

func (s Blob_writeTo_Params) HasStream() bool {
	return s.Struct.HasPtr(0)
}

func (s Blob_writeTo_Params) SetStream(v ByteStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Blob_writeTo_Params) StartAtOffset() uint64 {
	return s.Struct.Uint64(0)
}

func (s Blob_writeTo_Params) SetStartAtOffset(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Blob_writeTo_Params_List is a list of Blob_writeTo_Params.
type Blob_writeTo_Params_List struct{ capnp.List }

// NewBlob_writeTo_Params creates a new list of Blob_writeTo_Params.
func NewBlob_writeTo_Params_List(s *capnp.Segment, sz int32) (Blob_writeTo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Blob_writeTo_Params_List{l}, err
}

func (s Blob_writeTo_Params_List) At(i int) Blob_writeTo_Params {
	return Blob_writeTo_Params{s.List.Struct(i)}
}

func (s Blob_writeTo_Params_List) Set(i int, v Blob_writeTo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Blob_writeTo_Params_List) String() string {
	str, _ := text.MarshalList(0x9f0719e9a9dccc4b, s.List)
	return str
}

// Blob_writeTo_Params_Future is a wrapper for a Blob_writeTo_Params promised by a client call.
type Blob_writeTo_Params_Future struct{ *capnp.Future }

func (p Blob_writeTo_Params_Future) Struct() (Blob_writeTo_Params, error) {
	s, err := p.Future.Struct()
	return Blob_writeTo_Params{s}, err
}

func (p Blob_writeTo_Params_Future) Stream() ByteStream {
	return ByteStream{Client: p.Future.Field(0, nil).Client()}
}

type Blob_writeTo_Results struct{ capnp.Struct }

// Blob_writeTo_Results_TypeID is the unique identifier for the type Blob_writeTo_Results.
const Blob_writeTo_Results_TypeID = 0xdb3152bd3bc2aa40

func NewBlob_writeTo_Results(s *capnp.Segment) (Blob_writeTo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Blob_writeTo_Results{st}, err
}

func NewRootBlob_writeTo_Results(s *capnp.Segment) (Blob_writeTo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Blob_writeTo_Results{st}, err
}

func ReadRootBlob_writeTo_Results(msg *capnp.Message) (Blob_writeTo_Results, error) {
	root, err := msg.Root()
	return Blob_writeTo_Results{root.Struct()}, err
}

func (s Blob_writeTo_Results) String() string {
	str, _ := text.Marshal(0xdb3152bd3bc2aa40, s.Struct)
	return str
}

func (s Blob_writeTo_Results) Handle() Handle {
	p, _ := s.Struct.Ptr(0)
	return Handle{Client: p.Interface().Client()}
}

func (s Blob_writeTo_Results) HasHandle() bool {
	return s.Struct.HasPtr(0)
}

func (s Blob_writeTo_Results) SetHandle(v Handle) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Blob_writeTo_Results_List is a list of Blob_writeTo_Results.
type Blob_writeTo_Results_List struct{ capnp.List }

// NewBlob_writeTo_Results creates a new list of Blob_writeTo_Results.
func NewBlob_writeTo_Results_List(s *capnp.Segment, sz int32) (Blob_writeTo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Blob_writeTo_Results_List{l}, err
}

func (s Blob_writeTo_Results_List) At(i int) Blob_writeTo_Results {
	return Blob_writeTo_Results{s.List.Struct(i)}
}

func (s Blob_writeTo_Results_List) Set(i int, v Blob_writeTo_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Blob_writeTo_Results_List) String() string {
	str, _ := text.MarshalList(0xdb3152bd3bc2aa40, s.List)
	return str
}

// Blob_writeTo_Results_Future is a wrapper for a Blob_writeTo_Results promised by a client call.
type Blob_writeTo_Results_Future struct{ *capnp.Future }

func (p Blob_writeTo_Results_Future) Struct() (Blob_writeTo_Results, error) {
	s, err := p.Future.Struct()
	return Blob_writeTo_Results{s}, err
}

func (p Blob_writeTo_Results_Future) Handle() Handle {
	return Handle{Client: p.Future.Field(0, nil).Client()}
}

type Blob_getSlice_Params struct{ capnp.Struct }

// Blob_getSlice_Params_TypeID is the unique identifier for the type Blob_getSlice_Params.
const Blob_getSlice_Params_TypeID = 0x8edb5f3937d96b8a

func NewBlob_getSlice_Params(s *capnp.Segment) (Blob_getSlice_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Blob_getSlice_Params{st}, err
}

func NewRootBlob_getSlice_Params(s *capnp.Segment) (Blob_getSlice_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Blob_getSlice_Params{st}, err
}

func ReadRootBlob_getSlice_Params(msg *capnp.Message) (Blob_getSlice_Params, error) {
	root, err := msg.Root()
	return Blob_getSlice_Params{root.Struct()}, err
}

func (s Blob_getSlice_Params) String() string {
	str, _ := text.Marshal(0x8edb5f3937d96b8a, s.Struct)
	return str
}

func (s Blob_getSlice_Params) Offset() uint64 {
	return s.Struct.Uint64(0)
}

func (s Blob_getSlice_Params) SetOffset(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Blob_getSlice_Params) Size() uint32 {
	return s.Struct.Uint32(8)
}

func (s Blob_getSlice_Params) SetSize(v uint32) {
	s.Struct.SetUint32(8, v)
}

// Blob_getSlice_Params_List is a list of Blob_getSlice_Params.
type Blob_getSlice_Params_List struct{ capnp.List }

// NewBlob_getSlice_Params creates a new list of Blob_getSlice_Params.
func NewBlob_getSlice_Params_List(s *capnp.Segment, sz int32) (Blob_getSlice_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return Blob_getSlice_Params_List{l}, err
}

func (s Blob_getSlice_Params_List) At(i int) Blob_getSlice_Params {
	return Blob_getSlice_Params{s.List.Struct(i)}
}

func (s Blob_getSlice_Params_List) Set(i int, v Blob_getSlice_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Blob_getSlice_Params_List) String() string {
	str, _ := text.MarshalList(0x8edb5f3937d96b8a, s.List)
	return str
}

// Blob_getSlice_Params_Future is a wrapper for a Blob_getSlice_Params promised by a client call.
type Blob_getSlice_Params_Future struct{ *capnp.Future }

func (p Blob_getSlice_Params_Future) Struct() (Blob_getSlice_Params, error) {
	s, err := p.Future.Struct()
	return Blob_getSlice_Params{s}, err
}

type Blob_getSlice_Results struct{ capnp.Struct }

// Blob_getSlice_Results_TypeID is the unique identifier for the type Blob_getSlice_Results.
const Blob_getSlice_Results_TypeID = 0xc65caf9a2d389078

func NewBlob_getSlice_Results(s *capnp.Segment) (Blob_getSlice_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Blob_getSlice_Results{st}, err
}

func NewRootBlob_getSlice_Results(s *capnp.Segment) (Blob_getSlice_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Blob_getSlice_Results{st}, err
}

func ReadRootBlob_getSlice_Results(msg *capnp.Message) (Blob_getSlice_Results, error) {
	root, err := msg.Root()
	return Blob_getSlice_Results{root.Struct()}, err
}

func (s Blob_getSlice_Results) String() string {
	str, _ := text.Marshal(0xc65caf9a2d389078, s.Struct)
	return str
}

func (s Blob_getSlice_Results) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Blob_getSlice_Results) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Blob_getSlice_Results) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Blob_getSlice_Results_List is a list of Blob_getSlice_Results.
type Blob_getSlice_Results_List struct{ capnp.List }

// NewBlob_getSlice_Results creates a new list of Blob_getSlice_Results.
func NewBlob_getSlice_Results_List(s *capnp.Segment, sz int32) (Blob_getSlice_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Blob_getSlice_Results_List{l}, err
}

func (s Blob_getSlice_Results_List) At(i int) Blob_getSlice_Results {
	return Blob_getSlice_Results{s.List.Struct(i)}
}

func (s Blob_getSlice_Results_List) Set(i int, v Blob_getSlice_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Blob_getSlice_Results_List) String() string {
	str, _ := text.MarshalList(0xc65caf9a2d389078, s.List)
	return str
}

// Blob_getSlice_Results_Future is a wrapper for a Blob_getSlice_Results promised by a client call.
type Blob_getSlice_Results_Future struct{ *capnp.Future }

func (p Blob_getSlice_Results_Future) Struct() (Blob_getSlice_Results, error) {
	s, err := p.Future.Struct()
	return Blob_getSlice_Results{s}, err
}

type Assignable struct{ Client *capnp.Client }

// Assignable_TypeID is the unique identifier for the type Assignable.
const Assignable_TypeID = 0xeaf255b498229199

func (c Assignable) Get(ctx context.Context, params func(Assignable_get_Params) error) (Assignable_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xeaf255b498229199,
			MethodID:      0,
			InterfaceName: "util.capnp:Assignable",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Assignable_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Assignable_get_Results_Future{Future: ans.Future()}, release
}
func (c Assignable) AsGetter(ctx context.Context, params func(Assignable_asGetter_Params) error) (Assignable_asGetter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xeaf255b498229199,
			MethodID:      1,
			InterfaceName: "util.capnp:Assignable",
			MethodName:    "asGetter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Assignable_asGetter_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Assignable_asGetter_Results_Future{Future: ans.Future()}, release
}
func (c Assignable) AsSetter(ctx context.Context, params func(Assignable_asSetter_Params) error) (Assignable_asSetter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xeaf255b498229199,
			MethodID:      2,
			InterfaceName: "util.capnp:Assignable",
			MethodName:    "asSetter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Assignable_asSetter_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Assignable_asSetter_Results_Future{Future: ans.Future()}, release
}

func (c Assignable) AddRef() Assignable {
	return Assignable{
		Client: c.Client.AddRef(),
	}
}

func (c Assignable) Release() {
	c.Client.Release()
}

// A Assignable_Server is a Assignable with a local implementation.
type Assignable_Server interface {
	Get(context.Context, Assignable_get) error

	AsGetter(context.Context, Assignable_asGetter) error

	AsSetter(context.Context, Assignable_asSetter) error
}

// Assignable_NewServer creates a new Server from an implementation of Assignable_Server.
func Assignable_NewServer(s Assignable_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Assignable_Methods(nil, s), s, c, policy)
}

// Assignable_ServerToClient creates a new Client from an implementation of Assignable_Server.
// The caller is responsible for calling Release on the returned Client.
func Assignable_ServerToClient(s Assignable_Server, policy *server.Policy) Assignable {
	return Assignable{Client: capnp.NewClient(Assignable_NewServer(s, policy))}
}

// Assignable_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Assignable_Methods(methods []server.Method, s Assignable_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xeaf255b498229199,
			MethodID:      0,
			InterfaceName: "util.capnp:Assignable",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Assignable_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xeaf255b498229199,
			MethodID:      1,
			InterfaceName: "util.capnp:Assignable",
			MethodName:    "asGetter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AsGetter(ctx, Assignable_asGetter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xeaf255b498229199,
			MethodID:      2,
			InterfaceName: "util.capnp:Assignable",
			MethodName:    "asSetter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AsSetter(ctx, Assignable_asSetter{call})
		},
	})

	return methods
}

// Assignable_get holds the state for a server call to Assignable.get.
// See server.Call for documentation.
type Assignable_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Assignable_get) Args() Assignable_get_Params {
	return Assignable_get_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Assignable_get) AllocResults() (Assignable_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Assignable_get_Results{Struct: r}, err
}

// Assignable_asGetter holds the state for a server call to Assignable.asGetter.
// See server.Call for documentation.
type Assignable_asGetter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Assignable_asGetter) Args() Assignable_asGetter_Params {
	return Assignable_asGetter_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Assignable_asGetter) AllocResults() (Assignable_asGetter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_asGetter_Results{Struct: r}, err
}

// Assignable_asSetter holds the state for a server call to Assignable.asSetter.
// See server.Call for documentation.
type Assignable_asSetter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Assignable_asSetter) Args() Assignable_asSetter_Params {
	return Assignable_asSetter_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Assignable_asSetter) AllocResults() (Assignable_asSetter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_asSetter_Results{Struct: r}, err
}

type Assignable_Getter struct{ Client *capnp.Client }

// Assignable_Getter_TypeID is the unique identifier for the type Assignable_Getter.
const Assignable_Getter_TypeID = 0x80f2f65360d64224

func (c Assignable_Getter) Get(ctx context.Context, params func(Assignable_Getter_get_Params) error) (Assignable_Getter_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x80f2f65360d64224,
			MethodID:      0,
			InterfaceName: "util.capnp:Assignable.Getter",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Assignable_Getter_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Assignable_Getter_get_Results_Future{Future: ans.Future()}, release
}
func (c Assignable_Getter) Subscribe(ctx context.Context, params func(Assignable_Getter_subscribe_Params) error) (Assignable_Getter_subscribe_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x80f2f65360d64224,
			MethodID:      1,
			InterfaceName: "util.capnp:Assignable.Getter",
			MethodName:    "subscribe",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Assignable_Getter_subscribe_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Assignable_Getter_subscribe_Results_Future{Future: ans.Future()}, release
}

func (c Assignable_Getter) AddRef() Assignable_Getter {
	return Assignable_Getter{
		Client: c.Client.AddRef(),
	}
}

func (c Assignable_Getter) Release() {
	c.Client.Release()
}

// A Assignable_Getter_Server is a Assignable_Getter with a local implementation.
type Assignable_Getter_Server interface {
	Get(context.Context, Assignable_Getter_get) error

	Subscribe(context.Context, Assignable_Getter_subscribe) error
}

// Assignable_Getter_NewServer creates a new Server from an implementation of Assignable_Getter_Server.
func Assignable_Getter_NewServer(s Assignable_Getter_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Assignable_Getter_Methods(nil, s), s, c, policy)
}

// Assignable_Getter_ServerToClient creates a new Client from an implementation of Assignable_Getter_Server.
// The caller is responsible for calling Release on the returned Client.
func Assignable_Getter_ServerToClient(s Assignable_Getter_Server, policy *server.Policy) Assignable_Getter {
	return Assignable_Getter{Client: capnp.NewClient(Assignable_Getter_NewServer(s, policy))}
}

// Assignable_Getter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Assignable_Getter_Methods(methods []server.Method, s Assignable_Getter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x80f2f65360d64224,
			MethodID:      0,
			InterfaceName: "util.capnp:Assignable.Getter",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Assignable_Getter_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x80f2f65360d64224,
			MethodID:      1,
			InterfaceName: "util.capnp:Assignable.Getter",
			MethodName:    "subscribe",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subscribe(ctx, Assignable_Getter_subscribe{call})
		},
	})

	return methods
}

// Assignable_Getter_get holds the state for a server call to Assignable_Getter.get.
// See server.Call for documentation.
type Assignable_Getter_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Assignable_Getter_get) Args() Assignable_Getter_get_Params {
	return Assignable_Getter_get_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Assignable_Getter_get) AllocResults() (Assignable_Getter_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_Getter_get_Results{Struct: r}, err
}

// Assignable_Getter_subscribe holds the state for a server call to Assignable_Getter.subscribe.
// See server.Call for documentation.
type Assignable_Getter_subscribe struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Assignable_Getter_subscribe) Args() Assignable_Getter_subscribe_Params {
	return Assignable_Getter_subscribe_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Assignable_Getter_subscribe) AllocResults() (Assignable_Getter_subscribe_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_Getter_subscribe_Results{Struct: r}, err
}

type Assignable_Getter_get_Params struct{ capnp.Struct }

// Assignable_Getter_get_Params_TypeID is the unique identifier for the type Assignable_Getter_get_Params.
const Assignable_Getter_get_Params_TypeID = 0xb19fdbd356844119

func NewAssignable_Getter_get_Params(s *capnp.Segment) (Assignable_Getter_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_Getter_get_Params{st}, err
}

func NewRootAssignable_Getter_get_Params(s *capnp.Segment) (Assignable_Getter_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_Getter_get_Params{st}, err
}

func ReadRootAssignable_Getter_get_Params(msg *capnp.Message) (Assignable_Getter_get_Params, error) {
	root, err := msg.Root()
	return Assignable_Getter_get_Params{root.Struct()}, err
}

func (s Assignable_Getter_get_Params) String() string {
	str, _ := text.Marshal(0xb19fdbd356844119, s.Struct)
	return str
}

// Assignable_Getter_get_Params_List is a list of Assignable_Getter_get_Params.
type Assignable_Getter_get_Params_List struct{ capnp.List }

// NewAssignable_Getter_get_Params creates a new list of Assignable_Getter_get_Params.
func NewAssignable_Getter_get_Params_List(s *capnp.Segment, sz int32) (Assignable_Getter_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Assignable_Getter_get_Params_List{l}, err
}

func (s Assignable_Getter_get_Params_List) At(i int) Assignable_Getter_get_Params {
	return Assignable_Getter_get_Params{s.List.Struct(i)}
}

func (s Assignable_Getter_get_Params_List) Set(i int, v Assignable_Getter_get_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_Getter_get_Params_List) String() string {
	str, _ := text.MarshalList(0xb19fdbd356844119, s.List)
	return str
}

// Assignable_Getter_get_Params_Future is a wrapper for a Assignable_Getter_get_Params promised by a client call.
type Assignable_Getter_get_Params_Future struct{ *capnp.Future }

func (p Assignable_Getter_get_Params_Future) Struct() (Assignable_Getter_get_Params, error) {
	s, err := p.Future.Struct()
	return Assignable_Getter_get_Params{s}, err
}

type Assignable_Getter_get_Results struct{ capnp.Struct }

// Assignable_Getter_get_Results_TypeID is the unique identifier for the type Assignable_Getter_get_Results.
const Assignable_Getter_get_Results_TypeID = 0x97ef2da226123492

func NewAssignable_Getter_get_Results(s *capnp.Segment) (Assignable_Getter_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_Getter_get_Results{st}, err
}

func NewRootAssignable_Getter_get_Results(s *capnp.Segment) (Assignable_Getter_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_Getter_get_Results{st}, err
}

func ReadRootAssignable_Getter_get_Results(msg *capnp.Message) (Assignable_Getter_get_Results, error) {
	root, err := msg.Root()
	return Assignable_Getter_get_Results{root.Struct()}, err
}

func (s Assignable_Getter_get_Results) String() string {
	str, _ := text.Marshal(0x97ef2da226123492, s.Struct)
	return str
}

func (s Assignable_Getter_get_Results) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Assignable_Getter_get_Results) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Assignable_Getter_get_Results) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Assignable_Getter_get_Results_List is a list of Assignable_Getter_get_Results.
type Assignable_Getter_get_Results_List struct{ capnp.List }

// NewAssignable_Getter_get_Results creates a new list of Assignable_Getter_get_Results.
func NewAssignable_Getter_get_Results_List(s *capnp.Segment, sz int32) (Assignable_Getter_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Assignable_Getter_get_Results_List{l}, err
}

func (s Assignable_Getter_get_Results_List) At(i int) Assignable_Getter_get_Results {
	return Assignable_Getter_get_Results{s.List.Struct(i)}
}

func (s Assignable_Getter_get_Results_List) Set(i int, v Assignable_Getter_get_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_Getter_get_Results_List) String() string {
	str, _ := text.MarshalList(0x97ef2da226123492, s.List)
	return str
}

// Assignable_Getter_get_Results_Future is a wrapper for a Assignable_Getter_get_Results promised by a client call.
type Assignable_Getter_get_Results_Future struct{ *capnp.Future }

func (p Assignable_Getter_get_Results_Future) Struct() (Assignable_Getter_get_Results, error) {
	s, err := p.Future.Struct()
	return Assignable_Getter_get_Results{s}, err
}

func (p Assignable_Getter_get_Results_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Assignable_Getter_subscribe_Params struct{ capnp.Struct }

// Assignable_Getter_subscribe_Params_TypeID is the unique identifier for the type Assignable_Getter_subscribe_Params.
const Assignable_Getter_subscribe_Params_TypeID = 0xf02783ef982ecea9

func NewAssignable_Getter_subscribe_Params(s *capnp.Segment) (Assignable_Getter_subscribe_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_Getter_subscribe_Params{st}, err
}

func NewRootAssignable_Getter_subscribe_Params(s *capnp.Segment) (Assignable_Getter_subscribe_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_Getter_subscribe_Params{st}, err
}

func ReadRootAssignable_Getter_subscribe_Params(msg *capnp.Message) (Assignable_Getter_subscribe_Params, error) {
	root, err := msg.Root()
	return Assignable_Getter_subscribe_Params{root.Struct()}, err
}

func (s Assignable_Getter_subscribe_Params) String() string {
	str, _ := text.Marshal(0xf02783ef982ecea9, s.Struct)
	return str
}

func (s Assignable_Getter_subscribe_Params) Setter() Assignable_Setter {
	p, _ := s.Struct.Ptr(0)
	return Assignable_Setter{Client: p.Interface().Client()}
}

func (s Assignable_Getter_subscribe_Params) HasSetter() bool {
	return s.Struct.HasPtr(0)
}

func (s Assignable_Getter_subscribe_Params) SetSetter(v Assignable_Setter) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Assignable_Getter_subscribe_Params_List is a list of Assignable_Getter_subscribe_Params.
type Assignable_Getter_subscribe_Params_List struct{ capnp.List }

// NewAssignable_Getter_subscribe_Params creates a new list of Assignable_Getter_subscribe_Params.
func NewAssignable_Getter_subscribe_Params_List(s *capnp.Segment, sz int32) (Assignable_Getter_subscribe_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Assignable_Getter_subscribe_Params_List{l}, err
}

func (s Assignable_Getter_subscribe_Params_List) At(i int) Assignable_Getter_subscribe_Params {
	return Assignable_Getter_subscribe_Params{s.List.Struct(i)}
}

func (s Assignable_Getter_subscribe_Params_List) Set(i int, v Assignable_Getter_subscribe_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_Getter_subscribe_Params_List) String() string {
	str, _ := text.MarshalList(0xf02783ef982ecea9, s.List)
	return str
}

// Assignable_Getter_subscribe_Params_Future is a wrapper for a Assignable_Getter_subscribe_Params promised by a client call.
type Assignable_Getter_subscribe_Params_Future struct{ *capnp.Future }

func (p Assignable_Getter_subscribe_Params_Future) Struct() (Assignable_Getter_subscribe_Params, error) {
	s, err := p.Future.Struct()
	return Assignable_Getter_subscribe_Params{s}, err
}

func (p Assignable_Getter_subscribe_Params_Future) Setter() Assignable_Setter {
	return Assignable_Setter{Client: p.Future.Field(0, nil).Client()}
}

type Assignable_Getter_subscribe_Results struct{ capnp.Struct }

// Assignable_Getter_subscribe_Results_TypeID is the unique identifier for the type Assignable_Getter_subscribe_Results.
const Assignable_Getter_subscribe_Results_TypeID = 0x84e0f802c9af605b

func NewAssignable_Getter_subscribe_Results(s *capnp.Segment) (Assignable_Getter_subscribe_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_Getter_subscribe_Results{st}, err
}

func NewRootAssignable_Getter_subscribe_Results(s *capnp.Segment) (Assignable_Getter_subscribe_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_Getter_subscribe_Results{st}, err
}

func ReadRootAssignable_Getter_subscribe_Results(msg *capnp.Message) (Assignable_Getter_subscribe_Results, error) {
	root, err := msg.Root()
	return Assignable_Getter_subscribe_Results{root.Struct()}, err
}

func (s Assignable_Getter_subscribe_Results) String() string {
	str, _ := text.Marshal(0x84e0f802c9af605b, s.Struct)
	return str
}

func (s Assignable_Getter_subscribe_Results) Handle() Handle {
	p, _ := s.Struct.Ptr(0)
	return Handle{Client: p.Interface().Client()}
}

func (s Assignable_Getter_subscribe_Results) HasHandle() bool {
	return s.Struct.HasPtr(0)
}

func (s Assignable_Getter_subscribe_Results) SetHandle(v Handle) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Assignable_Getter_subscribe_Results_List is a list of Assignable_Getter_subscribe_Results.
type Assignable_Getter_subscribe_Results_List struct{ capnp.List }

// NewAssignable_Getter_subscribe_Results creates a new list of Assignable_Getter_subscribe_Results.
func NewAssignable_Getter_subscribe_Results_List(s *capnp.Segment, sz int32) (Assignable_Getter_subscribe_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Assignable_Getter_subscribe_Results_List{l}, err
}

func (s Assignable_Getter_subscribe_Results_List) At(i int) Assignable_Getter_subscribe_Results {
	return Assignable_Getter_subscribe_Results{s.List.Struct(i)}
}

func (s Assignable_Getter_subscribe_Results_List) Set(i int, v Assignable_Getter_subscribe_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_Getter_subscribe_Results_List) String() string {
	str, _ := text.MarshalList(0x84e0f802c9af605b, s.List)
	return str
}

// Assignable_Getter_subscribe_Results_Future is a wrapper for a Assignable_Getter_subscribe_Results promised by a client call.
type Assignable_Getter_subscribe_Results_Future struct{ *capnp.Future }

func (p Assignable_Getter_subscribe_Results_Future) Struct() (Assignable_Getter_subscribe_Results, error) {
	s, err := p.Future.Struct()
	return Assignable_Getter_subscribe_Results{s}, err
}

func (p Assignable_Getter_subscribe_Results_Future) Handle() Handle {
	return Handle{Client: p.Future.Field(0, nil).Client()}
}

type Assignable_Setter struct{ Client *capnp.Client }

// Assignable_Setter_TypeID is the unique identifier for the type Assignable_Setter.
const Assignable_Setter_TypeID = 0xd5256a3f93589d2f

func (c Assignable_Setter) Set(ctx context.Context, params func(Assignable_Setter_set_Params) error) (Assignable_Setter_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd5256a3f93589d2f,
			MethodID:      0,
			InterfaceName: "util.capnp:Assignable.Setter",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Assignable_Setter_set_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Assignable_Setter_set_Results_Future{Future: ans.Future()}, release
}

func (c Assignable_Setter) AddRef() Assignable_Setter {
	return Assignable_Setter{
		Client: c.Client.AddRef(),
	}
}

func (c Assignable_Setter) Release() {
	c.Client.Release()
}

// A Assignable_Setter_Server is a Assignable_Setter with a local implementation.
type Assignable_Setter_Server interface {
	Set(context.Context, Assignable_Setter_set) error
}

// Assignable_Setter_NewServer creates a new Server from an implementation of Assignable_Setter_Server.
func Assignable_Setter_NewServer(s Assignable_Setter_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Assignable_Setter_Methods(nil, s), s, c, policy)
}

// Assignable_Setter_ServerToClient creates a new Client from an implementation of Assignable_Setter_Server.
// The caller is responsible for calling Release on the returned Client.
func Assignable_Setter_ServerToClient(s Assignable_Setter_Server, policy *server.Policy) Assignable_Setter {
	return Assignable_Setter{Client: capnp.NewClient(Assignable_Setter_NewServer(s, policy))}
}

// Assignable_Setter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Assignable_Setter_Methods(methods []server.Method, s Assignable_Setter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd5256a3f93589d2f,
			MethodID:      0,
			InterfaceName: "util.capnp:Assignable.Setter",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, Assignable_Setter_set{call})
		},
	})

	return methods
}

// Assignable_Setter_set holds the state for a server call to Assignable_Setter.set.
// See server.Call for documentation.
type Assignable_Setter_set struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Assignable_Setter_set) Args() Assignable_Setter_set_Params {
	return Assignable_Setter_set_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Assignable_Setter_set) AllocResults() (Assignable_Setter_set_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_Setter_set_Results{Struct: r}, err
}

type Assignable_Setter_set_Params struct{ capnp.Struct }

// Assignable_Setter_set_Params_TypeID is the unique identifier for the type Assignable_Setter_set_Params.
const Assignable_Setter_set_Params_TypeID = 0x98d0372787b787d1

func NewAssignable_Setter_set_Params(s *capnp.Segment) (Assignable_Setter_set_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_Setter_set_Params{st}, err
}

func NewRootAssignable_Setter_set_Params(s *capnp.Segment) (Assignable_Setter_set_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_Setter_set_Params{st}, err
}

func ReadRootAssignable_Setter_set_Params(msg *capnp.Message) (Assignable_Setter_set_Params, error) {
	root, err := msg.Root()
	return Assignable_Setter_set_Params{root.Struct()}, err
}

func (s Assignable_Setter_set_Params) String() string {
	str, _ := text.Marshal(0x98d0372787b787d1, s.Struct)
	return str
}

func (s Assignable_Setter_set_Params) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Assignable_Setter_set_Params) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Assignable_Setter_set_Params) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Assignable_Setter_set_Params_List is a list of Assignable_Setter_set_Params.
type Assignable_Setter_set_Params_List struct{ capnp.List }

// NewAssignable_Setter_set_Params creates a new list of Assignable_Setter_set_Params.
func NewAssignable_Setter_set_Params_List(s *capnp.Segment, sz int32) (Assignable_Setter_set_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Assignable_Setter_set_Params_List{l}, err
}

func (s Assignable_Setter_set_Params_List) At(i int) Assignable_Setter_set_Params {
	return Assignable_Setter_set_Params{s.List.Struct(i)}
}

func (s Assignable_Setter_set_Params_List) Set(i int, v Assignable_Setter_set_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_Setter_set_Params_List) String() string {
	str, _ := text.MarshalList(0x98d0372787b787d1, s.List)
	return str
}

// Assignable_Setter_set_Params_Future is a wrapper for a Assignable_Setter_set_Params promised by a client call.
type Assignable_Setter_set_Params_Future struct{ *capnp.Future }

func (p Assignable_Setter_set_Params_Future) Struct() (Assignable_Setter_set_Params, error) {
	s, err := p.Future.Struct()
	return Assignable_Setter_set_Params{s}, err
}

func (p Assignable_Setter_set_Params_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Assignable_Setter_set_Results struct{ capnp.Struct }

// Assignable_Setter_set_Results_TypeID is the unique identifier for the type Assignable_Setter_set_Results.
const Assignable_Setter_set_Results_TypeID = 0xdbfbb635d3e6abab

func NewAssignable_Setter_set_Results(s *capnp.Segment) (Assignable_Setter_set_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_Setter_set_Results{st}, err
}

func NewRootAssignable_Setter_set_Results(s *capnp.Segment) (Assignable_Setter_set_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_Setter_set_Results{st}, err
}

func ReadRootAssignable_Setter_set_Results(msg *capnp.Message) (Assignable_Setter_set_Results, error) {
	root, err := msg.Root()
	return Assignable_Setter_set_Results{root.Struct()}, err
}

func (s Assignable_Setter_set_Results) String() string {
	str, _ := text.Marshal(0xdbfbb635d3e6abab, s.Struct)
	return str
}

// Assignable_Setter_set_Results_List is a list of Assignable_Setter_set_Results.
type Assignable_Setter_set_Results_List struct{ capnp.List }

// NewAssignable_Setter_set_Results creates a new list of Assignable_Setter_set_Results.
func NewAssignable_Setter_set_Results_List(s *capnp.Segment, sz int32) (Assignable_Setter_set_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Assignable_Setter_set_Results_List{l}, err
}

func (s Assignable_Setter_set_Results_List) At(i int) Assignable_Setter_set_Results {
	return Assignable_Setter_set_Results{s.List.Struct(i)}
}

func (s Assignable_Setter_set_Results_List) Set(i int, v Assignable_Setter_set_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_Setter_set_Results_List) String() string {
	str, _ := text.MarshalList(0xdbfbb635d3e6abab, s.List)
	return str
}

// Assignable_Setter_set_Results_Future is a wrapper for a Assignable_Setter_set_Results promised by a client call.
type Assignable_Setter_set_Results_Future struct{ *capnp.Future }

func (p Assignable_Setter_set_Results_Future) Struct() (Assignable_Setter_set_Results, error) {
	s, err := p.Future.Struct()
	return Assignable_Setter_set_Results{s}, err
}

type Assignable_get_Params struct{ capnp.Struct }

// Assignable_get_Params_TypeID is the unique identifier for the type Assignable_get_Params.
const Assignable_get_Params_TypeID = 0xbbfd27b5d2515662

func NewAssignable_get_Params(s *capnp.Segment) (Assignable_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_get_Params{st}, err
}

func NewRootAssignable_get_Params(s *capnp.Segment) (Assignable_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_get_Params{st}, err
}

func ReadRootAssignable_get_Params(msg *capnp.Message) (Assignable_get_Params, error) {
	root, err := msg.Root()
	return Assignable_get_Params{root.Struct()}, err
}

func (s Assignable_get_Params) String() string {
	str, _ := text.Marshal(0xbbfd27b5d2515662, s.Struct)
	return str
}

// Assignable_get_Params_List is a list of Assignable_get_Params.
type Assignable_get_Params_List struct{ capnp.List }

// NewAssignable_get_Params creates a new list of Assignable_get_Params.
func NewAssignable_get_Params_List(s *capnp.Segment, sz int32) (Assignable_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Assignable_get_Params_List{l}, err
}

func (s Assignable_get_Params_List) At(i int) Assignable_get_Params {
	return Assignable_get_Params{s.List.Struct(i)}
}

func (s Assignable_get_Params_List) Set(i int, v Assignable_get_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_get_Params_List) String() string {
	str, _ := text.MarshalList(0xbbfd27b5d2515662, s.List)
	return str
}

// Assignable_get_Params_Future is a wrapper for a Assignable_get_Params promised by a client call.
type Assignable_get_Params_Future struct{ *capnp.Future }

func (p Assignable_get_Params_Future) Struct() (Assignable_get_Params, error) {
	s, err := p.Future.Struct()
	return Assignable_get_Params{s}, err
}

type Assignable_get_Results struct{ capnp.Struct }

// Assignable_get_Results_TypeID is the unique identifier for the type Assignable_get_Results.
const Assignable_get_Results_TypeID = 0xb351b437cd426a4f

func NewAssignable_get_Results(s *capnp.Segment) (Assignable_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Assignable_get_Results{st}, err
}

func NewRootAssignable_get_Results(s *capnp.Segment) (Assignable_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Assignable_get_Results{st}, err
}

func ReadRootAssignable_get_Results(msg *capnp.Message) (Assignable_get_Results, error) {
	root, err := msg.Root()
	return Assignable_get_Results{root.Struct()}, err
}

func (s Assignable_get_Results) String() string {
	str, _ := text.Marshal(0xb351b437cd426a4f, s.Struct)
	return str
}

func (s Assignable_get_Results) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Assignable_get_Results) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Assignable_get_Results) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Assignable_get_Results) Setter() Assignable_Setter {
	p, _ := s.Struct.Ptr(1)
	return Assignable_Setter{Client: p.Interface().Client()}
}

func (s Assignable_get_Results) HasSetter() bool {
	return s.Struct.HasPtr(1)
}

func (s Assignable_get_Results) SetSetter(v Assignable_Setter) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Assignable_get_Results_List is a list of Assignable_get_Results.
type Assignable_get_Results_List struct{ capnp.List }

// NewAssignable_get_Results creates a new list of Assignable_get_Results.
func NewAssignable_get_Results_List(s *capnp.Segment, sz int32) (Assignable_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Assignable_get_Results_List{l}, err
}

func (s Assignable_get_Results_List) At(i int) Assignable_get_Results {
	return Assignable_get_Results{s.List.Struct(i)}
}

func (s Assignable_get_Results_List) Set(i int, v Assignable_get_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_get_Results_List) String() string {
	str, _ := text.MarshalList(0xb351b437cd426a4f, s.List)
	return str
}

// Assignable_get_Results_Future is a wrapper for a Assignable_get_Results promised by a client call.
type Assignable_get_Results_Future struct{ *capnp.Future }

func (p Assignable_get_Results_Future) Struct() (Assignable_get_Results, error) {
	s, err := p.Future.Struct()
	return Assignable_get_Results{s}, err
}

func (p Assignable_get_Results_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Assignable_get_Results_Future) Setter() Assignable_Setter {
	return Assignable_Setter{Client: p.Future.Field(1, nil).Client()}
}

type Assignable_asGetter_Params struct{ capnp.Struct }

// Assignable_asGetter_Params_TypeID is the unique identifier for the type Assignable_asGetter_Params.
const Assignable_asGetter_Params_TypeID = 0xf907945b872b26cf

func NewAssignable_asGetter_Params(s *capnp.Segment) (Assignable_asGetter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_asGetter_Params{st}, err
}

func NewRootAssignable_asGetter_Params(s *capnp.Segment) (Assignable_asGetter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_asGetter_Params{st}, err
}

func ReadRootAssignable_asGetter_Params(msg *capnp.Message) (Assignable_asGetter_Params, error) {
	root, err := msg.Root()
	return Assignable_asGetter_Params{root.Struct()}, err
}

func (s Assignable_asGetter_Params) String() string {
	str, _ := text.Marshal(0xf907945b872b26cf, s.Struct)
	return str
}

// Assignable_asGetter_Params_List is a list of Assignable_asGetter_Params.
type Assignable_asGetter_Params_List struct{ capnp.List }

// NewAssignable_asGetter_Params creates a new list of Assignable_asGetter_Params.
func NewAssignable_asGetter_Params_List(s *capnp.Segment, sz int32) (Assignable_asGetter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Assignable_asGetter_Params_List{l}, err
}

func (s Assignable_asGetter_Params_List) At(i int) Assignable_asGetter_Params {
	return Assignable_asGetter_Params{s.List.Struct(i)}
}

func (s Assignable_asGetter_Params_List) Set(i int, v Assignable_asGetter_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_asGetter_Params_List) String() string {
	str, _ := text.MarshalList(0xf907945b872b26cf, s.List)
	return str
}

// Assignable_asGetter_Params_Future is a wrapper for a Assignable_asGetter_Params promised by a client call.
type Assignable_asGetter_Params_Future struct{ *capnp.Future }

func (p Assignable_asGetter_Params_Future) Struct() (Assignable_asGetter_Params, error) {
	s, err := p.Future.Struct()
	return Assignable_asGetter_Params{s}, err
}

type Assignable_asGetter_Results struct{ capnp.Struct }

// Assignable_asGetter_Results_TypeID is the unique identifier for the type Assignable_asGetter_Results.
const Assignable_asGetter_Results_TypeID = 0x8c3d547ef2930e96

func NewAssignable_asGetter_Results(s *capnp.Segment) (Assignable_asGetter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_asGetter_Results{st}, err
}

func NewRootAssignable_asGetter_Results(s *capnp.Segment) (Assignable_asGetter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_asGetter_Results{st}, err
}

func ReadRootAssignable_asGetter_Results(msg *capnp.Message) (Assignable_asGetter_Results, error) {
	root, err := msg.Root()
	return Assignable_asGetter_Results{root.Struct()}, err
}

func (s Assignable_asGetter_Results) String() string {
	str, _ := text.Marshal(0x8c3d547ef2930e96, s.Struct)
	return str
}

func (s Assignable_asGetter_Results) Getter() Assignable_Getter {
	p, _ := s.Struct.Ptr(0)
	return Assignable_Getter{Client: p.Interface().Client()}
}

func (s Assignable_asGetter_Results) HasGetter() bool {
	return s.Struct.HasPtr(0)
}

func (s Assignable_asGetter_Results) SetGetter(v Assignable_Getter) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Assignable_asGetter_Results_List is a list of Assignable_asGetter_Results.
type Assignable_asGetter_Results_List struct{ capnp.List }

// NewAssignable_asGetter_Results creates a new list of Assignable_asGetter_Results.
func NewAssignable_asGetter_Results_List(s *capnp.Segment, sz int32) (Assignable_asGetter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Assignable_asGetter_Results_List{l}, err
}

func (s Assignable_asGetter_Results_List) At(i int) Assignable_asGetter_Results {
	return Assignable_asGetter_Results{s.List.Struct(i)}
}

func (s Assignable_asGetter_Results_List) Set(i int, v Assignable_asGetter_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_asGetter_Results_List) String() string {
	str, _ := text.MarshalList(0x8c3d547ef2930e96, s.List)
	return str
}

// Assignable_asGetter_Results_Future is a wrapper for a Assignable_asGetter_Results promised by a client call.
type Assignable_asGetter_Results_Future struct{ *capnp.Future }

func (p Assignable_asGetter_Results_Future) Struct() (Assignable_asGetter_Results, error) {
	s, err := p.Future.Struct()
	return Assignable_asGetter_Results{s}, err
}

func (p Assignable_asGetter_Results_Future) Getter() Assignable_Getter {
	return Assignable_Getter{Client: p.Future.Field(0, nil).Client()}
}

type Assignable_asSetter_Params struct{ capnp.Struct }

// Assignable_asSetter_Params_TypeID is the unique identifier for the type Assignable_asSetter_Params.
const Assignable_asSetter_Params_TypeID = 0xa01f603357f3b349

func NewAssignable_asSetter_Params(s *capnp.Segment) (Assignable_asSetter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_asSetter_Params{st}, err
}

func NewRootAssignable_asSetter_Params(s *capnp.Segment) (Assignable_asSetter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Assignable_asSetter_Params{st}, err
}

func ReadRootAssignable_asSetter_Params(msg *capnp.Message) (Assignable_asSetter_Params, error) {
	root, err := msg.Root()
	return Assignable_asSetter_Params{root.Struct()}, err
}

func (s Assignable_asSetter_Params) String() string {
	str, _ := text.Marshal(0xa01f603357f3b349, s.Struct)
	return str
}

// Assignable_asSetter_Params_List is a list of Assignable_asSetter_Params.
type Assignable_asSetter_Params_List struct{ capnp.List }

// NewAssignable_asSetter_Params creates a new list of Assignable_asSetter_Params.
func NewAssignable_asSetter_Params_List(s *capnp.Segment, sz int32) (Assignable_asSetter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Assignable_asSetter_Params_List{l}, err
}

func (s Assignable_asSetter_Params_List) At(i int) Assignable_asSetter_Params {
	return Assignable_asSetter_Params{s.List.Struct(i)}
}

func (s Assignable_asSetter_Params_List) Set(i int, v Assignable_asSetter_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_asSetter_Params_List) String() string {
	str, _ := text.MarshalList(0xa01f603357f3b349, s.List)
	return str
}

// Assignable_asSetter_Params_Future is a wrapper for a Assignable_asSetter_Params promised by a client call.
type Assignable_asSetter_Params_Future struct{ *capnp.Future }

func (p Assignable_asSetter_Params_Future) Struct() (Assignable_asSetter_Params, error) {
	s, err := p.Future.Struct()
	return Assignable_asSetter_Params{s}, err
}

type Assignable_asSetter_Results struct{ capnp.Struct }

// Assignable_asSetter_Results_TypeID is the unique identifier for the type Assignable_asSetter_Results.
const Assignable_asSetter_Results_TypeID = 0xc6cbc10181c4f397

func NewAssignable_asSetter_Results(s *capnp.Segment) (Assignable_asSetter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_asSetter_Results{st}, err
}

func NewRootAssignable_asSetter_Results(s *capnp.Segment) (Assignable_asSetter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Assignable_asSetter_Results{st}, err
}

func ReadRootAssignable_asSetter_Results(msg *capnp.Message) (Assignable_asSetter_Results, error) {
	root, err := msg.Root()
	return Assignable_asSetter_Results{root.Struct()}, err
}

func (s Assignable_asSetter_Results) String() string {
	str, _ := text.Marshal(0xc6cbc10181c4f397, s.Struct)
	return str
}

func (s Assignable_asSetter_Results) Setter() Assignable_Setter {
	p, _ := s.Struct.Ptr(0)
	return Assignable_Setter{Client: p.Interface().Client()}
}

func (s Assignable_asSetter_Results) HasSetter() bool {
	return s.Struct.HasPtr(0)
}

func (s Assignable_asSetter_Results) SetSetter(v Assignable_Setter) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Assignable_asSetter_Results_List is a list of Assignable_asSetter_Results.
type Assignable_asSetter_Results_List struct{ capnp.List }

// NewAssignable_asSetter_Results creates a new list of Assignable_asSetter_Results.
func NewAssignable_asSetter_Results_List(s *capnp.Segment, sz int32) (Assignable_asSetter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Assignable_asSetter_Results_List{l}, err
}

func (s Assignable_asSetter_Results_List) At(i int) Assignable_asSetter_Results {
	return Assignable_asSetter_Results{s.List.Struct(i)}
}

func (s Assignable_asSetter_Results_List) Set(i int, v Assignable_asSetter_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Assignable_asSetter_Results_List) String() string {
	str, _ := text.MarshalList(0xc6cbc10181c4f397, s.List)
	return str
}

// Assignable_asSetter_Results_Future is a wrapper for a Assignable_asSetter_Results promised by a client call.
type Assignable_asSetter_Results_Future struct{ *capnp.Future }

func (p Assignable_asSetter_Results_Future) Struct() (Assignable_asSetter_Results, error) {
	s, err := p.Future.Struct()
	return Assignable_asSetter_Results{s}, err
}

func (p Assignable_asSetter_Results_Future) Setter() Assignable_Setter {
	return Assignable_Setter{Client: p.Future.Field(0, nil).Client()}
}

type StaticAsset struct{ Client *capnp.Client }

// StaticAsset_TypeID is the unique identifier for the type StaticAsset.
const StaticAsset_TypeID = 0xfabb5e621fa9a23f

func (c StaticAsset) GetUrl(ctx context.Context, params func(StaticAsset_getUrl_Params) error) (StaticAsset_getUrl_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfabb5e621fa9a23f,
			MethodID:      0,
			InterfaceName: "util.capnp:StaticAsset",
			MethodName:    "getUrl",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StaticAsset_getUrl_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return StaticAsset_getUrl_Results_Future{Future: ans.Future()}, release
}

func (c StaticAsset) AddRef() StaticAsset {
	return StaticAsset{
		Client: c.Client.AddRef(),
	}
}

func (c StaticAsset) Release() {
	c.Client.Release()
}

// A StaticAsset_Server is a StaticAsset with a local implementation.
type StaticAsset_Server interface {
	GetUrl(context.Context, StaticAsset_getUrl) error
}

// StaticAsset_NewServer creates a new Server from an implementation of StaticAsset_Server.
func StaticAsset_NewServer(s StaticAsset_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(StaticAsset_Methods(nil, s), s, c, policy)
}

// StaticAsset_ServerToClient creates a new Client from an implementation of StaticAsset_Server.
// The caller is responsible for calling Release on the returned Client.
func StaticAsset_ServerToClient(s StaticAsset_Server, policy *server.Policy) StaticAsset {
	return StaticAsset{Client: capnp.NewClient(StaticAsset_NewServer(s, policy))}
}

// StaticAsset_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func StaticAsset_Methods(methods []server.Method, s StaticAsset_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfabb5e621fa9a23f,
			MethodID:      0,
			InterfaceName: "util.capnp:StaticAsset",
			MethodName:    "getUrl",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetUrl(ctx, StaticAsset_getUrl{call})
		},
	})

	return methods
}

// StaticAsset_getUrl holds the state for a server call to StaticAsset.getUrl.
// See server.Call for documentation.
type StaticAsset_getUrl struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StaticAsset_getUrl) Args() StaticAsset_getUrl_Params {
	return StaticAsset_getUrl_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c StaticAsset_getUrl) AllocResults() (StaticAsset_getUrl_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StaticAsset_getUrl_Results{Struct: r}, err
}

type StaticAsset_Protocol uint16

// StaticAsset_Protocol_TypeID is the unique identifier for the type StaticAsset_Protocol.
const StaticAsset_Protocol_TypeID = 0x9714437546d80c39

// Values of StaticAsset_Protocol.
const (
	StaticAsset_Protocol_https StaticAsset_Protocol = 0
	StaticAsset_Protocol_http  StaticAsset_Protocol = 1
)

// String returns the enum's constant name.
func (c StaticAsset_Protocol) String() string {
	switch c {
	case StaticAsset_Protocol_https:
		return "https"
	case StaticAsset_Protocol_http:
		return "http"

	default:
		return ""
	}
}

// StaticAsset_ProtocolFromString returns the enum value with a name,
// or the zero value if there's no such value.
func StaticAsset_ProtocolFromString(c string) StaticAsset_Protocol {
	switch c {
	case "https":
		return StaticAsset_Protocol_https
	case "http":
		return StaticAsset_Protocol_http

	default:
		return 0
	}
}

type StaticAsset_Protocol_List struct{ capnp.List }

func NewStaticAsset_Protocol_List(s *capnp.Segment, sz int32) (StaticAsset_Protocol_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return StaticAsset_Protocol_List{l.List}, err
}

func (l StaticAsset_Protocol_List) At(i int) StaticAsset_Protocol {
	ul := capnp.UInt16List{List: l.List}
	return StaticAsset_Protocol(ul.At(i))
}

func (l StaticAsset_Protocol_List) Set(i int, v StaticAsset_Protocol) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type StaticAsset_getUrl_Params struct{ capnp.Struct }

// StaticAsset_getUrl_Params_TypeID is the unique identifier for the type StaticAsset_getUrl_Params.
const StaticAsset_getUrl_Params_TypeID = 0xa75ecf12570b2966

func NewStaticAsset_getUrl_Params(s *capnp.Segment) (StaticAsset_getUrl_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StaticAsset_getUrl_Params{st}, err
}

func NewRootStaticAsset_getUrl_Params(s *capnp.Segment) (StaticAsset_getUrl_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StaticAsset_getUrl_Params{st}, err
}

func ReadRootStaticAsset_getUrl_Params(msg *capnp.Message) (StaticAsset_getUrl_Params, error) {
	root, err := msg.Root()
	return StaticAsset_getUrl_Params{root.Struct()}, err
}

func (s StaticAsset_getUrl_Params) String() string {
	str, _ := text.Marshal(0xa75ecf12570b2966, s.Struct)
	return str
}

// StaticAsset_getUrl_Params_List is a list of StaticAsset_getUrl_Params.
type StaticAsset_getUrl_Params_List struct{ capnp.List }

// NewStaticAsset_getUrl_Params creates a new list of StaticAsset_getUrl_Params.
func NewStaticAsset_getUrl_Params_List(s *capnp.Segment, sz int32) (StaticAsset_getUrl_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return StaticAsset_getUrl_Params_List{l}, err
}

func (s StaticAsset_getUrl_Params_List) At(i int) StaticAsset_getUrl_Params {
	return StaticAsset_getUrl_Params{s.List.Struct(i)}
}

func (s StaticAsset_getUrl_Params_List) Set(i int, v StaticAsset_getUrl_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s StaticAsset_getUrl_Params_List) String() string {
	str, _ := text.MarshalList(0xa75ecf12570b2966, s.List)
	return str
}

// StaticAsset_getUrl_Params_Future is a wrapper for a StaticAsset_getUrl_Params promised by a client call.
type StaticAsset_getUrl_Params_Future struct{ *capnp.Future }

func (p StaticAsset_getUrl_Params_Future) Struct() (StaticAsset_getUrl_Params, error) {
	s, err := p.Future.Struct()
	return StaticAsset_getUrl_Params{s}, err
}

type StaticAsset_getUrl_Results struct{ capnp.Struct }

// StaticAsset_getUrl_Results_TypeID is the unique identifier for the type StaticAsset_getUrl_Results.
const StaticAsset_getUrl_Results_TypeID = 0xa5c3aa75d6b648e2

func NewStaticAsset_getUrl_Results(s *capnp.Segment) (StaticAsset_getUrl_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StaticAsset_getUrl_Results{st}, err
}

func NewRootStaticAsset_getUrl_Results(s *capnp.Segment) (StaticAsset_getUrl_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StaticAsset_getUrl_Results{st}, err
}

func ReadRootStaticAsset_getUrl_Results(msg *capnp.Message) (StaticAsset_getUrl_Results, error) {
	root, err := msg.Root()
	return StaticAsset_getUrl_Results{root.Struct()}, err
}

func (s StaticAsset_getUrl_Results) String() string {
	str, _ := text.Marshal(0xa5c3aa75d6b648e2, s.Struct)
	return str
}

func (s StaticAsset_getUrl_Results) Protocol() StaticAsset_Protocol {
	return StaticAsset_Protocol(s.Struct.Uint16(0))
}

func (s StaticAsset_getUrl_Results) SetProtocol(v StaticAsset_Protocol) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s StaticAsset_getUrl_Results) HostPath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s StaticAsset_getUrl_Results) HasHostPath() bool {
	return s.Struct.HasPtr(0)
}

func (s StaticAsset_getUrl_Results) HostPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s StaticAsset_getUrl_Results) SetHostPath(v string) error {
	return s.Struct.SetText(0, v)
}

// StaticAsset_getUrl_Results_List is a list of StaticAsset_getUrl_Results.
type StaticAsset_getUrl_Results_List struct{ capnp.List }

// NewStaticAsset_getUrl_Results creates a new list of StaticAsset_getUrl_Results.
func NewStaticAsset_getUrl_Results_List(s *capnp.Segment, sz int32) (StaticAsset_getUrl_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return StaticAsset_getUrl_Results_List{l}, err
}

func (s StaticAsset_getUrl_Results_List) At(i int) StaticAsset_getUrl_Results {
	return StaticAsset_getUrl_Results{s.List.Struct(i)}
}

func (s StaticAsset_getUrl_Results_List) Set(i int, v StaticAsset_getUrl_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s StaticAsset_getUrl_Results_List) String() string {
	str, _ := text.MarshalList(0xa5c3aa75d6b648e2, s.List)
	return str
}

// StaticAsset_getUrl_Results_Future is a wrapper for a StaticAsset_getUrl_Results promised by a client call.
type StaticAsset_getUrl_Results_Future struct{ *capnp.Future }

func (p StaticAsset_getUrl_Results_Future) Struct() (StaticAsset_getUrl_Results, error) {
	s, err := p.Future.Struct()
	return StaticAsset_getUrl_Results{s}, err
}

const schema_ecd50d792c3d9992 = "x\xda\xacX\x7fl\x1b\xf5\x15\x7f\xefls\xfe\xed~" +
	"sY\xab\xb0UV\xaa\xb4!\xa1\xf1\xda\xa4Y\x9a\xac" +
	"\x91cO,M\xe8\x84/I\x7flP\xc8%\xb9\xa6" +
	".N\x1c\xf9\xce\xa4\xc9\xa4u\xdd\xbaU\xdb\x80\xd1\x02" +
	"Ka\xab\x80j\x15*\x19c-\x85Jc\xf9\x83\xfd" +
	"\xa0\xea\x18+\xacJU\xd41!6&\xb5\x821\xa5" +
	"\x80F't\xd3\xf7\xeb\xfb\xde\x9d\x13\xbb%\x8c\x7f*" +
	"7\xf7\xee\xbd\xcf{\xef\xf3~\xdd\x9a.O\x87\xb0\xd6" +
	"\xb3'\x02 \x9f\xf4\xdc`\xd4$\xcf\xf7\xf7~8\xf7" +
	"m K]\xc6#\x07V\x1c:\xb9y\xee2\x00," +
	"A\xe9\xa8xY:.\x8a\x00\xd2\xd3\xe2~I\xf6\x8a" +
	"\x00\xc6\xed\xfd\xcf\x9c\x11\xfe\xf3\xe6> \xcb\x11\xc0\x83" +
	"\xe2\x12lj\xf5N\"\xa0t\x8b7\x0eh\xfcj\x9b" +
	"\xb0z6u\xf3\xf7\x81T \x80\x9b\xbe\xadz\xe7\xc0" +
	"mt\xbd\xf5\xcd\x96\xdc\xa9\xed?\x02\x12@\xe3\xe0#" +
	"\xed\xab'B\xb3\xef\x80G\xa0\x12]\xde?J\x9b\xbd" +
	"\xcb\x00$\xc5;\x0eh\xfc$\xfc\xe0\xdc\xb7\xfa\xda\xef" +
	"\x05\xb2\xd4\xb22\xebm\xa3V\xde`V\xce)\xa7\xf5" +
	"{6<z/\xc8K\xd14\xd3D|I*P\xe5" +
	"\xa3\x02\xef\x9f\xbf2U\xf9\xf2\xc6\xfbA^b\x09\xb4" +
	"\xfa\x04*\xd0\xce\x04~x\xf7\xeb-\xadw]d\x02" +
	"\x82)\xb0\xbd \xa0\xf8(\x86\xed\x07\xa6\xa3\xb1\x0f\xdf" +
	"\xbe\x1f\xc8\x12\xee\xc8\x8c\xef*\xb8\x8d\x9au\xc7\xa7\xff" +
	"\xb1\xf7\xf1\x87J9\xf2\x84\xef\x88t\xccG\x7f\x1de" +
	"JZ\x83\x17\xbe\x9a\xffJ\xe5\x14\x90e\x82\x11?r" +
	",:p\xe7\x0bW\x01\xb0\x09\xfd\x02J!?\x95\xf4" +
	"\xf9[\x00\x8d\xb9lEuu\xc5\xbbS\x96\xcb\x00M" +
	"!\xff\x8d\x14\xcf\xe7\xfc\x14\xf0\xc1u\x15\xab\x8e4\xbc" +
	"7\xe5\x8c|\xb3\xbf\x9b\x0a$\x98\xc0k\xfbO\xed\xaf" +
	"my\xf5\x90S@\xf1\xb3\x98\xa4\x99\xc0\x9b\xc9\xfe\xfe" +
	"_\xd4\xbc\x7f\x08H\xc0e\x03\x07\x94~\xe0?(\x1d" +
	"`X\xee\xf3wJ\xcf\xd1_\xc6\xad\x7f\xfa\xeb\xb1K" +
	"U\xe2cf\x00\x19 \xe9\xb0\xff*\xa0\xf4\x84\x9f\xba" +
	"\xd6\xf5\xec\x95\xadM\xfd\xd1\xc7\x0b\x80\xdd\xd4\x1a\x06\x1a" +
	"\x11\xdc\xc6\x81\xf1\xcf\xbfq\xc3/?\xf89\x90*\xb4" +
	"\xd3\xce\x02\xd4t\xc9\xdf\x88\xd2G\xcc\xd6\x07L\xcd[" +
	"\x1b\x9f?\x9f\x7f\xeawGA^f\xd9i\x92\xa9\"" +
	"\x94\xbe\x1e\xa0\x12;\xea\x02[+\xce\xde\xf9$\x90e" +
	"<\x933\x81zj\xa8*\xb1o\xcb\xb9\x8b\x8f\x1d/" +
	"x\xcc \x1c\x0d$\xe9\x93\xdbv%_i9)?" +
	"kFS\xa0\x8f\xee\x0bTP\xa5\x0f3\xa5\x03[\xe4" +
	"\xbf<W\xfb\xf1\x0b\x0e\xf4\x9e\xa0\x9f\xbe:zj\xdb" +
	"\x97\xbaVU\xfe\x86?\x01hz\x97\xbe\xe96v?" +
	"\xb0\xbe\xe1\xd1g\xeex\xa9\xc0\x88\x02\xd2\xd9\x80\x9f\xb1" +
	"2@\x03<u\xe5\xf7{\xf1\xc5\x97_r\xd2\xf6\xe3" +
	"\x00\xa3\xad'H\x05.Mg\x0e\x0f\xa9\xe3g\x1c\xc5" +
	"\xd1\x1a\xa4\x9c\xba\xeb\xefg\xeb\xc6\xd7o}eAj" +
	"\x96\x07OH+\x83T\xb0:xZ:L\x7f\x19U" +
	"'\xd6\xfc\xab\xf9\xf5\x0b\xaf:\x10~/x#E\xf8" +
	"\xc5\xc3\xdb\x1e\x8c\xefZ9[\xa2\x98G\x82\x97\xa5\x09" +
	"\xa6(\x1f\xec\x94\xfe\xc0\x14u<\xf5\xdb/\xcf\xf4\xac" +
	"\xbd\xe8t\xe8\xe9 \xab\x81\xe3\x0c\xef\xf4\xf4?\xcf5" +
	"?\xff\xdf\x8b\x8e\x00\xbf\x16\xec\xa6\x96~\\\xf5\xc0\xf6" +
	"'k\x9b\xdf^\x00x&\xf8\x1d\xe9Efg&x" +
	"Zj\x0dQ;\x16\x92ba\x0a\xab:tB\xaa\x0b" +
	"\xd5\x02H\xed\xa1\xd3RsX\x94\x9a\xc3\x11\xe3\xcc\xbe" +
	"x\xf6g\xf5\x7f{\xc7\xe1a]x\x05\xb5{\xec\xcf" +
	"\xb1C\xef}\xb7\xf6\xdfN\x92\x93p\x8eB^\x1e\xa6" +
	"\x90\x7f\xda)\xd7_\xe8\xdaz\xc5\xf1\xaa\x1cf\x90\xcf" +
	"\xae\xbay\xff\xed\x0f\x89\x1f9R\xde\x1ef\x84\xb5\x0a" +
	"s\xbe3+\xc3\xbf\x96\x1a\xc2\xb4/\xb5\x86;%%" +
	",B\xd2\xc8\xeb\xe9LlP\x19\x13F\xc7\xda\x12\x9a" +
	"\x96\x1e\x1eU\x062j\xacS\x8d\xe8\xba\x9aK!\xca" +
	"^\x97\x87f\xc9$'\xf2\xc2%kW\x00$Vc" +
	"b\x03\x92\xaf\x89\x88\x96/\xc8\x9b*I\xf4\x00$:" +
	"0\x91B\xa2\x88\xe2\xb0\xaa\x13\x8c\xcan\x01\xed\x08\xd2" +
	"\x1a)\xf9\xc7\x0e4\xb4\xfc\x806\x98K\x0f\x00\xaa\x8b" +
	"y/\x85h9\xe5\x9e\xef\x14\xf5)\xc6\x15\xab5=" +
	"qU\xcbgtMv\xbb\xdc\x00n\xaa4\xd4\x06 " +
	"{](W\x0a\x18\xdf\xa9\x8c\x0eeT$v\xaf\x01" +
	"D\x02X\x14\xb5\x8dL(6\x96\x1e\x1d\xaeIE\x95" +
	"\x9c2\xa2\x15=\xdf\x94\x1dT2\xe9Iu\xa8O\xdd" +
	"\xad\x03\xc8nDGO\xc1]\x86)\xa0@DOg" +
	"Ge\xaf\x85\xa5n\x00@\xbe\xc9\x85\xf2:\x01\x09b" +
	"%\xf3zm\x0e@^\xe3By\x93\x80\xc6\x90\xbaC" +
	"\xc9g\xf4>\x10\xd5\xdd:\x06A\xc0 \xa0\x91\xe1\x0a" +
	"\xa3T\xa1\x86a\xc0\x94\x0bq\x89m\x16\x90\xfe\xd1\x82" +
	"\xe9*\x8e\x93\xa2\x15\"u\xcd\xf8\xdc$`|\x98\x89" +
	"!\xb1\xc7.\xcd@\xc9\xc4\x14\x85\x8d\xe6%9\xa1\xab" +
	"\xbdzNUFb\xea\xee1uP\xefMO\xaa5" +
	")\x16?p\x1a\xac\xb7\x13\x12\xd1\xd2\x93*\xfa@@" +
	"\xdf<\xf4\xc9Lv 6\xac\x16\x94\xf4\x14P\xff\x1f" +
	"Z2\xe9A\x1b\x8b#!\xd4\xf9\x1a\x17\xcakhB" +
	"\x84BB\x1a\xea\xed,\xc5\xb3;vh\xaa\xce\x95\x17" +
	",yA@\xef<\xd2\x14\xe1\x8d\xa7\x8aY\x83\xa3c" +
	"m\xb7\xaa\x13[\x141\x93W\x0b%h!X\xe1D" +
	"`R\xa2\xa1\xd1F \xde\xadNp\"D\xefQ2" +
	"y\xd5\xa2\x85\xd3\xd3^]\xd1\xd3\x83\x09MS\xf5X" +
	"*\x97\xd5\xb3\x83\xd9\x0c0St} \xa4\x911\xdd" +
	"W\x0f\x10\xdd\xa9\xebcZ\x84\xfe[\x1c+;\x7f\xe3" +
	"\xb9\xb4^\x08\x97kD+\x17\xf4!EW0\x04\x02" +
	"\x86\xe0z\x05:\xac\xeaV\x0e\x8b\x92\xd8h\xeb3}" +
	"\xab@tN\x06\xac(\xaf\xbc\xd7\xac~U/\xc5\xb2" +
	"\xc5\xa9F^\xf7\xc8\xf2\xe3f-\x92\xef\x8a\xc8\xe7\"" +
	"!\xf5 \x10\x8f\x18\xa1\xbd\xa1\xb83Y\x1c`\xb1\xeb" +
	"\xcbr\x0e\x94!\x1b\xcb4\"i\xa0\xc5\xbf\xda\x85\xf2" +
	"z\x01\xe3\x1a\x8b>\x12{\xdc\x9a\xddI\xd3\x95\x9c\x9e" +
	"\xd0o\x83h\x11\x1b\xcb\x97{!4\x0b\xba\x97k~" +
	"\xf7\x8a\x99\xff\x8b*\xb4\xb1\xcccf[)f:k" +
	"\x83\xb5%\x8b\x8e\x11\xdd\xd9\xb2\xcaqsX\xd57\xe7" +
	"25=j\xb4\xd0\x88\x1c\xf6\xbam\xd5Vo\xec6" +
	"{\xe3\x06\x01\x8d1Nk\x00\x8c\xd8\xab+ F\x00" +
	"\x8d\x9dYMO)\xfaN\xfa\xf4\x13\x82H)\x91\xa2" +
	"\xf0x\xcb\x92\xd7\xe4\x17\x17,\x96\xb3\xd9\x8dE\xfe4" +
	"\x96\x8a_\x9b\xe9\xe4\xc6k\xd12\xae\xf1>lmL" +
	"\x9f\xac\x0f\xbb\x16\"3\xa1C\xb9Z\x1f\xca\x8e\x9a\x9d" +
	"\x11\xb5k\xf4\xce\x92\xe5{\xddvP\x8e\x98\xd7\x9bC" +
	"\x9f\xd6\xff\xf9\xe3\x9b\xdb)\xaas\xe6|\x94yO\x19" +
	"\x1fd\xb5\xce\xef\x1b\xe4\xbb\x1d\x91\x1bA \xb7\xd0E" +
	"\x88\xaf\xdc\xc87[\xd2J\xfb@\x83\x88\x82u\xe9!" +
	"_\xecH\xf57@ Ub\x945\x82\x0e\x8c\xd0\x00" +
	"w\xa0\xc1g\"\xb8&\xd5\xe2\xd6Q*!,\xdc." +
	"]+\xb7\xce\xf5\xda\xeb\\\xa1W\xf1\xeb\x0a\xf9NL" +
	"\x08]\xe7\x82\x98\xf8\x02\x92\x06Q\xd4\x16\xb7\xac-\xc0" +
	"\xe7lm\xa5\xc6\xf1\xa2\xb6\xac\xf2\x8d\xdc\xa2Yq\xc6" +
	"2\xd9\x01\xb0s\xc5O_\xe4W4\x91\x93<W\xfc" +
	".D~<\x90\xd6$\xcf\x15\xbf\xa9\x91_J\xa4\xba" +
	"\x9b\xe5j\x8f9\xb8;p\x8f\xe9c\x07\x1a\x9c\xfa0" +
	"?\x1e\xc8\xd1G\x19|\xd9\x8b\xe8\xf8L\xe1ks\x9c" +
	"9\x9e\xb6x\xa1\x8b\xc4\x0b>\x9a\x0e\xf0\xeb\x0e\xf9\x1d" +
	"Hd\x9a\xacM\x98\xb8\x03\xc9\x08u\x83\x1f\x03\xc8?" +
	"5\x10\xa5\x1b \xd1\x8f\x891${\xa93\xfc\xbeE" +
	"~\xd5\x91<\x95\xd01\xb1\x0f\xc9\xc3\x8b\xdf\xce\xf9\x8e" +
	"\x08eD\xca\xbf\xd7\xfbi\xdeK!&\xdcH\xb0\x02" +
	"\xfb\xae\xbd\x85PF\x88\xce\x12\xbe\xde\x0d`\x0e\xbd\xcf" +
	"\xba\xb5\x94_q\x17r\xb6\xdc\xfa=\x7f\x1e#\x9fK" +
	"\xf1\xc2`b\xa7\x84\xfdM\x06\xbb\x8d\x94=\xf3\xccB" +
	"\xe7\x9f\x1b\x90\x7f\x99 \xa4\x8d-%\xf1\xc2Tc\xa1" +
	"\xfd_\x00\x00\x00\xff\xff\x94*o\xf2"

func init() {
	schemas.Register(schema_ecd50d792c3d9992,
		0x80f2f65360d64224,
		0x84e0f802c9af605b,
		0x862b50d52c0258b0,
		0x8b5db772377be249,
		0x8c3d547ef2930e96,
		0x8c9a3c7674c761d3,
		0x8e48cb1497f3d6f4,
		0x8edb5f3937d96b8a,
		0x8ee5f62e1fab915d,
		0x94a081e4abb13424,
		0x9714437546d80c39,
		0x97ed122121126ff2,
		0x97ef2da226123492,
		0x98d0372787b787d1,
		0x98f424ac606042e0,
		0x9f0719e9a9dccc4b,
		0xa01f603357f3b349,
		0xa4f5ae06dd1b7791,
		0xa5c3aa75d6b648e2,
		0xa75ecf12570b2966,
		0xb19fdbd356844119,
		0xb351b437cd426a4f,
		0xbbfd27b5d2515662,
		0xbc1426493658b76e,
		0xc65caf9a2d389078,
		0xc6cbc10181c4f397,
		0xc97765649d6cabe9,
		0xcd57387729cfe35f,
		0xd0d8d935ee30b219,
		0xd5256a3f93589d2f,
		0xdb3152bd3bc2aa40,
		0xdbfbb635d3e6abab,
		0xe53527a75d90198f,
		0xeaf255b498229199,
		0xecde2a9c6f3f84c9,
		0xf02783ef982ecea9,
		0xf35749d82a51479b,
		0xf907945b872b26cf,
		0xfabb5e621fa9a23f)
}
