// Code generated by capnpc-go. DO NOT EDIT.

package websession

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
	math "math"
	strconv "strconv"
	util "zenhack.net/go/sandstorm/capnp/util"
)

const HttpStatus = uint64(0xaf480a0c6cab8887)

// Constants defined in web-session.capnp.
const (
	HttpStatusAnnotationId = uint64(12630356203439622279)
)

// Constants defined in web-session.capnp.
var (
	WebSession_Context_headerWhitelist  = capnp.TextList(capnp.MustUnmarshalRoot(x_a8cb0f2f1a756b32[0:368]).List())
	WebSession_Response_headerWhitelist = capnp.TextList(capnp.MustUnmarshalRoot(x_a8cb0f2f1a756b32[368:440]).List())
)

type HttpStatusDescriptor capnp.Struct

// HttpStatusDescriptor_TypeID is the unique identifier for the type HttpStatusDescriptor.
const HttpStatusDescriptor_TypeID = 0xbc353583a3731ade

func NewHttpStatusDescriptor(s *capnp.Segment) (HttpStatusDescriptor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HttpStatusDescriptor(st), err
}

func NewRootHttpStatusDescriptor(s *capnp.Segment) (HttpStatusDescriptor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HttpStatusDescriptor(st), err
}

func ReadRootHttpStatusDescriptor(msg *capnp.Message) (HttpStatusDescriptor, error) {
	root, err := msg.Root()
	return HttpStatusDescriptor(root.Struct()), err
}

func (s HttpStatusDescriptor) String() string {
	str, _ := text.Marshal(0xbc353583a3731ade, capnp.Struct(s))
	return str
}

func (s HttpStatusDescriptor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HttpStatusDescriptor) DecodeFromPtr(p capnp.Ptr) HttpStatusDescriptor {
	return HttpStatusDescriptor(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HttpStatusDescriptor) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HttpStatusDescriptor) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HttpStatusDescriptor) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HttpStatusDescriptor) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s HttpStatusDescriptor) Id() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s HttpStatusDescriptor) SetId(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s HttpStatusDescriptor) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s HttpStatusDescriptor) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s HttpStatusDescriptor) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s HttpStatusDescriptor) SetTitle(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// HttpStatusDescriptor_List is a list of HttpStatusDescriptor.
type HttpStatusDescriptor_List = capnp.StructList[HttpStatusDescriptor]

// NewHttpStatusDescriptor creates a new list of HttpStatusDescriptor.
func NewHttpStatusDescriptor_List(s *capnp.Segment, sz int32) (HttpStatusDescriptor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[HttpStatusDescriptor](l), err
}

// HttpStatusDescriptor_Future is a wrapper for a HttpStatusDescriptor promised by a client call.
type HttpStatusDescriptor_Future struct{ *capnp.Future }

func (p HttpStatusDescriptor_Future) Struct() (HttpStatusDescriptor, error) {
	s, err := p.Future.Struct()
	return HttpStatusDescriptor(s), err
}

type WebSession capnp.Client

// WebSession_TypeID is the unique identifier for the type WebSession.
const WebSession_TypeID = 0xa50711a14d35a8ce

func (c WebSession) Get(ctx context.Context, params func(WebSession_get_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_get_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Post(ctx context.Context, params func(WebSession_post_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_post_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) OpenWebSocket(ctx context.Context, params func(WebSession_openWebSocket_Params) error) (WebSession_openWebSocket_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_openWebSocket_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_openWebSocket_Results_Future{Future: ans.Future()}, release
}
func (c WebSession) Put(ctx context.Context, params func(WebSession_put_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_put_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Delete(ctx context.Context, params func(WebSession_delete_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_delete_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) PostStreaming(ctx context.Context, params func(WebSession_postStreaming_Params) error) (WebSession_postStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_postStreaming_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_postStreaming_Results_Future{Future: ans.Future()}, release
}
func (c WebSession) PutStreaming(ctx context.Context, params func(WebSession_putStreaming_Params) error) (WebSession_putStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_putStreaming_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_putStreaming_Results_Future{Future: ans.Future()}, release
}
func (c WebSession) Propfind(ctx context.Context, params func(WebSession_propfind_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_propfind_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Proppatch(ctx context.Context, params func(WebSession_proppatch_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_proppatch_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Mkcol(ctx context.Context, params func(WebSession_mkcol_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_mkcol_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Copy(ctx context.Context, params func(WebSession_copy_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_copy_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Move(ctx context.Context, params func(WebSession_move_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_move_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Lock(ctx context.Context, params func(WebSession_lock_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_lock_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Unlock(ctx context.Context, params func(WebSession_unlock_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_unlock_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Acl(ctx context.Context, params func(WebSession_acl_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_acl_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Report(ctx context.Context, params func(WebSession_report_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_report_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Options(ctx context.Context, params func(WebSession_options_Params) error) (WebSession_Options_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_options_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_Options_Future{Future: ans.Future()}, release
}
func (c WebSession) Patch(ctx context.Context, params func(WebSession_patch_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_patch_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}

func (c WebSession) AddRef() WebSession {
	return WebSession(capnp.Client(c).AddRef())
}

func (c WebSession) Release() {
	capnp.Client(c).Release()
}

func (c WebSession) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (WebSession) DecodeFromPtr(p capnp.Ptr) WebSession {
	return WebSession(capnp.Client{}.DecodeFromPtr(p))
}

func (c WebSession) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A WebSession_Server is a WebSession with a local implementation.
type WebSession_Server interface {
	Get(context.Context, WebSession_get) error

	Post(context.Context, WebSession_post) error

	OpenWebSocket(context.Context, WebSession_openWebSocket) error

	Put(context.Context, WebSession_put) error

	Delete(context.Context, WebSession_delete) error

	PostStreaming(context.Context, WebSession_postStreaming) error

	PutStreaming(context.Context, WebSession_putStreaming) error

	Propfind(context.Context, WebSession_propfind) error

	Proppatch(context.Context, WebSession_proppatch) error

	Mkcol(context.Context, WebSession_mkcol) error

	Copy(context.Context, WebSession_copy) error

	Move(context.Context, WebSession_move) error

	Lock(context.Context, WebSession_lock) error

	Unlock(context.Context, WebSession_unlock) error

	Acl(context.Context, WebSession_acl) error

	Report(context.Context, WebSession_report) error

	Options(context.Context, WebSession_options) error

	Patch(context.Context, WebSession_patch) error
}

// WebSession_NewServer creates a new Server from an implementation of WebSession_Server.
func WebSession_NewServer(s WebSession_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WebSession_Methods(nil, s), s, c)
}

// WebSession_ServerToClient creates a new Client from an implementation of WebSession_Server.
// The caller is responsible for calling Release on the returned Client.
func WebSession_ServerToClient(s WebSession_Server) WebSession {
	return WebSession(capnp.NewClient(WebSession_NewServer(s)))
}

// WebSession_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WebSession_Methods(methods []server.Method, s WebSession_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 18)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, WebSession_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Post(ctx, WebSession_post{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.OpenWebSocket(ctx, WebSession_openWebSocket{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, WebSession_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Delete(ctx, WebSession_delete{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PostStreaming(ctx, WebSession_postStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PutStreaming(ctx, WebSession_putStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Propfind(ctx, WebSession_propfind{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Proppatch(ctx, WebSession_proppatch{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Mkcol(ctx, WebSession_mkcol{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Copy(ctx, WebSession_copy{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Move(ctx, WebSession_move{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lock(ctx, WebSession_lock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unlock(ctx, WebSession_unlock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Acl(ctx, WebSession_acl{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Report(ctx, WebSession_report{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Options(ctx, WebSession_options{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Patch(ctx, WebSession_patch{call})
		},
	})

	return methods
}

// WebSession_get holds the state for a server call to WebSession.get.
// See server.Call for documentation.
type WebSession_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_get) Args() WebSession_get_Params {
	return WebSession_get_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_get) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response(r), err
}

// WebSession_post holds the state for a server call to WebSession.post.
// See server.Call for documentation.
type WebSession_post struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_post) Args() WebSession_post_Params {
	return WebSession_post_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_post) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response(r), err
}

// WebSession_openWebSocket holds the state for a server call to WebSession.openWebSocket.
// See server.Call for documentation.
type WebSession_openWebSocket struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_openWebSocket) Args() WebSession_openWebSocket_Params {
	return WebSession_openWebSocket_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_openWebSocket) AllocResults() (WebSession_openWebSocket_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_openWebSocket_Results(r), err
}

// WebSession_put holds the state for a server call to WebSession.put.
// See server.Call for documentation.
type WebSession_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_put) Args() WebSession_put_Params {
	return WebSession_put_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_put) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response(r), err
}

// WebSession_delete holds the state for a server call to WebSession.delete.
// See server.Call for documentation.
type WebSession_delete struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_delete) Args() WebSession_delete_Params {
	return WebSession_delete_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_delete) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response(r), err
}

// WebSession_postStreaming holds the state for a server call to WebSession.postStreaming.
// See server.Call for documentation.
type WebSession_postStreaming struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_postStreaming) Args() WebSession_postStreaming_Params {
	return WebSession_postStreaming_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_postStreaming) AllocResults() (WebSession_postStreaming_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_postStreaming_Results(r), err
}

// WebSession_putStreaming holds the state for a server call to WebSession.putStreaming.
// See server.Call for documentation.
type WebSession_putStreaming struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_putStreaming) Args() WebSession_putStreaming_Params {
	return WebSession_putStreaming_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_putStreaming) AllocResults() (WebSession_putStreaming_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_putStreaming_Results(r), err
}

// WebSession_propfind holds the state for a server call to WebSession.propfind.
// See server.Call for documentation.
type WebSession_propfind struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_propfind) Args() WebSession_propfind_Params {
	return WebSession_propfind_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_propfind) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response(r), err
}

// WebSession_proppatch holds the state for a server call to WebSession.proppatch.
// See server.Call for documentation.
type WebSession_proppatch struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_proppatch) Args() WebSession_proppatch_Params {
	return WebSession_proppatch_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_proppatch) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response(r), err
}

// WebSession_mkcol holds the state for a server call to WebSession.mkcol.
// See server.Call for documentation.
type WebSession_mkcol struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_mkcol) Args() WebSession_mkcol_Params {
	return WebSession_mkcol_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_mkcol) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response(r), err
}

// WebSession_copy holds the state for a server call to WebSession.copy.
// See server.Call for documentation.
type WebSession_copy struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_copy) Args() WebSession_copy_Params {
	return WebSession_copy_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_copy) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response(r), err
}

// WebSession_move holds the state for a server call to WebSession.move.
// See server.Call for documentation.
type WebSession_move struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_move) Args() WebSession_move_Params {
	return WebSession_move_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_move) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response(r), err
}

// WebSession_lock holds the state for a server call to WebSession.lock.
// See server.Call for documentation.
type WebSession_lock struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_lock) Args() WebSession_lock_Params {
	return WebSession_lock_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_lock) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response(r), err
}

// WebSession_unlock holds the state for a server call to WebSession.unlock.
// See server.Call for documentation.
type WebSession_unlock struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_unlock) Args() WebSession_unlock_Params {
	return WebSession_unlock_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_unlock) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response(r), err
}

// WebSession_acl holds the state for a server call to WebSession.acl.
// See server.Call for documentation.
type WebSession_acl struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_acl) Args() WebSession_acl_Params {
	return WebSession_acl_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_acl) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response(r), err
}

// WebSession_report holds the state for a server call to WebSession.report.
// See server.Call for documentation.
type WebSession_report struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_report) Args() WebSession_report_Params {
	return WebSession_report_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_report) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response(r), err
}

// WebSession_options holds the state for a server call to WebSession.options.
// See server.Call for documentation.
type WebSession_options struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_options) Args() WebSession_options_Params {
	return WebSession_options_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_options) AllocResults() (WebSession_Options, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_Options(r), err
}

// WebSession_patch holds the state for a server call to WebSession.patch.
// See server.Call for documentation.
type WebSession_patch struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_patch) Args() WebSession_patch_Params {
	return WebSession_patch_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_patch) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response(r), err
}

// WebSession_List is a list of WebSession.
type WebSession_List = capnp.CapList[WebSession]

// NewWebSession creates a new list of WebSession.
func NewWebSession_List(s *capnp.Segment, sz int32) (WebSession_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[WebSession](l), err
}

type WebSession_Params capnp.Struct

// WebSession_Params_TypeID is the unique identifier for the type WebSession_Params.
const WebSession_Params_TypeID = 0xd7051b9757f6b096

func NewWebSession_Params(s *capnp.Segment) (WebSession_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_Params(st), err
}

func NewRootWebSession_Params(s *capnp.Segment) (WebSession_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_Params(st), err
}

func ReadRootWebSession_Params(msg *capnp.Message) (WebSession_Params, error) {
	root, err := msg.Root()
	return WebSession_Params(root.Struct()), err
}

func (s WebSession_Params) String() string {
	str, _ := text.Marshal(0xd7051b9757f6b096, capnp.Struct(s))
	return str
}

func (s WebSession_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_Params) DecodeFromPtr(p capnp.Ptr) WebSession_Params {
	return WebSession_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_Params) BasePath() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_Params) HasBasePath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_Params) BasePathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_Params) SetBasePath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_Params) UserAgent() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_Params) HasUserAgent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_Params) UserAgentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Params) SetUserAgent(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_Params) AcceptableLanguages() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s WebSession_Params) HasAcceptableLanguages() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_Params) SetAcceptableLanguages(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewAcceptableLanguages sets the acceptableLanguages field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s WebSession_Params) NewAcceptableLanguages(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// WebSession_Params_List is a list of WebSession_Params.
type WebSession_Params_List = capnp.StructList[WebSession_Params]

// NewWebSession_Params creates a new list of WebSession_Params.
func NewWebSession_Params_List(s *capnp.Segment, sz int32) (WebSession_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_Params](l), err
}

// WebSession_Params_Future is a wrapper for a WebSession_Params promised by a client call.
type WebSession_Params_Future struct{ *capnp.Future }

func (p WebSession_Params_Future) Struct() (WebSession_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_Params(s), err
}

type WebSession_Context capnp.Struct
type WebSession_Context_eTagPrecondition WebSession_Context
type WebSession_Context_eTagPrecondition_Which uint16

const (
	WebSession_Context_eTagPrecondition_Which_none          WebSession_Context_eTagPrecondition_Which = 0
	WebSession_Context_eTagPrecondition_Which_exists        WebSession_Context_eTagPrecondition_Which = 1
	WebSession_Context_eTagPrecondition_Which_doesntExist   WebSession_Context_eTagPrecondition_Which = 4
	WebSession_Context_eTagPrecondition_Which_matchesOneOf  WebSession_Context_eTagPrecondition_Which = 2
	WebSession_Context_eTagPrecondition_Which_matchesNoneOf WebSession_Context_eTagPrecondition_Which = 3
)

func (w WebSession_Context_eTagPrecondition_Which) String() string {
	const s = "noneexistsdoesntExistmatchesOneOfmatchesNoneOf"
	switch w {
	case WebSession_Context_eTagPrecondition_Which_none:
		return s[0:4]
	case WebSession_Context_eTagPrecondition_Which_exists:
		return s[4:10]
	case WebSession_Context_eTagPrecondition_Which_doesntExist:
		return s[10:21]
	case WebSession_Context_eTagPrecondition_Which_matchesOneOf:
		return s[21:33]
	case WebSession_Context_eTagPrecondition_Which_matchesNoneOf:
		return s[33:46]

	}
	return "WebSession_Context_eTagPrecondition_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// WebSession_Context_TypeID is the unique identifier for the type WebSession_Context.
const WebSession_Context_TypeID = 0xf5cae52becabc767

func NewWebSession_Context(s *capnp.Segment) (WebSession_Context, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return WebSession_Context(st), err
}

func NewRootWebSession_Context(s *capnp.Segment) (WebSession_Context, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return WebSession_Context(st), err
}

func ReadRootWebSession_Context(msg *capnp.Message) (WebSession_Context, error) {
	root, err := msg.Root()
	return WebSession_Context(root.Struct()), err
}

func (s WebSession_Context) String() string {
	str, _ := text.Marshal(0xf5cae52becabc767, capnp.Struct(s))
	return str
}

func (s WebSession_Context) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_Context) DecodeFromPtr(p capnp.Ptr) WebSession_Context {
	return WebSession_Context(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_Context) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_Context) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_Context) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_Context) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_Context) Cookies() (util.KeyValue_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return util.KeyValue_List(p.List()), err
}

func (s WebSession_Context) HasCookies() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_Context) SetCookies(v util.KeyValue_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCookies sets the cookies field to a newly
// allocated util.KeyValue_List, preferring placement in s's segment.
func (s WebSession_Context) NewCookies(n int32) (util.KeyValue_List, error) {
	l, err := util.NewKeyValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return util.KeyValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

func (s WebSession_Context) ResponseStream() util.ByteStream {
	p, _ := capnp.Struct(s).Ptr(1)
	return util.ByteStream(p.Interface().Client())
}

func (s WebSession_Context) HasResponseStream() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_Context) SetResponseStream(v util.ByteStream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

func (s WebSession_Context) Accept() (WebSession_AcceptedType_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return WebSession_AcceptedType_List(p.List()), err
}

func (s WebSession_Context) HasAccept() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_Context) SetAccept(v WebSession_AcceptedType_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewAccept sets the accept field to a newly
// allocated WebSession_AcceptedType_List, preferring placement in s's segment.
func (s WebSession_Context) NewAccept(n int32) (WebSession_AcceptedType_List, error) {
	l, err := NewWebSession_AcceptedType_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return WebSession_AcceptedType_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

func (s WebSession_Context) AcceptEncoding() (WebSession_AcceptedEncoding_List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return WebSession_AcceptedEncoding_List(p.List()), err
}

func (s WebSession_Context) HasAcceptEncoding() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s WebSession_Context) SetAcceptEncoding(v WebSession_AcceptedEncoding_List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewAcceptEncoding sets the acceptEncoding field to a newly
// allocated WebSession_AcceptedEncoding_List, preferring placement in s's segment.
func (s WebSession_Context) NewAcceptEncoding(n int32) (WebSession_AcceptedEncoding_List, error) {
	l, err := NewWebSession_AcceptedEncoding_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return WebSession_AcceptedEncoding_List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}

func (s WebSession_Context) ETagPrecondition() WebSession_Context_eTagPrecondition {
	return WebSession_Context_eTagPrecondition(s)
}

func (s WebSession_Context_eTagPrecondition) Which() WebSession_Context_eTagPrecondition_Which {
	return WebSession_Context_eTagPrecondition_Which(capnp.Struct(s).Uint16(0))
}
func (s WebSession_Context_eTagPrecondition) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_Context_eTagPrecondition) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_Context_eTagPrecondition) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_Context_eTagPrecondition) SetNone() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s WebSession_Context_eTagPrecondition) SetExists() {
	capnp.Struct(s).SetUint16(0, 1)

}

func (s WebSession_Context_eTagPrecondition) SetDoesntExist() {
	capnp.Struct(s).SetUint16(0, 4)

}

func (s WebSession_Context_eTagPrecondition) MatchesOneOf() (WebSession_ETag_List, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != matchesOneOf")
	}
	p, err := capnp.Struct(s).Ptr(4)
	return WebSession_ETag_List(p.List()), err
}

func (s WebSession_Context_eTagPrecondition) HasMatchesOneOf() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(4)
}

func (s WebSession_Context_eTagPrecondition) SetMatchesOneOf(v WebSession_ETag_List) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewMatchesOneOf sets the matchesOneOf field to a newly
// allocated WebSession_ETag_List, preferring placement in s's segment.
func (s WebSession_Context_eTagPrecondition) NewMatchesOneOf(n int32) (WebSession_ETag_List, error) {
	capnp.Struct(s).SetUint16(0, 2)
	l, err := NewWebSession_ETag_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return WebSession_ETag_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}

func (s WebSession_Context_eTagPrecondition) MatchesNoneOf() (WebSession_ETag_List, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != matchesNoneOf")
	}
	p, err := capnp.Struct(s).Ptr(4)
	return WebSession_ETag_List(p.List()), err
}

func (s WebSession_Context_eTagPrecondition) HasMatchesNoneOf() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(4)
}

func (s WebSession_Context_eTagPrecondition) SetMatchesNoneOf(v WebSession_ETag_List) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewMatchesNoneOf sets the matchesNoneOf field to a newly
// allocated WebSession_ETag_List, preferring placement in s's segment.
func (s WebSession_Context_eTagPrecondition) NewMatchesNoneOf(n int32) (WebSession_ETag_List, error) {
	capnp.Struct(s).SetUint16(0, 3)
	l, err := NewWebSession_ETag_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return WebSession_ETag_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}

func (s WebSession_Context) AdditionalHeaders() (WebSession_Context_Header_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return WebSession_Context_Header_List(p.List()), err
}

func (s WebSession_Context) HasAdditionalHeaders() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s WebSession_Context) SetAdditionalHeaders(v WebSession_Context_Header_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewAdditionalHeaders sets the additionalHeaders field to a newly
// allocated WebSession_Context_Header_List, preferring placement in s's segment.
func (s WebSession_Context) NewAdditionalHeaders(n int32) (WebSession_Context_Header_List, error) {
	l, err := NewWebSession_Context_Header_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return WebSession_Context_Header_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// WebSession_Context_List is a list of WebSession_Context.
type WebSession_Context_List = capnp.StructList[WebSession_Context]

// NewWebSession_Context creates a new list of WebSession_Context.
func NewWebSession_Context_List(s *capnp.Segment, sz int32) (WebSession_Context_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6}, sz)
	return capnp.StructList[WebSession_Context](l), err
}

// WebSession_Context_Future is a wrapper for a WebSession_Context promised by a client call.
type WebSession_Context_Future struct{ *capnp.Future }

func (p WebSession_Context_Future) Struct() (WebSession_Context, error) {
	s, err := p.Future.Struct()
	return WebSession_Context(s), err
}

func (p WebSession_Context_Future) ResponseStream() util.ByteStream {
	return util.ByteStream(p.Future.Field(1, nil).Client())
}

func (p WebSession_Context_Future) ETagPrecondition() WebSession_Context_eTagPrecondition_Future {
	return WebSession_Context_eTagPrecondition_Future{p.Future}
}

// WebSession_Context_eTagPrecondition_Future is a wrapper for a WebSession_Context_eTagPrecondition promised by a client call.
type WebSession_Context_eTagPrecondition_Future struct{ *capnp.Future }

func (p WebSession_Context_eTagPrecondition_Future) Struct() (WebSession_Context_eTagPrecondition, error) {
	s, err := p.Future.Struct()
	return WebSession_Context_eTagPrecondition(s), err
}

type WebSession_Context_Header capnp.Struct

// WebSession_Context_Header_TypeID is the unique identifier for the type WebSession_Context_Header.
const WebSession_Context_Header_TypeID = 0xb4e5f4cccb748429

func NewWebSession_Context_Header(s *capnp.Segment) (WebSession_Context_Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_Context_Header(st), err
}

func NewRootWebSession_Context_Header(s *capnp.Segment) (WebSession_Context_Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_Context_Header(st), err
}

func ReadRootWebSession_Context_Header(msg *capnp.Message) (WebSession_Context_Header, error) {
	root, err := msg.Root()
	return WebSession_Context_Header(root.Struct()), err
}

func (s WebSession_Context_Header) String() string {
	str, _ := text.Marshal(0xb4e5f4cccb748429, capnp.Struct(s))
	return str
}

func (s WebSession_Context_Header) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_Context_Header) DecodeFromPtr(p capnp.Ptr) WebSession_Context_Header {
	return WebSession_Context_Header(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_Context_Header) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_Context_Header) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_Context_Header) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_Context_Header) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_Context_Header) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_Context_Header) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_Context_Header) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_Context_Header) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_Context_Header) Value() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_Context_Header) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_Context_Header) ValueBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Context_Header) SetValue(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// WebSession_Context_Header_List is a list of WebSession_Context_Header.
type WebSession_Context_Header_List = capnp.StructList[WebSession_Context_Header]

// NewWebSession_Context_Header creates a new list of WebSession_Context_Header.
func NewWebSession_Context_Header_List(s *capnp.Segment, sz int32) (WebSession_Context_Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[WebSession_Context_Header](l), err
}

// WebSession_Context_Header_Future is a wrapper for a WebSession_Context_Header promised by a client call.
type WebSession_Context_Header_Future struct{ *capnp.Future }

func (p WebSession_Context_Header_Future) Struct() (WebSession_Context_Header, error) {
	s, err := p.Future.Struct()
	return WebSession_Context_Header(s), err
}

type WebSession_PostContent capnp.Struct

// WebSession_PostContent_TypeID is the unique identifier for the type WebSession_PostContent.
const WebSession_PostContent_TypeID = 0xb7d82eac416ab63e

func NewWebSession_PostContent(s *capnp.Segment) (WebSession_PostContent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_PostContent(st), err
}

func NewRootWebSession_PostContent(s *capnp.Segment) (WebSession_PostContent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_PostContent(st), err
}

func ReadRootWebSession_PostContent(msg *capnp.Message) (WebSession_PostContent, error) {
	root, err := msg.Root()
	return WebSession_PostContent(root.Struct()), err
}

func (s WebSession_PostContent) String() string {
	str, _ := text.Marshal(0xb7d82eac416ab63e, capnp.Struct(s))
	return str
}

func (s WebSession_PostContent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_PostContent) DecodeFromPtr(p capnp.Ptr) WebSession_PostContent {
	return WebSession_PostContent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_PostContent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_PostContent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_PostContent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_PostContent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_PostContent) MimeType() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_PostContent) HasMimeType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_PostContent) MimeTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_PostContent) SetMimeType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_PostContent) Content() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s WebSession_PostContent) HasContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_PostContent) SetContent(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s WebSession_PostContent) Encoding() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s WebSession_PostContent) HasEncoding() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_PostContent) EncodingBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s WebSession_PostContent) SetEncoding(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// WebSession_PostContent_List is a list of WebSession_PostContent.
type WebSession_PostContent_List = capnp.StructList[WebSession_PostContent]

// NewWebSession_PostContent creates a new list of WebSession_PostContent.
func NewWebSession_PostContent_List(s *capnp.Segment, sz int32) (WebSession_PostContent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_PostContent](l), err
}

// WebSession_PostContent_Future is a wrapper for a WebSession_PostContent promised by a client call.
type WebSession_PostContent_Future struct{ *capnp.Future }

func (p WebSession_PostContent_Future) Struct() (WebSession_PostContent, error) {
	s, err := p.Future.Struct()
	return WebSession_PostContent(s), err
}

type WebSession_PutContent capnp.Struct

// WebSession_PutContent_TypeID is the unique identifier for the type WebSession_PutContent.
const WebSession_PutContent_TypeID = 0xd7aff1fe39659132

func NewWebSession_PutContent(s *capnp.Segment) (WebSession_PutContent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_PutContent(st), err
}

func NewRootWebSession_PutContent(s *capnp.Segment) (WebSession_PutContent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_PutContent(st), err
}

func ReadRootWebSession_PutContent(msg *capnp.Message) (WebSession_PutContent, error) {
	root, err := msg.Root()
	return WebSession_PutContent(root.Struct()), err
}

func (s WebSession_PutContent) String() string {
	str, _ := text.Marshal(0xd7aff1fe39659132, capnp.Struct(s))
	return str
}

func (s WebSession_PutContent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_PutContent) DecodeFromPtr(p capnp.Ptr) WebSession_PutContent {
	return WebSession_PutContent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_PutContent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_PutContent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_PutContent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_PutContent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_PutContent) MimeType() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_PutContent) HasMimeType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_PutContent) MimeTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_PutContent) SetMimeType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_PutContent) Content() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s WebSession_PutContent) HasContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_PutContent) SetContent(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s WebSession_PutContent) Encoding() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s WebSession_PutContent) HasEncoding() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_PutContent) EncodingBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s WebSession_PutContent) SetEncoding(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// WebSession_PutContent_List is a list of WebSession_PutContent.
type WebSession_PutContent_List = capnp.StructList[WebSession_PutContent]

// NewWebSession_PutContent creates a new list of WebSession_PutContent.
func NewWebSession_PutContent_List(s *capnp.Segment, sz int32) (WebSession_PutContent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_PutContent](l), err
}

// WebSession_PutContent_Future is a wrapper for a WebSession_PutContent promised by a client call.
type WebSession_PutContent_Future struct{ *capnp.Future }

func (p WebSession_PutContent_Future) Struct() (WebSession_PutContent, error) {
	s, err := p.Future.Struct()
	return WebSession_PutContent(s), err
}

type WebSession_ETag capnp.Struct

// WebSession_ETag_TypeID is the unique identifier for the type WebSession_ETag.
const WebSession_ETag_TypeID = 0xd22c0be5b9c16558

func NewWebSession_ETag(s *capnp.Segment) (WebSession_ETag, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_ETag(st), err
}

func NewRootWebSession_ETag(s *capnp.Segment) (WebSession_ETag, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_ETag(st), err
}

func ReadRootWebSession_ETag(msg *capnp.Message) (WebSession_ETag, error) {
	root, err := msg.Root()
	return WebSession_ETag(root.Struct()), err
}

func (s WebSession_ETag) String() string {
	str, _ := text.Marshal(0xd22c0be5b9c16558, capnp.Struct(s))
	return str
}

func (s WebSession_ETag) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_ETag) DecodeFromPtr(p capnp.Ptr) WebSession_ETag {
	return WebSession_ETag(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_ETag) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_ETag) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_ETag) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_ETag) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_ETag) Value() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_ETag) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_ETag) ValueBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_ETag) SetValue(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_ETag) Weak() bool {
	return capnp.Struct(s).Bit(0)
}

func (s WebSession_ETag) SetWeak(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// WebSession_ETag_List is a list of WebSession_ETag.
type WebSession_ETag_List = capnp.StructList[WebSession_ETag]

// NewWebSession_ETag creates a new list of WebSession_ETag.
func NewWebSession_ETag_List(s *capnp.Segment, sz int32) (WebSession_ETag_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[WebSession_ETag](l), err
}

// WebSession_ETag_Future is a wrapper for a WebSession_ETag promised by a client call.
type WebSession_ETag_Future struct{ *capnp.Future }

func (p WebSession_ETag_Future) Struct() (WebSession_ETag, error) {
	s, err := p.Future.Struct()
	return WebSession_ETag(s), err
}

type WebSession_Cookie capnp.Struct
type WebSession_Cookie_expires WebSession_Cookie
type WebSession_Cookie_expires_Which uint16

const (
	WebSession_Cookie_expires_Which_none     WebSession_Cookie_expires_Which = 0
	WebSession_Cookie_expires_Which_absolute WebSession_Cookie_expires_Which = 1
	WebSession_Cookie_expires_Which_relative WebSession_Cookie_expires_Which = 2
)

func (w WebSession_Cookie_expires_Which) String() string {
	const s = "noneabsoluterelative"
	switch w {
	case WebSession_Cookie_expires_Which_none:
		return s[0:4]
	case WebSession_Cookie_expires_Which_absolute:
		return s[4:12]
	case WebSession_Cookie_expires_Which_relative:
		return s[12:20]

	}
	return "WebSession_Cookie_expires_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// WebSession_Cookie_TypeID is the unique identifier for the type WebSession_Cookie.
const WebSession_Cookie_TypeID = 0xa87d65bed9b60243

func NewWebSession_Cookie(s *capnp.Segment) (WebSession_Cookie, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return WebSession_Cookie(st), err
}

func NewRootWebSession_Cookie(s *capnp.Segment) (WebSession_Cookie, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return WebSession_Cookie(st), err
}

func ReadRootWebSession_Cookie(msg *capnp.Message) (WebSession_Cookie, error) {
	root, err := msg.Root()
	return WebSession_Cookie(root.Struct()), err
}

func (s WebSession_Cookie) String() string {
	str, _ := text.Marshal(0xa87d65bed9b60243, capnp.Struct(s))
	return str
}

func (s WebSession_Cookie) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_Cookie) DecodeFromPtr(p capnp.Ptr) WebSession_Cookie {
	return WebSession_Cookie(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_Cookie) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_Cookie) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_Cookie) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_Cookie) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_Cookie) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_Cookie) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_Cookie) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_Cookie) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_Cookie) Value() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_Cookie) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_Cookie) ValueBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Cookie) SetValue(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_Cookie) Expires() WebSession_Cookie_expires { return WebSession_Cookie_expires(s) }

func (s WebSession_Cookie_expires) Which() WebSession_Cookie_expires_Which {
	return WebSession_Cookie_expires_Which(capnp.Struct(s).Uint16(0))
}
func (s WebSession_Cookie_expires) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_Cookie_expires) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_Cookie_expires) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_Cookie_expires) SetNone() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s WebSession_Cookie_expires) Absolute() int64 {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != absolute")
	}
	return int64(capnp.Struct(s).Uint64(8))
}

func (s WebSession_Cookie_expires) SetAbsolute(v int64) {
	capnp.Struct(s).SetUint16(0, 1)
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s WebSession_Cookie_expires) Relative() uint64 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != relative")
	}
	return capnp.Struct(s).Uint64(8)
}

func (s WebSession_Cookie_expires) SetRelative(v uint64) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint64(8, v)
}

func (s WebSession_Cookie) HttpOnly() bool {
	return capnp.Struct(s).Bit(16)
}

func (s WebSession_Cookie) SetHttpOnly(v bool) {
	capnp.Struct(s).SetBit(16, v)
}

func (s WebSession_Cookie) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s WebSession_Cookie) HasPath() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_Cookie) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s WebSession_Cookie) SetPath(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// WebSession_Cookie_List is a list of WebSession_Cookie.
type WebSession_Cookie_List = capnp.StructList[WebSession_Cookie]

// NewWebSession_Cookie creates a new list of WebSession_Cookie.
func NewWebSession_Cookie_List(s *capnp.Segment, sz int32) (WebSession_Cookie_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_Cookie](l), err
}

// WebSession_Cookie_Future is a wrapper for a WebSession_Cookie promised by a client call.
type WebSession_Cookie_Future struct{ *capnp.Future }

func (p WebSession_Cookie_Future) Struct() (WebSession_Cookie, error) {
	s, err := p.Future.Struct()
	return WebSession_Cookie(s), err
}

func (p WebSession_Cookie_Future) Expires() WebSession_Cookie_expires_Future {
	return WebSession_Cookie_expires_Future{p.Future}
}

// WebSession_Cookie_expires_Future is a wrapper for a WebSession_Cookie_expires promised by a client call.
type WebSession_Cookie_expires_Future struct{ *capnp.Future }

func (p WebSession_Cookie_expires_Future) Struct() (WebSession_Cookie_expires, error) {
	s, err := p.Future.Struct()
	return WebSession_Cookie_expires(s), err
}

type WebSession_AcceptedType capnp.Struct

// WebSession_AcceptedType_TypeID is the unique identifier for the type WebSession_AcceptedType.
const WebSession_AcceptedType_TypeID = 0xaaf9021b627cc1f9

func NewWebSession_AcceptedType(s *capnp.Segment) (WebSession_AcceptedType, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_AcceptedType(st), err
}

func NewRootWebSession_AcceptedType(s *capnp.Segment) (WebSession_AcceptedType, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_AcceptedType(st), err
}

func ReadRootWebSession_AcceptedType(msg *capnp.Message) (WebSession_AcceptedType, error) {
	root, err := msg.Root()
	return WebSession_AcceptedType(root.Struct()), err
}

func (s WebSession_AcceptedType) String() string {
	str, _ := text.Marshal(0xaaf9021b627cc1f9, capnp.Struct(s))
	return str
}

func (s WebSession_AcceptedType) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_AcceptedType) DecodeFromPtr(p capnp.Ptr) WebSession_AcceptedType {
	return WebSession_AcceptedType(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_AcceptedType) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_AcceptedType) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_AcceptedType) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_AcceptedType) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_AcceptedType) MimeType() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_AcceptedType) HasMimeType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_AcceptedType) MimeTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_AcceptedType) SetMimeType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_AcceptedType) QValue() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0) ^ 0x3f800000)
}

func (s WebSession_AcceptedType) SetQValue(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v)^0x3f800000)
}

// WebSession_AcceptedType_List is a list of WebSession_AcceptedType.
type WebSession_AcceptedType_List = capnp.StructList[WebSession_AcceptedType]

// NewWebSession_AcceptedType creates a new list of WebSession_AcceptedType.
func NewWebSession_AcceptedType_List(s *capnp.Segment, sz int32) (WebSession_AcceptedType_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[WebSession_AcceptedType](l), err
}

// WebSession_AcceptedType_Future is a wrapper for a WebSession_AcceptedType promised by a client call.
type WebSession_AcceptedType_Future struct{ *capnp.Future }

func (p WebSession_AcceptedType_Future) Struct() (WebSession_AcceptedType, error) {
	s, err := p.Future.Struct()
	return WebSession_AcceptedType(s), err
}

type WebSession_AcceptedEncoding capnp.Struct

// WebSession_AcceptedEncoding_TypeID is the unique identifier for the type WebSession_AcceptedEncoding.
const WebSession_AcceptedEncoding_TypeID = 0xbda585bffe1dc7e8

func NewWebSession_AcceptedEncoding(s *capnp.Segment) (WebSession_AcceptedEncoding, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_AcceptedEncoding(st), err
}

func NewRootWebSession_AcceptedEncoding(s *capnp.Segment) (WebSession_AcceptedEncoding, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_AcceptedEncoding(st), err
}

func ReadRootWebSession_AcceptedEncoding(msg *capnp.Message) (WebSession_AcceptedEncoding, error) {
	root, err := msg.Root()
	return WebSession_AcceptedEncoding(root.Struct()), err
}

func (s WebSession_AcceptedEncoding) String() string {
	str, _ := text.Marshal(0xbda585bffe1dc7e8, capnp.Struct(s))
	return str
}

func (s WebSession_AcceptedEncoding) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_AcceptedEncoding) DecodeFromPtr(p capnp.Ptr) WebSession_AcceptedEncoding {
	return WebSession_AcceptedEncoding(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_AcceptedEncoding) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_AcceptedEncoding) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_AcceptedEncoding) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_AcceptedEncoding) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_AcceptedEncoding) ContentCoding() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_AcceptedEncoding) HasContentCoding() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_AcceptedEncoding) ContentCodingBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_AcceptedEncoding) SetContentCoding(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_AcceptedEncoding) QValue() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0) ^ 0x3f800000)
}

func (s WebSession_AcceptedEncoding) SetQValue(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v)^0x3f800000)
}

// WebSession_AcceptedEncoding_List is a list of WebSession_AcceptedEncoding.
type WebSession_AcceptedEncoding_List = capnp.StructList[WebSession_AcceptedEncoding]

// NewWebSession_AcceptedEncoding creates a new list of WebSession_AcceptedEncoding.
func NewWebSession_AcceptedEncoding_List(s *capnp.Segment, sz int32) (WebSession_AcceptedEncoding_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[WebSession_AcceptedEncoding](l), err
}

// WebSession_AcceptedEncoding_Future is a wrapper for a WebSession_AcceptedEncoding promised by a client call.
type WebSession_AcceptedEncoding_Future struct{ *capnp.Future }

func (p WebSession_AcceptedEncoding_Future) Struct() (WebSession_AcceptedEncoding, error) {
	s, err := p.Future.Struct()
	return WebSession_AcceptedEncoding(s), err
}

type WebSession_Response capnp.Struct
type WebSession_Response_content WebSession_Response
type WebSession_Response_content_body WebSession_Response
type WebSession_Response_content_disposition WebSession_Response
type WebSession_Response_noContent WebSession_Response
type WebSession_Response_preconditionFailed WebSession_Response
type WebSession_Response_redirect WebSession_Response
type WebSession_Response_clientError WebSession_Response
type WebSession_Response_serverError WebSession_Response
type WebSession_Response_Which uint16

const (
	WebSession_Response_Which_content            WebSession_Response_Which = 1
	WebSession_Response_Which_noContent          WebSession_Response_Which = 4
	WebSession_Response_Which_preconditionFailed WebSession_Response_Which = 5
	WebSession_Response_Which_redirect           WebSession_Response_Which = 0
	WebSession_Response_Which_clientError        WebSession_Response_Which = 2
	WebSession_Response_Which_serverError        WebSession_Response_Which = 3
)

func (w WebSession_Response_Which) String() string {
	const s = "contentnoContentpreconditionFailedredirectclientErrorserverError"
	switch w {
	case WebSession_Response_Which_content:
		return s[0:7]
	case WebSession_Response_Which_noContent:
		return s[7:16]
	case WebSession_Response_Which_preconditionFailed:
		return s[16:34]
	case WebSession_Response_Which_redirect:
		return s[34:42]
	case WebSession_Response_Which_clientError:
		return s[42:53]
	case WebSession_Response_Which_serverError:
		return s[53:64]

	}
	return "WebSession_Response_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type WebSession_Response_content_body_Which uint16

const (
	WebSession_Response_content_body_Which_bytes  WebSession_Response_content_body_Which = 0
	WebSession_Response_content_body_Which_stream WebSession_Response_content_body_Which = 1
)

func (w WebSession_Response_content_body_Which) String() string {
	const s = "bytesstream"
	switch w {
	case WebSession_Response_content_body_Which_bytes:
		return s[0:5]
	case WebSession_Response_content_body_Which_stream:
		return s[5:11]

	}
	return "WebSession_Response_content_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type WebSession_Response_content_disposition_Which uint16

const (
	WebSession_Response_content_disposition_Which_normal   WebSession_Response_content_disposition_Which = 0
	WebSession_Response_content_disposition_Which_download WebSession_Response_content_disposition_Which = 1
)

func (w WebSession_Response_content_disposition_Which) String() string {
	const s = "normaldownload"
	switch w {
	case WebSession_Response_content_disposition_Which_normal:
		return s[0:6]
	case WebSession_Response_content_disposition_Which_download:
		return s[6:14]

	}
	return "WebSession_Response_content_disposition_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// WebSession_Response_TypeID is the unique identifier for the type WebSession_Response.
const WebSession_Response_TypeID = 0x8193ac6cb5429c83

func NewWebSession_Response(s *capnp.Segment) (WebSession_Response, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response(st), err
}

func NewRootWebSession_Response(s *capnp.Segment) (WebSession_Response, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response(st), err
}

func ReadRootWebSession_Response(msg *capnp.Message) (WebSession_Response, error) {
	root, err := msg.Root()
	return WebSession_Response(root.Struct()), err
}

func (s WebSession_Response) String() string {
	str, _ := text.Marshal(0x8193ac6cb5429c83, capnp.Struct(s))
	return str
}

func (s WebSession_Response) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_Response) DecodeFromPtr(p capnp.Ptr) WebSession_Response {
	return WebSession_Response(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_Response) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s WebSession_Response) Which() WebSession_Response_Which {
	return WebSession_Response_Which(capnp.Struct(s).Uint16(2))
}
func (s WebSession_Response) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_Response) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_Response) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_Response) SetCookies() (WebSession_Cookie_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return WebSession_Cookie_List(p.List()), err
}

func (s WebSession_Response) HasSetCookies() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_Response) SetSetCookies(v WebSession_Cookie_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSetCookies sets the setCookies field to a newly
// allocated WebSession_Cookie_List, preferring placement in s's segment.
func (s WebSession_Response) NewSetCookies(n int32) (WebSession_Cookie_List, error) {
	l, err := NewWebSession_Cookie_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return WebSession_Cookie_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

func (s WebSession_Response) CachePolicy() (WebSession_CachePolicy, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return WebSession_CachePolicy(p.Struct()), err
}

func (s WebSession_Response) HasCachePolicy() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s WebSession_Response) SetCachePolicy(v WebSession_CachePolicy) error {
	return capnp.Struct(s).SetPtr(6, capnp.Struct(v).ToPtr())
}

// NewCachePolicy sets the cachePolicy field to a newly
// allocated WebSession_CachePolicy struct, preferring placement in s's segment.
func (s WebSession_Response) NewCachePolicy() (WebSession_CachePolicy, error) {
	ss, err := NewWebSession_CachePolicy(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_CachePolicy{}, err
	}
	err = capnp.Struct(s).SetPtr(6, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_Response) Content() WebSession_Response_content {
	return WebSession_Response_content(s)
}

func (s WebSession_Response) SetContent() {
	capnp.Struct(s).SetUint16(2, 1)
}

func (s WebSession_Response_content) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_Response_content) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_Response_content) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_Response_content) StatusCode() WebSession_Response_SuccessCode {
	return WebSession_Response_SuccessCode(capnp.Struct(s).Uint16(4))
}

func (s WebSession_Response_content) SetStatusCode(v WebSession_Response_SuccessCode) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s WebSession_Response_content) Encoding() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_content) HasEncoding() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_Response_content) EncodingBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_content) SetEncoding(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_Response_content) Language() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s WebSession_Response_content) HasLanguage() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_Response_content) LanguageBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s WebSession_Response_content) SetLanguage(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s WebSession_Response_content) MimeType() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s WebSession_Response_content) HasMimeType() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s WebSession_Response_content) MimeTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s WebSession_Response_content) SetMimeType(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s WebSession_Response_content) ETag() (WebSession_ETag, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return WebSession_ETag(p.Struct()), err
}

func (s WebSession_Response_content) HasETag() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s WebSession_Response_content) SetETag(v WebSession_ETag) error {
	return capnp.Struct(s).SetPtr(7, capnp.Struct(v).ToPtr())
}

// NewETag sets the eTag field to a newly
// allocated WebSession_ETag struct, preferring placement in s's segment.
func (s WebSession_Response_content) NewETag() (WebSession_ETag, error) {
	ss, err := NewWebSession_ETag(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_ETag{}, err
	}
	err = capnp.Struct(s).SetPtr(7, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_Response_content) Body() WebSession_Response_content_body {
	return WebSession_Response_content_body(s)
}

func (s WebSession_Response_content_body) Which() WebSession_Response_content_body_Which {
	return WebSession_Response_content_body_Which(capnp.Struct(s).Uint16(0))
}
func (s WebSession_Response_content_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_Response_content_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_Response_content_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_Response_content_body) Bytes() ([]byte, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != bytes")
	}
	p, err := capnp.Struct(s).Ptr(4)
	return []byte(p.Data()), err
}

func (s WebSession_Response_content_body) HasBytes() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(4)
}

func (s WebSession_Response_content_body) SetBytes(v []byte) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetData(4, v)
}

func (s WebSession_Response_content_body) Stream() util.Handle {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != stream")
	}
	p, _ := capnp.Struct(s).Ptr(4)
	return util.Handle(p.Interface().Client())
}

func (s WebSession_Response_content_body) HasStream() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(4)
}

func (s WebSession_Response_content_body) SetStream(v util.Handle) error {
	capnp.Struct(s).SetUint16(0, 1)
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(4, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(4, in.ToPtr())
}

func (s WebSession_Response_content) Disposition() WebSession_Response_content_disposition {
	return WebSession_Response_content_disposition(s)
}

func (s WebSession_Response_content_disposition) Which() WebSession_Response_content_disposition_Which {
	return WebSession_Response_content_disposition_Which(capnp.Struct(s).Uint16(6))
}
func (s WebSession_Response_content_disposition) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_Response_content_disposition) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_Response_content_disposition) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_Response_content_disposition) SetNormal() {
	capnp.Struct(s).SetUint16(6, 0)

}

func (s WebSession_Response_content_disposition) Download() (string, error) {
	if capnp.Struct(s).Uint16(6) != 1 {
		panic("Which() != download")
	}
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s WebSession_Response_content_disposition) HasDownload() bool {
	if capnp.Struct(s).Uint16(6) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(5)
}

func (s WebSession_Response_content_disposition) DownloadBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s WebSession_Response_content_disposition) SetDownload(v string) error {
	capnp.Struct(s).SetUint16(6, 1)
	return capnp.Struct(s).SetText(5, v)
}

func (s WebSession_Response) NoContent() WebSession_Response_noContent {
	return WebSession_Response_noContent(s)
}

func (s WebSession_Response) SetNoContent() {
	capnp.Struct(s).SetUint16(2, 4)
}

func (s WebSession_Response_noContent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_Response_noContent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_Response_noContent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_Response_noContent) ShouldResetForm() bool {
	return capnp.Struct(s).Bit(0)
}

func (s WebSession_Response_noContent) SetShouldResetForm(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s WebSession_Response_noContent) ETag() (WebSession_ETag, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return WebSession_ETag(p.Struct()), err
}

func (s WebSession_Response_noContent) HasETag() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_Response_noContent) SetETag(v WebSession_ETag) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewETag sets the eTag field to a newly
// allocated WebSession_ETag struct, preferring placement in s's segment.
func (s WebSession_Response_noContent) NewETag() (WebSession_ETag, error) {
	ss, err := NewWebSession_ETag(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_ETag{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_Response) PreconditionFailed() WebSession_Response_preconditionFailed {
	return WebSession_Response_preconditionFailed(s)
}

func (s WebSession_Response) SetPreconditionFailed() {
	capnp.Struct(s).SetUint16(2, 5)
}

func (s WebSession_Response_preconditionFailed) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_Response_preconditionFailed) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_Response_preconditionFailed) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_Response_preconditionFailed) MatchingETag() (WebSession_ETag, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return WebSession_ETag(p.Struct()), err
}

func (s WebSession_Response_preconditionFailed) HasMatchingETag() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_Response_preconditionFailed) SetMatchingETag(v WebSession_ETag) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewMatchingETag sets the matchingETag field to a newly
// allocated WebSession_ETag struct, preferring placement in s's segment.
func (s WebSession_Response_preconditionFailed) NewMatchingETag() (WebSession_ETag, error) {
	ss, err := NewWebSession_ETag(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_ETag{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_Response) Redirect() WebSession_Response_redirect {
	return WebSession_Response_redirect(s)
}

func (s WebSession_Response) SetRedirect() {
	capnp.Struct(s).SetUint16(2, 0)
}

func (s WebSession_Response_redirect) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_Response_redirect) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_Response_redirect) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_Response_redirect) IsPermanent() bool {
	return capnp.Struct(s).Bit(0)
}

func (s WebSession_Response_redirect) SetIsPermanent(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s WebSession_Response_redirect) SwitchToGet() bool {
	return capnp.Struct(s).Bit(1)
}

func (s WebSession_Response_redirect) SetSwitchToGet(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s WebSession_Response_redirect) Location() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_redirect) HasLocation() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_Response_redirect) LocationBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_redirect) SetLocation(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_Response) ClientError() WebSession_Response_clientError {
	return WebSession_Response_clientError(s)
}

func (s WebSession_Response) SetClientError() {
	capnp.Struct(s).SetUint16(2, 2)
}

func (s WebSession_Response_clientError) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_Response_clientError) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_Response_clientError) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_Response_clientError) StatusCode() WebSession_Response_ClientErrorCode {
	return WebSession_Response_ClientErrorCode(capnp.Struct(s).Uint16(0))
}

func (s WebSession_Response_clientError) SetStatusCode(v WebSession_Response_ClientErrorCode) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s WebSession_Response_clientError) DescriptionHtml() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_clientError) HasDescriptionHtml() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_Response_clientError) DescriptionHtmlBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_clientError) SetDescriptionHtml(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_Response_clientError) NonHtmlBody() (WebSession_Response_ErrorBody, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return WebSession_Response_ErrorBody(p.Struct()), err
}

func (s WebSession_Response_clientError) HasNonHtmlBody() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_Response_clientError) SetNonHtmlBody(v WebSession_Response_ErrorBody) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewNonHtmlBody sets the nonHtmlBody field to a newly
// allocated WebSession_Response_ErrorBody struct, preferring placement in s's segment.
func (s WebSession_Response_clientError) NewNonHtmlBody() (WebSession_Response_ErrorBody, error) {
	ss, err := NewWebSession_Response_ErrorBody(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_Response_ErrorBody{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_Response) ServerError() WebSession_Response_serverError {
	return WebSession_Response_serverError(s)
}

func (s WebSession_Response) SetServerError() {
	capnp.Struct(s).SetUint16(2, 3)
}

func (s WebSession_Response_serverError) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_Response_serverError) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_Response_serverError) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_Response_serverError) DescriptionHtml() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_serverError) HasDescriptionHtml() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_Response_serverError) DescriptionHtmlBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_serverError) SetDescriptionHtml(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_Response_serverError) NonHtmlBody() (WebSession_Response_ErrorBody, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return WebSession_Response_ErrorBody(p.Struct()), err
}

func (s WebSession_Response_serverError) HasNonHtmlBody() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_Response_serverError) SetNonHtmlBody(v WebSession_Response_ErrorBody) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewNonHtmlBody sets the nonHtmlBody field to a newly
// allocated WebSession_Response_ErrorBody struct, preferring placement in s's segment.
func (s WebSession_Response_serverError) NewNonHtmlBody() (WebSession_Response_ErrorBody, error) {
	ss, err := NewWebSession_Response_ErrorBody(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_Response_ErrorBody{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_Response) AdditionalHeaders() (WebSession_Response_Header_List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return WebSession_Response_Header_List(p.List()), err
}

func (s WebSession_Response) HasAdditionalHeaders() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s WebSession_Response) SetAdditionalHeaders(v WebSession_Response_Header_List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewAdditionalHeaders sets the additionalHeaders field to a newly
// allocated WebSession_Response_Header_List, preferring placement in s's segment.
func (s WebSession_Response) NewAdditionalHeaders(n int32) (WebSession_Response_Header_List, error) {
	l, err := NewWebSession_Response_Header_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return WebSession_Response_Header_List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}

// WebSession_Response_List is a list of WebSession_Response.
type WebSession_Response_List = capnp.StructList[WebSession_Response]

// NewWebSession_Response creates a new list of WebSession_Response.
func NewWebSession_Response_List(s *capnp.Segment, sz int32) (WebSession_Response_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 9}, sz)
	return capnp.StructList[WebSession_Response](l), err
}

// WebSession_Response_Future is a wrapper for a WebSession_Response promised by a client call.
type WebSession_Response_Future struct{ *capnp.Future }

func (p WebSession_Response_Future) Struct() (WebSession_Response, error) {
	s, err := p.Future.Struct()
	return WebSession_Response(s), err
}

func (p WebSession_Response_Future) CachePolicy() WebSession_CachePolicy_Future {
	return WebSession_CachePolicy_Future{Future: p.Future.Field(6, nil)}
}

func (p WebSession_Response_Future) Content() WebSession_Response_content_Future {
	return WebSession_Response_content_Future{p.Future}
}

// WebSession_Response_content_Future is a wrapper for a WebSession_Response_content promised by a client call.
type WebSession_Response_content_Future struct{ *capnp.Future }

func (p WebSession_Response_content_Future) Struct() (WebSession_Response_content, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_content(s), err
}

func (p WebSession_Response_content_Future) ETag() WebSession_ETag_Future {
	return WebSession_ETag_Future{Future: p.Future.Field(7, nil)}
}

func (p WebSession_Response_content_Future) Body() WebSession_Response_content_body_Future {
	return WebSession_Response_content_body_Future{p.Future}
}

// WebSession_Response_content_body_Future is a wrapper for a WebSession_Response_content_body promised by a client call.
type WebSession_Response_content_body_Future struct{ *capnp.Future }

func (p WebSession_Response_content_body_Future) Struct() (WebSession_Response_content_body, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_content_body(s), err
}

func (p WebSession_Response_content_body_Future) Stream() util.Handle {
	return util.Handle(p.Future.Field(4, nil).Client())
}

func (p WebSession_Response_content_Future) Disposition() WebSession_Response_content_disposition_Future {
	return WebSession_Response_content_disposition_Future{p.Future}
}

// WebSession_Response_content_disposition_Future is a wrapper for a WebSession_Response_content_disposition promised by a client call.
type WebSession_Response_content_disposition_Future struct{ *capnp.Future }

func (p WebSession_Response_content_disposition_Future) Struct() (WebSession_Response_content_disposition, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_content_disposition(s), err
}

func (p WebSession_Response_Future) NoContent() WebSession_Response_noContent_Future {
	return WebSession_Response_noContent_Future{p.Future}
}

// WebSession_Response_noContent_Future is a wrapper for a WebSession_Response_noContent promised by a client call.
type WebSession_Response_noContent_Future struct{ *capnp.Future }

func (p WebSession_Response_noContent_Future) Struct() (WebSession_Response_noContent, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_noContent(s), err
}

func (p WebSession_Response_noContent_Future) ETag() WebSession_ETag_Future {
	return WebSession_ETag_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_Response_Future) PreconditionFailed() WebSession_Response_preconditionFailed_Future {
	return WebSession_Response_preconditionFailed_Future{p.Future}
}

// WebSession_Response_preconditionFailed_Future is a wrapper for a WebSession_Response_preconditionFailed promised by a client call.
type WebSession_Response_preconditionFailed_Future struct{ *capnp.Future }

func (p WebSession_Response_preconditionFailed_Future) Struct() (WebSession_Response_preconditionFailed, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_preconditionFailed(s), err
}

func (p WebSession_Response_preconditionFailed_Future) MatchingETag() WebSession_ETag_Future {
	return WebSession_ETag_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_Response_Future) Redirect() WebSession_Response_redirect_Future {
	return WebSession_Response_redirect_Future{p.Future}
}

// WebSession_Response_redirect_Future is a wrapper for a WebSession_Response_redirect promised by a client call.
type WebSession_Response_redirect_Future struct{ *capnp.Future }

func (p WebSession_Response_redirect_Future) Struct() (WebSession_Response_redirect, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_redirect(s), err
}

func (p WebSession_Response_Future) ClientError() WebSession_Response_clientError_Future {
	return WebSession_Response_clientError_Future{p.Future}
}

// WebSession_Response_clientError_Future is a wrapper for a WebSession_Response_clientError promised by a client call.
type WebSession_Response_clientError_Future struct{ *capnp.Future }

func (p WebSession_Response_clientError_Future) Struct() (WebSession_Response_clientError, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_clientError(s), err
}

func (p WebSession_Response_clientError_Future) NonHtmlBody() WebSession_Response_ErrorBody_Future {
	return WebSession_Response_ErrorBody_Future{Future: p.Future.Field(2, nil)}
}

func (p WebSession_Response_Future) ServerError() WebSession_Response_serverError_Future {
	return WebSession_Response_serverError_Future{p.Future}
}

// WebSession_Response_serverError_Future is a wrapper for a WebSession_Response_serverError promised by a client call.
type WebSession_Response_serverError_Future struct{ *capnp.Future }

func (p WebSession_Response_serverError_Future) Struct() (WebSession_Response_serverError, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_serverError(s), err
}

func (p WebSession_Response_serverError_Future) NonHtmlBody() WebSession_Response_ErrorBody_Future {
	return WebSession_Response_ErrorBody_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_Response_SuccessCode uint16

// WebSession_Response_SuccessCode_TypeID is the unique identifier for the type WebSession_Response_SuccessCode.
const WebSession_Response_SuccessCode_TypeID = 0x82130007ccd2888f

// Values of WebSession_Response_SuccessCode.
const (
	WebSession_Response_SuccessCode_ok             WebSession_Response_SuccessCode = 0
	WebSession_Response_SuccessCode_created        WebSession_Response_SuccessCode = 1
	WebSession_Response_SuccessCode_accepted       WebSession_Response_SuccessCode = 2
	WebSession_Response_SuccessCode_noContent      WebSession_Response_SuccessCode = 3
	WebSession_Response_SuccessCode_partialContent WebSession_Response_SuccessCode = 4
	WebSession_Response_SuccessCode_multiStatus    WebSession_Response_SuccessCode = 5
	WebSession_Response_SuccessCode_notModified    WebSession_Response_SuccessCode = 6
)

// String returns the enum's constant name.
func (c WebSession_Response_SuccessCode) String() string {
	switch c {
	case WebSession_Response_SuccessCode_ok:
		return "ok"
	case WebSession_Response_SuccessCode_created:
		return "created"
	case WebSession_Response_SuccessCode_accepted:
		return "accepted"
	case WebSession_Response_SuccessCode_noContent:
		return "noContent"
	case WebSession_Response_SuccessCode_partialContent:
		return "partialContent"
	case WebSession_Response_SuccessCode_multiStatus:
		return "multiStatus"
	case WebSession_Response_SuccessCode_notModified:
		return "notModified"

	default:
		return ""
	}
}

// WebSession_Response_SuccessCodeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func WebSession_Response_SuccessCodeFromString(c string) WebSession_Response_SuccessCode {
	switch c {
	case "ok":
		return WebSession_Response_SuccessCode_ok
	case "created":
		return WebSession_Response_SuccessCode_created
	case "accepted":
		return WebSession_Response_SuccessCode_accepted
	case "noContent":
		return WebSession_Response_SuccessCode_noContent
	case "partialContent":
		return WebSession_Response_SuccessCode_partialContent
	case "multiStatus":
		return WebSession_Response_SuccessCode_multiStatus
	case "notModified":
		return WebSession_Response_SuccessCode_notModified

	default:
		return 0
	}
}

type WebSession_Response_SuccessCode_List = capnp.EnumList[WebSession_Response_SuccessCode]

func NewWebSession_Response_SuccessCode_List(s *capnp.Segment, sz int32) (WebSession_Response_SuccessCode_List, error) {
	return capnp.NewEnumList[WebSession_Response_SuccessCode](s, sz)
}

type WebSession_Response_ClientErrorCode uint16

// WebSession_Response_ClientErrorCode_TypeID is the unique identifier for the type WebSession_Response_ClientErrorCode.
const WebSession_Response_ClientErrorCode_TypeID = 0x8ea31bdb4c044f01

// Values of WebSession_Response_ClientErrorCode.
const (
	WebSession_Response_ClientErrorCode_badRequest            WebSession_Response_ClientErrorCode = 0
	WebSession_Response_ClientErrorCode_forbidden             WebSession_Response_ClientErrorCode = 1
	WebSession_Response_ClientErrorCode_notFound              WebSession_Response_ClientErrorCode = 2
	WebSession_Response_ClientErrorCode_methodNotAllowed      WebSession_Response_ClientErrorCode = 3
	WebSession_Response_ClientErrorCode_notAcceptable         WebSession_Response_ClientErrorCode = 4
	WebSession_Response_ClientErrorCode_conflict              WebSession_Response_ClientErrorCode = 5
	WebSession_Response_ClientErrorCode_gone                  WebSession_Response_ClientErrorCode = 6
	WebSession_Response_ClientErrorCode_preconditionFailed    WebSession_Response_ClientErrorCode = 11
	WebSession_Response_ClientErrorCode_requestEntityTooLarge WebSession_Response_ClientErrorCode = 7
	WebSession_Response_ClientErrorCode_requestUriTooLong     WebSession_Response_ClientErrorCode = 8
	WebSession_Response_ClientErrorCode_unsupportedMediaType  WebSession_Response_ClientErrorCode = 9
	WebSession_Response_ClientErrorCode_imATeapot             WebSession_Response_ClientErrorCode = 10
	WebSession_Response_ClientErrorCode_unprocessableEntity   WebSession_Response_ClientErrorCode = 12
)

// String returns the enum's constant name.
func (c WebSession_Response_ClientErrorCode) String() string {
	switch c {
	case WebSession_Response_ClientErrorCode_badRequest:
		return "badRequest"
	case WebSession_Response_ClientErrorCode_forbidden:
		return "forbidden"
	case WebSession_Response_ClientErrorCode_notFound:
		return "notFound"
	case WebSession_Response_ClientErrorCode_methodNotAllowed:
		return "methodNotAllowed"
	case WebSession_Response_ClientErrorCode_notAcceptable:
		return "notAcceptable"
	case WebSession_Response_ClientErrorCode_conflict:
		return "conflict"
	case WebSession_Response_ClientErrorCode_gone:
		return "gone"
	case WebSession_Response_ClientErrorCode_preconditionFailed:
		return "preconditionFailed"
	case WebSession_Response_ClientErrorCode_requestEntityTooLarge:
		return "requestEntityTooLarge"
	case WebSession_Response_ClientErrorCode_requestUriTooLong:
		return "requestUriTooLong"
	case WebSession_Response_ClientErrorCode_unsupportedMediaType:
		return "unsupportedMediaType"
	case WebSession_Response_ClientErrorCode_imATeapot:
		return "imATeapot"
	case WebSession_Response_ClientErrorCode_unprocessableEntity:
		return "unprocessableEntity"

	default:
		return ""
	}
}

// WebSession_Response_ClientErrorCodeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func WebSession_Response_ClientErrorCodeFromString(c string) WebSession_Response_ClientErrorCode {
	switch c {
	case "badRequest":
		return WebSession_Response_ClientErrorCode_badRequest
	case "forbidden":
		return WebSession_Response_ClientErrorCode_forbidden
	case "notFound":
		return WebSession_Response_ClientErrorCode_notFound
	case "methodNotAllowed":
		return WebSession_Response_ClientErrorCode_methodNotAllowed
	case "notAcceptable":
		return WebSession_Response_ClientErrorCode_notAcceptable
	case "conflict":
		return WebSession_Response_ClientErrorCode_conflict
	case "gone":
		return WebSession_Response_ClientErrorCode_gone
	case "preconditionFailed":
		return WebSession_Response_ClientErrorCode_preconditionFailed
	case "requestEntityTooLarge":
		return WebSession_Response_ClientErrorCode_requestEntityTooLarge
	case "requestUriTooLong":
		return WebSession_Response_ClientErrorCode_requestUriTooLong
	case "unsupportedMediaType":
		return WebSession_Response_ClientErrorCode_unsupportedMediaType
	case "imATeapot":
		return WebSession_Response_ClientErrorCode_imATeapot
	case "unprocessableEntity":
		return WebSession_Response_ClientErrorCode_unprocessableEntity

	default:
		return 0
	}
}

type WebSession_Response_ClientErrorCode_List = capnp.EnumList[WebSession_Response_ClientErrorCode]

func NewWebSession_Response_ClientErrorCode_List(s *capnp.Segment, sz int32) (WebSession_Response_ClientErrorCode_List, error) {
	return capnp.NewEnumList[WebSession_Response_ClientErrorCode](s, sz)
}

type WebSession_Response_Header capnp.Struct

// WebSession_Response_Header_TypeID is the unique identifier for the type WebSession_Response_Header.
const WebSession_Response_Header_TypeID = 0xb4b873147ab5ce5e

func NewWebSession_Response_Header(s *capnp.Segment) (WebSession_Response_Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_Response_Header(st), err
}

func NewRootWebSession_Response_Header(s *capnp.Segment) (WebSession_Response_Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_Response_Header(st), err
}

func ReadRootWebSession_Response_Header(msg *capnp.Message) (WebSession_Response_Header, error) {
	root, err := msg.Root()
	return WebSession_Response_Header(root.Struct()), err
}

func (s WebSession_Response_Header) String() string {
	str, _ := text.Marshal(0xb4b873147ab5ce5e, capnp.Struct(s))
	return str
}

func (s WebSession_Response_Header) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_Response_Header) DecodeFromPtr(p capnp.Ptr) WebSession_Response_Header {
	return WebSession_Response_Header(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_Response_Header) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_Response_Header) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_Response_Header) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_Response_Header) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_Response_Header) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_Response_Header) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_Response_Header) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_Response_Header) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_Response_Header) Value() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_Header) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_Response_Header) ValueBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_Header) SetValue(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// WebSession_Response_Header_List is a list of WebSession_Response_Header.
type WebSession_Response_Header_List = capnp.StructList[WebSession_Response_Header]

// NewWebSession_Response_Header creates a new list of WebSession_Response_Header.
func NewWebSession_Response_Header_List(s *capnp.Segment, sz int32) (WebSession_Response_Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[WebSession_Response_Header](l), err
}

// WebSession_Response_Header_Future is a wrapper for a WebSession_Response_Header promised by a client call.
type WebSession_Response_Header_Future struct{ *capnp.Future }

func (p WebSession_Response_Header_Future) Struct() (WebSession_Response_Header, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_Header(s), err
}

type WebSession_Response_ErrorBody capnp.Struct

// WebSession_Response_ErrorBody_TypeID is the unique identifier for the type WebSession_Response_ErrorBody.
const WebSession_Response_ErrorBody_TypeID = 0x9497e63b399a2c01

func NewWebSession_Response_ErrorBody(s *capnp.Segment) (WebSession_Response_ErrorBody, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_Response_ErrorBody(st), err
}

func NewRootWebSession_Response_ErrorBody(s *capnp.Segment) (WebSession_Response_ErrorBody, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_Response_ErrorBody(st), err
}

func ReadRootWebSession_Response_ErrorBody(msg *capnp.Message) (WebSession_Response_ErrorBody, error) {
	root, err := msg.Root()
	return WebSession_Response_ErrorBody(root.Struct()), err
}

func (s WebSession_Response_ErrorBody) String() string {
	str, _ := text.Marshal(0x9497e63b399a2c01, capnp.Struct(s))
	return str
}

func (s WebSession_Response_ErrorBody) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_Response_ErrorBody) DecodeFromPtr(p capnp.Ptr) WebSession_Response_ErrorBody {
	return WebSession_Response_ErrorBody(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_Response_ErrorBody) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_Response_ErrorBody) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_Response_ErrorBody) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_Response_ErrorBody) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_Response_ErrorBody) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s WebSession_Response_ErrorBody) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_Response_ErrorBody) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s WebSession_Response_ErrorBody) Encoding() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_ErrorBody) HasEncoding() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_Response_ErrorBody) EncodingBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_ErrorBody) SetEncoding(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_Response_ErrorBody) Language() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s WebSession_Response_ErrorBody) HasLanguage() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_Response_ErrorBody) LanguageBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s WebSession_Response_ErrorBody) SetLanguage(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s WebSession_Response_ErrorBody) MimeType() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s WebSession_Response_ErrorBody) HasMimeType() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s WebSession_Response_ErrorBody) MimeTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s WebSession_Response_ErrorBody) SetMimeType(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

// WebSession_Response_ErrorBody_List is a list of WebSession_Response_ErrorBody.
type WebSession_Response_ErrorBody_List = capnp.StructList[WebSession_Response_ErrorBody]

// NewWebSession_Response_ErrorBody creates a new list of WebSession_Response_ErrorBody.
func NewWebSession_Response_ErrorBody_List(s *capnp.Segment, sz int32) (WebSession_Response_ErrorBody_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[WebSession_Response_ErrorBody](l), err
}

// WebSession_Response_ErrorBody_Future is a wrapper for a WebSession_Response_ErrorBody promised by a client call.
type WebSession_Response_ErrorBody_Future struct{ *capnp.Future }

func (p WebSession_Response_ErrorBody_Future) Struct() (WebSession_Response_ErrorBody, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_ErrorBody(s), err
}

type WebSession_RequestStream capnp.Client

// WebSession_RequestStream_TypeID is the unique identifier for the type WebSession_RequestStream.
const WebSession_RequestStream_TypeID = 0x99ffc2f3f69a6a9f

func (c WebSession_RequestStream) GetResponse(ctx context.Context, params func(WebSession_RequestStream_getResponse_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x99ffc2f3f69a6a9f,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession.RequestStream",
			MethodName:    "getResponse",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_RequestStream_getResponse_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession_RequestStream) Write(ctx context.Context, params func(util.ByteStream_write_Params) error) (stream.StreamResult_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      0,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(util.ByteStream_write_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return stream.StreamResult_Future{Future: ans.Future()}, release
}
func (c WebSession_RequestStream) Done(ctx context.Context, params func(util.ByteStream_done_Params) error) (util.ByteStream_done_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      1,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "done",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(util.ByteStream_done_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return util.ByteStream_done_Results_Future{Future: ans.Future()}, release
}
func (c WebSession_RequestStream) ExpectSize(ctx context.Context, params func(util.ByteStream_expectSize_Params) error) (util.ByteStream_expectSize_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      2,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "expectSize",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(util.ByteStream_expectSize_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return util.ByteStream_expectSize_Results_Future{Future: ans.Future()}, release
}

func (c WebSession_RequestStream) AddRef() WebSession_RequestStream {
	return WebSession_RequestStream(capnp.Client(c).AddRef())
}

func (c WebSession_RequestStream) Release() {
	capnp.Client(c).Release()
}

func (c WebSession_RequestStream) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (WebSession_RequestStream) DecodeFromPtr(p capnp.Ptr) WebSession_RequestStream {
	return WebSession_RequestStream(capnp.Client{}.DecodeFromPtr(p))
}

func (c WebSession_RequestStream) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A WebSession_RequestStream_Server is a WebSession_RequestStream with a local implementation.
type WebSession_RequestStream_Server interface {
	GetResponse(context.Context, WebSession_RequestStream_getResponse) error

	Write(context.Context, util.ByteStream_write) error

	Done(context.Context, util.ByteStream_done) error

	ExpectSize(context.Context, util.ByteStream_expectSize) error
}

// WebSession_RequestStream_NewServer creates a new Server from an implementation of WebSession_RequestStream_Server.
func WebSession_RequestStream_NewServer(s WebSession_RequestStream_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WebSession_RequestStream_Methods(nil, s), s, c)
}

// WebSession_RequestStream_ServerToClient creates a new Client from an implementation of WebSession_RequestStream_Server.
// The caller is responsible for calling Release on the returned Client.
func WebSession_RequestStream_ServerToClient(s WebSession_RequestStream_Server) WebSession_RequestStream {
	return WebSession_RequestStream(capnp.NewClient(WebSession_RequestStream_NewServer(s)))
}

// WebSession_RequestStream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WebSession_RequestStream_Methods(methods []server.Method, s WebSession_RequestStream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x99ffc2f3f69a6a9f,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession.RequestStream",
			MethodName:    "getResponse",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetResponse(ctx, WebSession_RequestStream_getResponse{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      0,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, util.ByteStream_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      1,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "done",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Done(ctx, util.ByteStream_done{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      2,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "expectSize",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ExpectSize(ctx, util.ByteStream_expectSize{call})
		},
	})

	return methods
}

// WebSession_RequestStream_getResponse holds the state for a server call to WebSession_RequestStream.getResponse.
// See server.Call for documentation.
type WebSession_RequestStream_getResponse struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_RequestStream_getResponse) Args() WebSession_RequestStream_getResponse_Params {
	return WebSession_RequestStream_getResponse_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_RequestStream_getResponse) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response(r), err
}

// WebSession_RequestStream_List is a list of WebSession_RequestStream.
type WebSession_RequestStream_List = capnp.CapList[WebSession_RequestStream]

// NewWebSession_RequestStream creates a new list of WebSession_RequestStream.
func NewWebSession_RequestStream_List(s *capnp.Segment, sz int32) (WebSession_RequestStream_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[WebSession_RequestStream](l), err
}

type WebSession_RequestStream_getResponse_Params capnp.Struct

// WebSession_RequestStream_getResponse_Params_TypeID is the unique identifier for the type WebSession_RequestStream_getResponse_Params.
const WebSession_RequestStream_getResponse_Params_TypeID = 0xe9a02a3219bdbd70

func NewWebSession_RequestStream_getResponse_Params(s *capnp.Segment) (WebSession_RequestStream_getResponse_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebSession_RequestStream_getResponse_Params(st), err
}

func NewRootWebSession_RequestStream_getResponse_Params(s *capnp.Segment) (WebSession_RequestStream_getResponse_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebSession_RequestStream_getResponse_Params(st), err
}

func ReadRootWebSession_RequestStream_getResponse_Params(msg *capnp.Message) (WebSession_RequestStream_getResponse_Params, error) {
	root, err := msg.Root()
	return WebSession_RequestStream_getResponse_Params(root.Struct()), err
}

func (s WebSession_RequestStream_getResponse_Params) String() string {
	str, _ := text.Marshal(0xe9a02a3219bdbd70, capnp.Struct(s))
	return str
}

func (s WebSession_RequestStream_getResponse_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_RequestStream_getResponse_Params) DecodeFromPtr(p capnp.Ptr) WebSession_RequestStream_getResponse_Params {
	return WebSession_RequestStream_getResponse_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_RequestStream_getResponse_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_RequestStream_getResponse_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_RequestStream_getResponse_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_RequestStream_getResponse_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// WebSession_RequestStream_getResponse_Params_List is a list of WebSession_RequestStream_getResponse_Params.
type WebSession_RequestStream_getResponse_Params_List = capnp.StructList[WebSession_RequestStream_getResponse_Params]

// NewWebSession_RequestStream_getResponse_Params creates a new list of WebSession_RequestStream_getResponse_Params.
func NewWebSession_RequestStream_getResponse_Params_List(s *capnp.Segment, sz int32) (WebSession_RequestStream_getResponse_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[WebSession_RequestStream_getResponse_Params](l), err
}

// WebSession_RequestStream_getResponse_Params_Future is a wrapper for a WebSession_RequestStream_getResponse_Params promised by a client call.
type WebSession_RequestStream_getResponse_Params_Future struct{ *capnp.Future }

func (p WebSession_RequestStream_getResponse_Params_Future) Struct() (WebSession_RequestStream_getResponse_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_RequestStream_getResponse_Params(s), err
}

type WebSession_WebSocketStream capnp.Client

// WebSession_WebSocketStream_TypeID is the unique identifier for the type WebSession_WebSocketStream.
const WebSession_WebSocketStream_TypeID = 0xf001fc1d5e574a07

func (c WebSession_WebSocketStream) SendBytes(ctx context.Context, params func(WebSession_WebSocketStream_sendBytes_Params) error) (stream.StreamResult_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf001fc1d5e574a07,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession.WebSocketStream",
			MethodName:    "sendBytes",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_WebSocketStream_sendBytes_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return stream.StreamResult_Future{Future: ans.Future()}, release
}

func (c WebSession_WebSocketStream) AddRef() WebSession_WebSocketStream {
	return WebSession_WebSocketStream(capnp.Client(c).AddRef())
}

func (c WebSession_WebSocketStream) Release() {
	capnp.Client(c).Release()
}

func (c WebSession_WebSocketStream) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (WebSession_WebSocketStream) DecodeFromPtr(p capnp.Ptr) WebSession_WebSocketStream {
	return WebSession_WebSocketStream(capnp.Client{}.DecodeFromPtr(p))
}

func (c WebSession_WebSocketStream) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A WebSession_WebSocketStream_Server is a WebSession_WebSocketStream with a local implementation.
type WebSession_WebSocketStream_Server interface {
	SendBytes(context.Context, WebSession_WebSocketStream_sendBytes) error
}

// WebSession_WebSocketStream_NewServer creates a new Server from an implementation of WebSession_WebSocketStream_Server.
func WebSession_WebSocketStream_NewServer(s WebSession_WebSocketStream_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WebSession_WebSocketStream_Methods(nil, s), s, c)
}

// WebSession_WebSocketStream_ServerToClient creates a new Client from an implementation of WebSession_WebSocketStream_Server.
// The caller is responsible for calling Release on the returned Client.
func WebSession_WebSocketStream_ServerToClient(s WebSession_WebSocketStream_Server) WebSession_WebSocketStream {
	return WebSession_WebSocketStream(capnp.NewClient(WebSession_WebSocketStream_NewServer(s)))
}

// WebSession_WebSocketStream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WebSession_WebSocketStream_Methods(methods []server.Method, s WebSession_WebSocketStream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf001fc1d5e574a07,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession.WebSocketStream",
			MethodName:    "sendBytes",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SendBytes(ctx, WebSession_WebSocketStream_sendBytes{call})
		},
	})

	return methods
}

// WebSession_WebSocketStream_sendBytes holds the state for a server call to WebSession_WebSocketStream.sendBytes.
// See server.Call for documentation.
type WebSession_WebSocketStream_sendBytes struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_WebSocketStream_sendBytes) Args() WebSession_WebSocketStream_sendBytes_Params {
	return WebSession_WebSocketStream_sendBytes_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebSession_WebSocketStream_sendBytes) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// WebSession_WebSocketStream_List is a list of WebSession_WebSocketStream.
type WebSession_WebSocketStream_List = capnp.CapList[WebSession_WebSocketStream]

// NewWebSession_WebSocketStream creates a new list of WebSession_WebSocketStream.
func NewWebSession_WebSocketStream_List(s *capnp.Segment, sz int32) (WebSession_WebSocketStream_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[WebSession_WebSocketStream](l), err
}

type WebSession_WebSocketStream_sendBytes_Params capnp.Struct

// WebSession_WebSocketStream_sendBytes_Params_TypeID is the unique identifier for the type WebSession_WebSocketStream_sendBytes_Params.
const WebSession_WebSocketStream_sendBytes_Params_TypeID = 0x9a712ce3fcad8cd8

func NewWebSession_WebSocketStream_sendBytes_Params(s *capnp.Segment) (WebSession_WebSocketStream_sendBytes_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_WebSocketStream_sendBytes_Params(st), err
}

func NewRootWebSession_WebSocketStream_sendBytes_Params(s *capnp.Segment) (WebSession_WebSocketStream_sendBytes_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_WebSocketStream_sendBytes_Params(st), err
}

func ReadRootWebSession_WebSocketStream_sendBytes_Params(msg *capnp.Message) (WebSession_WebSocketStream_sendBytes_Params, error) {
	root, err := msg.Root()
	return WebSession_WebSocketStream_sendBytes_Params(root.Struct()), err
}

func (s WebSession_WebSocketStream_sendBytes_Params) String() string {
	str, _ := text.Marshal(0x9a712ce3fcad8cd8, capnp.Struct(s))
	return str
}

func (s WebSession_WebSocketStream_sendBytes_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_WebSocketStream_sendBytes_Params) DecodeFromPtr(p capnp.Ptr) WebSession_WebSocketStream_sendBytes_Params {
	return WebSession_WebSocketStream_sendBytes_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_WebSocketStream_sendBytes_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_WebSocketStream_sendBytes_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_WebSocketStream_sendBytes_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_WebSocketStream_sendBytes_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_WebSocketStream_sendBytes_Params) Msg() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s WebSession_WebSocketStream_sendBytes_Params) HasMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_WebSocketStream_sendBytes_Params) SetMsg(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// WebSession_WebSocketStream_sendBytes_Params_List is a list of WebSession_WebSocketStream_sendBytes_Params.
type WebSession_WebSocketStream_sendBytes_Params_List = capnp.StructList[WebSession_WebSocketStream_sendBytes_Params]

// NewWebSession_WebSocketStream_sendBytes_Params creates a new list of WebSession_WebSocketStream_sendBytes_Params.
func NewWebSession_WebSocketStream_sendBytes_Params_List(s *capnp.Segment, sz int32) (WebSession_WebSocketStream_sendBytes_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebSession_WebSocketStream_sendBytes_Params](l), err
}

// WebSession_WebSocketStream_sendBytes_Params_Future is a wrapper for a WebSession_WebSocketStream_sendBytes_Params promised by a client call.
type WebSession_WebSocketStream_sendBytes_Params_Future struct{ *capnp.Future }

func (p WebSession_WebSocketStream_sendBytes_Params_Future) Struct() (WebSession_WebSocketStream_sendBytes_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_WebSocketStream_sendBytes_Params(s), err
}

type WebSession_CachePolicy capnp.Struct

// WebSession_CachePolicy_TypeID is the unique identifier for the type WebSession_CachePolicy.
const WebSession_CachePolicy_TypeID = 0xb37b21e300864885

func NewWebSession_CachePolicy(s *capnp.Segment) (WebSession_CachePolicy, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebSession_CachePolicy(st), err
}

func NewRootWebSession_CachePolicy(s *capnp.Segment) (WebSession_CachePolicy, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebSession_CachePolicy(st), err
}

func ReadRootWebSession_CachePolicy(msg *capnp.Message) (WebSession_CachePolicy, error) {
	root, err := msg.Root()
	return WebSession_CachePolicy(root.Struct()), err
}

func (s WebSession_CachePolicy) String() string {
	str, _ := text.Marshal(0xb37b21e300864885, capnp.Struct(s))
	return str
}

func (s WebSession_CachePolicy) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_CachePolicy) DecodeFromPtr(p capnp.Ptr) WebSession_CachePolicy {
	return WebSession_CachePolicy(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_CachePolicy) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_CachePolicy) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_CachePolicy) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_CachePolicy) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_CachePolicy) WithCheck() WebSession_CachePolicy_Scope {
	return WebSession_CachePolicy_Scope(capnp.Struct(s).Uint16(0))
}

func (s WebSession_CachePolicy) SetWithCheck(v WebSession_CachePolicy_Scope) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s WebSession_CachePolicy) Permanent() WebSession_CachePolicy_Scope {
	return WebSession_CachePolicy_Scope(capnp.Struct(s).Uint16(2))
}

func (s WebSession_CachePolicy) SetPermanent(v WebSession_CachePolicy_Scope) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s WebSession_CachePolicy) VariesOnCookie() bool {
	return capnp.Struct(s).Bit(32)
}

func (s WebSession_CachePolicy) SetVariesOnCookie(v bool) {
	capnp.Struct(s).SetBit(32, v)
}

func (s WebSession_CachePolicy) VariesOnAccept() bool {
	return capnp.Struct(s).Bit(33)
}

func (s WebSession_CachePolicy) SetVariesOnAccept(v bool) {
	capnp.Struct(s).SetBit(33, v)
}

// WebSession_CachePolicy_List is a list of WebSession_CachePolicy.
type WebSession_CachePolicy_List = capnp.StructList[WebSession_CachePolicy]

// NewWebSession_CachePolicy creates a new list of WebSession_CachePolicy.
func NewWebSession_CachePolicy_List(s *capnp.Segment, sz int32) (WebSession_CachePolicy_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[WebSession_CachePolicy](l), err
}

// WebSession_CachePolicy_Future is a wrapper for a WebSession_CachePolicy promised by a client call.
type WebSession_CachePolicy_Future struct{ *capnp.Future }

func (p WebSession_CachePolicy_Future) Struct() (WebSession_CachePolicy, error) {
	s, err := p.Future.Struct()
	return WebSession_CachePolicy(s), err
}

type WebSession_CachePolicy_Scope uint16

// WebSession_CachePolicy_Scope_TypeID is the unique identifier for the type WebSession_CachePolicy_Scope.
const WebSession_CachePolicy_Scope_TypeID = 0x81535505f60de028

// Values of WebSession_CachePolicy_Scope.
const (
	WebSession_CachePolicy_Scope_none          WebSession_CachePolicy_Scope = 0
	WebSession_CachePolicy_Scope_perSession    WebSession_CachePolicy_Scope = 1
	WebSession_CachePolicy_Scope_perUser       WebSession_CachePolicy_Scope = 2
	WebSession_CachePolicy_Scope_perAppVersion WebSession_CachePolicy_Scope = 3
	WebSession_CachePolicy_Scope_universal     WebSession_CachePolicy_Scope = 4
)

// String returns the enum's constant name.
func (c WebSession_CachePolicy_Scope) String() string {
	switch c {
	case WebSession_CachePolicy_Scope_none:
		return "none"
	case WebSession_CachePolicy_Scope_perSession:
		return "perSession"
	case WebSession_CachePolicy_Scope_perUser:
		return "perUser"
	case WebSession_CachePolicy_Scope_perAppVersion:
		return "perAppVersion"
	case WebSession_CachePolicy_Scope_universal:
		return "universal"

	default:
		return ""
	}
}

// WebSession_CachePolicy_ScopeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func WebSession_CachePolicy_ScopeFromString(c string) WebSession_CachePolicy_Scope {
	switch c {
	case "none":
		return WebSession_CachePolicy_Scope_none
	case "perSession":
		return WebSession_CachePolicy_Scope_perSession
	case "perUser":
		return WebSession_CachePolicy_Scope_perUser
	case "perAppVersion":
		return WebSession_CachePolicy_Scope_perAppVersion
	case "universal":
		return WebSession_CachePolicy_Scope_universal

	default:
		return 0
	}
}

type WebSession_CachePolicy_Scope_List = capnp.EnumList[WebSession_CachePolicy_Scope]

func NewWebSession_CachePolicy_Scope_List(s *capnp.Segment, sz int32) (WebSession_CachePolicy_Scope_List, error) {
	return capnp.NewEnumList[WebSession_CachePolicy_Scope](s, sz)
}

type WebSession_Options capnp.Struct

// WebSession_Options_TypeID is the unique identifier for the type WebSession_Options.
const WebSession_Options_TypeID = 0xe9ff06beec4e73d6

func NewWebSession_Options(s *capnp.Segment) (WebSession_Options, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_Options(st), err
}

func NewRootWebSession_Options(s *capnp.Segment) (WebSession_Options, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_Options(st), err
}

func ReadRootWebSession_Options(msg *capnp.Message) (WebSession_Options, error) {
	root, err := msg.Root()
	return WebSession_Options(root.Struct()), err
}

func (s WebSession_Options) String() string {
	str, _ := text.Marshal(0xe9ff06beec4e73d6, capnp.Struct(s))
	return str
}

func (s WebSession_Options) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_Options) DecodeFromPtr(p capnp.Ptr) WebSession_Options {
	return WebSession_Options(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_Options) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_Options) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_Options) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_Options) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_Options) DavClass1() bool {
	return capnp.Struct(s).Bit(0)
}

func (s WebSession_Options) SetDavClass1(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s WebSession_Options) DavClass2() bool {
	return capnp.Struct(s).Bit(1)
}

func (s WebSession_Options) SetDavClass2(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s WebSession_Options) DavClass3() bool {
	return capnp.Struct(s).Bit(2)
}

func (s WebSession_Options) SetDavClass3(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s WebSession_Options) DavExtensions() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s WebSession_Options) HasDavExtensions() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_Options) SetDavExtensions(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDavExtensions sets the davExtensions field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s WebSession_Options) NewDavExtensions(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// WebSession_Options_List is a list of WebSession_Options.
type WebSession_Options_List = capnp.StructList[WebSession_Options]

// NewWebSession_Options creates a new list of WebSession_Options.
func NewWebSession_Options_List(s *capnp.Segment, sz int32) (WebSession_Options_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[WebSession_Options](l), err
}

// WebSession_Options_Future is a wrapper for a WebSession_Options promised by a client call.
type WebSession_Options_Future struct{ *capnp.Future }

func (p WebSession_Options_Future) Struct() (WebSession_Options, error) {
	s, err := p.Future.Struct()
	return WebSession_Options(s), err
}

type WebSession_PropfindDepth uint16

// WebSession_PropfindDepth_TypeID is the unique identifier for the type WebSession_PropfindDepth.
const WebSession_PropfindDepth_TypeID = 0xb39cc44599b3a41b

// Values of WebSession_PropfindDepth.
const (
	WebSession_PropfindDepth_infinity WebSession_PropfindDepth = 0
	WebSession_PropfindDepth_zero     WebSession_PropfindDepth = 1
	WebSession_PropfindDepth_one      WebSession_PropfindDepth = 2
)

// String returns the enum's constant name.
func (c WebSession_PropfindDepth) String() string {
	switch c {
	case WebSession_PropfindDepth_infinity:
		return "infinity"
	case WebSession_PropfindDepth_zero:
		return "zero"
	case WebSession_PropfindDepth_one:
		return "one"

	default:
		return ""
	}
}

// WebSession_PropfindDepthFromString returns the enum value with a name,
// or the zero value if there's no such value.
func WebSession_PropfindDepthFromString(c string) WebSession_PropfindDepth {
	switch c {
	case "infinity":
		return WebSession_PropfindDepth_infinity
	case "zero":
		return WebSession_PropfindDepth_zero
	case "one":
		return WebSession_PropfindDepth_one

	default:
		return 0
	}
}

type WebSession_PropfindDepth_List = capnp.EnumList[WebSession_PropfindDepth]

func NewWebSession_PropfindDepth_List(s *capnp.Segment, sz int32) (WebSession_PropfindDepth_List, error) {
	return capnp.NewEnumList[WebSession_PropfindDepth](s, sz)
}

type WebSession_get_Params capnp.Struct

// WebSession_get_Params_TypeID is the unique identifier for the type WebSession_get_Params.
const WebSession_get_Params_TypeID = 0xcd94acddf4778328

func NewWebSession_get_Params(s *capnp.Segment) (WebSession_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return WebSession_get_Params(st), err
}

func NewRootWebSession_get_Params(s *capnp.Segment) (WebSession_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return WebSession_get_Params(st), err
}

func ReadRootWebSession_get_Params(msg *capnp.Message) (WebSession_get_Params, error) {
	root, err := msg.Root()
	return WebSession_get_Params(root.Struct()), err
}

func (s WebSession_get_Params) String() string {
	str, _ := text.Marshal(0xcd94acddf4778328, capnp.Struct(s))
	return str
}

func (s WebSession_get_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_get_Params) DecodeFromPtr(p capnp.Ptr) WebSession_get_Params {
	return WebSession_get_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_get_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_get_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_get_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_get_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_get_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_get_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_get_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_get_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_get_Params) Context() (WebSession_Context, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return WebSession_Context(p.Struct()), err
}

func (s WebSession_get_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_get_Params) SetContext(v WebSession_Context) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_get_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_get_Params) IgnoreBody() bool {
	return capnp.Struct(s).Bit(0)
}

func (s WebSession_get_Params) SetIgnoreBody(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// WebSession_get_Params_List is a list of WebSession_get_Params.
type WebSession_get_Params_List = capnp.StructList[WebSession_get_Params]

// NewWebSession_get_Params creates a new list of WebSession_get_Params.
func NewWebSession_get_Params_List(s *capnp.Segment, sz int32) (WebSession_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[WebSession_get_Params](l), err
}

// WebSession_get_Params_Future is a wrapper for a WebSession_get_Params promised by a client call.
type WebSession_get_Params_Future struct{ *capnp.Future }

func (p WebSession_get_Params_Future) Struct() (WebSession_get_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_get_Params(s), err
}

func (p WebSession_get_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(1, nil)}
}

type WebSession_post_Params capnp.Struct

// WebSession_post_Params_TypeID is the unique identifier for the type WebSession_post_Params.
const WebSession_post_Params_TypeID = 0xaa6ef20a62c1cafd

func NewWebSession_post_Params(s *capnp.Segment) (WebSession_post_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_post_Params(st), err
}

func NewRootWebSession_post_Params(s *capnp.Segment) (WebSession_post_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_post_Params(st), err
}

func ReadRootWebSession_post_Params(msg *capnp.Message) (WebSession_post_Params, error) {
	root, err := msg.Root()
	return WebSession_post_Params(root.Struct()), err
}

func (s WebSession_post_Params) String() string {
	str, _ := text.Marshal(0xaa6ef20a62c1cafd, capnp.Struct(s))
	return str
}

func (s WebSession_post_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_post_Params) DecodeFromPtr(p capnp.Ptr) WebSession_post_Params {
	return WebSession_post_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_post_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_post_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_post_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_post_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_post_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_post_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_post_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_post_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_post_Params) Content() (WebSession_PostContent, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return WebSession_PostContent(p.Struct()), err
}

func (s WebSession_post_Params) HasContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_post_Params) SetContent(v WebSession_PostContent) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated WebSession_PostContent struct, preferring placement in s's segment.
func (s WebSession_post_Params) NewContent() (WebSession_PostContent, error) {
	ss, err := NewWebSession_PostContent(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_PostContent{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_post_Params) Context() (WebSession_Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return WebSession_Context(p.Struct()), err
}

func (s WebSession_post_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_post_Params) SetContext(v WebSession_Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_post_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_post_Params_List is a list of WebSession_post_Params.
type WebSession_post_Params_List = capnp.StructList[WebSession_post_Params]

// NewWebSession_post_Params creates a new list of WebSession_post_Params.
func NewWebSession_post_Params_List(s *capnp.Segment, sz int32) (WebSession_post_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_post_Params](l), err
}

// WebSession_post_Params_Future is a wrapper for a WebSession_post_Params promised by a client call.
type WebSession_post_Params_Future struct{ *capnp.Future }

func (p WebSession_post_Params_Future) Struct() (WebSession_post_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_post_Params(s), err
}

func (p WebSession_post_Params_Future) Content() WebSession_PostContent_Future {
	return WebSession_PostContent_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_post_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_openWebSocket_Params capnp.Struct

// WebSession_openWebSocket_Params_TypeID is the unique identifier for the type WebSession_openWebSocket_Params.
const WebSession_openWebSocket_Params_TypeID = 0xc7c9c9b19d935e79

func NewWebSession_openWebSocket_Params(s *capnp.Segment) (WebSession_openWebSocket_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_openWebSocket_Params(st), err
}

func NewRootWebSession_openWebSocket_Params(s *capnp.Segment) (WebSession_openWebSocket_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_openWebSocket_Params(st), err
}

func ReadRootWebSession_openWebSocket_Params(msg *capnp.Message) (WebSession_openWebSocket_Params, error) {
	root, err := msg.Root()
	return WebSession_openWebSocket_Params(root.Struct()), err
}

func (s WebSession_openWebSocket_Params) String() string {
	str, _ := text.Marshal(0xc7c9c9b19d935e79, capnp.Struct(s))
	return str
}

func (s WebSession_openWebSocket_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_openWebSocket_Params) DecodeFromPtr(p capnp.Ptr) WebSession_openWebSocket_Params {
	return WebSession_openWebSocket_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_openWebSocket_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_openWebSocket_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_openWebSocket_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_openWebSocket_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_openWebSocket_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_openWebSocket_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_openWebSocket_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_openWebSocket_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_openWebSocket_Params) Context() (WebSession_Context, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return WebSession_Context(p.Struct()), err
}

func (s WebSession_openWebSocket_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_openWebSocket_Params) SetContext(v WebSession_Context) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_openWebSocket_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_openWebSocket_Params) Protocol() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s WebSession_openWebSocket_Params) HasProtocol() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_openWebSocket_Params) SetProtocol(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewProtocol sets the protocol field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s WebSession_openWebSocket_Params) NewProtocol(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

func (s WebSession_openWebSocket_Params) ClientStream() WebSession_WebSocketStream {
	p, _ := capnp.Struct(s).Ptr(3)
	return WebSession_WebSocketStream(p.Interface().Client())
}

func (s WebSession_openWebSocket_Params) HasClientStream() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s WebSession_openWebSocket_Params) SetClientStream(v WebSession_WebSocketStream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(3, in.ToPtr())
}

// WebSession_openWebSocket_Params_List is a list of WebSession_openWebSocket_Params.
type WebSession_openWebSocket_Params_List = capnp.StructList[WebSession_openWebSocket_Params]

// NewWebSession_openWebSocket_Params creates a new list of WebSession_openWebSocket_Params.
func NewWebSession_openWebSocket_Params_List(s *capnp.Segment, sz int32) (WebSession_openWebSocket_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[WebSession_openWebSocket_Params](l), err
}

// WebSession_openWebSocket_Params_Future is a wrapper for a WebSession_openWebSocket_Params promised by a client call.
type WebSession_openWebSocket_Params_Future struct{ *capnp.Future }

func (p WebSession_openWebSocket_Params_Future) Struct() (WebSession_openWebSocket_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_openWebSocket_Params(s), err
}

func (p WebSession_openWebSocket_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_openWebSocket_Params_Future) ClientStream() WebSession_WebSocketStream {
	return WebSession_WebSocketStream(p.Future.Field(3, nil).Client())
}

type WebSession_openWebSocket_Results capnp.Struct

// WebSession_openWebSocket_Results_TypeID is the unique identifier for the type WebSession_openWebSocket_Results.
const WebSession_openWebSocket_Results_TypeID = 0xcc561276d31b392b

func NewWebSession_openWebSocket_Results(s *capnp.Segment) (WebSession_openWebSocket_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_openWebSocket_Results(st), err
}

func NewRootWebSession_openWebSocket_Results(s *capnp.Segment) (WebSession_openWebSocket_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_openWebSocket_Results(st), err
}

func ReadRootWebSession_openWebSocket_Results(msg *capnp.Message) (WebSession_openWebSocket_Results, error) {
	root, err := msg.Root()
	return WebSession_openWebSocket_Results(root.Struct()), err
}

func (s WebSession_openWebSocket_Results) String() string {
	str, _ := text.Marshal(0xcc561276d31b392b, capnp.Struct(s))
	return str
}

func (s WebSession_openWebSocket_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_openWebSocket_Results) DecodeFromPtr(p capnp.Ptr) WebSession_openWebSocket_Results {
	return WebSession_openWebSocket_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_openWebSocket_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_openWebSocket_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_openWebSocket_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_openWebSocket_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_openWebSocket_Results) Protocol() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s WebSession_openWebSocket_Results) HasProtocol() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_openWebSocket_Results) SetProtocol(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewProtocol sets the protocol field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s WebSession_openWebSocket_Results) NewProtocol(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

func (s WebSession_openWebSocket_Results) ServerStream() WebSession_WebSocketStream {
	p, _ := capnp.Struct(s).Ptr(1)
	return WebSession_WebSocketStream(p.Interface().Client())
}

func (s WebSession_openWebSocket_Results) HasServerStream() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_openWebSocket_Results) SetServerStream(v WebSession_WebSocketStream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// WebSession_openWebSocket_Results_List is a list of WebSession_openWebSocket_Results.
type WebSession_openWebSocket_Results_List = capnp.StructList[WebSession_openWebSocket_Results]

// NewWebSession_openWebSocket_Results creates a new list of WebSession_openWebSocket_Results.
func NewWebSession_openWebSocket_Results_List(s *capnp.Segment, sz int32) (WebSession_openWebSocket_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[WebSession_openWebSocket_Results](l), err
}

// WebSession_openWebSocket_Results_Future is a wrapper for a WebSession_openWebSocket_Results promised by a client call.
type WebSession_openWebSocket_Results_Future struct{ *capnp.Future }

func (p WebSession_openWebSocket_Results_Future) Struct() (WebSession_openWebSocket_Results, error) {
	s, err := p.Future.Struct()
	return WebSession_openWebSocket_Results(s), err
}

func (p WebSession_openWebSocket_Results_Future) ServerStream() WebSession_WebSocketStream {
	return WebSession_WebSocketStream(p.Future.Field(1, nil).Client())
}

type WebSession_put_Params capnp.Struct

// WebSession_put_Params_TypeID is the unique identifier for the type WebSession_put_Params.
const WebSession_put_Params_TypeID = 0xf1c587295608596e

func NewWebSession_put_Params(s *capnp.Segment) (WebSession_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_put_Params(st), err
}

func NewRootWebSession_put_Params(s *capnp.Segment) (WebSession_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_put_Params(st), err
}

func ReadRootWebSession_put_Params(msg *capnp.Message) (WebSession_put_Params, error) {
	root, err := msg.Root()
	return WebSession_put_Params(root.Struct()), err
}

func (s WebSession_put_Params) String() string {
	str, _ := text.Marshal(0xf1c587295608596e, capnp.Struct(s))
	return str
}

func (s WebSession_put_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_put_Params) DecodeFromPtr(p capnp.Ptr) WebSession_put_Params {
	return WebSession_put_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_put_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_put_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_put_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_put_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_put_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_put_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_put_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_put_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_put_Params) Content() (WebSession_PutContent, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return WebSession_PutContent(p.Struct()), err
}

func (s WebSession_put_Params) HasContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_put_Params) SetContent(v WebSession_PutContent) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated WebSession_PutContent struct, preferring placement in s's segment.
func (s WebSession_put_Params) NewContent() (WebSession_PutContent, error) {
	ss, err := NewWebSession_PutContent(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_PutContent{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_put_Params) Context() (WebSession_Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return WebSession_Context(p.Struct()), err
}

func (s WebSession_put_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_put_Params) SetContext(v WebSession_Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_put_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_put_Params_List is a list of WebSession_put_Params.
type WebSession_put_Params_List = capnp.StructList[WebSession_put_Params]

// NewWebSession_put_Params creates a new list of WebSession_put_Params.
func NewWebSession_put_Params_List(s *capnp.Segment, sz int32) (WebSession_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_put_Params](l), err
}

// WebSession_put_Params_Future is a wrapper for a WebSession_put_Params promised by a client call.
type WebSession_put_Params_Future struct{ *capnp.Future }

func (p WebSession_put_Params_Future) Struct() (WebSession_put_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_put_Params(s), err
}

func (p WebSession_put_Params_Future) Content() WebSession_PutContent_Future {
	return WebSession_PutContent_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_put_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_delete_Params capnp.Struct

// WebSession_delete_Params_TypeID is the unique identifier for the type WebSession_delete_Params.
const WebSession_delete_Params_TypeID = 0xeba76bffb27b1975

func NewWebSession_delete_Params(s *capnp.Segment) (WebSession_delete_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_delete_Params(st), err
}

func NewRootWebSession_delete_Params(s *capnp.Segment) (WebSession_delete_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_delete_Params(st), err
}

func ReadRootWebSession_delete_Params(msg *capnp.Message) (WebSession_delete_Params, error) {
	root, err := msg.Root()
	return WebSession_delete_Params(root.Struct()), err
}

func (s WebSession_delete_Params) String() string {
	str, _ := text.Marshal(0xeba76bffb27b1975, capnp.Struct(s))
	return str
}

func (s WebSession_delete_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_delete_Params) DecodeFromPtr(p capnp.Ptr) WebSession_delete_Params {
	return WebSession_delete_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_delete_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_delete_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_delete_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_delete_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_delete_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_delete_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_delete_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_delete_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_delete_Params) Context() (WebSession_Context, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return WebSession_Context(p.Struct()), err
}

func (s WebSession_delete_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_delete_Params) SetContext(v WebSession_Context) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_delete_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_delete_Params_List is a list of WebSession_delete_Params.
type WebSession_delete_Params_List = capnp.StructList[WebSession_delete_Params]

// NewWebSession_delete_Params creates a new list of WebSession_delete_Params.
func NewWebSession_delete_Params_List(s *capnp.Segment, sz int32) (WebSession_delete_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[WebSession_delete_Params](l), err
}

// WebSession_delete_Params_Future is a wrapper for a WebSession_delete_Params promised by a client call.
type WebSession_delete_Params_Future struct{ *capnp.Future }

func (p WebSession_delete_Params_Future) Struct() (WebSession_delete_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_delete_Params(s), err
}

func (p WebSession_delete_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(1, nil)}
}

type WebSession_postStreaming_Params capnp.Struct

// WebSession_postStreaming_Params_TypeID is the unique identifier for the type WebSession_postStreaming_Params.
const WebSession_postStreaming_Params_TypeID = 0xd26a7affce43b1c0

func NewWebSession_postStreaming_Params(s *capnp.Segment) (WebSession_postStreaming_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_postStreaming_Params(st), err
}

func NewRootWebSession_postStreaming_Params(s *capnp.Segment) (WebSession_postStreaming_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_postStreaming_Params(st), err
}

func ReadRootWebSession_postStreaming_Params(msg *capnp.Message) (WebSession_postStreaming_Params, error) {
	root, err := msg.Root()
	return WebSession_postStreaming_Params(root.Struct()), err
}

func (s WebSession_postStreaming_Params) String() string {
	str, _ := text.Marshal(0xd26a7affce43b1c0, capnp.Struct(s))
	return str
}

func (s WebSession_postStreaming_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_postStreaming_Params) DecodeFromPtr(p capnp.Ptr) WebSession_postStreaming_Params {
	return WebSession_postStreaming_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_postStreaming_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_postStreaming_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_postStreaming_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_postStreaming_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_postStreaming_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_postStreaming_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_postStreaming_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_postStreaming_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_postStreaming_Params) MimeType() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_postStreaming_Params) HasMimeType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_postStreaming_Params) MimeTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_postStreaming_Params) SetMimeType(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_postStreaming_Params) Context() (WebSession_Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return WebSession_Context(p.Struct()), err
}

func (s WebSession_postStreaming_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_postStreaming_Params) SetContext(v WebSession_Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_postStreaming_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_postStreaming_Params) Encoding() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s WebSession_postStreaming_Params) HasEncoding() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s WebSession_postStreaming_Params) EncodingBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s WebSession_postStreaming_Params) SetEncoding(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

// WebSession_postStreaming_Params_List is a list of WebSession_postStreaming_Params.
type WebSession_postStreaming_Params_List = capnp.StructList[WebSession_postStreaming_Params]

// NewWebSession_postStreaming_Params creates a new list of WebSession_postStreaming_Params.
func NewWebSession_postStreaming_Params_List(s *capnp.Segment, sz int32) (WebSession_postStreaming_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[WebSession_postStreaming_Params](l), err
}

// WebSession_postStreaming_Params_Future is a wrapper for a WebSession_postStreaming_Params promised by a client call.
type WebSession_postStreaming_Params_Future struct{ *capnp.Future }

func (p WebSession_postStreaming_Params_Future) Struct() (WebSession_postStreaming_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_postStreaming_Params(s), err
}

func (p WebSession_postStreaming_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_postStreaming_Results capnp.Struct

// WebSession_postStreaming_Results_TypeID is the unique identifier for the type WebSession_postStreaming_Results.
const WebSession_postStreaming_Results_TypeID = 0xbf0e0653dc266205

func NewWebSession_postStreaming_Results(s *capnp.Segment) (WebSession_postStreaming_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_postStreaming_Results(st), err
}

func NewRootWebSession_postStreaming_Results(s *capnp.Segment) (WebSession_postStreaming_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_postStreaming_Results(st), err
}

func ReadRootWebSession_postStreaming_Results(msg *capnp.Message) (WebSession_postStreaming_Results, error) {
	root, err := msg.Root()
	return WebSession_postStreaming_Results(root.Struct()), err
}

func (s WebSession_postStreaming_Results) String() string {
	str, _ := text.Marshal(0xbf0e0653dc266205, capnp.Struct(s))
	return str
}

func (s WebSession_postStreaming_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_postStreaming_Results) DecodeFromPtr(p capnp.Ptr) WebSession_postStreaming_Results {
	return WebSession_postStreaming_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_postStreaming_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_postStreaming_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_postStreaming_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_postStreaming_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_postStreaming_Results) Stream() WebSession_RequestStream {
	p, _ := capnp.Struct(s).Ptr(0)
	return WebSession_RequestStream(p.Interface().Client())
}

func (s WebSession_postStreaming_Results) HasStream() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_postStreaming_Results) SetStream(v WebSession_RequestStream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// WebSession_postStreaming_Results_List is a list of WebSession_postStreaming_Results.
type WebSession_postStreaming_Results_List = capnp.StructList[WebSession_postStreaming_Results]

// NewWebSession_postStreaming_Results creates a new list of WebSession_postStreaming_Results.
func NewWebSession_postStreaming_Results_List(s *capnp.Segment, sz int32) (WebSession_postStreaming_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebSession_postStreaming_Results](l), err
}

// WebSession_postStreaming_Results_Future is a wrapper for a WebSession_postStreaming_Results promised by a client call.
type WebSession_postStreaming_Results_Future struct{ *capnp.Future }

func (p WebSession_postStreaming_Results_Future) Struct() (WebSession_postStreaming_Results, error) {
	s, err := p.Future.Struct()
	return WebSession_postStreaming_Results(s), err
}

func (p WebSession_postStreaming_Results_Future) Stream() WebSession_RequestStream {
	return WebSession_RequestStream(p.Future.Field(0, nil).Client())
}

type WebSession_putStreaming_Params capnp.Struct

// WebSession_putStreaming_Params_TypeID is the unique identifier for the type WebSession_putStreaming_Params.
const WebSession_putStreaming_Params_TypeID = 0xa1ece076a7105939

func NewWebSession_putStreaming_Params(s *capnp.Segment) (WebSession_putStreaming_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_putStreaming_Params(st), err
}

func NewRootWebSession_putStreaming_Params(s *capnp.Segment) (WebSession_putStreaming_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_putStreaming_Params(st), err
}

func ReadRootWebSession_putStreaming_Params(msg *capnp.Message) (WebSession_putStreaming_Params, error) {
	root, err := msg.Root()
	return WebSession_putStreaming_Params(root.Struct()), err
}

func (s WebSession_putStreaming_Params) String() string {
	str, _ := text.Marshal(0xa1ece076a7105939, capnp.Struct(s))
	return str
}

func (s WebSession_putStreaming_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_putStreaming_Params) DecodeFromPtr(p capnp.Ptr) WebSession_putStreaming_Params {
	return WebSession_putStreaming_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_putStreaming_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_putStreaming_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_putStreaming_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_putStreaming_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_putStreaming_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_putStreaming_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_putStreaming_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_putStreaming_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_putStreaming_Params) MimeType() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_putStreaming_Params) HasMimeType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_putStreaming_Params) MimeTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_putStreaming_Params) SetMimeType(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_putStreaming_Params) Context() (WebSession_Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return WebSession_Context(p.Struct()), err
}

func (s WebSession_putStreaming_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_putStreaming_Params) SetContext(v WebSession_Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_putStreaming_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_putStreaming_Params) Encoding() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s WebSession_putStreaming_Params) HasEncoding() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s WebSession_putStreaming_Params) EncodingBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s WebSession_putStreaming_Params) SetEncoding(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

// WebSession_putStreaming_Params_List is a list of WebSession_putStreaming_Params.
type WebSession_putStreaming_Params_List = capnp.StructList[WebSession_putStreaming_Params]

// NewWebSession_putStreaming_Params creates a new list of WebSession_putStreaming_Params.
func NewWebSession_putStreaming_Params_List(s *capnp.Segment, sz int32) (WebSession_putStreaming_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[WebSession_putStreaming_Params](l), err
}

// WebSession_putStreaming_Params_Future is a wrapper for a WebSession_putStreaming_Params promised by a client call.
type WebSession_putStreaming_Params_Future struct{ *capnp.Future }

func (p WebSession_putStreaming_Params_Future) Struct() (WebSession_putStreaming_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_putStreaming_Params(s), err
}

func (p WebSession_putStreaming_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_putStreaming_Results capnp.Struct

// WebSession_putStreaming_Results_TypeID is the unique identifier for the type WebSession_putStreaming_Results.
const WebSession_putStreaming_Results_TypeID = 0xc60d14bf989d4454

func NewWebSession_putStreaming_Results(s *capnp.Segment) (WebSession_putStreaming_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_putStreaming_Results(st), err
}

func NewRootWebSession_putStreaming_Results(s *capnp.Segment) (WebSession_putStreaming_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_putStreaming_Results(st), err
}

func ReadRootWebSession_putStreaming_Results(msg *capnp.Message) (WebSession_putStreaming_Results, error) {
	root, err := msg.Root()
	return WebSession_putStreaming_Results(root.Struct()), err
}

func (s WebSession_putStreaming_Results) String() string {
	str, _ := text.Marshal(0xc60d14bf989d4454, capnp.Struct(s))
	return str
}

func (s WebSession_putStreaming_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_putStreaming_Results) DecodeFromPtr(p capnp.Ptr) WebSession_putStreaming_Results {
	return WebSession_putStreaming_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_putStreaming_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_putStreaming_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_putStreaming_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_putStreaming_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_putStreaming_Results) Stream() WebSession_RequestStream {
	p, _ := capnp.Struct(s).Ptr(0)
	return WebSession_RequestStream(p.Interface().Client())
}

func (s WebSession_putStreaming_Results) HasStream() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_putStreaming_Results) SetStream(v WebSession_RequestStream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// WebSession_putStreaming_Results_List is a list of WebSession_putStreaming_Results.
type WebSession_putStreaming_Results_List = capnp.StructList[WebSession_putStreaming_Results]

// NewWebSession_putStreaming_Results creates a new list of WebSession_putStreaming_Results.
func NewWebSession_putStreaming_Results_List(s *capnp.Segment, sz int32) (WebSession_putStreaming_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebSession_putStreaming_Results](l), err
}

// WebSession_putStreaming_Results_Future is a wrapper for a WebSession_putStreaming_Results promised by a client call.
type WebSession_putStreaming_Results_Future struct{ *capnp.Future }

func (p WebSession_putStreaming_Results_Future) Struct() (WebSession_putStreaming_Results, error) {
	s, err := p.Future.Struct()
	return WebSession_putStreaming_Results(s), err
}

func (p WebSession_putStreaming_Results_Future) Stream() WebSession_RequestStream {
	return WebSession_RequestStream(p.Future.Field(0, nil).Client())
}

type WebSession_propfind_Params capnp.Struct

// WebSession_propfind_Params_TypeID is the unique identifier for the type WebSession_propfind_Params.
const WebSession_propfind_Params_TypeID = 0xca2d58de88f0b32e

func NewWebSession_propfind_Params(s *capnp.Segment) (WebSession_propfind_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_propfind_Params(st), err
}

func NewRootWebSession_propfind_Params(s *capnp.Segment) (WebSession_propfind_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_propfind_Params(st), err
}

func ReadRootWebSession_propfind_Params(msg *capnp.Message) (WebSession_propfind_Params, error) {
	root, err := msg.Root()
	return WebSession_propfind_Params(root.Struct()), err
}

func (s WebSession_propfind_Params) String() string {
	str, _ := text.Marshal(0xca2d58de88f0b32e, capnp.Struct(s))
	return str
}

func (s WebSession_propfind_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_propfind_Params) DecodeFromPtr(p capnp.Ptr) WebSession_propfind_Params {
	return WebSession_propfind_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_propfind_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_propfind_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_propfind_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_propfind_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_propfind_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_propfind_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_propfind_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_propfind_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_propfind_Params) XmlContent() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_propfind_Params) HasXmlContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_propfind_Params) XmlContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_propfind_Params) SetXmlContent(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_propfind_Params) Depth() WebSession_PropfindDepth {
	return WebSession_PropfindDepth(capnp.Struct(s).Uint16(0))
}

func (s WebSession_propfind_Params) SetDepth(v WebSession_PropfindDepth) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s WebSession_propfind_Params) Context() (WebSession_Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return WebSession_Context(p.Struct()), err
}

func (s WebSession_propfind_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_propfind_Params) SetContext(v WebSession_Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_propfind_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_propfind_Params_List is a list of WebSession_propfind_Params.
type WebSession_propfind_Params_List = capnp.StructList[WebSession_propfind_Params]

// NewWebSession_propfind_Params creates a new list of WebSession_propfind_Params.
func NewWebSession_propfind_Params_List(s *capnp.Segment, sz int32) (WebSession_propfind_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_propfind_Params](l), err
}

// WebSession_propfind_Params_Future is a wrapper for a WebSession_propfind_Params promised by a client call.
type WebSession_propfind_Params_Future struct{ *capnp.Future }

func (p WebSession_propfind_Params_Future) Struct() (WebSession_propfind_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_propfind_Params(s), err
}

func (p WebSession_propfind_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_proppatch_Params capnp.Struct

// WebSession_proppatch_Params_TypeID is the unique identifier for the type WebSession_proppatch_Params.
const WebSession_proppatch_Params_TypeID = 0x9e582e7e054088ae

func NewWebSession_proppatch_Params(s *capnp.Segment) (WebSession_proppatch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_proppatch_Params(st), err
}

func NewRootWebSession_proppatch_Params(s *capnp.Segment) (WebSession_proppatch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_proppatch_Params(st), err
}

func ReadRootWebSession_proppatch_Params(msg *capnp.Message) (WebSession_proppatch_Params, error) {
	root, err := msg.Root()
	return WebSession_proppatch_Params(root.Struct()), err
}

func (s WebSession_proppatch_Params) String() string {
	str, _ := text.Marshal(0x9e582e7e054088ae, capnp.Struct(s))
	return str
}

func (s WebSession_proppatch_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_proppatch_Params) DecodeFromPtr(p capnp.Ptr) WebSession_proppatch_Params {
	return WebSession_proppatch_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_proppatch_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_proppatch_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_proppatch_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_proppatch_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_proppatch_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_proppatch_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_proppatch_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_proppatch_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_proppatch_Params) XmlContent() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_proppatch_Params) HasXmlContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_proppatch_Params) XmlContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_proppatch_Params) SetXmlContent(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_proppatch_Params) Context() (WebSession_Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return WebSession_Context(p.Struct()), err
}

func (s WebSession_proppatch_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_proppatch_Params) SetContext(v WebSession_Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_proppatch_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_proppatch_Params_List is a list of WebSession_proppatch_Params.
type WebSession_proppatch_Params_List = capnp.StructList[WebSession_proppatch_Params]

// NewWebSession_proppatch_Params creates a new list of WebSession_proppatch_Params.
func NewWebSession_proppatch_Params_List(s *capnp.Segment, sz int32) (WebSession_proppatch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_proppatch_Params](l), err
}

// WebSession_proppatch_Params_Future is a wrapper for a WebSession_proppatch_Params promised by a client call.
type WebSession_proppatch_Params_Future struct{ *capnp.Future }

func (p WebSession_proppatch_Params_Future) Struct() (WebSession_proppatch_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_proppatch_Params(s), err
}

func (p WebSession_proppatch_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_mkcol_Params capnp.Struct

// WebSession_mkcol_Params_TypeID is the unique identifier for the type WebSession_mkcol_Params.
const WebSession_mkcol_Params_TypeID = 0xf64da2416445f8b6

func NewWebSession_mkcol_Params(s *capnp.Segment) (WebSession_mkcol_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_mkcol_Params(st), err
}

func NewRootWebSession_mkcol_Params(s *capnp.Segment) (WebSession_mkcol_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_mkcol_Params(st), err
}

func ReadRootWebSession_mkcol_Params(msg *capnp.Message) (WebSession_mkcol_Params, error) {
	root, err := msg.Root()
	return WebSession_mkcol_Params(root.Struct()), err
}

func (s WebSession_mkcol_Params) String() string {
	str, _ := text.Marshal(0xf64da2416445f8b6, capnp.Struct(s))
	return str
}

func (s WebSession_mkcol_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_mkcol_Params) DecodeFromPtr(p capnp.Ptr) WebSession_mkcol_Params {
	return WebSession_mkcol_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_mkcol_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_mkcol_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_mkcol_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_mkcol_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_mkcol_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_mkcol_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_mkcol_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_mkcol_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_mkcol_Params) Content() (WebSession_PostContent, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return WebSession_PostContent(p.Struct()), err
}

func (s WebSession_mkcol_Params) HasContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_mkcol_Params) SetContent(v WebSession_PostContent) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated WebSession_PostContent struct, preferring placement in s's segment.
func (s WebSession_mkcol_Params) NewContent() (WebSession_PostContent, error) {
	ss, err := NewWebSession_PostContent(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_PostContent{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_mkcol_Params) Context() (WebSession_Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return WebSession_Context(p.Struct()), err
}

func (s WebSession_mkcol_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_mkcol_Params) SetContext(v WebSession_Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_mkcol_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_mkcol_Params_List is a list of WebSession_mkcol_Params.
type WebSession_mkcol_Params_List = capnp.StructList[WebSession_mkcol_Params]

// NewWebSession_mkcol_Params creates a new list of WebSession_mkcol_Params.
func NewWebSession_mkcol_Params_List(s *capnp.Segment, sz int32) (WebSession_mkcol_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_mkcol_Params](l), err
}

// WebSession_mkcol_Params_Future is a wrapper for a WebSession_mkcol_Params promised by a client call.
type WebSession_mkcol_Params_Future struct{ *capnp.Future }

func (p WebSession_mkcol_Params_Future) Struct() (WebSession_mkcol_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_mkcol_Params(s), err
}

func (p WebSession_mkcol_Params_Future) Content() WebSession_PostContent_Future {
	return WebSession_PostContent_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_mkcol_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_copy_Params capnp.Struct

// WebSession_copy_Params_TypeID is the unique identifier for the type WebSession_copy_Params.
const WebSession_copy_Params_TypeID = 0x8139673a82bfe07d

func NewWebSession_copy_Params(s *capnp.Segment) (WebSession_copy_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_copy_Params(st), err
}

func NewRootWebSession_copy_Params(s *capnp.Segment) (WebSession_copy_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_copy_Params(st), err
}

func ReadRootWebSession_copy_Params(msg *capnp.Message) (WebSession_copy_Params, error) {
	root, err := msg.Root()
	return WebSession_copy_Params(root.Struct()), err
}

func (s WebSession_copy_Params) String() string {
	str, _ := text.Marshal(0x8139673a82bfe07d, capnp.Struct(s))
	return str
}

func (s WebSession_copy_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_copy_Params) DecodeFromPtr(p capnp.Ptr) WebSession_copy_Params {
	return WebSession_copy_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_copy_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_copy_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_copy_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_copy_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_copy_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_copy_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_copy_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_copy_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_copy_Params) Destination() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_copy_Params) HasDestination() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_copy_Params) DestinationBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_copy_Params) SetDestination(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_copy_Params) NoOverwrite() bool {
	return capnp.Struct(s).Bit(0)
}

func (s WebSession_copy_Params) SetNoOverwrite(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s WebSession_copy_Params) Shallow() bool {
	return capnp.Struct(s).Bit(1)
}

func (s WebSession_copy_Params) SetShallow(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s WebSession_copy_Params) Context() (WebSession_Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return WebSession_Context(p.Struct()), err
}

func (s WebSession_copy_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_copy_Params) SetContext(v WebSession_Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_copy_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_copy_Params_List is a list of WebSession_copy_Params.
type WebSession_copy_Params_List = capnp.StructList[WebSession_copy_Params]

// NewWebSession_copy_Params creates a new list of WebSession_copy_Params.
func NewWebSession_copy_Params_List(s *capnp.Segment, sz int32) (WebSession_copy_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_copy_Params](l), err
}

// WebSession_copy_Params_Future is a wrapper for a WebSession_copy_Params promised by a client call.
type WebSession_copy_Params_Future struct{ *capnp.Future }

func (p WebSession_copy_Params_Future) Struct() (WebSession_copy_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_copy_Params(s), err
}

func (p WebSession_copy_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_move_Params capnp.Struct

// WebSession_move_Params_TypeID is the unique identifier for the type WebSession_move_Params.
const WebSession_move_Params_TypeID = 0x81f5066b5576a609

func NewWebSession_move_Params(s *capnp.Segment) (WebSession_move_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_move_Params(st), err
}

func NewRootWebSession_move_Params(s *capnp.Segment) (WebSession_move_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_move_Params(st), err
}

func ReadRootWebSession_move_Params(msg *capnp.Message) (WebSession_move_Params, error) {
	root, err := msg.Root()
	return WebSession_move_Params(root.Struct()), err
}

func (s WebSession_move_Params) String() string {
	str, _ := text.Marshal(0x81f5066b5576a609, capnp.Struct(s))
	return str
}

func (s WebSession_move_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_move_Params) DecodeFromPtr(p capnp.Ptr) WebSession_move_Params {
	return WebSession_move_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_move_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_move_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_move_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_move_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_move_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_move_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_move_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_move_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_move_Params) Destination() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_move_Params) HasDestination() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_move_Params) DestinationBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_move_Params) SetDestination(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_move_Params) NoOverwrite() bool {
	return capnp.Struct(s).Bit(0)
}

func (s WebSession_move_Params) SetNoOverwrite(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s WebSession_move_Params) Context() (WebSession_Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return WebSession_Context(p.Struct()), err
}

func (s WebSession_move_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_move_Params) SetContext(v WebSession_Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_move_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_move_Params_List is a list of WebSession_move_Params.
type WebSession_move_Params_List = capnp.StructList[WebSession_move_Params]

// NewWebSession_move_Params creates a new list of WebSession_move_Params.
func NewWebSession_move_Params_List(s *capnp.Segment, sz int32) (WebSession_move_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_move_Params](l), err
}

// WebSession_move_Params_Future is a wrapper for a WebSession_move_Params promised by a client call.
type WebSession_move_Params_Future struct{ *capnp.Future }

func (p WebSession_move_Params_Future) Struct() (WebSession_move_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_move_Params(s), err
}

func (p WebSession_move_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_lock_Params capnp.Struct

// WebSession_lock_Params_TypeID is the unique identifier for the type WebSession_lock_Params.
const WebSession_lock_Params_TypeID = 0x9398280f1359570a

func NewWebSession_lock_Params(s *capnp.Segment) (WebSession_lock_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_lock_Params(st), err
}

func NewRootWebSession_lock_Params(s *capnp.Segment) (WebSession_lock_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_lock_Params(st), err
}

func ReadRootWebSession_lock_Params(msg *capnp.Message) (WebSession_lock_Params, error) {
	root, err := msg.Root()
	return WebSession_lock_Params(root.Struct()), err
}

func (s WebSession_lock_Params) String() string {
	str, _ := text.Marshal(0x9398280f1359570a, capnp.Struct(s))
	return str
}

func (s WebSession_lock_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_lock_Params) DecodeFromPtr(p capnp.Ptr) WebSession_lock_Params {
	return WebSession_lock_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_lock_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_lock_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_lock_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_lock_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_lock_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_lock_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_lock_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_lock_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_lock_Params) XmlContent() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_lock_Params) HasXmlContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_lock_Params) XmlContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_lock_Params) SetXmlContent(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_lock_Params) Shallow() bool {
	return capnp.Struct(s).Bit(0)
}

func (s WebSession_lock_Params) SetShallow(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s WebSession_lock_Params) Context() (WebSession_Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return WebSession_Context(p.Struct()), err
}

func (s WebSession_lock_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_lock_Params) SetContext(v WebSession_Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_lock_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_lock_Params_List is a list of WebSession_lock_Params.
type WebSession_lock_Params_List = capnp.StructList[WebSession_lock_Params]

// NewWebSession_lock_Params creates a new list of WebSession_lock_Params.
func NewWebSession_lock_Params_List(s *capnp.Segment, sz int32) (WebSession_lock_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_lock_Params](l), err
}

// WebSession_lock_Params_Future is a wrapper for a WebSession_lock_Params promised by a client call.
type WebSession_lock_Params_Future struct{ *capnp.Future }

func (p WebSession_lock_Params_Future) Struct() (WebSession_lock_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_lock_Params(s), err
}

func (p WebSession_lock_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_unlock_Params capnp.Struct

// WebSession_unlock_Params_TypeID is the unique identifier for the type WebSession_unlock_Params.
const WebSession_unlock_Params_TypeID = 0xd684c6a791b97dbc

func NewWebSession_unlock_Params(s *capnp.Segment) (WebSession_unlock_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_unlock_Params(st), err
}

func NewRootWebSession_unlock_Params(s *capnp.Segment) (WebSession_unlock_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_unlock_Params(st), err
}

func ReadRootWebSession_unlock_Params(msg *capnp.Message) (WebSession_unlock_Params, error) {
	root, err := msg.Root()
	return WebSession_unlock_Params(root.Struct()), err
}

func (s WebSession_unlock_Params) String() string {
	str, _ := text.Marshal(0xd684c6a791b97dbc, capnp.Struct(s))
	return str
}

func (s WebSession_unlock_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_unlock_Params) DecodeFromPtr(p capnp.Ptr) WebSession_unlock_Params {
	return WebSession_unlock_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_unlock_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_unlock_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_unlock_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_unlock_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_unlock_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_unlock_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_unlock_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_unlock_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_unlock_Params) LockToken() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_unlock_Params) HasLockToken() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_unlock_Params) LockTokenBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_unlock_Params) SetLockToken(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_unlock_Params) Context() (WebSession_Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return WebSession_Context(p.Struct()), err
}

func (s WebSession_unlock_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_unlock_Params) SetContext(v WebSession_Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_unlock_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_unlock_Params_List is a list of WebSession_unlock_Params.
type WebSession_unlock_Params_List = capnp.StructList[WebSession_unlock_Params]

// NewWebSession_unlock_Params creates a new list of WebSession_unlock_Params.
func NewWebSession_unlock_Params_List(s *capnp.Segment, sz int32) (WebSession_unlock_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_unlock_Params](l), err
}

// WebSession_unlock_Params_Future is a wrapper for a WebSession_unlock_Params promised by a client call.
type WebSession_unlock_Params_Future struct{ *capnp.Future }

func (p WebSession_unlock_Params_Future) Struct() (WebSession_unlock_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_unlock_Params(s), err
}

func (p WebSession_unlock_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_acl_Params capnp.Struct

// WebSession_acl_Params_TypeID is the unique identifier for the type WebSession_acl_Params.
const WebSession_acl_Params_TypeID = 0x9f79c33e20119e8d

func NewWebSession_acl_Params(s *capnp.Segment) (WebSession_acl_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_acl_Params(st), err
}

func NewRootWebSession_acl_Params(s *capnp.Segment) (WebSession_acl_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_acl_Params(st), err
}

func ReadRootWebSession_acl_Params(msg *capnp.Message) (WebSession_acl_Params, error) {
	root, err := msg.Root()
	return WebSession_acl_Params(root.Struct()), err
}

func (s WebSession_acl_Params) String() string {
	str, _ := text.Marshal(0x9f79c33e20119e8d, capnp.Struct(s))
	return str
}

func (s WebSession_acl_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_acl_Params) DecodeFromPtr(p capnp.Ptr) WebSession_acl_Params {
	return WebSession_acl_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_acl_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_acl_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_acl_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_acl_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_acl_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_acl_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_acl_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_acl_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_acl_Params) XmlContent() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebSession_acl_Params) HasXmlContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_acl_Params) XmlContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_acl_Params) SetXmlContent(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebSession_acl_Params) Context() (WebSession_Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return WebSession_Context(p.Struct()), err
}

func (s WebSession_acl_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_acl_Params) SetContext(v WebSession_Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_acl_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_acl_Params_List is a list of WebSession_acl_Params.
type WebSession_acl_Params_List = capnp.StructList[WebSession_acl_Params]

// NewWebSession_acl_Params creates a new list of WebSession_acl_Params.
func NewWebSession_acl_Params_List(s *capnp.Segment, sz int32) (WebSession_acl_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_acl_Params](l), err
}

// WebSession_acl_Params_Future is a wrapper for a WebSession_acl_Params promised by a client call.
type WebSession_acl_Params_Future struct{ *capnp.Future }

func (p WebSession_acl_Params_Future) Struct() (WebSession_acl_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_acl_Params(s), err
}

func (p WebSession_acl_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_report_Params capnp.Struct

// WebSession_report_Params_TypeID is the unique identifier for the type WebSession_report_Params.
const WebSession_report_Params_TypeID = 0xc0643ea68efc60ae

func NewWebSession_report_Params(s *capnp.Segment) (WebSession_report_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_report_Params(st), err
}

func NewRootWebSession_report_Params(s *capnp.Segment) (WebSession_report_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_report_Params(st), err
}

func ReadRootWebSession_report_Params(msg *capnp.Message) (WebSession_report_Params, error) {
	root, err := msg.Root()
	return WebSession_report_Params(root.Struct()), err
}

func (s WebSession_report_Params) String() string {
	str, _ := text.Marshal(0xc0643ea68efc60ae, capnp.Struct(s))
	return str
}

func (s WebSession_report_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_report_Params) DecodeFromPtr(p capnp.Ptr) WebSession_report_Params {
	return WebSession_report_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_report_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_report_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_report_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_report_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_report_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_report_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_report_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_report_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_report_Params) Content() (WebSession_PostContent, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return WebSession_PostContent(p.Struct()), err
}

func (s WebSession_report_Params) HasContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_report_Params) SetContent(v WebSession_PostContent) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated WebSession_PostContent struct, preferring placement in s's segment.
func (s WebSession_report_Params) NewContent() (WebSession_PostContent, error) {
	ss, err := NewWebSession_PostContent(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_PostContent{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_report_Params) Context() (WebSession_Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return WebSession_Context(p.Struct()), err
}

func (s WebSession_report_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_report_Params) SetContext(v WebSession_Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_report_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_report_Params_List is a list of WebSession_report_Params.
type WebSession_report_Params_List = capnp.StructList[WebSession_report_Params]

// NewWebSession_report_Params creates a new list of WebSession_report_Params.
func NewWebSession_report_Params_List(s *capnp.Segment, sz int32) (WebSession_report_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_report_Params](l), err
}

// WebSession_report_Params_Future is a wrapper for a WebSession_report_Params promised by a client call.
type WebSession_report_Params_Future struct{ *capnp.Future }

func (p WebSession_report_Params_Future) Struct() (WebSession_report_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_report_Params(s), err
}

func (p WebSession_report_Params_Future) Content() WebSession_PostContent_Future {
	return WebSession_PostContent_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_report_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_options_Params capnp.Struct

// WebSession_options_Params_TypeID is the unique identifier for the type WebSession_options_Params.
const WebSession_options_Params_TypeID = 0xd2e47e8eac54ea7e

func NewWebSession_options_Params(s *capnp.Segment) (WebSession_options_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_options_Params(st), err
}

func NewRootWebSession_options_Params(s *capnp.Segment) (WebSession_options_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_options_Params(st), err
}

func ReadRootWebSession_options_Params(msg *capnp.Message) (WebSession_options_Params, error) {
	root, err := msg.Root()
	return WebSession_options_Params(root.Struct()), err
}

func (s WebSession_options_Params) String() string {
	str, _ := text.Marshal(0xd2e47e8eac54ea7e, capnp.Struct(s))
	return str
}

func (s WebSession_options_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_options_Params) DecodeFromPtr(p capnp.Ptr) WebSession_options_Params {
	return WebSession_options_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_options_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_options_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_options_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_options_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_options_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_options_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_options_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_options_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_options_Params) Context() (WebSession_Context, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return WebSession_Context(p.Struct()), err
}

func (s WebSession_options_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_options_Params) SetContext(v WebSession_Context) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_options_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_options_Params_List is a list of WebSession_options_Params.
type WebSession_options_Params_List = capnp.StructList[WebSession_options_Params]

// NewWebSession_options_Params creates a new list of WebSession_options_Params.
func NewWebSession_options_Params_List(s *capnp.Segment, sz int32) (WebSession_options_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[WebSession_options_Params](l), err
}

// WebSession_options_Params_Future is a wrapper for a WebSession_options_Params promised by a client call.
type WebSession_options_Params_Future struct{ *capnp.Future }

func (p WebSession_options_Params_Future) Struct() (WebSession_options_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_options_Params(s), err
}

func (p WebSession_options_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(1, nil)}
}

type WebSession_patch_Params capnp.Struct

// WebSession_patch_Params_TypeID is the unique identifier for the type WebSession_patch_Params.
const WebSession_patch_Params_TypeID = 0xadef95edc22ca880

func NewWebSession_patch_Params(s *capnp.Segment) (WebSession_patch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_patch_Params(st), err
}

func NewRootWebSession_patch_Params(s *capnp.Segment) (WebSession_patch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_patch_Params(st), err
}

func ReadRootWebSession_patch_Params(msg *capnp.Message) (WebSession_patch_Params, error) {
	root, err := msg.Root()
	return WebSession_patch_Params(root.Struct()), err
}

func (s WebSession_patch_Params) String() string {
	str, _ := text.Marshal(0xadef95edc22ca880, capnp.Struct(s))
	return str
}

func (s WebSession_patch_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession_patch_Params) DecodeFromPtr(p capnp.Ptr) WebSession_patch_Params {
	return WebSession_patch_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession_patch_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession_patch_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession_patch_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession_patch_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession_patch_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession_patch_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession_patch_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_patch_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession_patch_Params) Content() (WebSession_PostContent, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return WebSession_PostContent(p.Struct()), err
}

func (s WebSession_patch_Params) HasContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebSession_patch_Params) SetContent(v WebSession_PostContent) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated WebSession_PostContent struct, preferring placement in s's segment.
func (s WebSession_patch_Params) NewContent() (WebSession_PostContent, error) {
	ss, err := NewWebSession_PostContent(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_PostContent{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebSession_patch_Params) Context() (WebSession_Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return WebSession_Context(p.Struct()), err
}

func (s WebSession_patch_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebSession_patch_Params) SetContext(v WebSession_Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_patch_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(capnp.Struct(s).Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebSession_patch_Params_List is a list of WebSession_patch_Params.
type WebSession_patch_Params_List = capnp.StructList[WebSession_patch_Params]

// NewWebSession_patch_Params creates a new list of WebSession_patch_Params.
func NewWebSession_patch_Params_List(s *capnp.Segment, sz int32) (WebSession_patch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[WebSession_patch_Params](l), err
}

// WebSession_patch_Params_Future is a wrapper for a WebSession_patch_Params promised by a client call.
type WebSession_patch_Params_Future struct{ *capnp.Future }

func (p WebSession_patch_Params_Future) Struct() (WebSession_patch_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_patch_Params(s), err
}

func (p WebSession_patch_Params_Future) Content() WebSession_PostContent_Future {
	return WebSession_PostContent_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_patch_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

const schema_a8cb0f2f1a756b32 = "x\xda\xcc{{x\x1c\xc5\x95\xef9\xdd#\xb5m," +
	"F\xe5\x1e\x1e\x06\x8b\x91\x1d\xd9\xd8\xb2G`\xc96\xb1" +
	"n@/\x04\xb6.\xc6j=0\xd6\x8d\x13zf\xca" +
	"RK3\xdd\xa3\xee\x1e[\xe3@\x0c\x02\xdf\x10\x02$" +
	"\x18;\xc1\xfe\x80\xc4$\x04\x02f\x83\x01\xb3!\x1b\x07" +
	"\xcc\x86$&@6l^\xecn\xb2\xe4K\xd8\x84\x04" +
	"o\x80\x05\x126\xe0\xde\xaf\xaa\xa7\x1f\x12\xe3\x91pv" +
	"\xf7\xe3?M\xf5\xa9S\xa7N\xfd\xce\xa9\xf3(\x9d\xbb" +
	"\x92\xb4F\x96W\x9d7\x0f\x84\xde5XQ\xe9\\\xf5" +
	"\xe2\xe3\xe3\xcd\x83\xab\xaf\x01\xa5\x06\x11\xa0B\x94\x00\x9a" +
	"\xf0\xe4.\x04l\xaa:9\x8e\x80\xce\xe2\x17\xab\xde\xaa" +
	"\xe8\xef\xbd\x06\xc8\x12\xe1O;\xd6\xfc\xff_\xcf\xff\xc4" +
	"\xc3\x80M\x0b\xa3\xdbP^\x1d\x95\x00\xe4\x95\xd1\xed\x80" +
	"\xce\xb5\xb7\xb7\x1f\xcc\xec\xbf\xd5e\xe5<w\xef\xcau" +
	"\xfb\x88t7t\xce\x94*\x11\x9b\xf2\xd1F\x94wD" +
	"7\x004=\x1bu\x18\xdf\x99_\xdd\xd2?R\xf9\xe6" +
	"\xc4\xa5\xb3\x84--\x17\xc8o\x01\xff\xf5\xb3\xd7?\xff" +
	"\x8c$\x8f\x93EB\xc0\x1c\xb0\xa9\x7f\xceN\x94\xb3s" +
	"\xd8\xca\xda\x9c\xaf\x03:?\xdc\xf5ga\xf4Q\xfbZ" +
	"P\x16aH\x8eSfJ\x08\xd0476\xceX." +
	"\x8cm\x05t:\xcfz\xe7\x9f>\xf3\xe3W>S\x9a" +
	"tGl\x1b#\xbd%\xc6\xb8\xe2\xfa\xc8%\xff|\xe6" +
	"\x97o\x86\xc9\xeb\xaf<\xe5!\x94\xd7\x9d\xc2\xc4]{" +
	"J\x0b\xdb\xca\xac\x0d\x1b\xe5\xe8\xe2\xdbn\x9d\xb0\x95g" +
	"O\xe7[y\xe1\xf4\xdf2f\xcb\xf6\xae\xfe?\xff\xf6" +
	"\x85]@\x16\x85\x96\xad\x880\xc2\x03s\xc7Q~j" +
	".\xdb\xcf\xe1\xb9\x8c\xf8\x82\xd8I\x8b~v\xcf\xfa/" +
	"\x80\xb2\x10\xd1\x19\xfc\xde\xfd\xaf,}\xe9\xe97\xa1\xbf" +
	"R\xc2\x0a\x80\xa6}g<\xc4\x8e\xe7\xc0\x19\xfcx\xbe" +
	"8\xbc\xf7\xad\xffx\xd2\xd9\x03\xa4F\x0c\xb4\x0e\xd8t" +
	"\xf4\xcc\x01\x94q\x1ec\xfb\xee\x99\x17\xcbK\xe6\x9d\x06" +
	"\xe0\xfc\xfc\xc6\x07\xde\xf9\xf5\xb2\xd1\xbd@\x12LPd" +
	"\xeb\xcf\x9d\xf7:\x1341\xaf\x05\xd0\xf9\x9b\xeb[+" +
	">\xd9p\xf9\x9d@j\xfc\x9d\x8c\xce3\x19\xc1U\xf3" +
	"\x98Z*O=\xbc\xb3{\xd1=w\x02\x99\x13q\x1a" +
	"G\xf2g\x9c\x13\xfd\xc1\xbdl\xbd\xb95]('j" +
	"$\x80\xde\xc55\"\xf6\xae\xa8\x11\x10\xc0\xb9\xe9NR" +
	"{\xc1\xdf\x17\xbe\x18f\xb8\xb0\xa6\x9d\xafX\xc3\x18\xae" +
	"\xdeX}\xcf\x96\x17_\xd9W$\xe0*9Rs\x03" +
	"\xd7]\x0dS\x87\xbf)2G\x0c\xaf(\x1f<\xeb\xf7" +
	"\xf2\xe1\xb3~\x0b\xd0tS\xfcS\x11yt\x01\xdba" +
	"\x87\xf0\xe8\x0b\xdf\xa6W\xdd\xcb\xceB\x08\xe6\xba\x0b\xab" +
	"\x0b\x16\xa0<\xba\x80#m\x01W\xdf\xbbO\x1fN\xce" +
	"z]\xbf/,\x1e\xfd\x10?\xb9\xd1\x0f1\xf1\xde>" +
	"|e\xf2L\xe1\xed\xfb&\xc1\xdaU\xdd\xcc\xba\x1e\x94" +
	"k\xea\x98\x8e\xe7\xd61|\xdd\xfb\x97\xc2\xbb\x0f~\xf4" +
	";\xf7\x97\xc6W\xa1\x8e)\xb2iG\xddg\xd9\xd2W" +
	"\xdf\xbb\xec\xc9\xa3\xbb\xff\xf8@x\xe9\x97\x17\xf6\xb0\xa5" +
	"\xdf\\\xc8\x96\xfe\xd4\xf5\xf7gf\xcfZ\xf3uP\xe6" +
	"T\xcc\x98\xb0\xf3\x9b\x16\xfd^\xde\xb3\x88\xa9z\xd7\"" +
	"\x11\x01=\xbb\x9c(#W\xe5\x8eE](\xefYt" +
	"\x1a\x80\xbco\x11S\xe7\x99_yxO\xe7wn\x7f" +
	"\x18H\x8d0\x010;\xce\x1e@y\xcf\xd9l3\xbb" +
	"\xcf^\x0f\xe8|\xec\xb9\x83\xdbb\xd67\x1e\x99\x04Z" +
	"\x81\xb1\xfd\xc9\xd9\xc3(\xbf\xcc\x89_:\x9b\xed|\xc9" +
	"u\xf6\x0f\x9ey\xe3\xa5G\x80,\x0ca\xd6%n[" +
	"\x9cD\xb9\x7f1#V\x163\xe2\x0b\x1e\x1dn\xdb\xdf" +
	"\xf0\xf3\xbfe[\x9f|F\x0f,\xeeB\xf90'>" +
	"\xb4\x98\xa9\xe1\x0f\xa9\x8b\xfar\xbf\xdb\xffM \x0b#" +
	"\x01g\xc0\xa6MK\xeeC9\xbf\x84\xa9!\xb7D\xc4" +
	"\xde\x1b\x97p\xc4\xfd\xf2\x0c\xeb\xcb\xd7\xae\\\xf9-P" +
	"\xe6 \x06jsO,Q\xdf\x8c\xf2\xf9\xf5\x8c\xfb\xea" +
	"z&\xca\xd65c\xb7?\xfa\xffF\x0e\x81R\x87B" +
	"\x80\x9e~QB\x11\xa0iw}\x92\x1d\xc8\xbez&" +
	"\xc9\xef\xbeWs\xec\xf1\x1dw\x1f*\x89\x85\xb6\xa5&" +
	"\xca\xfdK\xf9&\x972\xce\x15\xc9E\xff\xd2[y\xf2" +
	"\xe3\xc5\xf3\xe5D\x07\x96\xeee\xec\x0e/\xe5\xb6v\xc5" +
	";7\x7f\xf5\x82\xf4\x13a\x00\xfcj\xe9\x00#8\xba" +
	"\x94\xad\xd7w\xe1\x1d\xb7=\x1e\xab\xfan\x98\xc3\x8ee" +
	";\x19\xc1\xeee\x8cC\xe1c\xb7\xdeq\xe0\xc8\x91\xef" +
	"\x85m\xe7\xa0K\xf0\xd42v\xd8\x0d\x0f\xbfz\xfd/" +
	"/O<=\xc13\x1dH\x0c3\x8aC\x09F\xb1t" +
	"\xf5\x99\xff\xb8e\xcee\xcf\x14Y\xf0\xf3\xda\xdd\xc0\xa5" +
	"\xbc\xbb\x81mc\xf1\xb5[\xdf\xf8\xc5\xfe]\xcfz," +
	"8\xc5\xdcs\xb8\x05\xcf?\x87\x89y9=\xfc\xd8K" +
	"'-{\xbe\xa4Z\x0e\x9d3\x07\xe5g\xcfaj9" +
	"r\x0e\xe3\xf7\xc4\x81\x8e\xe7\x9cm\xc3\xcf\x87e^x" +
	".\x97y\xe5\xb9L\xa2O\xfe\xbeo\xff\xcd\x9f\xfc\xcd" +
	"\xf3a\x89\xc8r~\x0c5\xcb\x19\x87o]\xf5\xd8-" +
	"\xf7|\xf7\xba\x9f\x86\xf5VX\xce\xf5\xb6c9\x13\xe8" +
	"\xf3\x0f\xbe\xb5\xe1\x0bgV\xfc\xac\x14\xbc\xe67.@" +
	"yy#\x93'\xd1\xc8\x88\x1bo\xa1\xab\x8f\xbd\xf6\xf5" +
	"\x92\xc4/5\xb6\xa3\xfc&'~\x8d\x13_\xf8\x8d\xab" +
	"\xafL?\xb8\xfd\x85\xd2\xf6}K\x13\xdf\xc6\xbe&F" +
	"\x9a;thnc\xfd\x97^\x06\xb2\x14\xc1\xb5\xc5\xce" +
	"\x15\xaf#D\x9c\x9fZ\x97\xbe\xf2\xedJ\xe7\xe5\x92\xfa" +
	"Z\xbd\xa2\x1e\xe5\xb5+\xd8\x92\x9d+\x98:\xf2s?" +
	"\xf1\x903r\xcf\x1f\xc2\xeaX\xbd\x92\xef\xb6s%S" +
	"\xc7\x93\x9f\xbe]~y\xd6\x0dGAi\xc0\x90\x07\xea" +
	"\x9f)\xa1\xc0\xae\x8b\x95\xfc0\x0fp\xda\xf1\xfd\xcb\x1e" +
	"m\xeb<\xed\x8f@\x16E&\\jU\xab\x1eBy" +
	"\xe1*fK\xb5\xabD\xec\xfd\xc8*nKR\xd7\x86" +
	"\x8f\xd5\xbc\x83\xaf\xbe\xe7vY\xbbj\x18\xe5M\x8c^" +
	"\xde\xb8\xeaby\x07\xfb\xcb9\xf2\xec\xde\x99\xa8\\\xfc" +
	"ji\xeddWq\xed\\\xb5\x8a\x09\xa2o\x9cq\xd9" +
	"\x92O=\xf5\xda\x04\xec\xaf\xe2\xa0zy\x15S_4" +
	"z\xc5\xcd\xf3\xfeX\xf1Fi^\xd7\x9c\xf74\xb7\x82" +
	"\xf3\x98\x15\xf8>a\x92>+\x19\xd3\xc7\xce\xabG\xf9" +
	"\xc8yg3\xfe\xe7m`~\xf7\xd1?w\xa6\xdb\xee" +
	"Z\xf7Vxim5\xf7\xbb\xf9\xd5l\xe9\x8d\x7fw" +
	"\xd6\xf9o7%\xfeTJ\xa1(6U5?\xcf\xb1" +
	"\xdf\xbc\x15\x8e9[i2aQ\xcb\x8ah\x86\xde\x90" +
	"Rsz\xaey\x03M\xf6R\xcb\xe2\x03F\xaeP\xd7" +
	"\xad\x9aj\xd6\x02Pbb\x04 \x82\x00\xe4\xaaz\x00" +
	"eLD\xe5:\x01\x09b\x8c\x19\x16\xb9&\x09\xa0\\" +
	"-\xa2r\xa3\x80(\xc4\xd8\xe1\x91O\xb3\xb1\xebET" +
	"v\x09HD\x8c1\x9fDni\x07Pn\x14Q\xb9" +
	"M@\x12\x11b\x18\x01 \xbb\xd9\xe0\xe7DTn\x17" +
	"0\x9aS\xed!\x9c\x0d\x02\xce\x06t\xd2\xd4\xb25]" +
	"\xb5A\xd2\x0c\xdd\x1f\xd5\x8d\xf5[\xa8\xb9\xd5\x04I\xb3" +
	")\"\x08\x88\x80\xdb\xad!5\x931\xb6\xfa\xbfS\x86" +
	"n\xd31\x1b\xab\xc3\x8e\x17\xab\x99\xdf,\xbb\xf1\x0e5" +
	"5D\xbb\x8d\x8c\x96*\xb44\xf4\xa6\x8c\x1c\xedFT" +
	"\xdc=\xad\xacg<Hb\x00\x00\x05\xb2\xa4\x1d\x00E" +
	"2\xdf\x04\xc0\x08\xa9\xe9\x01\x88\xea\x86N\x9d\x1c59" +
	"3\x10\x0d}{\x8e\x9a\xfd\x165\xd9`[.w\x19" +
	"\x85\xb8\xc9\x96q\xf2\xba\xb6\x85\x9a\x96\x0a\x98\xf1\x05\x12" +
	"K\x0a\xd4C\xadx\xce\xd0-\xaa\xc40\x88,\xe7'" +
	"Ca\xde\xfc\xf1\xd0\x8d7\xbf9\x14\xb3\xd5\xf4\x84\x0c" +
	"\xa7f\xdc\xe9\xcd\xa7R\xd4\xb2:@2\xd2\xd4\xe9\xc8" +
	"hT\xb7;M4\x0d\xb3\xc3HShYC\xd54" +
	"5\x9dN\xd34\xccv#\x0dXp\x86\xf8\xd0\x86!" +
	"\xd4l\x9a\xd1,\x1b\x94:\x1f\x0dG\x07\x00\x94WD" +
	"\xec\x9d\x81\x02VU8\x0e\x86\x02U\xb9\x02\xbb@\xa8" +
	"\x12\x8e9a,\x92\xd7\xdaA\xa8\xaa|\x97\x0d\xfa>" +
	"\x89\xbc\x90\x04\xa1Jz\x87\x0d\xfa\xa6H\x9eb\x83\xe2" +
	"_\xd8\xa0\x1f(\x93\x03= \x10\xac\x8ca5\x00\xb9" +
	"\x83\x81\xecv\x11\x95{\x05\xac\x8a\xfc'\xa3\xf4\xad\x8f" +
	"\xdc\xbd\x17\x042cF\x0cc\x0cd;\x01\x94\xdbD" +
	"T\x1e\x11\xd0\xb1\xa8\xdda\x18#\x1a\x88\xd4\xc2\x93\x01" +
	"\xbbE\xc4\xea\xe0\x06\x05d\x83\x8eI\xd3\x9aIS6" +
	"\x00\xb8h\xd2m'U\xd4\x18H\xa6a:\x165\xb7" +
	"P\xd3\xfb\xa5\x1b\x1d\x9c\x0a\xd0vRE\x14\x81\xa4\xa5" +
	"\x0aX\x1dd\x1f\x1c\x819\x93\xa6\x0c=\xad\xa1\xad\x19" +
	"\xfaE\xaa\x96\x11i\xdaQ\xd3i\x8d\xfdF5\xe3\x9e" +
	"\x02\x86d\xf3\x8f\xb7([y\x0cg\x8d-40\xde" +
	"j\xff\xb8Tf\xbc\x1f\x15Q\x19\x0a\x19/e:L" +
	"\x8b\xa8\xe4\x02\xe3\xcd\xb2\xb1\x8c\x88\xca\x183^\xc15" +
	"\xde<\xb3\xd3\x9c\x88\xca\x95\x7f\x8d\x9dNm\x97\x15\xc7" +
	"3\x03n\x05\x0d\x1e\x84\x8d4r\xd3\x9c\xc7%^w" +
	"\x06Y\x17G$\xa3\xedd4\x8e\x02\xd9\xddE\xf6\xc4" +
	"Q$\x87{\xc8Sq\x8c\x90\xa3\xdb\xc8kq\xac\x90" +
	"\xe7bR\xae\xc18V\xca\x9d\x98\x94\xd7b\\4F" +
	"\x94\x08\x0a\xa1\x905\"`\xdb\xe9L$\xe8F\xc4\xef" +
	"\x13<C\\\xff\x7f\x19\x06L\xaa\xda4]\x96\xfa\x08" +
	"\xc1\xf6\xed\x1d.!\x80\xa3\xa6R4\xc7\xff\x84\x12\xd3" +
	"\xe6\xf9\xd3\x9e&\xd8\xe5\xb4\xf9\xc4\x18\xc6R\xd9\x89\xcf" +
	"\x10\x1cp.5j95\x88\xba\x0d\xe0\xe4T\xd3\xd6" +
	"\xd4L\x07\xb4\xb8\xa0-\xcb\xe09\x82\xe3N\xb7;\xa3" +
	"\x16\xddE\x19\xe2\x9dl>ck\xbd\xb6\x0a\x92\x9d\xb7" +
	"\xca\xb2\xf8!\xc1ag\x1d#O\xf4\xda\x10U\xed\xbc" +
	"\x05\xe0\xe8\x86\xbd\xceHk\x9bA\xd2J\xea\xcc\x9f/" +
	"\x9e\x8b\x8c\xc1\xa5\x86]\xcb&@t\xb3\xc6u7M" +
	"8x\x9a\xb2A\x99\xc1\x80\x1e\xc3(\x00Y2\x0e\xa0" +
	",\x16QYQD\xba\x0c@\x963\xf8/\x13Q\xf9" +
	"0\xf3\x01CF>\x93\xee\xa1hQ\xfb\"\xc3\xcc\x82" +
	"\x87\xd0(\xedS\x07\xb1:\x88\x0d\xa7um\xf8\xf2\x98" +
	"\xb4\xc5u\x1b\xcalW\x1cfc\x9d\xcc\x9e.\x14Q" +
	"\xe9\x16\x90\x08\x18\xc3\x93\x18d\xbb\x00\x94KDT." +
	"/\xca8\x1b\x80\xf43\xca>\x11\x95+\x04t4\xab" +
	"\x9b\x9aYU\x07\x89\xea\xb6'\x9f\x931R*s\x14" +
	"\x00\xe0\xdb\x9a\xb5U\xb3SC}\x06H\x17\xd3\x80r" +
	"\x9a*\xf4\xae\x01\xd3\x88\xf3k\x80Y\xd5\x0anU\xbb" +
	"\x07\x98\x15a\xd1\x8a\x04r\xb4\x8bY\x91(\xcf\xc5\x1b" +
	"\xe4\xf9\x18\xc7\x88\xbc\x0eMYAfY\x05\xec\x92\xaf" +
	"\xe2\x96u7\xd6\xcbwc\x1cg\xc8G\xf0!\xf9G" +
	"\x18\xc7\x992\x0a;\xe5\x99B\x1cg\xc9+\x85\xfb\xe4" +
	"\xf3\x858\x9e$kB\x8f\x9c\x15\xe2(\xc9\xbb\x85\xbd" +
	"\xf2\x1dB\x1cg\xcbG\x84\xbb\xe4\x1f\x09q'\xa9\xa6" +
	"{\xe8h\x9e\x82h\x95\x05\xb0\xf89$\x98t\xda\xd5" +
	"t-\xa3\x07\x89Z\xcc\x066\x1bfRK\xa7)\xa0" +
	"^v\xf6\xadH\xb0\xc7\xb9(\xa0v\x91{\x91\x91\xd7" +
	"\xa72Zq\x17\x9f\xcbp\xcb\xc8\x01\x19h\xb3\xd4\x1e" +
	"2\xd2\x97\x1ah\xb7\xb1h\x84\x01\xb9\x04\x8fZ\x9f\xc7" +
	"n$\xb8\xd7Y\xc7g\xd5^\x8a\x86]\xcb\xe7\x89\xdc" +
	"\x02t\xc3\xe6>\x01\xe2\xb6\x9a\xcc\xd0\xb2\xc2|\x1e\x09" +
	"n\xe3\xc2\xb0)\xd0\x92\xe3S\x00\x9c\x94\xa1o\xceh" +
	"\xfc\x16+\xcb`\x0f2\x1f\xd4\xe1Sct\xd0\xd0i" +
	"9g'\xeeE\x82\xf5\xd1\x8b\x0d\x9d\xadc\xb2\xd3\xb2" +
	"\xecN\xd4m\xcd.\xf4\x19F\xfc\x12\xd5\x1c,\xc5\xa0" +
	"\xcegp\x07\x12|\xda\xe9qg\xd6\x0a\x9d|jm" +
	"\x9fa\xd4\xf2\xb9\xfc\x0e\xe6\xdf\xfa\xd1\xd4\xfa\x0c\xe3\x12" +
	"C\xc7\xc1\xb2\xfa\xbc\x13\x09\xde\xe7qL`\x7f\xcfZ" +
	"\xce.z\x89\xa1\x0f\x028y\xdd\xca\xe7r\x86\x896" +
	"M\xaf\xa3iM\x8d\xf6\x15r\xb4,\xc7/\"\xc1o" +
	":\xfd\xa1\x89\xb5lf\x8bZ\xcb\xa6\x028Z\xb6\xad" +
	"\x8f\xaa9c\x0aW-\xde\xc5\xdd\xdc\xda\xb3\xb3\xb5j" +
	"\xadM!\xaa\xe6\x0c\xee\xadK\xc4\x02e\x05\xba\x1d\x09" +
	"\xde\xe5t\x87\xa7\xd5^\xa4jR\x86c&\xaf\xe7L" +
	"#E-\xb4\xd8\xf9w\xea\xb6\xa4\xd9\x85\xb2\xfc\xbe\xca" +
	"U\xd6?a^m\xa7\x1eeg\x11r\xc3\xa5\xdd^" +
	"\xc6H\x8dL?\xd2\x18(\x11i\xb0\xa0bHD\xc5" +
	"\x0eE\x1a\xa3\xedA\xf811\xd2\x18\xcbf\xfc\xab\xce" +
	"\x1b<\x81\xd0\x7f\x0a\x87\xe8\x85\xbf\x05\xa6\xa0)w\xd5" +
	"\x15\xec\x8a\x08\xde\xb6\xba\xc2\x01\x94X\x0c\xa0\xd8\xa0-" +
	"\xa2r\xb5\x80\xd1\xb4j\xabX\x05\x02V\x01:TO" +
	"\x19i\x8dA4p\xe9\x19U\x1f\xcc\xab\x834<\x96" +
	"\xd5\xb2\xd4\x85]0V~O\x1d\xae.\x1a\xd8\xa5V" +
	"\xc4L\x9c\x87\x99,\xa7\x9b\xed8n\x0a\x16\xce\xea\xaa" +
	"\xf0\x98\x13\xc3\x0a\x96\xd65\x03(W\x8a\xa8\\/`" +
	"\x8d\xf8\xae\x13\x89a%\x00\xd91\x0c\xa0\\'\xa2\xf2" +
	"%\x01k\"\xef\xb0a\x89\xc5\xe2f1\x16\xff\x86\x80" +
	"U\xc2_\x9c\x18\xce\x00 \x07\xd9}\xf6\x88\x88\xca\x13" +
	"\x02\xf2\xf4\x08*[\xe8\x98f\xd9\x16T:Y\xd5N" +
	"\x0dQk=Du\xba~s\x10\xed\x86\xaf^\x16\xed" +
	"\x16\xe9.\x85\xb8Q\x9e0mPK\xb7;\xc7@b" +
	"\x89J\xe5\x94w6w\x13\xbd\xb6IE5\xcb\x8e:" +
	"\"V0\x93,\xd6?\xd0\xcb\xdd\x09I\x82@fJ" +
	"\xce \xb59H@\xd2-\xda\x8aJ\x04\xd1\xf9\xf8\xaf" +
	"\x7f\xb8d\xeb\x877<\x0b!c\xa9,\xb9\x1e\xfb\xd3" +
	"H\x8dP\xbe\xa2\x9am\xb0\xa8\x9en/\xd8\xd4\xaa\xeb" +
	"\x8es\x13R\">\xd4\xaa\xdaIU\xdc\x0bV\xb6g" +
	"\xa9e\xa9Eg\xfa\xdaM\xe7\x9c6\xe7\x8a\xc7\x9et" +
	"\xed\xb8\x1ay\xd8\x80\x0b\xa4\xac5\x08\xe0#\xaa\xfc\xce" +
	"s\xa6\x91\xcb1\xa5\xfa+\xcf\xf6W\xeedXh\x15" +
	"Q\xb9$\x04\xf2\xb5\xcct\xd7\x88\xa8\xf4\x85@\xae\xb4" +
	"\x07\x01\xcc4\xcc\xf4}e\xe4C\xb6\x9d\xeb\xb5Y," +
	"\xd9\xa6\xeb\x86\xcd\x03\x9e\xb5i7\xe0\x9c\x09\x02\xce\x0c" +
	"\xfc\xd9\x94NJMe<\x1f\xf5\xc1\xd8giS\xcd" +
	"\xe5\x8b\xc0\xd0\xf4\xc1\xe9\xfb\xd4\x92\xdeg\x82S-z" +
	"\x9f\xd1\xae\xe3\xa5o%\xbcJ\x99M\x94\xf2U\xde\xc6" +
	"\x84\xc9\x1b\x8b\xb2\x9d)\x1f\xc6peSk\x0ex\x12" +
	"\xda\x1e*\xa9\xab\xc9PMS\x1d\x08\xcc\x9b\xa8\xf5A" +
	"zN65\x07\xbd\x0d\xb2q8(n\x93\x8d7\x04" +
	"\xf56\xb2\xa9+\xd4b\xdad\x86*\x82\x9b\xc6\xbd\x84" +
	"\x9clJ\x06EM\xb2\xa9=\xd4c\xd8h\xb6\xb8\x87" +
	"\xb0\xbd\xe8C\x9dn\xc3\xb2\xd9\xdf<\x1cw\xba\xf3\xb6" +
	"\x7f\xf6\xd1\xce>u\xb0\x85\xd7\x14h\x90\xc7\xf1\xe0\xc2" +
	"\xff\x89\x9d\xbe\xe2\x1c\xef\xa6\x01\xfe\xb7\xeb\x85 \xce\x0f" +
	"\xdf\xf1\xbc\x84PD\x03x\x15)IK\x15\xb6\xaf\xcf" +
	"1K\xb0\x9cn\xd3\xc8m\xd6\xf44\xc4/\xa49{" +
	"HY\xc3=\x97W\xf1\xf6=\x97\xbc\\X\x00\x82\xbc" +
	"P\x900\xe8\x18\x05_\xe7\x0a\xf5 \xc8U\x82\x84\x92" +
	"_\x91G\xaf\xae.\xa3`\x82 \xbf\x8d\x12\x0a~\xd5" +
	"3\x98{\x14\x19\xe7_\xa1\x84\xa2_\xe9\x0d\xbe\xfe\x04" +
	"\x9bA\x90\x8f\xa0\x84\x15~\xdd\x1c\xbd\xbe\x82|\x08\x19" +
	"\xe7\x83(a\xa5\xdfEC\xafg \x7f\x0d\x87A\x90" +
	"\xf7\xa1\x843\xfc6@\xc0y7v\x81 \xdf\x84\x12" +
	"\xce\xf4{~\xc1\xd7k\xb0\x07\x04\xb9\x80\x12\xce\xf2\xcb" +
	"\xa5\xc1\xd7,6\x82 \xab(\xe1I~\x039\xf8\xda" +
	"\x8fL\x1bkQ\xc2\xd9~\x8f7\xf8z>\xff\xba\x1c" +
	"%\xac\xf2\xdb\xa6\xc1\xd7\x85\xfc\xeb\\\x94\xf0d\xbf\xca" +
	"\x1f|\xad\xe2\xda@\x940\xea\xb7\x15\x83\xdb\xe5\xcd\x05" +
	" \x90\x97%\xac\xf6\xfb*\xc1\xb7_4\x83@~$" +
	"!\xf1\x9b\x0b\xe8\xe1\x95<\xd5\x0e\x02yL\xc2\x88\xdf" +
	"\x90\x0b\xe6=\xd0\x08\x02\xd9'I\x83\xd4n\xc5h\xce" +
	"\xb0\xecVt\x8c\x1c\xd5\x19\xbc \xce\xaf\xa1V\x94r" +
	"y\xbb\x15[\xd24Cm\xda\x8a\x0e\xa3c\xa8\x838" +
	"\xf7Bl\xa4\xe8\x94 \xea\x0dx\xc0\x03(\xfeb\x17" +
	"\x09\xe0P+\xc6\xb3#)#\xd3\x8a\xd1\x94\x91+\xb4" +
	"b4kl\xa1\xad\x18e1b+\xb6\xe4u\xf7\x0f" +
	"IMeZ\xb1\xc5\xa49\xc3\xb4[q\xbb\xe1\"\xba" +
	"\x15\xe3\xfcF*\xde\xaa\xc6\xa9\x07/\xff\xf7\xb6\xc6\xb7" +
	"\xc2\xde]<N\x84cH#\x9a[\xa5\x9d\xa2L\xdd" +
	"\x18\xc43(`\xa8\x83Fv0U\x8a\xd5n\xdc3" +
	"!x\x8b\x08n\xd4\x93\xaf\x0f\xb9O]\xcdR\xcf\xf9" +
	"\xc5\xb7\xa8\x99\xbc\xffk;\x1d\xcbi&\xb5\x1cv\x81" +
	"\xad\xd73\x05\xe6&\xbd\xca\xc2\x04\xaf;\xc5\x0dmX" +
	"vp\x09Luk\xb5\x87\xcb\x0b\xc5K`]{p" +
	"\x95MX\xd9+fbu\xe0z]\xdf~\xc2Es" +
	"\xcf\xc7\xf5\x15rnQn\x86/\xf0\x92\xae\xa0\x12\xc3" +
	"\xe5E$\xcb\x9bC\x85\x98\x12\xb7O\xcb\xe8e\\\xa7" +
	"\xb3@8<\xeb\xea\x96\xe9\x17_RF\xdc-y\xcd" +
	"\x13#\\;L\x11\x07\xbb\x82\x10\x94k\x87\xdd\x86\x87" +
	"\xd8\xe0\xb7DT\xbe_\xbc\"Y\x18\xfc\x14\x1b\xfc\x8e" +
	"\x88\xca?\x08\x88\x15\x18jP\x91g\xebA\xa8\x16b" +
	"8\x8b1\x1c\x08\x18b%\x86\xda.\xe4\x10\x0b\x14#" +
	"R\x0c\x09\x00\xf9\x1a;\xab\xaf\x88\xa8<(\xfcU!" +
	"~4i\xa4\x0b\x8e\xc5\xa3\xa1\x0e\x03\xc44\xc5\xa8\xd7" +
	"\x08\x00\xc4(\x0b|5+gX\x9a[\x81=\xb1\x0a" +
	"V1\x1ed\x90C\xeb\x03\x848arP\xc8+\x8c" +
	",\x0e\xac\x0e\x1a\xe6\xef\xa7\xad\xc3\x0b!\xe1\xd7A\xd8" +
	"\x18\xe7\x8d\x9ep\xac\xd5\x03\xa0\\!\xa2\x92\x09mZ" +
	"\xeb\x09\x85UB\xad\xbb\xe9\xd1m\x81_ \xe2|\x17" +
	"]\x85m\x81\xfbq\xb6j\xf6P\xc7\x10M\x01\x8e`" +
	"4X\xb6xr9^\xe1\xe3\x95\xde\x12_\xb7\xa8\xa6" +
	"F\xad\xf5:\x14\x83\x0b\xbf\xb4\x17|pm\xef=5" +
	"\xbf\xd2j\xf0\xc2\x86\x0biN\xb4\x87\x98\xa5\xce\xe6\xbb" +
	"\xa8\xe9\"\xf3\xe3\x88\xa4\xad\x9e\xb7\xb6V/\x00p4" +
	"}\xb3\xa6\xf3\"\x80[9z\xee\x96\xd7\x8e\x15\xeeI" +
	"\xbf\xee&\x1e\xb1b\xe2\xd1\x13\xd0\xe1\xc7\x01\xa2\xdb\xa8" +
	"iH\x86N\xa7k\xb2khTMSs\x92\xd3`" +
	"\x98\xab\x13Q97\xa4\xfeDc\xe0I\xcax\xe0\xa9" +
	"\x80PL\x88\xd7PU\xfa\xdf\\\xd7\x0b\x1eyy\x9d" +
	"+>\xb0\xb0\xae\x901y\xab\x86\x8d)\xc8D\x18e" +
	"\xb7\x88\xcaG\x852a\xbbn\x97-,L\xaf`\xe0" +
	"\xb5\xfd4\x9bF3\x9ae3\x83+\xe6\xdd\x8c\xd1\xc9" +
	"\xec\xec\xb7\x90\x95;\xc9\xf9\xe3\xa4\xcd$\x9d\x03dm" +
	"\x0fY7@\x94$\xe9\x1f'\x1b\x07\xc8\xa6\x1e\xa2\x8e" +
	"\x13z\x03\xc9&\xc9\xe8\xb03\x96\xb0T=m\xd9h" +
	"\x98\xd9\x84\x9a\xcb%\xb0\xde1R\x09\xdb\xb0\xd5\x8c\x90" +
	"\xc8P}\xd0\x1e\x02#\x95H\x0d\xe5\xf5\x91x\xc2\xd2" +
	"\xb6Qg,a\xa4\x12Y[\x031K\x19\xf1f-" +
	"C5\xc0\xb4\xe3\xd1\x81H\x8b?hj\x04$+\x9f" +
	"\xf5?\x09\x09c\xf3f\x8b\xda\x8cgF\xddV0\xc4" +
	"\x9c\xe5\x8c%\x86\x06Us0\x01X\xef\x8c%rC" +
	"j\xd2\xd4\xc4\x94j\x1bf\xa2\x1e\xc6\x12\xc5j#M" +
	"'\x98\xcd\x028c\x89\x94en\xb6\x0d\x90F\xa8^" +
	"\xfc\x95\xb0!j\xb0\x9f%\xc2\x925~\xd6z!\xb5" +
	"R-\xa6\x96\xb3\x8d\xc9\x10;#\x80X)\x84\x89Z" +
	"\x1a%\x10P\x02\x8c\xdb\x9a\x9d\x99>\xae\x99\x7fh`" +
	"\xe1\x87dR\xee\xc0yyG\x98\xe4\xc2k\xf0\x98S" +
	"\xec\xc6\xaf\xed\x0a V#\xbc\xcb\x86#\x93@V," +
	"\xd98j\xd222y\x9bc\xad\x02\x04\xac\xe0\xb5\xd9" +
	"\x8cjk[\xf8\x18O\xc9\xa7\x1d&t\xea\xa98\x87" +
	"\xe5$\xd5\x98S\x84\x0aEtw\x80;{\xeap\xa1" +
	"\xe2\xb8\xb1U\x90i\xf7P+\x9f\x11\xed\x09\xc5\x17\xb6" +
	"\xe8\x0c\x11\x95\x98\x80-\x16\xa7D\x12$\x93\x80H\xa6" +
	"\xdc\xab\x1b\xdf\xf2\xfbT\xcc~\x90\xee\xd3i\x14\x1f\xb8" +
	"Jl<q\x95\x94^\xc3K?x\xf2\xe1G\x1aS" +
	"\x158\xdaC7\xb1\xa7\x19\xad\xabx\x13_\x17*p" +
	"\\3\x1c\xbcB)\xa1\xae\x92J\xc9\x99\x86m\xa4\x8c" +
	"\x0c\xc3\xf0\x04\xef\x86\xc5V\x7f\xaf\x0d\xd1\xe2f\xfd\xfa" +
	"\xc1\xb4\xce\xdf\xcb\x93\xea\xba\xd5(\xaf\xb0\x9dHq\xbc" +
	"\xf1\xaf.\x8e\xc7\xd34g\x0fa4(l\xb8\x91\xc5" +
	"\x09\x03e\xe2!\xfa\xc6S\"\xe0\xbf0\xb4\xbb\xb6\xe1" +
	"\x00\xf4\xe5\x94\xee\xbe\xa88a\xa5\x0fR{\xda\x95\xbe" +
	"\x90\xc5y\xfa^7p\x9cB_\x19mi\x83\xbaa" +
	"\xd2v\x16\x96\x17\xde\x13\x84\x95\xceX;\xfbT\x9c\xec" +
	"\xfa\x1aK\xdc\x0a\xf5\x81;\x9c\x18jD\xb7Rud" +
	"\x9a]\xde\x89\xcen\xbaF\xf7\x81\xaa*F\x8e\x03D" +
	"^7`[\x92\x98}M\x15\xc5\xb5\x87\xa2\xb8i\x9e" +
	"my\x01\xdc\x82\xc6\xb4=|\xcf\xfb\xaa,3\xd6}" +
	"\xc6\x08\x05\xd4\xdf\x87\xa0\xa5\xf1V\xd4\xd0t\x82\xce\x9e" +
	"\xd0\x93\x04O\xc8\xfe\xbb\x00\x94\xcb\xddsw\x92\xaaE" +
	"\xbbU\x16\x1c\x05\xe7\x94\xb7\xa8\xd96\xe8\xa60\xde\x98" +
	"\xfb\xf2EMb\x86^\xc2\xb3\\i0xk\xe5Y" +
	"\xfb\x14\x11s\xde\x0f\x98?\xc0\xf1rP{\xf0_Q" +
	"\xa0\xe9\xbd\xfd\x90\x98\xb4\x03\x93\xa4\x9d\xc1\xa4\x1d\x9f\xa4" +
	"\xe8S&\xbf\xfd\x98\x98\xee\x07\x8f\xfd\xbc\x84\x9fZ)" +
	"\x16^\xa2f\xe8k\xecl\x06B\xcf\xae\xf8@;H" +
	"F\xba\x80\xd5\xc1c\xc0IX\xa9\x9c\xaa'\xa6f\x1b" +
	"\xbc~\x97nQ\xafS4\x05\xd6\xd6\xe7\xec(3\xcb" +
	"P\xe3\x14\xb1D:\x8d8)\x9df'\x86HF{" +
	"\x02\x7f\x82E\x1fS0\x8b\xd9\xf4.\x01\x9d\xb4\xba\xa5" +
	"#\xa3Z\x16\xe0r\xdf\x03\x06c\x8d%\xc6\x9a\xc2c" +
	"\x9dc6\xd5!\xced}\x9fpt\x8b\xa4\xbe\xb9\xff" +
	"\x0f\xba\x9b\xa9\x80\xe6b\xb6!i\x88\xe9\x02\x93c\x9e" +
	"\xe3D\xdc\xcae\xf8\x1aa\x81~\xb1c\x9bh\x0e\xdd" +
	"$\xc9\x82M-\x0f\xf0A(\xf7b\xfb\x15W\xec\xaf" +
	"{\xe3\xb6\xe9\x85r\xbe0A\x9a\x18\xa7\xc7K\x13O" +
	"%\x15;I\xd5@\xc9\x14pB\x8aW\xfe\x00B\xed" +
	"S\x1e\x1d\x04\x0d[\xef\x7f\x83P?\xf0\xc4\xd6\xa6\xbd" +
	"\x1f\xdfCH\x8f\xdb\xb0\xf5Z\xac\x80V+v\xe3\xb4" +
	"\xb7\xe5\xbd\xec\xe4\xc6<C\x8cTc\x0cg\xbe\xe7]" +
	"\x99\x10\xc3S\x01\xc8rf\xb7\xe7\x8a\xa8|D\xf8\xef" +
	"0\xcc\xc8\xf1\x02\xf4\x13\x09m\xdeW2\xe17\xdf\xa6" +
	"\x9dLT\x96W\xa3\xf7\xb8\xc5{\xdb\xe2\xbe\x87r\xd5" +
	"9\x87e\x15\xc3\xbc\xb8\x8d\xca\xe9B\xb1\xcb\xcf|/" +
	"\xef\xa6\x95\xa9_\x1e\xaf\x0f\xa0G\x99\xb4\xca\x0c\x0c\xff" +
	"O\xcf\xcc\xe6\xd0\xbf\xe1T\x8c{/\x9c\xdf\xfb\xaa\xf9" +
	"t_\xa9{\x98\xaav\xb9u[_\xa9\x0fl\x03P" +
	"\xf6\xbb\xcf\x1b|\xa5\x1ed\x86\xf5\xa0\x88\xca3\x02\x92" +
	"\x8a\xa2\xbb:\xb2\x13@yFD\xe5w\x02b\x04C" +
	"\xff\x15G^\xba\x01\x04\"V\xb8X\xfa\x09\xe3\xf8c" +
	"\x11\x95W\x05\xa6j\x96\xbe\x87^\xfc\xd6\xad8p\xff" +
	"o\xae\xf9\xd2\xae\xe05r\xb1e\xd8\xd2\xeb\x99l\xf0" +
	"\xf2\x80\x9bl\x8b{\xe7\x06,\xfc&i\x91E\xd9\x17" +
	"\xc6\xbe\xc6\x8a\xc4\xde\x83\x11\xf4\xce\xcf\x7f\xce\xda\xa9C" +
	"\x8b{K\x06\xb3\xfd\x16\xec\xf4\xde'\x8f\xa4\x8c\xcc\x07" +
	"\xb0\xd4\\9=\xc7\xeb\x15\xdb5\x03u\xe6\x1cx\x9d" +
	"\xa5\x8ay\x87\xe6\x89\xee\xb7\"\xc6\x1d`\xa2+\xa8a" +
	"\xb4\xe8\x86\x99U3P\xe9\xa4\x8d\xadz\xc6P\xd3\xa1" +
	"P\xe3\xbf\x02\x00\x00\xff\xff\":@\x8c"

func init() {
	schemas.Register(schema_a8cb0f2f1a756b32,
		0x8139673a82bfe07d,
		0x81535505f60de028,
		0x8193ac6cb5429c83,
		0x81f5066b5576a609,
		0x82130007ccd2888f,
		0x8374b67102f894cf,
		0x8becd48bdafc1e45,
		0x8ea31bdb4c044f01,
		0x9398280f1359570a,
		0x9497e63b399a2c01,
		0x974fa7d7260b143e,
		0x99ffc2f3f69a6a9f,
		0x9a712ce3fcad8cd8,
		0x9e582e7e054088ae,
		0x9ea7265092c11606,
		0x9f79c33e20119e8d,
		0xa1ece076a7105939,
		0xa50711a14d35a8ce,
		0xa87d65bed9b60243,
		0xaa6ef20a62c1cafd,
		0xaaf9021b627cc1f9,
		0xabc45cb0fd79fba8,
		0xadef95edc22ca880,
		0xaf480a0c6cab8887,
		0xb37b21e300864885,
		0xb39cc44599b3a41b,
		0xb4b873147ab5ce5e,
		0xb4e5f4cccb748429,
		0xb7d82eac416ab63e,
		0xbaace870544663eb,
		0xbc353583a3731ade,
		0xbd6b5bb69c784877,
		0xbda585bffe1dc7e8,
		0xbf0e0653dc266205,
		0xc0643ea68efc60ae,
		0xc60d14bf989d4454,
		0xc7c9c9b19d935e79,
		0xca2d58de88f0b32e,
		0xcc561276d31b392b,
		0xcd94acddf4778328,
		0xd22c0be5b9c16558,
		0xd26a7affce43b1c0,
		0xd2e47e8eac54ea7e,
		0xd684c6a791b97dbc,
		0xd7051b9757f6b096,
		0xd7aff1fe39659132,
		0xd97fb0647c80b844,
		0xe9a02a3219bdbd70,
		0xe9ff06beec4e73d6,
		0xeba76bffb27b1975,
		0xed8a0ae9139c89c2,
		0xef174541b62cac82,
		0xf001fc1d5e574a07,
		0xf0475101099acdc9,
		0xf1c587295608596e,
		0xf405ef1c8e600f0f,
		0xf5cae52becabc767,
		0xf64da2416445f8b6,
		0xf72d33f93d1ebb59)
}

var x_a8cb0f2f1a756b32 = []byte{
	0, 0, 0, 0, 45, 0, 0, 0,
	1, 0, 0, 0, 118, 0, 0, 0,
	53, 0, 0, 0, 146, 0, 0, 0,
	61, 0, 0, 0, 130, 0, 0, 0,
	65, 0, 0, 0, 114, 0, 0, 0,
	69, 0, 0, 0, 90, 0, 0, 0,
	73, 0, 0, 0, 82, 0, 0, 0,
	77, 0, 0, 0, 90, 0, 0, 0,
	81, 0, 0, 0, 98, 0, 0, 0,
	85, 0, 0, 0, 130, 0, 0, 0,
	89, 0, 0, 0, 90, 0, 0, 0,
	93, 0, 0, 0, 82, 0, 0, 0,
	97, 0, 0, 0, 130, 0, 0, 0,
	101, 0, 0, 0, 138, 0, 0, 0,
	109, 0, 0, 0, 98, 0, 0, 0,
	113, 0, 0, 0, 106, 0, 0, 0,
	120, 45, 115, 97, 110, 100, 115, 116,
	111, 114, 109, 45, 97, 112, 112, 45,
	42, 0, 0, 0, 0, 0, 0, 0,
	111, 99, 45, 116, 111, 116, 97, 108,
	45, 108, 101, 110, 103, 116, 104, 0,
	111, 99, 45, 99, 104, 117, 110, 107,
	45, 115, 105, 122, 101, 0, 0, 0,
	120, 45, 111, 99, 45, 109, 116, 105,
	109, 101, 0, 0, 0, 0, 0, 0,
	111, 99, 45, 102, 105, 108, 101, 105,
	100, 0, 0, 0, 0, 0, 0, 0,
	111, 99, 45, 99, 104, 117, 110, 107,
	101, 100, 0, 0, 0, 0, 0, 0,
	111, 99, 45, 99, 104, 101, 99, 107,
	115, 117, 109, 0, 0, 0, 0, 0,
	111, 99, 45, 99, 104, 117, 110, 107,
	45, 111, 102, 102, 115, 101, 116, 0,
	111, 99, 45, 108, 97, 122, 121, 111,
	112, 115, 0, 0, 0, 0, 0, 0,
	120, 45, 104, 103, 97, 114, 103, 45,
	42, 0, 0, 0, 0, 0, 0, 0,
	120, 45, 112, 104, 97, 98, 114, 105,
	99, 97, 116, 111, 114, 45, 42, 0,
	120, 45, 114, 101, 113, 117, 101, 115,
	116, 101, 100, 45, 119, 105, 116, 104,
	0, 0, 0, 0, 0, 0, 0, 0,
	120, 45, 99, 115, 114, 102, 116, 111,
	107, 101, 110, 0, 0, 0, 0, 0,
	120, 45, 99, 115, 114, 102, 45, 116,
	111, 107, 101, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	1, 0, 0, 0, 22, 0, 0, 0,
	5, 0, 0, 0, 146, 0, 0, 0,
	13, 0, 0, 0, 90, 0, 0, 0,
	120, 45, 115, 97, 110, 100, 115, 116,
	111, 114, 109, 45, 97, 112, 112, 45,
	42, 0, 0, 0, 0, 0, 0, 0,
	120, 45, 111, 99, 45, 109, 116, 105,
	109, 101, 0, 0, 0, 0, 0, 0,
}
