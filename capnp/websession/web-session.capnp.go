// Code generated by capnpc-go. DO NOT EDIT.

package websession

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
	math "math"
	strconv "strconv"
	util "zenhack.net/go/sandstorm/capnp/util"
)

const HttpStatus = uint64(0xaf480a0c6cab8887)

// Constants defined in web-session.capnp.
const (
	HttpStatusAnnotationId = uint64(12630356203439622279)
)

// Constants defined in web-session.capnp.
var (
	WebSession_Context_headerWhitelist  = capnp.TextList{List: capnp.MustUnmarshalRoot(x_a8cb0f2f1a756b32[0:368]).List()}
	WebSession_Response_headerWhitelist = capnp.TextList{List: capnp.MustUnmarshalRoot(x_a8cb0f2f1a756b32[368:440]).List()}
)

type HttpStatusDescriptor struct{ capnp.Struct }

// HttpStatusDescriptor_TypeID is the unique identifier for the type HttpStatusDescriptor.
const HttpStatusDescriptor_TypeID = 0xbc353583a3731ade

func NewHttpStatusDescriptor(s *capnp.Segment) (HttpStatusDescriptor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HttpStatusDescriptor{st}, err
}

func NewRootHttpStatusDescriptor(s *capnp.Segment) (HttpStatusDescriptor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HttpStatusDescriptor{st}, err
}

func ReadRootHttpStatusDescriptor(msg *capnp.Message) (HttpStatusDescriptor, error) {
	root, err := msg.Root()
	return HttpStatusDescriptor{root.Struct()}, err
}

func (s HttpStatusDescriptor) String() string {
	str, _ := text.Marshal(0xbc353583a3731ade, s.Struct)
	return str
}

func (s HttpStatusDescriptor) Id() uint16 {
	return s.Struct.Uint16(0)
}

func (s HttpStatusDescriptor) SetId(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s HttpStatusDescriptor) Title() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HttpStatusDescriptor) HasTitle() bool {
	return s.Struct.HasPtr(0)
}

func (s HttpStatusDescriptor) TitleBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HttpStatusDescriptor) SetTitle(v string) error {
	return s.Struct.SetText(0, v)
}

// HttpStatusDescriptor_List is a list of HttpStatusDescriptor.
type HttpStatusDescriptor_List struct{ capnp.List }

// NewHttpStatusDescriptor creates a new list of HttpStatusDescriptor.
func NewHttpStatusDescriptor_List(s *capnp.Segment, sz int32) (HttpStatusDescriptor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return HttpStatusDescriptor_List{l}, err
}

func (s HttpStatusDescriptor_List) At(i int) HttpStatusDescriptor {
	return HttpStatusDescriptor{s.List.Struct(i)}
}

func (s HttpStatusDescriptor_List) Set(i int, v HttpStatusDescriptor) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HttpStatusDescriptor_List) String() string {
	str, _ := text.MarshalList(0xbc353583a3731ade, s.List)
	return str
}

// HttpStatusDescriptor_Future is a wrapper for a HttpStatusDescriptor promised by a client call.
type HttpStatusDescriptor_Future struct{ *capnp.Future }

func (p HttpStatusDescriptor_Future) Struct() (HttpStatusDescriptor, error) {
	s, err := p.Future.Struct()
	return HttpStatusDescriptor{s}, err
}

type WebSession struct{ Client *capnp.Client }

// WebSession_TypeID is the unique identifier for the type WebSession.
const WebSession_TypeID = 0xa50711a14d35a8ce

func (c WebSession) Get(ctx context.Context, params func(WebSession_get_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Post(ctx context.Context, params func(WebSession_post_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_post_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) OpenWebSocket(ctx context.Context, params func(WebSession_openWebSocket_Params) error) (WebSession_openWebSocket_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_openWebSocket_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_openWebSocket_Results_Future{Future: ans.Future()}, release
}
func (c WebSession) Put(ctx context.Context, params func(WebSession_put_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_put_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Delete(ctx context.Context, params func(WebSession_delete_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_delete_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) PostStreaming(ctx context.Context, params func(WebSession_postStreaming_Params) error) (WebSession_postStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_postStreaming_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_postStreaming_Results_Future{Future: ans.Future()}, release
}
func (c WebSession) PutStreaming(ctx context.Context, params func(WebSession_putStreaming_Params) error) (WebSession_putStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_putStreaming_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_putStreaming_Results_Future{Future: ans.Future()}, release
}
func (c WebSession) Propfind(ctx context.Context, params func(WebSession_propfind_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_propfind_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Proppatch(ctx context.Context, params func(WebSession_proppatch_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_proppatch_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Mkcol(ctx context.Context, params func(WebSession_mkcol_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_mkcol_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Copy(ctx context.Context, params func(WebSession_copy_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_copy_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Move(ctx context.Context, params func(WebSession_move_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_move_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Lock(ctx context.Context, params func(WebSession_lock_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_lock_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Unlock(ctx context.Context, params func(WebSession_unlock_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_unlock_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Acl(ctx context.Context, params func(WebSession_acl_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_acl_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Report(ctx context.Context, params func(WebSession_report_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_report_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Options(ctx context.Context, params func(WebSession_options_Params) error) (WebSession_Options_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_options_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Options_Future{Future: ans.Future()}, release
}
func (c WebSession) Patch(ctx context.Context, params func(WebSession_patch_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_patch_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}

func (c WebSession) AddRef() WebSession {
	return WebSession{
		Client: c.Client.AddRef(),
	}
}

func (c WebSession) Release() {
	c.Client.Release()
}

// A WebSession_Server is a WebSession with a local implementation.
type WebSession_Server interface {
	Get(context.Context, WebSession_get) error

	Post(context.Context, WebSession_post) error

	OpenWebSocket(context.Context, WebSession_openWebSocket) error

	Put(context.Context, WebSession_put) error

	Delete(context.Context, WebSession_delete) error

	PostStreaming(context.Context, WebSession_postStreaming) error

	PutStreaming(context.Context, WebSession_putStreaming) error

	Propfind(context.Context, WebSession_propfind) error

	Proppatch(context.Context, WebSession_proppatch) error

	Mkcol(context.Context, WebSession_mkcol) error

	Copy(context.Context, WebSession_copy) error

	Move(context.Context, WebSession_move) error

	Lock(context.Context, WebSession_lock) error

	Unlock(context.Context, WebSession_unlock) error

	Acl(context.Context, WebSession_acl) error

	Report(context.Context, WebSession_report) error

	Options(context.Context, WebSession_options) error

	Patch(context.Context, WebSession_patch) error
}

// WebSession_NewServer creates a new Server from an implementation of WebSession_Server.
func WebSession_NewServer(s WebSession_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WebSession_Methods(nil, s), s, c, policy)
}

// WebSession_ServerToClient creates a new Client from an implementation of WebSession_Server.
// The caller is responsible for calling Release on the returned Client.
func WebSession_ServerToClient(s WebSession_Server, policy *server.Policy) WebSession {
	return WebSession{Client: capnp.NewClient(WebSession_NewServer(s, policy))}
}

// WebSession_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WebSession_Methods(methods []server.Method, s WebSession_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 18)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, WebSession_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Post(ctx, WebSession_post{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.OpenWebSocket(ctx, WebSession_openWebSocket{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, WebSession_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Delete(ctx, WebSession_delete{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PostStreaming(ctx, WebSession_postStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PutStreaming(ctx, WebSession_putStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Propfind(ctx, WebSession_propfind{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Proppatch(ctx, WebSession_proppatch{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Mkcol(ctx, WebSession_mkcol{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Copy(ctx, WebSession_copy{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Move(ctx, WebSession_move{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lock(ctx, WebSession_lock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unlock(ctx, WebSession_unlock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Acl(ctx, WebSession_acl{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Report(ctx, WebSession_report{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Options(ctx, WebSession_options{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Patch(ctx, WebSession_patch{call})
		},
	})

	return methods
}

// WebSession_get holds the state for a server call to WebSession.get.
// See server.Call for documentation.
type WebSession_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_get) Args() WebSession_get_Params {
	return WebSession_get_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_get) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_post holds the state for a server call to WebSession.post.
// See server.Call for documentation.
type WebSession_post struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_post) Args() WebSession_post_Params {
	return WebSession_post_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_post) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_openWebSocket holds the state for a server call to WebSession.openWebSocket.
// See server.Call for documentation.
type WebSession_openWebSocket struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_openWebSocket) Args() WebSession_openWebSocket_Params {
	return WebSession_openWebSocket_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_openWebSocket) AllocResults() (WebSession_openWebSocket_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_openWebSocket_Results{Struct: r}, err
}

// WebSession_put holds the state for a server call to WebSession.put.
// See server.Call for documentation.
type WebSession_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_put) Args() WebSession_put_Params {
	return WebSession_put_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_put) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_delete holds the state for a server call to WebSession.delete.
// See server.Call for documentation.
type WebSession_delete struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_delete) Args() WebSession_delete_Params {
	return WebSession_delete_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_delete) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_postStreaming holds the state for a server call to WebSession.postStreaming.
// See server.Call for documentation.
type WebSession_postStreaming struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_postStreaming) Args() WebSession_postStreaming_Params {
	return WebSession_postStreaming_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_postStreaming) AllocResults() (WebSession_postStreaming_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_postStreaming_Results{Struct: r}, err
}

// WebSession_putStreaming holds the state for a server call to WebSession.putStreaming.
// See server.Call for documentation.
type WebSession_putStreaming struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_putStreaming) Args() WebSession_putStreaming_Params {
	return WebSession_putStreaming_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_putStreaming) AllocResults() (WebSession_putStreaming_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_putStreaming_Results{Struct: r}, err
}

// WebSession_propfind holds the state for a server call to WebSession.propfind.
// See server.Call for documentation.
type WebSession_propfind struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_propfind) Args() WebSession_propfind_Params {
	return WebSession_propfind_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_propfind) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_proppatch holds the state for a server call to WebSession.proppatch.
// See server.Call for documentation.
type WebSession_proppatch struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_proppatch) Args() WebSession_proppatch_Params {
	return WebSession_proppatch_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_proppatch) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_mkcol holds the state for a server call to WebSession.mkcol.
// See server.Call for documentation.
type WebSession_mkcol struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_mkcol) Args() WebSession_mkcol_Params {
	return WebSession_mkcol_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_mkcol) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_copy holds the state for a server call to WebSession.copy.
// See server.Call for documentation.
type WebSession_copy struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_copy) Args() WebSession_copy_Params {
	return WebSession_copy_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_copy) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_move holds the state for a server call to WebSession.move.
// See server.Call for documentation.
type WebSession_move struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_move) Args() WebSession_move_Params {
	return WebSession_move_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_move) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_lock holds the state for a server call to WebSession.lock.
// See server.Call for documentation.
type WebSession_lock struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_lock) Args() WebSession_lock_Params {
	return WebSession_lock_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_lock) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_unlock holds the state for a server call to WebSession.unlock.
// See server.Call for documentation.
type WebSession_unlock struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_unlock) Args() WebSession_unlock_Params {
	return WebSession_unlock_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_unlock) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_acl holds the state for a server call to WebSession.acl.
// See server.Call for documentation.
type WebSession_acl struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_acl) Args() WebSession_acl_Params {
	return WebSession_acl_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_acl) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_report holds the state for a server call to WebSession.report.
// See server.Call for documentation.
type WebSession_report struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_report) Args() WebSession_report_Params {
	return WebSession_report_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_report) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_options holds the state for a server call to WebSession.options.
// See server.Call for documentation.
type WebSession_options struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_options) Args() WebSession_options_Params {
	return WebSession_options_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_options) AllocResults() (WebSession_Options, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_Options{Struct: r}, err
}

// WebSession_patch holds the state for a server call to WebSession.patch.
// See server.Call for documentation.
type WebSession_patch struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_patch) Args() WebSession_patch_Params {
	return WebSession_patch_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_patch) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

type WebSession_Params struct{ capnp.Struct }

// WebSession_Params_TypeID is the unique identifier for the type WebSession_Params.
const WebSession_Params_TypeID = 0xd7051b9757f6b096

func NewWebSession_Params(s *capnp.Segment) (WebSession_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_Params{st}, err
}

func NewRootWebSession_Params(s *capnp.Segment) (WebSession_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_Params{st}, err
}

func ReadRootWebSession_Params(msg *capnp.Message) (WebSession_Params, error) {
	root, err := msg.Root()
	return WebSession_Params{root.Struct()}, err
}

func (s WebSession_Params) String() string {
	str, _ := text.Marshal(0xd7051b9757f6b096, s.Struct)
	return str
}

func (s WebSession_Params) BasePath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_Params) HasBasePath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Params) BasePathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_Params) SetBasePath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_Params) UserAgent() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Params) HasUserAgent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Params) UserAgentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Params) SetUserAgent(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_Params) AcceptableLanguages() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s WebSession_Params) HasAcceptableLanguages() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_Params) SetAcceptableLanguages(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewAcceptableLanguages sets the acceptableLanguages field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s WebSession_Params) NewAcceptableLanguages(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// WebSession_Params_List is a list of WebSession_Params.
type WebSession_Params_List struct{ capnp.List }

// NewWebSession_Params creates a new list of WebSession_Params.
func NewWebSession_Params_List(s *capnp.Segment, sz int32) (WebSession_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_Params_List{l}, err
}

func (s WebSession_Params_List) At(i int) WebSession_Params {
	return WebSession_Params{s.List.Struct(i)}
}

func (s WebSession_Params_List) Set(i int, v WebSession_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Params_List) String() string {
	str, _ := text.MarshalList(0xd7051b9757f6b096, s.List)
	return str
}

// WebSession_Params_Future is a wrapper for a WebSession_Params promised by a client call.
type WebSession_Params_Future struct{ *capnp.Future }

func (p WebSession_Params_Future) Struct() (WebSession_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_Params{s}, err
}

type WebSession_Context struct{ capnp.Struct }
type WebSession_Context_eTagPrecondition WebSession_Context
type WebSession_Context_eTagPrecondition_Which uint16

const (
	WebSession_Context_eTagPrecondition_Which_none          WebSession_Context_eTagPrecondition_Which = 0
	WebSession_Context_eTagPrecondition_Which_exists        WebSession_Context_eTagPrecondition_Which = 1
	WebSession_Context_eTagPrecondition_Which_doesntExist   WebSession_Context_eTagPrecondition_Which = 4
	WebSession_Context_eTagPrecondition_Which_matchesOneOf  WebSession_Context_eTagPrecondition_Which = 2
	WebSession_Context_eTagPrecondition_Which_matchesNoneOf WebSession_Context_eTagPrecondition_Which = 3
)

func (w WebSession_Context_eTagPrecondition_Which) String() string {
	const s = "noneexistsdoesntExistmatchesOneOfmatchesNoneOf"
	switch w {
	case WebSession_Context_eTagPrecondition_Which_none:
		return s[0:4]
	case WebSession_Context_eTagPrecondition_Which_exists:
		return s[4:10]
	case WebSession_Context_eTagPrecondition_Which_doesntExist:
		return s[10:21]
	case WebSession_Context_eTagPrecondition_Which_matchesOneOf:
		return s[21:33]
	case WebSession_Context_eTagPrecondition_Which_matchesNoneOf:
		return s[33:46]

	}
	return "WebSession_Context_eTagPrecondition_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// WebSession_Context_TypeID is the unique identifier for the type WebSession_Context.
const WebSession_Context_TypeID = 0xf5cae52becabc767

func NewWebSession_Context(s *capnp.Segment) (WebSession_Context, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return WebSession_Context{st}, err
}

func NewRootWebSession_Context(s *capnp.Segment) (WebSession_Context, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return WebSession_Context{st}, err
}

func ReadRootWebSession_Context(msg *capnp.Message) (WebSession_Context, error) {
	root, err := msg.Root()
	return WebSession_Context{root.Struct()}, err
}

func (s WebSession_Context) String() string {
	str, _ := text.Marshal(0xf5cae52becabc767, s.Struct)
	return str
}

func (s WebSession_Context) Cookies() (util.KeyValue_List, error) {
	p, err := s.Struct.Ptr(0)
	return util.KeyValue_List{List: p.List()}, err
}

func (s WebSession_Context) HasCookies() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Context) SetCookies(v util.KeyValue_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCookies sets the cookies field to a newly
// allocated util.KeyValue_List, preferring placement in s's segment.
func (s WebSession_Context) NewCookies(n int32) (util.KeyValue_List, error) {
	l, err := util.NewKeyValue_List(s.Struct.Segment(), n)
	if err != nil {
		return util.KeyValue_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s WebSession_Context) ResponseStream() util.ByteStream {
	p, _ := s.Struct.Ptr(1)
	return util.ByteStream{Client: p.Interface().Client()}
}

func (s WebSession_Context) HasResponseStream() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Context) SetResponseStream(v util.ByteStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

func (s WebSession_Context) Accept() (WebSession_AcceptedType_List, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_AcceptedType_List{List: p.List()}, err
}

func (s WebSession_Context) HasAccept() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_Context) SetAccept(v WebSession_AcceptedType_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewAccept sets the accept field to a newly
// allocated WebSession_AcceptedType_List, preferring placement in s's segment.
func (s WebSession_Context) NewAccept(n int32) (WebSession_AcceptedType_List, error) {
	l, err := NewWebSession_AcceptedType_List(s.Struct.Segment(), n)
	if err != nil {
		return WebSession_AcceptedType_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s WebSession_Context) AcceptEncoding() (WebSession_AcceptedEncoding_List, error) {
	p, err := s.Struct.Ptr(5)
	return WebSession_AcceptedEncoding_List{List: p.List()}, err
}

func (s WebSession_Context) HasAcceptEncoding() bool {
	return s.Struct.HasPtr(5)
}

func (s WebSession_Context) SetAcceptEncoding(v WebSession_AcceptedEncoding_List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewAcceptEncoding sets the acceptEncoding field to a newly
// allocated WebSession_AcceptedEncoding_List, preferring placement in s's segment.
func (s WebSession_Context) NewAcceptEncoding(n int32) (WebSession_AcceptedEncoding_List, error) {
	l, err := NewWebSession_AcceptedEncoding_List(s.Struct.Segment(), n)
	if err != nil {
		return WebSession_AcceptedEncoding_List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

func (s WebSession_Context) ETagPrecondition() WebSession_Context_eTagPrecondition {
	return WebSession_Context_eTagPrecondition(s)
}

func (s WebSession_Context_eTagPrecondition) Which() WebSession_Context_eTagPrecondition_Which {
	return WebSession_Context_eTagPrecondition_Which(s.Struct.Uint16(0))
}
func (s WebSession_Context_eTagPrecondition) SetNone() {
	s.Struct.SetUint16(0, 0)

}

func (s WebSession_Context_eTagPrecondition) SetExists() {
	s.Struct.SetUint16(0, 1)

}

func (s WebSession_Context_eTagPrecondition) SetDoesntExist() {
	s.Struct.SetUint16(0, 4)

}

func (s WebSession_Context_eTagPrecondition) MatchesOneOf() (WebSession_ETag_List, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != matchesOneOf")
	}
	p, err := s.Struct.Ptr(4)
	return WebSession_ETag_List{List: p.List()}, err
}

func (s WebSession_Context_eTagPrecondition) HasMatchesOneOf() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	return s.Struct.HasPtr(4)
}

func (s WebSession_Context_eTagPrecondition) SetMatchesOneOf(v WebSession_ETag_List) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewMatchesOneOf sets the matchesOneOf field to a newly
// allocated WebSession_ETag_List, preferring placement in s's segment.
func (s WebSession_Context_eTagPrecondition) NewMatchesOneOf(n int32) (WebSession_ETag_List, error) {
	s.Struct.SetUint16(0, 2)
	l, err := NewWebSession_ETag_List(s.Struct.Segment(), n)
	if err != nil {
		return WebSession_ETag_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s WebSession_Context_eTagPrecondition) MatchesNoneOf() (WebSession_ETag_List, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != matchesNoneOf")
	}
	p, err := s.Struct.Ptr(4)
	return WebSession_ETag_List{List: p.List()}, err
}

func (s WebSession_Context_eTagPrecondition) HasMatchesNoneOf() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	return s.Struct.HasPtr(4)
}

func (s WebSession_Context_eTagPrecondition) SetMatchesNoneOf(v WebSession_ETag_List) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewMatchesNoneOf sets the matchesNoneOf field to a newly
// allocated WebSession_ETag_List, preferring placement in s's segment.
func (s WebSession_Context_eTagPrecondition) NewMatchesNoneOf(n int32) (WebSession_ETag_List, error) {
	s.Struct.SetUint16(0, 3)
	l, err := NewWebSession_ETag_List(s.Struct.Segment(), n)
	if err != nil {
		return WebSession_ETag_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s WebSession_Context) AdditionalHeaders() (WebSession_Context_Header_List, error) {
	p, err := s.Struct.Ptr(3)
	return WebSession_Context_Header_List{List: p.List()}, err
}

func (s WebSession_Context) HasAdditionalHeaders() bool {
	return s.Struct.HasPtr(3)
}

func (s WebSession_Context) SetAdditionalHeaders(v WebSession_Context_Header_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewAdditionalHeaders sets the additionalHeaders field to a newly
// allocated WebSession_Context_Header_List, preferring placement in s's segment.
func (s WebSession_Context) NewAdditionalHeaders(n int32) (WebSession_Context_Header_List, error) {
	l, err := NewWebSession_Context_Header_List(s.Struct.Segment(), n)
	if err != nil {
		return WebSession_Context_Header_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// WebSession_Context_List is a list of WebSession_Context.
type WebSession_Context_List struct{ capnp.List }

// NewWebSession_Context creates a new list of WebSession_Context.
func NewWebSession_Context_List(s *capnp.Segment, sz int32) (WebSession_Context_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6}, sz)
	return WebSession_Context_List{l}, err
}

func (s WebSession_Context_List) At(i int) WebSession_Context {
	return WebSession_Context{s.List.Struct(i)}
}

func (s WebSession_Context_List) Set(i int, v WebSession_Context) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Context_List) String() string {
	str, _ := text.MarshalList(0xf5cae52becabc767, s.List)
	return str
}

// WebSession_Context_Future is a wrapper for a WebSession_Context promised by a client call.
type WebSession_Context_Future struct{ *capnp.Future }

func (p WebSession_Context_Future) Struct() (WebSession_Context, error) {
	s, err := p.Future.Struct()
	return WebSession_Context{s}, err
}

func (p WebSession_Context_Future) ResponseStream() util.ByteStream {
	return util.ByteStream{Client: p.Future.Field(1, nil).Client()}
}

func (p WebSession_Context_Future) ETagPrecondition() WebSession_Context_eTagPrecondition_Future {
	return WebSession_Context_eTagPrecondition_Future{p.Future}
}

// WebSession_Context_eTagPrecondition_Future is a wrapper for a WebSession_Context_eTagPrecondition promised by a client call.
type WebSession_Context_eTagPrecondition_Future struct{ *capnp.Future }

func (p WebSession_Context_eTagPrecondition_Future) Struct() (WebSession_Context_eTagPrecondition, error) {
	s, err := p.Future.Struct()
	return WebSession_Context_eTagPrecondition{s}, err
}

type WebSession_Context_Header struct{ capnp.Struct }

// WebSession_Context_Header_TypeID is the unique identifier for the type WebSession_Context_Header.
const WebSession_Context_Header_TypeID = 0xb4e5f4cccb748429

func NewWebSession_Context_Header(s *capnp.Segment) (WebSession_Context_Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_Context_Header{st}, err
}

func NewRootWebSession_Context_Header(s *capnp.Segment) (WebSession_Context_Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_Context_Header{st}, err
}

func ReadRootWebSession_Context_Header(msg *capnp.Message) (WebSession_Context_Header, error) {
	root, err := msg.Root()
	return WebSession_Context_Header{root.Struct()}, err
}

func (s WebSession_Context_Header) String() string {
	str, _ := text.Marshal(0xb4e5f4cccb748429, s.Struct)
	return str
}

func (s WebSession_Context_Header) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_Context_Header) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Context_Header) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_Context_Header) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_Context_Header) Value() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Context_Header) HasValue() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Context_Header) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Context_Header) SetValue(v string) error {
	return s.Struct.SetText(1, v)
}

// WebSession_Context_Header_List is a list of WebSession_Context_Header.
type WebSession_Context_Header_List struct{ capnp.List }

// NewWebSession_Context_Header creates a new list of WebSession_Context_Header.
func NewWebSession_Context_Header_List(s *capnp.Segment, sz int32) (WebSession_Context_Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return WebSession_Context_Header_List{l}, err
}

func (s WebSession_Context_Header_List) At(i int) WebSession_Context_Header {
	return WebSession_Context_Header{s.List.Struct(i)}
}

func (s WebSession_Context_Header_List) Set(i int, v WebSession_Context_Header) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Context_Header_List) String() string {
	str, _ := text.MarshalList(0xb4e5f4cccb748429, s.List)
	return str
}

// WebSession_Context_Header_Future is a wrapper for a WebSession_Context_Header promised by a client call.
type WebSession_Context_Header_Future struct{ *capnp.Future }

func (p WebSession_Context_Header_Future) Struct() (WebSession_Context_Header, error) {
	s, err := p.Future.Struct()
	return WebSession_Context_Header{s}, err
}

type WebSession_PostContent struct{ capnp.Struct }

// WebSession_PostContent_TypeID is the unique identifier for the type WebSession_PostContent.
const WebSession_PostContent_TypeID = 0xb7d82eac416ab63e

func NewWebSession_PostContent(s *capnp.Segment) (WebSession_PostContent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_PostContent{st}, err
}

func NewRootWebSession_PostContent(s *capnp.Segment) (WebSession_PostContent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_PostContent{st}, err
}

func ReadRootWebSession_PostContent(msg *capnp.Message) (WebSession_PostContent, error) {
	root, err := msg.Root()
	return WebSession_PostContent{root.Struct()}, err
}

func (s WebSession_PostContent) String() string {
	str, _ := text.Marshal(0xb7d82eac416ab63e, s.Struct)
	return str
}

func (s WebSession_PostContent) MimeType() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_PostContent) HasMimeType() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_PostContent) MimeTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_PostContent) SetMimeType(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_PostContent) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s WebSession_PostContent) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_PostContent) SetContent(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s WebSession_PostContent) Encoding() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s WebSession_PostContent) HasEncoding() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_PostContent) EncodingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s WebSession_PostContent) SetEncoding(v string) error {
	return s.Struct.SetText(2, v)
}

// WebSession_PostContent_List is a list of WebSession_PostContent.
type WebSession_PostContent_List struct{ capnp.List }

// NewWebSession_PostContent creates a new list of WebSession_PostContent.
func NewWebSession_PostContent_List(s *capnp.Segment, sz int32) (WebSession_PostContent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_PostContent_List{l}, err
}

func (s WebSession_PostContent_List) At(i int) WebSession_PostContent {
	return WebSession_PostContent{s.List.Struct(i)}
}

func (s WebSession_PostContent_List) Set(i int, v WebSession_PostContent) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_PostContent_List) String() string {
	str, _ := text.MarshalList(0xb7d82eac416ab63e, s.List)
	return str
}

// WebSession_PostContent_Future is a wrapper for a WebSession_PostContent promised by a client call.
type WebSession_PostContent_Future struct{ *capnp.Future }

func (p WebSession_PostContent_Future) Struct() (WebSession_PostContent, error) {
	s, err := p.Future.Struct()
	return WebSession_PostContent{s}, err
}

type WebSession_PutContent struct{ capnp.Struct }

// WebSession_PutContent_TypeID is the unique identifier for the type WebSession_PutContent.
const WebSession_PutContent_TypeID = 0xd7aff1fe39659132

func NewWebSession_PutContent(s *capnp.Segment) (WebSession_PutContent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_PutContent{st}, err
}

func NewRootWebSession_PutContent(s *capnp.Segment) (WebSession_PutContent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_PutContent{st}, err
}

func ReadRootWebSession_PutContent(msg *capnp.Message) (WebSession_PutContent, error) {
	root, err := msg.Root()
	return WebSession_PutContent{root.Struct()}, err
}

func (s WebSession_PutContent) String() string {
	str, _ := text.Marshal(0xd7aff1fe39659132, s.Struct)
	return str
}

func (s WebSession_PutContent) MimeType() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_PutContent) HasMimeType() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_PutContent) MimeTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_PutContent) SetMimeType(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_PutContent) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s WebSession_PutContent) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_PutContent) SetContent(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s WebSession_PutContent) Encoding() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s WebSession_PutContent) HasEncoding() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_PutContent) EncodingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s WebSession_PutContent) SetEncoding(v string) error {
	return s.Struct.SetText(2, v)
}

// WebSession_PutContent_List is a list of WebSession_PutContent.
type WebSession_PutContent_List struct{ capnp.List }

// NewWebSession_PutContent creates a new list of WebSession_PutContent.
func NewWebSession_PutContent_List(s *capnp.Segment, sz int32) (WebSession_PutContent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_PutContent_List{l}, err
}

func (s WebSession_PutContent_List) At(i int) WebSession_PutContent {
	return WebSession_PutContent{s.List.Struct(i)}
}

func (s WebSession_PutContent_List) Set(i int, v WebSession_PutContent) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_PutContent_List) String() string {
	str, _ := text.MarshalList(0xd7aff1fe39659132, s.List)
	return str
}

// WebSession_PutContent_Future is a wrapper for a WebSession_PutContent promised by a client call.
type WebSession_PutContent_Future struct{ *capnp.Future }

func (p WebSession_PutContent_Future) Struct() (WebSession_PutContent, error) {
	s, err := p.Future.Struct()
	return WebSession_PutContent{s}, err
}

type WebSession_ETag struct{ capnp.Struct }

// WebSession_ETag_TypeID is the unique identifier for the type WebSession_ETag.
const WebSession_ETag_TypeID = 0xd22c0be5b9c16558

func NewWebSession_ETag(s *capnp.Segment) (WebSession_ETag, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_ETag{st}, err
}

func NewRootWebSession_ETag(s *capnp.Segment) (WebSession_ETag, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_ETag{st}, err
}

func ReadRootWebSession_ETag(msg *capnp.Message) (WebSession_ETag, error) {
	root, err := msg.Root()
	return WebSession_ETag{root.Struct()}, err
}

func (s WebSession_ETag) String() string {
	str, _ := text.Marshal(0xd22c0be5b9c16558, s.Struct)
	return str
}

func (s WebSession_ETag) Value() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_ETag) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_ETag) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_ETag) SetValue(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_ETag) Weak() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_ETag) SetWeak(v bool) {
	s.Struct.SetBit(0, v)
}

// WebSession_ETag_List is a list of WebSession_ETag.
type WebSession_ETag_List struct{ capnp.List }

// NewWebSession_ETag creates a new list of WebSession_ETag.
func NewWebSession_ETag_List(s *capnp.Segment, sz int32) (WebSession_ETag_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return WebSession_ETag_List{l}, err
}

func (s WebSession_ETag_List) At(i int) WebSession_ETag { return WebSession_ETag{s.List.Struct(i)} }

func (s WebSession_ETag_List) Set(i int, v WebSession_ETag) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_ETag_List) String() string {
	str, _ := text.MarshalList(0xd22c0be5b9c16558, s.List)
	return str
}

// WebSession_ETag_Future is a wrapper for a WebSession_ETag promised by a client call.
type WebSession_ETag_Future struct{ *capnp.Future }

func (p WebSession_ETag_Future) Struct() (WebSession_ETag, error) {
	s, err := p.Future.Struct()
	return WebSession_ETag{s}, err
}

type WebSession_Cookie struct{ capnp.Struct }
type WebSession_Cookie_expires WebSession_Cookie
type WebSession_Cookie_expires_Which uint16

const (
	WebSession_Cookie_expires_Which_none     WebSession_Cookie_expires_Which = 0
	WebSession_Cookie_expires_Which_absolute WebSession_Cookie_expires_Which = 1
	WebSession_Cookie_expires_Which_relative WebSession_Cookie_expires_Which = 2
)

func (w WebSession_Cookie_expires_Which) String() string {
	const s = "noneabsoluterelative"
	switch w {
	case WebSession_Cookie_expires_Which_none:
		return s[0:4]
	case WebSession_Cookie_expires_Which_absolute:
		return s[4:12]
	case WebSession_Cookie_expires_Which_relative:
		return s[12:20]

	}
	return "WebSession_Cookie_expires_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// WebSession_Cookie_TypeID is the unique identifier for the type WebSession_Cookie.
const WebSession_Cookie_TypeID = 0xa87d65bed9b60243

func NewWebSession_Cookie(s *capnp.Segment) (WebSession_Cookie, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return WebSession_Cookie{st}, err
}

func NewRootWebSession_Cookie(s *capnp.Segment) (WebSession_Cookie, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return WebSession_Cookie{st}, err
}

func ReadRootWebSession_Cookie(msg *capnp.Message) (WebSession_Cookie, error) {
	root, err := msg.Root()
	return WebSession_Cookie{root.Struct()}, err
}

func (s WebSession_Cookie) String() string {
	str, _ := text.Marshal(0xa87d65bed9b60243, s.Struct)
	return str
}

func (s WebSession_Cookie) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_Cookie) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Cookie) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_Cookie) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_Cookie) Value() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Cookie) HasValue() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Cookie) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Cookie) SetValue(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_Cookie) Expires() WebSession_Cookie_expires { return WebSession_Cookie_expires(s) }

func (s WebSession_Cookie_expires) Which() WebSession_Cookie_expires_Which {
	return WebSession_Cookie_expires_Which(s.Struct.Uint16(0))
}
func (s WebSession_Cookie_expires) SetNone() {
	s.Struct.SetUint16(0, 0)

}

func (s WebSession_Cookie_expires) Absolute() int64 {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != absolute")
	}
	return int64(s.Struct.Uint64(8))
}

func (s WebSession_Cookie_expires) SetAbsolute(v int64) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetUint64(8, uint64(v))
}

func (s WebSession_Cookie_expires) Relative() uint64 {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != relative")
	}
	return s.Struct.Uint64(8)
}

func (s WebSession_Cookie_expires) SetRelative(v uint64) {
	s.Struct.SetUint16(0, 2)
	s.Struct.SetUint64(8, v)
}

func (s WebSession_Cookie) HttpOnly() bool {
	return s.Struct.Bit(16)
}

func (s WebSession_Cookie) SetHttpOnly(v bool) {
	s.Struct.SetBit(16, v)
}

func (s WebSession_Cookie) Path() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s WebSession_Cookie) HasPath() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_Cookie) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s WebSession_Cookie) SetPath(v string) error {
	return s.Struct.SetText(2, v)
}

// WebSession_Cookie_List is a list of WebSession_Cookie.
type WebSession_Cookie_List struct{ capnp.List }

// NewWebSession_Cookie creates a new list of WebSession_Cookie.
func NewWebSession_Cookie_List(s *capnp.Segment, sz int32) (WebSession_Cookie_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return WebSession_Cookie_List{l}, err
}

func (s WebSession_Cookie_List) At(i int) WebSession_Cookie {
	return WebSession_Cookie{s.List.Struct(i)}
}

func (s WebSession_Cookie_List) Set(i int, v WebSession_Cookie) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Cookie_List) String() string {
	str, _ := text.MarshalList(0xa87d65bed9b60243, s.List)
	return str
}

// WebSession_Cookie_Future is a wrapper for a WebSession_Cookie promised by a client call.
type WebSession_Cookie_Future struct{ *capnp.Future }

func (p WebSession_Cookie_Future) Struct() (WebSession_Cookie, error) {
	s, err := p.Future.Struct()
	return WebSession_Cookie{s}, err
}

func (p WebSession_Cookie_Future) Expires() WebSession_Cookie_expires_Future {
	return WebSession_Cookie_expires_Future{p.Future}
}

// WebSession_Cookie_expires_Future is a wrapper for a WebSession_Cookie_expires promised by a client call.
type WebSession_Cookie_expires_Future struct{ *capnp.Future }

func (p WebSession_Cookie_expires_Future) Struct() (WebSession_Cookie_expires, error) {
	s, err := p.Future.Struct()
	return WebSession_Cookie_expires{s}, err
}

type WebSession_AcceptedType struct{ capnp.Struct }

// WebSession_AcceptedType_TypeID is the unique identifier for the type WebSession_AcceptedType.
const WebSession_AcceptedType_TypeID = 0xaaf9021b627cc1f9

func NewWebSession_AcceptedType(s *capnp.Segment) (WebSession_AcceptedType, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_AcceptedType{st}, err
}

func NewRootWebSession_AcceptedType(s *capnp.Segment) (WebSession_AcceptedType, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_AcceptedType{st}, err
}

func ReadRootWebSession_AcceptedType(msg *capnp.Message) (WebSession_AcceptedType, error) {
	root, err := msg.Root()
	return WebSession_AcceptedType{root.Struct()}, err
}

func (s WebSession_AcceptedType) String() string {
	str, _ := text.Marshal(0xaaf9021b627cc1f9, s.Struct)
	return str
}

func (s WebSession_AcceptedType) MimeType() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_AcceptedType) HasMimeType() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_AcceptedType) MimeTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_AcceptedType) SetMimeType(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_AcceptedType) QValue() float32 {
	return math.Float32frombits(s.Struct.Uint32(0) ^ 0x3f800000)
}

func (s WebSession_AcceptedType) SetQValue(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v)^0x3f800000)
}

// WebSession_AcceptedType_List is a list of WebSession_AcceptedType.
type WebSession_AcceptedType_List struct{ capnp.List }

// NewWebSession_AcceptedType creates a new list of WebSession_AcceptedType.
func NewWebSession_AcceptedType_List(s *capnp.Segment, sz int32) (WebSession_AcceptedType_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return WebSession_AcceptedType_List{l}, err
}

func (s WebSession_AcceptedType_List) At(i int) WebSession_AcceptedType {
	return WebSession_AcceptedType{s.List.Struct(i)}
}

func (s WebSession_AcceptedType_List) Set(i int, v WebSession_AcceptedType) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_AcceptedType_List) String() string {
	str, _ := text.MarshalList(0xaaf9021b627cc1f9, s.List)
	return str
}

// WebSession_AcceptedType_Future is a wrapper for a WebSession_AcceptedType promised by a client call.
type WebSession_AcceptedType_Future struct{ *capnp.Future }

func (p WebSession_AcceptedType_Future) Struct() (WebSession_AcceptedType, error) {
	s, err := p.Future.Struct()
	return WebSession_AcceptedType{s}, err
}

type WebSession_AcceptedEncoding struct{ capnp.Struct }

// WebSession_AcceptedEncoding_TypeID is the unique identifier for the type WebSession_AcceptedEncoding.
const WebSession_AcceptedEncoding_TypeID = 0xbda585bffe1dc7e8

func NewWebSession_AcceptedEncoding(s *capnp.Segment) (WebSession_AcceptedEncoding, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_AcceptedEncoding{st}, err
}

func NewRootWebSession_AcceptedEncoding(s *capnp.Segment) (WebSession_AcceptedEncoding, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_AcceptedEncoding{st}, err
}

func ReadRootWebSession_AcceptedEncoding(msg *capnp.Message) (WebSession_AcceptedEncoding, error) {
	root, err := msg.Root()
	return WebSession_AcceptedEncoding{root.Struct()}, err
}

func (s WebSession_AcceptedEncoding) String() string {
	str, _ := text.Marshal(0xbda585bffe1dc7e8, s.Struct)
	return str
}

func (s WebSession_AcceptedEncoding) ContentCoding() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_AcceptedEncoding) HasContentCoding() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_AcceptedEncoding) ContentCodingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_AcceptedEncoding) SetContentCoding(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_AcceptedEncoding) QValue() float32 {
	return math.Float32frombits(s.Struct.Uint32(0) ^ 0x3f800000)
}

func (s WebSession_AcceptedEncoding) SetQValue(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v)^0x3f800000)
}

// WebSession_AcceptedEncoding_List is a list of WebSession_AcceptedEncoding.
type WebSession_AcceptedEncoding_List struct{ capnp.List }

// NewWebSession_AcceptedEncoding creates a new list of WebSession_AcceptedEncoding.
func NewWebSession_AcceptedEncoding_List(s *capnp.Segment, sz int32) (WebSession_AcceptedEncoding_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return WebSession_AcceptedEncoding_List{l}, err
}

func (s WebSession_AcceptedEncoding_List) At(i int) WebSession_AcceptedEncoding {
	return WebSession_AcceptedEncoding{s.List.Struct(i)}
}

func (s WebSession_AcceptedEncoding_List) Set(i int, v WebSession_AcceptedEncoding) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_AcceptedEncoding_List) String() string {
	str, _ := text.MarshalList(0xbda585bffe1dc7e8, s.List)
	return str
}

// WebSession_AcceptedEncoding_Future is a wrapper for a WebSession_AcceptedEncoding promised by a client call.
type WebSession_AcceptedEncoding_Future struct{ *capnp.Future }

func (p WebSession_AcceptedEncoding_Future) Struct() (WebSession_AcceptedEncoding, error) {
	s, err := p.Future.Struct()
	return WebSession_AcceptedEncoding{s}, err
}

type WebSession_Response struct{ capnp.Struct }
type WebSession_Response_content WebSession_Response
type WebSession_Response_content_body WebSession_Response
type WebSession_Response_content_disposition WebSession_Response
type WebSession_Response_noContent WebSession_Response
type WebSession_Response_preconditionFailed WebSession_Response
type WebSession_Response_redirect WebSession_Response
type WebSession_Response_clientError WebSession_Response
type WebSession_Response_serverError WebSession_Response
type WebSession_Response_Which uint16

const (
	WebSession_Response_Which_content            WebSession_Response_Which = 1
	WebSession_Response_Which_noContent          WebSession_Response_Which = 4
	WebSession_Response_Which_preconditionFailed WebSession_Response_Which = 5
	WebSession_Response_Which_redirect           WebSession_Response_Which = 0
	WebSession_Response_Which_clientError        WebSession_Response_Which = 2
	WebSession_Response_Which_serverError        WebSession_Response_Which = 3
)

func (w WebSession_Response_Which) String() string {
	const s = "contentnoContentpreconditionFailedredirectclientErrorserverError"
	switch w {
	case WebSession_Response_Which_content:
		return s[0:7]
	case WebSession_Response_Which_noContent:
		return s[7:16]
	case WebSession_Response_Which_preconditionFailed:
		return s[16:34]
	case WebSession_Response_Which_redirect:
		return s[34:42]
	case WebSession_Response_Which_clientError:
		return s[42:53]
	case WebSession_Response_Which_serverError:
		return s[53:64]

	}
	return "WebSession_Response_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type WebSession_Response_content_body_Which uint16

const (
	WebSession_Response_content_body_Which_bytes  WebSession_Response_content_body_Which = 0
	WebSession_Response_content_body_Which_stream WebSession_Response_content_body_Which = 1
)

func (w WebSession_Response_content_body_Which) String() string {
	const s = "bytesstream"
	switch w {
	case WebSession_Response_content_body_Which_bytes:
		return s[0:5]
	case WebSession_Response_content_body_Which_stream:
		return s[5:11]

	}
	return "WebSession_Response_content_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type WebSession_Response_content_disposition_Which uint16

const (
	WebSession_Response_content_disposition_Which_normal   WebSession_Response_content_disposition_Which = 0
	WebSession_Response_content_disposition_Which_download WebSession_Response_content_disposition_Which = 1
)

func (w WebSession_Response_content_disposition_Which) String() string {
	const s = "normaldownload"
	switch w {
	case WebSession_Response_content_disposition_Which_normal:
		return s[0:6]
	case WebSession_Response_content_disposition_Which_download:
		return s[6:14]

	}
	return "WebSession_Response_content_disposition_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// WebSession_Response_TypeID is the unique identifier for the type WebSession_Response.
const WebSession_Response_TypeID = 0x8193ac6cb5429c83

func NewWebSession_Response(s *capnp.Segment) (WebSession_Response, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{st}, err
}

func NewRootWebSession_Response(s *capnp.Segment) (WebSession_Response, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{st}, err
}

func ReadRootWebSession_Response(msg *capnp.Message) (WebSession_Response, error) {
	root, err := msg.Root()
	return WebSession_Response{root.Struct()}, err
}

func (s WebSession_Response) String() string {
	str, _ := text.Marshal(0x8193ac6cb5429c83, s.Struct)
	return str
}

func (s WebSession_Response) Which() WebSession_Response_Which {
	return WebSession_Response_Which(s.Struct.Uint16(2))
}
func (s WebSession_Response) SetCookies() (WebSession_Cookie_List, error) {
	p, err := s.Struct.Ptr(0)
	return WebSession_Cookie_List{List: p.List()}, err
}

func (s WebSession_Response) HasSetCookies() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Response) SetSetCookies(v WebSession_Cookie_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSetCookies sets the setCookies field to a newly
// allocated WebSession_Cookie_List, preferring placement in s's segment.
func (s WebSession_Response) NewSetCookies(n int32) (WebSession_Cookie_List, error) {
	l, err := NewWebSession_Cookie_List(s.Struct.Segment(), n)
	if err != nil {
		return WebSession_Cookie_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s WebSession_Response) CachePolicy() (WebSession_CachePolicy, error) {
	p, err := s.Struct.Ptr(6)
	return WebSession_CachePolicy{Struct: p.Struct()}, err
}

func (s WebSession_Response) HasCachePolicy() bool {
	return s.Struct.HasPtr(6)
}

func (s WebSession_Response) SetCachePolicy(v WebSession_CachePolicy) error {
	return s.Struct.SetPtr(6, v.Struct.ToPtr())
}

// NewCachePolicy sets the cachePolicy field to a newly
// allocated WebSession_CachePolicy struct, preferring placement in s's segment.
func (s WebSession_Response) NewCachePolicy() (WebSession_CachePolicy, error) {
	ss, err := NewWebSession_CachePolicy(s.Struct.Segment())
	if err != nil {
		return WebSession_CachePolicy{}, err
	}
	err = s.Struct.SetPtr(6, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_Response) Content() WebSession_Response_content {
	return WebSession_Response_content(s)
}

func (s WebSession_Response) SetContent() {
	s.Struct.SetUint16(2, 1)
}

func (s WebSession_Response_content) StatusCode() WebSession_Response_SuccessCode {
	return WebSession_Response_SuccessCode(s.Struct.Uint16(4))
}

func (s WebSession_Response_content) SetStatusCode(v WebSession_Response_SuccessCode) {
	s.Struct.SetUint16(4, uint16(v))
}

func (s WebSession_Response_content) Encoding() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_content) HasEncoding() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_content) EncodingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_content) SetEncoding(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_Response_content) Language() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s WebSession_Response_content) HasLanguage() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_Response_content) LanguageBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s WebSession_Response_content) SetLanguage(v string) error {
	return s.Struct.SetText(2, v)
}

func (s WebSession_Response_content) MimeType() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s WebSession_Response_content) HasMimeType() bool {
	return s.Struct.HasPtr(3)
}

func (s WebSession_Response_content) MimeTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s WebSession_Response_content) SetMimeType(v string) error {
	return s.Struct.SetText(3, v)
}

func (s WebSession_Response_content) ETag() (WebSession_ETag, error) {
	p, err := s.Struct.Ptr(7)
	return WebSession_ETag{Struct: p.Struct()}, err
}

func (s WebSession_Response_content) HasETag() bool {
	return s.Struct.HasPtr(7)
}

func (s WebSession_Response_content) SetETag(v WebSession_ETag) error {
	return s.Struct.SetPtr(7, v.Struct.ToPtr())
}

// NewETag sets the eTag field to a newly
// allocated WebSession_ETag struct, preferring placement in s's segment.
func (s WebSession_Response_content) NewETag() (WebSession_ETag, error) {
	ss, err := NewWebSession_ETag(s.Struct.Segment())
	if err != nil {
		return WebSession_ETag{}, err
	}
	err = s.Struct.SetPtr(7, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_Response_content) Body() WebSession_Response_content_body {
	return WebSession_Response_content_body(s)
}

func (s WebSession_Response_content_body) Which() WebSession_Response_content_body_Which {
	return WebSession_Response_content_body_Which(s.Struct.Uint16(0))
}
func (s WebSession_Response_content_body) Bytes() ([]byte, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != bytes")
	}
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s WebSession_Response_content_body) HasBytes() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(4)
}

func (s WebSession_Response_content_body) SetBytes(v []byte) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetData(4, v)
}

func (s WebSession_Response_content_body) Stream() util.Handle {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != stream")
	}
	p, _ := s.Struct.Ptr(4)
	return util.Handle{Client: p.Interface().Client()}
}

func (s WebSession_Response_content_body) HasStream() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(4)
}

func (s WebSession_Response_content_body) SetStream(v util.Handle) error {
	s.Struct.SetUint16(0, 1)
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(4, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(4, in.ToPtr())
}

func (s WebSession_Response_content) Disposition() WebSession_Response_content_disposition {
	return WebSession_Response_content_disposition(s)
}

func (s WebSession_Response_content_disposition) Which() WebSession_Response_content_disposition_Which {
	return WebSession_Response_content_disposition_Which(s.Struct.Uint16(6))
}
func (s WebSession_Response_content_disposition) SetNormal() {
	s.Struct.SetUint16(6, 0)

}

func (s WebSession_Response_content_disposition) Download() (string, error) {
	if s.Struct.Uint16(6) != 1 {
		panic("Which() != download")
	}
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s WebSession_Response_content_disposition) HasDownload() bool {
	if s.Struct.Uint16(6) != 1 {
		return false
	}
	return s.Struct.HasPtr(5)
}

func (s WebSession_Response_content_disposition) DownloadBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s WebSession_Response_content_disposition) SetDownload(v string) error {
	s.Struct.SetUint16(6, 1)
	return s.Struct.SetText(5, v)
}

func (s WebSession_Response) NoContent() WebSession_Response_noContent {
	return WebSession_Response_noContent(s)
}

func (s WebSession_Response) SetNoContent() {
	s.Struct.SetUint16(2, 4)
}

func (s WebSession_Response_noContent) ShouldResetForm() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_Response_noContent) SetShouldResetForm(v bool) {
	s.Struct.SetBit(0, v)
}

func (s WebSession_Response_noContent) ETag() (WebSession_ETag, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_ETag{Struct: p.Struct()}, err
}

func (s WebSession_Response_noContent) HasETag() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_noContent) SetETag(v WebSession_ETag) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewETag sets the eTag field to a newly
// allocated WebSession_ETag struct, preferring placement in s's segment.
func (s WebSession_Response_noContent) NewETag() (WebSession_ETag, error) {
	ss, err := NewWebSession_ETag(s.Struct.Segment())
	if err != nil {
		return WebSession_ETag{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_Response) PreconditionFailed() WebSession_Response_preconditionFailed {
	return WebSession_Response_preconditionFailed(s)
}

func (s WebSession_Response) SetPreconditionFailed() {
	s.Struct.SetUint16(2, 5)
}

func (s WebSession_Response_preconditionFailed) MatchingETag() (WebSession_ETag, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_ETag{Struct: p.Struct()}, err
}

func (s WebSession_Response_preconditionFailed) HasMatchingETag() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_preconditionFailed) SetMatchingETag(v WebSession_ETag) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewMatchingETag sets the matchingETag field to a newly
// allocated WebSession_ETag struct, preferring placement in s's segment.
func (s WebSession_Response_preconditionFailed) NewMatchingETag() (WebSession_ETag, error) {
	ss, err := NewWebSession_ETag(s.Struct.Segment())
	if err != nil {
		return WebSession_ETag{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_Response) Redirect() WebSession_Response_redirect {
	return WebSession_Response_redirect(s)
}

func (s WebSession_Response) SetRedirect() {
	s.Struct.SetUint16(2, 0)
}

func (s WebSession_Response_redirect) IsPermanent() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_Response_redirect) SetIsPermanent(v bool) {
	s.Struct.SetBit(0, v)
}

func (s WebSession_Response_redirect) SwitchToGet() bool {
	return s.Struct.Bit(1)
}

func (s WebSession_Response_redirect) SetSwitchToGet(v bool) {
	s.Struct.SetBit(1, v)
}

func (s WebSession_Response_redirect) Location() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_redirect) HasLocation() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_redirect) LocationBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_redirect) SetLocation(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_Response) ClientError() WebSession_Response_clientError {
	return WebSession_Response_clientError(s)
}

func (s WebSession_Response) SetClientError() {
	s.Struct.SetUint16(2, 2)
}

func (s WebSession_Response_clientError) StatusCode() WebSession_Response_ClientErrorCode {
	return WebSession_Response_ClientErrorCode(s.Struct.Uint16(0))
}

func (s WebSession_Response_clientError) SetStatusCode(v WebSession_Response_ClientErrorCode) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s WebSession_Response_clientError) DescriptionHtml() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_clientError) HasDescriptionHtml() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_clientError) DescriptionHtmlBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_clientError) SetDescriptionHtml(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_Response_clientError) NonHtmlBody() (WebSession_Response_ErrorBody, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Response_ErrorBody{Struct: p.Struct()}, err
}

func (s WebSession_Response_clientError) HasNonHtmlBody() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_Response_clientError) SetNonHtmlBody(v WebSession_Response_ErrorBody) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewNonHtmlBody sets the nonHtmlBody field to a newly
// allocated WebSession_Response_ErrorBody struct, preferring placement in s's segment.
func (s WebSession_Response_clientError) NewNonHtmlBody() (WebSession_Response_ErrorBody, error) {
	ss, err := NewWebSession_Response_ErrorBody(s.Struct.Segment())
	if err != nil {
		return WebSession_Response_ErrorBody{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_Response) ServerError() WebSession_Response_serverError {
	return WebSession_Response_serverError(s)
}

func (s WebSession_Response) SetServerError() {
	s.Struct.SetUint16(2, 3)
}

func (s WebSession_Response_serverError) DescriptionHtml() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_serverError) HasDescriptionHtml() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_serverError) DescriptionHtmlBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_serverError) SetDescriptionHtml(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_Response_serverError) NonHtmlBody() (WebSession_Response_ErrorBody, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Response_ErrorBody{Struct: p.Struct()}, err
}

func (s WebSession_Response_serverError) HasNonHtmlBody() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_Response_serverError) SetNonHtmlBody(v WebSession_Response_ErrorBody) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewNonHtmlBody sets the nonHtmlBody field to a newly
// allocated WebSession_Response_ErrorBody struct, preferring placement in s's segment.
func (s WebSession_Response_serverError) NewNonHtmlBody() (WebSession_Response_ErrorBody, error) {
	ss, err := NewWebSession_Response_ErrorBody(s.Struct.Segment())
	if err != nil {
		return WebSession_Response_ErrorBody{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_Response) AdditionalHeaders() (WebSession_Response_Header_List, error) {
	p, err := s.Struct.Ptr(8)
	return WebSession_Response_Header_List{List: p.List()}, err
}

func (s WebSession_Response) HasAdditionalHeaders() bool {
	return s.Struct.HasPtr(8)
}

func (s WebSession_Response) SetAdditionalHeaders(v WebSession_Response_Header_List) error {
	return s.Struct.SetPtr(8, v.List.ToPtr())
}

// NewAdditionalHeaders sets the additionalHeaders field to a newly
// allocated WebSession_Response_Header_List, preferring placement in s's segment.
func (s WebSession_Response) NewAdditionalHeaders(n int32) (WebSession_Response_Header_List, error) {
	l, err := NewWebSession_Response_Header_List(s.Struct.Segment(), n)
	if err != nil {
		return WebSession_Response_Header_List{}, err
	}
	err = s.Struct.SetPtr(8, l.List.ToPtr())
	return l, err
}

// WebSession_Response_List is a list of WebSession_Response.
type WebSession_Response_List struct{ capnp.List }

// NewWebSession_Response creates a new list of WebSession_Response.
func NewWebSession_Response_List(s *capnp.Segment, sz int32) (WebSession_Response_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 9}, sz)
	return WebSession_Response_List{l}, err
}

func (s WebSession_Response_List) At(i int) WebSession_Response {
	return WebSession_Response{s.List.Struct(i)}
}

func (s WebSession_Response_List) Set(i int, v WebSession_Response) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Response_List) String() string {
	str, _ := text.MarshalList(0x8193ac6cb5429c83, s.List)
	return str
}

// WebSession_Response_Future is a wrapper for a WebSession_Response promised by a client call.
type WebSession_Response_Future struct{ *capnp.Future }

func (p WebSession_Response_Future) Struct() (WebSession_Response, error) {
	s, err := p.Future.Struct()
	return WebSession_Response{s}, err
}

func (p WebSession_Response_Future) CachePolicy() WebSession_CachePolicy_Future {
	return WebSession_CachePolicy_Future{Future: p.Future.Field(6, nil)}
}

func (p WebSession_Response_Future) Content() WebSession_Response_content_Future {
	return WebSession_Response_content_Future{p.Future}
}

// WebSession_Response_content_Future is a wrapper for a WebSession_Response_content promised by a client call.
type WebSession_Response_content_Future struct{ *capnp.Future }

func (p WebSession_Response_content_Future) Struct() (WebSession_Response_content, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_content{s}, err
}

func (p WebSession_Response_content_Future) ETag() WebSession_ETag_Future {
	return WebSession_ETag_Future{Future: p.Future.Field(7, nil)}
}

func (p WebSession_Response_content_Future) Body() WebSession_Response_content_body_Future {
	return WebSession_Response_content_body_Future{p.Future}
}

// WebSession_Response_content_body_Future is a wrapper for a WebSession_Response_content_body promised by a client call.
type WebSession_Response_content_body_Future struct{ *capnp.Future }

func (p WebSession_Response_content_body_Future) Struct() (WebSession_Response_content_body, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_content_body{s}, err
}

func (p WebSession_Response_content_body_Future) Stream() util.Handle {
	return util.Handle{Client: p.Future.Field(4, nil).Client()}
}

func (p WebSession_Response_content_Future) Disposition() WebSession_Response_content_disposition_Future {
	return WebSession_Response_content_disposition_Future{p.Future}
}

// WebSession_Response_content_disposition_Future is a wrapper for a WebSession_Response_content_disposition promised by a client call.
type WebSession_Response_content_disposition_Future struct{ *capnp.Future }

func (p WebSession_Response_content_disposition_Future) Struct() (WebSession_Response_content_disposition, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_content_disposition{s}, err
}

func (p WebSession_Response_Future) NoContent() WebSession_Response_noContent_Future {
	return WebSession_Response_noContent_Future{p.Future}
}

// WebSession_Response_noContent_Future is a wrapper for a WebSession_Response_noContent promised by a client call.
type WebSession_Response_noContent_Future struct{ *capnp.Future }

func (p WebSession_Response_noContent_Future) Struct() (WebSession_Response_noContent, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_noContent{s}, err
}

func (p WebSession_Response_noContent_Future) ETag() WebSession_ETag_Future {
	return WebSession_ETag_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_Response_Future) PreconditionFailed() WebSession_Response_preconditionFailed_Future {
	return WebSession_Response_preconditionFailed_Future{p.Future}
}

// WebSession_Response_preconditionFailed_Future is a wrapper for a WebSession_Response_preconditionFailed promised by a client call.
type WebSession_Response_preconditionFailed_Future struct{ *capnp.Future }

func (p WebSession_Response_preconditionFailed_Future) Struct() (WebSession_Response_preconditionFailed, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_preconditionFailed{s}, err
}

func (p WebSession_Response_preconditionFailed_Future) MatchingETag() WebSession_ETag_Future {
	return WebSession_ETag_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_Response_Future) Redirect() WebSession_Response_redirect_Future {
	return WebSession_Response_redirect_Future{p.Future}
}

// WebSession_Response_redirect_Future is a wrapper for a WebSession_Response_redirect promised by a client call.
type WebSession_Response_redirect_Future struct{ *capnp.Future }

func (p WebSession_Response_redirect_Future) Struct() (WebSession_Response_redirect, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_redirect{s}, err
}

func (p WebSession_Response_Future) ClientError() WebSession_Response_clientError_Future {
	return WebSession_Response_clientError_Future{p.Future}
}

// WebSession_Response_clientError_Future is a wrapper for a WebSession_Response_clientError promised by a client call.
type WebSession_Response_clientError_Future struct{ *capnp.Future }

func (p WebSession_Response_clientError_Future) Struct() (WebSession_Response_clientError, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_clientError{s}, err
}

func (p WebSession_Response_clientError_Future) NonHtmlBody() WebSession_Response_ErrorBody_Future {
	return WebSession_Response_ErrorBody_Future{Future: p.Future.Field(2, nil)}
}

func (p WebSession_Response_Future) ServerError() WebSession_Response_serverError_Future {
	return WebSession_Response_serverError_Future{p.Future}
}

// WebSession_Response_serverError_Future is a wrapper for a WebSession_Response_serverError promised by a client call.
type WebSession_Response_serverError_Future struct{ *capnp.Future }

func (p WebSession_Response_serverError_Future) Struct() (WebSession_Response_serverError, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_serverError{s}, err
}

func (p WebSession_Response_serverError_Future) NonHtmlBody() WebSession_Response_ErrorBody_Future {
	return WebSession_Response_ErrorBody_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_Response_SuccessCode uint16

// WebSession_Response_SuccessCode_TypeID is the unique identifier for the type WebSession_Response_SuccessCode.
const WebSession_Response_SuccessCode_TypeID = 0x82130007ccd2888f

// Values of WebSession_Response_SuccessCode.
const (
	WebSession_Response_SuccessCode_ok             WebSession_Response_SuccessCode = 0
	WebSession_Response_SuccessCode_created        WebSession_Response_SuccessCode = 1
	WebSession_Response_SuccessCode_accepted       WebSession_Response_SuccessCode = 2
	WebSession_Response_SuccessCode_noContent      WebSession_Response_SuccessCode = 3
	WebSession_Response_SuccessCode_partialContent WebSession_Response_SuccessCode = 4
	WebSession_Response_SuccessCode_multiStatus    WebSession_Response_SuccessCode = 5
	WebSession_Response_SuccessCode_notModified    WebSession_Response_SuccessCode = 6
)

// String returns the enum's constant name.
func (c WebSession_Response_SuccessCode) String() string {
	switch c {
	case WebSession_Response_SuccessCode_ok:
		return "ok"
	case WebSession_Response_SuccessCode_created:
		return "created"
	case WebSession_Response_SuccessCode_accepted:
		return "accepted"
	case WebSession_Response_SuccessCode_noContent:
		return "noContent"
	case WebSession_Response_SuccessCode_partialContent:
		return "partialContent"
	case WebSession_Response_SuccessCode_multiStatus:
		return "multiStatus"
	case WebSession_Response_SuccessCode_notModified:
		return "notModified"

	default:
		return ""
	}
}

// WebSession_Response_SuccessCodeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func WebSession_Response_SuccessCodeFromString(c string) WebSession_Response_SuccessCode {
	switch c {
	case "ok":
		return WebSession_Response_SuccessCode_ok
	case "created":
		return WebSession_Response_SuccessCode_created
	case "accepted":
		return WebSession_Response_SuccessCode_accepted
	case "noContent":
		return WebSession_Response_SuccessCode_noContent
	case "partialContent":
		return WebSession_Response_SuccessCode_partialContent
	case "multiStatus":
		return WebSession_Response_SuccessCode_multiStatus
	case "notModified":
		return WebSession_Response_SuccessCode_notModified

	default:
		return 0
	}
}

type WebSession_Response_SuccessCode_List struct{ capnp.List }

func NewWebSession_Response_SuccessCode_List(s *capnp.Segment, sz int32) (WebSession_Response_SuccessCode_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return WebSession_Response_SuccessCode_List{l.List}, err
}

func (l WebSession_Response_SuccessCode_List) At(i int) WebSession_Response_SuccessCode {
	ul := capnp.UInt16List{List: l.List}
	return WebSession_Response_SuccessCode(ul.At(i))
}

func (l WebSession_Response_SuccessCode_List) Set(i int, v WebSession_Response_SuccessCode) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type WebSession_Response_ClientErrorCode uint16

// WebSession_Response_ClientErrorCode_TypeID is the unique identifier for the type WebSession_Response_ClientErrorCode.
const WebSession_Response_ClientErrorCode_TypeID = 0x8ea31bdb4c044f01

// Values of WebSession_Response_ClientErrorCode.
const (
	WebSession_Response_ClientErrorCode_badRequest            WebSession_Response_ClientErrorCode = 0
	WebSession_Response_ClientErrorCode_forbidden             WebSession_Response_ClientErrorCode = 1
	WebSession_Response_ClientErrorCode_notFound              WebSession_Response_ClientErrorCode = 2
	WebSession_Response_ClientErrorCode_methodNotAllowed      WebSession_Response_ClientErrorCode = 3
	WebSession_Response_ClientErrorCode_notAcceptable         WebSession_Response_ClientErrorCode = 4
	WebSession_Response_ClientErrorCode_conflict              WebSession_Response_ClientErrorCode = 5
	WebSession_Response_ClientErrorCode_gone                  WebSession_Response_ClientErrorCode = 6
	WebSession_Response_ClientErrorCode_preconditionFailed    WebSession_Response_ClientErrorCode = 11
	WebSession_Response_ClientErrorCode_requestEntityTooLarge WebSession_Response_ClientErrorCode = 7
	WebSession_Response_ClientErrorCode_requestUriTooLong     WebSession_Response_ClientErrorCode = 8
	WebSession_Response_ClientErrorCode_unsupportedMediaType  WebSession_Response_ClientErrorCode = 9
	WebSession_Response_ClientErrorCode_imATeapot             WebSession_Response_ClientErrorCode = 10
	WebSession_Response_ClientErrorCode_unprocessableEntity   WebSession_Response_ClientErrorCode = 12
)

// String returns the enum's constant name.
func (c WebSession_Response_ClientErrorCode) String() string {
	switch c {
	case WebSession_Response_ClientErrorCode_badRequest:
		return "badRequest"
	case WebSession_Response_ClientErrorCode_forbidden:
		return "forbidden"
	case WebSession_Response_ClientErrorCode_notFound:
		return "notFound"
	case WebSession_Response_ClientErrorCode_methodNotAllowed:
		return "methodNotAllowed"
	case WebSession_Response_ClientErrorCode_notAcceptable:
		return "notAcceptable"
	case WebSession_Response_ClientErrorCode_conflict:
		return "conflict"
	case WebSession_Response_ClientErrorCode_gone:
		return "gone"
	case WebSession_Response_ClientErrorCode_preconditionFailed:
		return "preconditionFailed"
	case WebSession_Response_ClientErrorCode_requestEntityTooLarge:
		return "requestEntityTooLarge"
	case WebSession_Response_ClientErrorCode_requestUriTooLong:
		return "requestUriTooLong"
	case WebSession_Response_ClientErrorCode_unsupportedMediaType:
		return "unsupportedMediaType"
	case WebSession_Response_ClientErrorCode_imATeapot:
		return "imATeapot"
	case WebSession_Response_ClientErrorCode_unprocessableEntity:
		return "unprocessableEntity"

	default:
		return ""
	}
}

// WebSession_Response_ClientErrorCodeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func WebSession_Response_ClientErrorCodeFromString(c string) WebSession_Response_ClientErrorCode {
	switch c {
	case "badRequest":
		return WebSession_Response_ClientErrorCode_badRequest
	case "forbidden":
		return WebSession_Response_ClientErrorCode_forbidden
	case "notFound":
		return WebSession_Response_ClientErrorCode_notFound
	case "methodNotAllowed":
		return WebSession_Response_ClientErrorCode_methodNotAllowed
	case "notAcceptable":
		return WebSession_Response_ClientErrorCode_notAcceptable
	case "conflict":
		return WebSession_Response_ClientErrorCode_conflict
	case "gone":
		return WebSession_Response_ClientErrorCode_gone
	case "preconditionFailed":
		return WebSession_Response_ClientErrorCode_preconditionFailed
	case "requestEntityTooLarge":
		return WebSession_Response_ClientErrorCode_requestEntityTooLarge
	case "requestUriTooLong":
		return WebSession_Response_ClientErrorCode_requestUriTooLong
	case "unsupportedMediaType":
		return WebSession_Response_ClientErrorCode_unsupportedMediaType
	case "imATeapot":
		return WebSession_Response_ClientErrorCode_imATeapot
	case "unprocessableEntity":
		return WebSession_Response_ClientErrorCode_unprocessableEntity

	default:
		return 0
	}
}

type WebSession_Response_ClientErrorCode_List struct{ capnp.List }

func NewWebSession_Response_ClientErrorCode_List(s *capnp.Segment, sz int32) (WebSession_Response_ClientErrorCode_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return WebSession_Response_ClientErrorCode_List{l.List}, err
}

func (l WebSession_Response_ClientErrorCode_List) At(i int) WebSession_Response_ClientErrorCode {
	ul := capnp.UInt16List{List: l.List}
	return WebSession_Response_ClientErrorCode(ul.At(i))
}

func (l WebSession_Response_ClientErrorCode_List) Set(i int, v WebSession_Response_ClientErrorCode) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type WebSession_Response_Header struct{ capnp.Struct }

// WebSession_Response_Header_TypeID is the unique identifier for the type WebSession_Response_Header.
const WebSession_Response_Header_TypeID = 0xb4b873147ab5ce5e

func NewWebSession_Response_Header(s *capnp.Segment) (WebSession_Response_Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_Response_Header{st}, err
}

func NewRootWebSession_Response_Header(s *capnp.Segment) (WebSession_Response_Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_Response_Header{st}, err
}

func ReadRootWebSession_Response_Header(msg *capnp.Message) (WebSession_Response_Header, error) {
	root, err := msg.Root()
	return WebSession_Response_Header{root.Struct()}, err
}

func (s WebSession_Response_Header) String() string {
	str, _ := text.Marshal(0xb4b873147ab5ce5e, s.Struct)
	return str
}

func (s WebSession_Response_Header) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_Response_Header) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Response_Header) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_Response_Header) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_Response_Header) Value() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_Header) HasValue() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_Header) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_Header) SetValue(v string) error {
	return s.Struct.SetText(1, v)
}

// WebSession_Response_Header_List is a list of WebSession_Response_Header.
type WebSession_Response_Header_List struct{ capnp.List }

// NewWebSession_Response_Header creates a new list of WebSession_Response_Header.
func NewWebSession_Response_Header_List(s *capnp.Segment, sz int32) (WebSession_Response_Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return WebSession_Response_Header_List{l}, err
}

func (s WebSession_Response_Header_List) At(i int) WebSession_Response_Header {
	return WebSession_Response_Header{s.List.Struct(i)}
}

func (s WebSession_Response_Header_List) Set(i int, v WebSession_Response_Header) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Response_Header_List) String() string {
	str, _ := text.MarshalList(0xb4b873147ab5ce5e, s.List)
	return str
}

// WebSession_Response_Header_Future is a wrapper for a WebSession_Response_Header promised by a client call.
type WebSession_Response_Header_Future struct{ *capnp.Future }

func (p WebSession_Response_Header_Future) Struct() (WebSession_Response_Header, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_Header{s}, err
}

type WebSession_Response_ErrorBody struct{ capnp.Struct }

// WebSession_Response_ErrorBody_TypeID is the unique identifier for the type WebSession_Response_ErrorBody.
const WebSession_Response_ErrorBody_TypeID = 0x9497e63b399a2c01

func NewWebSession_Response_ErrorBody(s *capnp.Segment) (WebSession_Response_ErrorBody, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_Response_ErrorBody{st}, err
}

func NewRootWebSession_Response_ErrorBody(s *capnp.Segment) (WebSession_Response_ErrorBody, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_Response_ErrorBody{st}, err
}

func ReadRootWebSession_Response_ErrorBody(msg *capnp.Message) (WebSession_Response_ErrorBody, error) {
	root, err := msg.Root()
	return WebSession_Response_ErrorBody{root.Struct()}, err
}

func (s WebSession_Response_ErrorBody) String() string {
	str, _ := text.Marshal(0x9497e63b399a2c01, s.Struct)
	return str
}

func (s WebSession_Response_ErrorBody) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s WebSession_Response_ErrorBody) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Response_ErrorBody) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s WebSession_Response_ErrorBody) Encoding() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_ErrorBody) HasEncoding() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_ErrorBody) EncodingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_ErrorBody) SetEncoding(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_Response_ErrorBody) Language() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s WebSession_Response_ErrorBody) HasLanguage() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_Response_ErrorBody) LanguageBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s WebSession_Response_ErrorBody) SetLanguage(v string) error {
	return s.Struct.SetText(2, v)
}

func (s WebSession_Response_ErrorBody) MimeType() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s WebSession_Response_ErrorBody) HasMimeType() bool {
	return s.Struct.HasPtr(3)
}

func (s WebSession_Response_ErrorBody) MimeTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s WebSession_Response_ErrorBody) SetMimeType(v string) error {
	return s.Struct.SetText(3, v)
}

// WebSession_Response_ErrorBody_List is a list of WebSession_Response_ErrorBody.
type WebSession_Response_ErrorBody_List struct{ capnp.List }

// NewWebSession_Response_ErrorBody creates a new list of WebSession_Response_ErrorBody.
func NewWebSession_Response_ErrorBody_List(s *capnp.Segment, sz int32) (WebSession_Response_ErrorBody_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return WebSession_Response_ErrorBody_List{l}, err
}

func (s WebSession_Response_ErrorBody_List) At(i int) WebSession_Response_ErrorBody {
	return WebSession_Response_ErrorBody{s.List.Struct(i)}
}

func (s WebSession_Response_ErrorBody_List) Set(i int, v WebSession_Response_ErrorBody) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Response_ErrorBody_List) String() string {
	str, _ := text.MarshalList(0x9497e63b399a2c01, s.List)
	return str
}

// WebSession_Response_ErrorBody_Future is a wrapper for a WebSession_Response_ErrorBody promised by a client call.
type WebSession_Response_ErrorBody_Future struct{ *capnp.Future }

func (p WebSession_Response_ErrorBody_Future) Struct() (WebSession_Response_ErrorBody, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_ErrorBody{s}, err
}

type WebSession_RequestStream struct{ Client *capnp.Client }

// WebSession_RequestStream_TypeID is the unique identifier for the type WebSession_RequestStream.
const WebSession_RequestStream_TypeID = 0x99ffc2f3f69a6a9f

func (c WebSession_RequestStream) GetResponse(ctx context.Context, params func(WebSession_RequestStream_getResponse_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x99ffc2f3f69a6a9f,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession.RequestStream",
			MethodName:    "getResponse",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_RequestStream_getResponse_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession_RequestStream) Write(ctx context.Context, params func(util.ByteStream_write_Params) error) (stream.StreamResult_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      0,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(util.ByteStream_write_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return stream.StreamResult_Future{Future: ans.Future()}, release
}
func (c WebSession_RequestStream) Done(ctx context.Context, params func(util.ByteStream_done_Params) error) (util.ByteStream_done_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      1,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "done",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(util.ByteStream_done_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return util.ByteStream_done_Results_Future{Future: ans.Future()}, release
}
func (c WebSession_RequestStream) ExpectSize(ctx context.Context, params func(util.ByteStream_expectSize_Params) error) (util.ByteStream_expectSize_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      2,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "expectSize",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(util.ByteStream_expectSize_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return util.ByteStream_expectSize_Results_Future{Future: ans.Future()}, release
}

func (c WebSession_RequestStream) AddRef() WebSession_RequestStream {
	return WebSession_RequestStream{
		Client: c.Client.AddRef(),
	}
}

func (c WebSession_RequestStream) Release() {
	c.Client.Release()
}

// A WebSession_RequestStream_Server is a WebSession_RequestStream with a local implementation.
type WebSession_RequestStream_Server interface {
	GetResponse(context.Context, WebSession_RequestStream_getResponse) error

	Write(context.Context, util.ByteStream_write) error

	Done(context.Context, util.ByteStream_done) error

	ExpectSize(context.Context, util.ByteStream_expectSize) error
}

// WebSession_RequestStream_NewServer creates a new Server from an implementation of WebSession_RequestStream_Server.
func WebSession_RequestStream_NewServer(s WebSession_RequestStream_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WebSession_RequestStream_Methods(nil, s), s, c, policy)
}

// WebSession_RequestStream_ServerToClient creates a new Client from an implementation of WebSession_RequestStream_Server.
// The caller is responsible for calling Release on the returned Client.
func WebSession_RequestStream_ServerToClient(s WebSession_RequestStream_Server, policy *server.Policy) WebSession_RequestStream {
	return WebSession_RequestStream{Client: capnp.NewClient(WebSession_RequestStream_NewServer(s, policy))}
}

// WebSession_RequestStream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WebSession_RequestStream_Methods(methods []server.Method, s WebSession_RequestStream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x99ffc2f3f69a6a9f,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession.RequestStream",
			MethodName:    "getResponse",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetResponse(ctx, WebSession_RequestStream_getResponse{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      0,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, util.ByteStream_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      1,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "done",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Done(ctx, util.ByteStream_done{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      2,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "expectSize",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ExpectSize(ctx, util.ByteStream_expectSize{call})
		},
	})

	return methods
}

// WebSession_RequestStream_getResponse holds the state for a server call to WebSession_RequestStream.getResponse.
// See server.Call for documentation.
type WebSession_RequestStream_getResponse struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_RequestStream_getResponse) Args() WebSession_RequestStream_getResponse_Params {
	return WebSession_RequestStream_getResponse_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_RequestStream_getResponse) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

type WebSession_RequestStream_getResponse_Params struct{ capnp.Struct }

// WebSession_RequestStream_getResponse_Params_TypeID is the unique identifier for the type WebSession_RequestStream_getResponse_Params.
const WebSession_RequestStream_getResponse_Params_TypeID = 0xe9a02a3219bdbd70

func NewWebSession_RequestStream_getResponse_Params(s *capnp.Segment) (WebSession_RequestStream_getResponse_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebSession_RequestStream_getResponse_Params{st}, err
}

func NewRootWebSession_RequestStream_getResponse_Params(s *capnp.Segment) (WebSession_RequestStream_getResponse_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebSession_RequestStream_getResponse_Params{st}, err
}

func ReadRootWebSession_RequestStream_getResponse_Params(msg *capnp.Message) (WebSession_RequestStream_getResponse_Params, error) {
	root, err := msg.Root()
	return WebSession_RequestStream_getResponse_Params{root.Struct()}, err
}

func (s WebSession_RequestStream_getResponse_Params) String() string {
	str, _ := text.Marshal(0xe9a02a3219bdbd70, s.Struct)
	return str
}

// WebSession_RequestStream_getResponse_Params_List is a list of WebSession_RequestStream_getResponse_Params.
type WebSession_RequestStream_getResponse_Params_List struct{ capnp.List }

// NewWebSession_RequestStream_getResponse_Params creates a new list of WebSession_RequestStream_getResponse_Params.
func NewWebSession_RequestStream_getResponse_Params_List(s *capnp.Segment, sz int32) (WebSession_RequestStream_getResponse_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return WebSession_RequestStream_getResponse_Params_List{l}, err
}

func (s WebSession_RequestStream_getResponse_Params_List) At(i int) WebSession_RequestStream_getResponse_Params {
	return WebSession_RequestStream_getResponse_Params{s.List.Struct(i)}
}

func (s WebSession_RequestStream_getResponse_Params_List) Set(i int, v WebSession_RequestStream_getResponse_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_RequestStream_getResponse_Params_List) String() string {
	str, _ := text.MarshalList(0xe9a02a3219bdbd70, s.List)
	return str
}

// WebSession_RequestStream_getResponse_Params_Future is a wrapper for a WebSession_RequestStream_getResponse_Params promised by a client call.
type WebSession_RequestStream_getResponse_Params_Future struct{ *capnp.Future }

func (p WebSession_RequestStream_getResponse_Params_Future) Struct() (WebSession_RequestStream_getResponse_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_RequestStream_getResponse_Params{s}, err
}

type WebSession_WebSocketStream struct{ Client *capnp.Client }

// WebSession_WebSocketStream_TypeID is the unique identifier for the type WebSession_WebSocketStream.
const WebSession_WebSocketStream_TypeID = 0xf001fc1d5e574a07

func (c WebSession_WebSocketStream) SendBytes(ctx context.Context, params func(WebSession_WebSocketStream_sendBytes_Params) error) (stream.StreamResult_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf001fc1d5e574a07,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession.WebSocketStream",
			MethodName:    "sendBytes",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_WebSocketStream_sendBytes_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return stream.StreamResult_Future{Future: ans.Future()}, release
}

func (c WebSession_WebSocketStream) AddRef() WebSession_WebSocketStream {
	return WebSession_WebSocketStream{
		Client: c.Client.AddRef(),
	}
}

func (c WebSession_WebSocketStream) Release() {
	c.Client.Release()
}

// A WebSession_WebSocketStream_Server is a WebSession_WebSocketStream with a local implementation.
type WebSession_WebSocketStream_Server interface {
	SendBytes(context.Context, WebSession_WebSocketStream_sendBytes) error
}

// WebSession_WebSocketStream_NewServer creates a new Server from an implementation of WebSession_WebSocketStream_Server.
func WebSession_WebSocketStream_NewServer(s WebSession_WebSocketStream_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WebSession_WebSocketStream_Methods(nil, s), s, c, policy)
}

// WebSession_WebSocketStream_ServerToClient creates a new Client from an implementation of WebSession_WebSocketStream_Server.
// The caller is responsible for calling Release on the returned Client.
func WebSession_WebSocketStream_ServerToClient(s WebSession_WebSocketStream_Server, policy *server.Policy) WebSession_WebSocketStream {
	return WebSession_WebSocketStream{Client: capnp.NewClient(WebSession_WebSocketStream_NewServer(s, policy))}
}

// WebSession_WebSocketStream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WebSession_WebSocketStream_Methods(methods []server.Method, s WebSession_WebSocketStream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf001fc1d5e574a07,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession.WebSocketStream",
			MethodName:    "sendBytes",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SendBytes(ctx, WebSession_WebSocketStream_sendBytes{call})
		},
	})

	return methods
}

// WebSession_WebSocketStream_sendBytes holds the state for a server call to WebSession_WebSocketStream.sendBytes.
// See server.Call for documentation.
type WebSession_WebSocketStream_sendBytes struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_WebSocketStream_sendBytes) Args() WebSession_WebSocketStream_sendBytes_Params {
	return WebSession_WebSocketStream_sendBytes_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_WebSocketStream_sendBytes) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult{Struct: r}, err
}

type WebSession_WebSocketStream_sendBytes_Params struct{ capnp.Struct }

// WebSession_WebSocketStream_sendBytes_Params_TypeID is the unique identifier for the type WebSession_WebSocketStream_sendBytes_Params.
const WebSession_WebSocketStream_sendBytes_Params_TypeID = 0x9a712ce3fcad8cd8

func NewWebSession_WebSocketStream_sendBytes_Params(s *capnp.Segment) (WebSession_WebSocketStream_sendBytes_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_WebSocketStream_sendBytes_Params{st}, err
}

func NewRootWebSession_WebSocketStream_sendBytes_Params(s *capnp.Segment) (WebSession_WebSocketStream_sendBytes_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_WebSocketStream_sendBytes_Params{st}, err
}

func ReadRootWebSession_WebSocketStream_sendBytes_Params(msg *capnp.Message) (WebSession_WebSocketStream_sendBytes_Params, error) {
	root, err := msg.Root()
	return WebSession_WebSocketStream_sendBytes_Params{root.Struct()}, err
}

func (s WebSession_WebSocketStream_sendBytes_Params) String() string {
	str, _ := text.Marshal(0x9a712ce3fcad8cd8, s.Struct)
	return str
}

func (s WebSession_WebSocketStream_sendBytes_Params) Message() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s WebSession_WebSocketStream_sendBytes_Params) HasMessage() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_WebSocketStream_sendBytes_Params) SetMessage(v []byte) error {
	return s.Struct.SetData(0, v)
}

// WebSession_WebSocketStream_sendBytes_Params_List is a list of WebSession_WebSocketStream_sendBytes_Params.
type WebSession_WebSocketStream_sendBytes_Params_List struct{ capnp.List }

// NewWebSession_WebSocketStream_sendBytes_Params creates a new list of WebSession_WebSocketStream_sendBytes_Params.
func NewWebSession_WebSocketStream_sendBytes_Params_List(s *capnp.Segment, sz int32) (WebSession_WebSocketStream_sendBytes_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return WebSession_WebSocketStream_sendBytes_Params_List{l}, err
}

func (s WebSession_WebSocketStream_sendBytes_Params_List) At(i int) WebSession_WebSocketStream_sendBytes_Params {
	return WebSession_WebSocketStream_sendBytes_Params{s.List.Struct(i)}
}

func (s WebSession_WebSocketStream_sendBytes_Params_List) Set(i int, v WebSession_WebSocketStream_sendBytes_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_WebSocketStream_sendBytes_Params_List) String() string {
	str, _ := text.MarshalList(0x9a712ce3fcad8cd8, s.List)
	return str
}

// WebSession_WebSocketStream_sendBytes_Params_Future is a wrapper for a WebSession_WebSocketStream_sendBytes_Params promised by a client call.
type WebSession_WebSocketStream_sendBytes_Params_Future struct{ *capnp.Future }

func (p WebSession_WebSocketStream_sendBytes_Params_Future) Struct() (WebSession_WebSocketStream_sendBytes_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_WebSocketStream_sendBytes_Params{s}, err
}

type WebSession_CachePolicy struct{ capnp.Struct }

// WebSession_CachePolicy_TypeID is the unique identifier for the type WebSession_CachePolicy.
const WebSession_CachePolicy_TypeID = 0xb37b21e300864885

func NewWebSession_CachePolicy(s *capnp.Segment) (WebSession_CachePolicy, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebSession_CachePolicy{st}, err
}

func NewRootWebSession_CachePolicy(s *capnp.Segment) (WebSession_CachePolicy, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebSession_CachePolicy{st}, err
}

func ReadRootWebSession_CachePolicy(msg *capnp.Message) (WebSession_CachePolicy, error) {
	root, err := msg.Root()
	return WebSession_CachePolicy{root.Struct()}, err
}

func (s WebSession_CachePolicy) String() string {
	str, _ := text.Marshal(0xb37b21e300864885, s.Struct)
	return str
}

func (s WebSession_CachePolicy) WithCheck() WebSession_CachePolicy_Scope {
	return WebSession_CachePolicy_Scope(s.Struct.Uint16(0))
}

func (s WebSession_CachePolicy) SetWithCheck(v WebSession_CachePolicy_Scope) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s WebSession_CachePolicy) Permanent() WebSession_CachePolicy_Scope {
	return WebSession_CachePolicy_Scope(s.Struct.Uint16(2))
}

func (s WebSession_CachePolicy) SetPermanent(v WebSession_CachePolicy_Scope) {
	s.Struct.SetUint16(2, uint16(v))
}

func (s WebSession_CachePolicy) VariesOnCookie() bool {
	return s.Struct.Bit(32)
}

func (s WebSession_CachePolicy) SetVariesOnCookie(v bool) {
	s.Struct.SetBit(32, v)
}

func (s WebSession_CachePolicy) VariesOnAccept() bool {
	return s.Struct.Bit(33)
}

func (s WebSession_CachePolicy) SetVariesOnAccept(v bool) {
	s.Struct.SetBit(33, v)
}

// WebSession_CachePolicy_List is a list of WebSession_CachePolicy.
type WebSession_CachePolicy_List struct{ capnp.List }

// NewWebSession_CachePolicy creates a new list of WebSession_CachePolicy.
func NewWebSession_CachePolicy_List(s *capnp.Segment, sz int32) (WebSession_CachePolicy_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return WebSession_CachePolicy_List{l}, err
}

func (s WebSession_CachePolicy_List) At(i int) WebSession_CachePolicy {
	return WebSession_CachePolicy{s.List.Struct(i)}
}

func (s WebSession_CachePolicy_List) Set(i int, v WebSession_CachePolicy) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_CachePolicy_List) String() string {
	str, _ := text.MarshalList(0xb37b21e300864885, s.List)
	return str
}

// WebSession_CachePolicy_Future is a wrapper for a WebSession_CachePolicy promised by a client call.
type WebSession_CachePolicy_Future struct{ *capnp.Future }

func (p WebSession_CachePolicy_Future) Struct() (WebSession_CachePolicy, error) {
	s, err := p.Future.Struct()
	return WebSession_CachePolicy{s}, err
}

type WebSession_CachePolicy_Scope uint16

// WebSession_CachePolicy_Scope_TypeID is the unique identifier for the type WebSession_CachePolicy_Scope.
const WebSession_CachePolicy_Scope_TypeID = 0x81535505f60de028

// Values of WebSession_CachePolicy_Scope.
const (
	WebSession_CachePolicy_Scope_none          WebSession_CachePolicy_Scope = 0
	WebSession_CachePolicy_Scope_perSession    WebSession_CachePolicy_Scope = 1
	WebSession_CachePolicy_Scope_perUser       WebSession_CachePolicy_Scope = 2
	WebSession_CachePolicy_Scope_perAppVersion WebSession_CachePolicy_Scope = 3
	WebSession_CachePolicy_Scope_universal     WebSession_CachePolicy_Scope = 4
)

// String returns the enum's constant name.
func (c WebSession_CachePolicy_Scope) String() string {
	switch c {
	case WebSession_CachePolicy_Scope_none:
		return "none"
	case WebSession_CachePolicy_Scope_perSession:
		return "perSession"
	case WebSession_CachePolicy_Scope_perUser:
		return "perUser"
	case WebSession_CachePolicy_Scope_perAppVersion:
		return "perAppVersion"
	case WebSession_CachePolicy_Scope_universal:
		return "universal"

	default:
		return ""
	}
}

// WebSession_CachePolicy_ScopeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func WebSession_CachePolicy_ScopeFromString(c string) WebSession_CachePolicy_Scope {
	switch c {
	case "none":
		return WebSession_CachePolicy_Scope_none
	case "perSession":
		return WebSession_CachePolicy_Scope_perSession
	case "perUser":
		return WebSession_CachePolicy_Scope_perUser
	case "perAppVersion":
		return WebSession_CachePolicy_Scope_perAppVersion
	case "universal":
		return WebSession_CachePolicy_Scope_universal

	default:
		return 0
	}
}

type WebSession_CachePolicy_Scope_List struct{ capnp.List }

func NewWebSession_CachePolicy_Scope_List(s *capnp.Segment, sz int32) (WebSession_CachePolicy_Scope_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return WebSession_CachePolicy_Scope_List{l.List}, err
}

func (l WebSession_CachePolicy_Scope_List) At(i int) WebSession_CachePolicy_Scope {
	ul := capnp.UInt16List{List: l.List}
	return WebSession_CachePolicy_Scope(ul.At(i))
}

func (l WebSession_CachePolicy_Scope_List) Set(i int, v WebSession_CachePolicy_Scope) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type WebSession_Options struct{ capnp.Struct }

// WebSession_Options_TypeID is the unique identifier for the type WebSession_Options.
const WebSession_Options_TypeID = 0xe9ff06beec4e73d6

func NewWebSession_Options(s *capnp.Segment) (WebSession_Options, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_Options{st}, err
}

func NewRootWebSession_Options(s *capnp.Segment) (WebSession_Options, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_Options{st}, err
}

func ReadRootWebSession_Options(msg *capnp.Message) (WebSession_Options, error) {
	root, err := msg.Root()
	return WebSession_Options{root.Struct()}, err
}

func (s WebSession_Options) String() string {
	str, _ := text.Marshal(0xe9ff06beec4e73d6, s.Struct)
	return str
}

func (s WebSession_Options) DavClass1() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_Options) SetDavClass1(v bool) {
	s.Struct.SetBit(0, v)
}

func (s WebSession_Options) DavClass2() bool {
	return s.Struct.Bit(1)
}

func (s WebSession_Options) SetDavClass2(v bool) {
	s.Struct.SetBit(1, v)
}

func (s WebSession_Options) DavClass3() bool {
	return s.Struct.Bit(2)
}

func (s WebSession_Options) SetDavClass3(v bool) {
	s.Struct.SetBit(2, v)
}

func (s WebSession_Options) DavExtensions() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s WebSession_Options) HasDavExtensions() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Options) SetDavExtensions(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewDavExtensions sets the davExtensions field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s WebSession_Options) NewDavExtensions(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// WebSession_Options_List is a list of WebSession_Options.
type WebSession_Options_List struct{ capnp.List }

// NewWebSession_Options creates a new list of WebSession_Options.
func NewWebSession_Options_List(s *capnp.Segment, sz int32) (WebSession_Options_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return WebSession_Options_List{l}, err
}

func (s WebSession_Options_List) At(i int) WebSession_Options {
	return WebSession_Options{s.List.Struct(i)}
}

func (s WebSession_Options_List) Set(i int, v WebSession_Options) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Options_List) String() string {
	str, _ := text.MarshalList(0xe9ff06beec4e73d6, s.List)
	return str
}

// WebSession_Options_Future is a wrapper for a WebSession_Options promised by a client call.
type WebSession_Options_Future struct{ *capnp.Future }

func (p WebSession_Options_Future) Struct() (WebSession_Options, error) {
	s, err := p.Future.Struct()
	return WebSession_Options{s}, err
}

type WebSession_PropfindDepth uint16

// WebSession_PropfindDepth_TypeID is the unique identifier for the type WebSession_PropfindDepth.
const WebSession_PropfindDepth_TypeID = 0xb39cc44599b3a41b

// Values of WebSession_PropfindDepth.
const (
	WebSession_PropfindDepth_infinity WebSession_PropfindDepth = 0
	WebSession_PropfindDepth_zero     WebSession_PropfindDepth = 1
	WebSession_PropfindDepth_one      WebSession_PropfindDepth = 2
)

// String returns the enum's constant name.
func (c WebSession_PropfindDepth) String() string {
	switch c {
	case WebSession_PropfindDepth_infinity:
		return "infinity"
	case WebSession_PropfindDepth_zero:
		return "zero"
	case WebSession_PropfindDepth_one:
		return "one"

	default:
		return ""
	}
}

// WebSession_PropfindDepthFromString returns the enum value with a name,
// or the zero value if there's no such value.
func WebSession_PropfindDepthFromString(c string) WebSession_PropfindDepth {
	switch c {
	case "infinity":
		return WebSession_PropfindDepth_infinity
	case "zero":
		return WebSession_PropfindDepth_zero
	case "one":
		return WebSession_PropfindDepth_one

	default:
		return 0
	}
}

type WebSession_PropfindDepth_List struct{ capnp.List }

func NewWebSession_PropfindDepth_List(s *capnp.Segment, sz int32) (WebSession_PropfindDepth_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return WebSession_PropfindDepth_List{l.List}, err
}

func (l WebSession_PropfindDepth_List) At(i int) WebSession_PropfindDepth {
	ul := capnp.UInt16List{List: l.List}
	return WebSession_PropfindDepth(ul.At(i))
}

func (l WebSession_PropfindDepth_List) Set(i int, v WebSession_PropfindDepth) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type WebSession_get_Params struct{ capnp.Struct }

// WebSession_get_Params_TypeID is the unique identifier for the type WebSession_get_Params.
const WebSession_get_Params_TypeID = 0xcd94acddf4778328

func NewWebSession_get_Params(s *capnp.Segment) (WebSession_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return WebSession_get_Params{st}, err
}

func NewRootWebSession_get_Params(s *capnp.Segment) (WebSession_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return WebSession_get_Params{st}, err
}

func ReadRootWebSession_get_Params(msg *capnp.Message) (WebSession_get_Params, error) {
	root, err := msg.Root()
	return WebSession_get_Params{root.Struct()}, err
}

func (s WebSession_get_Params) String() string {
	str, _ := text.Marshal(0xcd94acddf4778328, s.Struct)
	return str
}

func (s WebSession_get_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_get_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_get_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_get_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_get_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_get_Params) HasContext() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_get_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_get_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_get_Params) IgnoreBody() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_get_Params) SetIgnoreBody(v bool) {
	s.Struct.SetBit(0, v)
}

// WebSession_get_Params_List is a list of WebSession_get_Params.
type WebSession_get_Params_List struct{ capnp.List }

// NewWebSession_get_Params creates a new list of WebSession_get_Params.
func NewWebSession_get_Params_List(s *capnp.Segment, sz int32) (WebSession_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return WebSession_get_Params_List{l}, err
}

func (s WebSession_get_Params_List) At(i int) WebSession_get_Params {
	return WebSession_get_Params{s.List.Struct(i)}
}

func (s WebSession_get_Params_List) Set(i int, v WebSession_get_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_get_Params_List) String() string {
	str, _ := text.MarshalList(0xcd94acddf4778328, s.List)
	return str
}

// WebSession_get_Params_Future is a wrapper for a WebSession_get_Params promised by a client call.
type WebSession_get_Params_Future struct{ *capnp.Future }

func (p WebSession_get_Params_Future) Struct() (WebSession_get_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_get_Params{s}, err
}

func (p WebSession_get_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(1, nil)}
}

type WebSession_post_Params struct{ capnp.Struct }

// WebSession_post_Params_TypeID is the unique identifier for the type WebSession_post_Params.
const WebSession_post_Params_TypeID = 0xaa6ef20a62c1cafd

func NewWebSession_post_Params(s *capnp.Segment) (WebSession_post_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_post_Params{st}, err
}

func NewRootWebSession_post_Params(s *capnp.Segment) (WebSession_post_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_post_Params{st}, err
}

func ReadRootWebSession_post_Params(msg *capnp.Message) (WebSession_post_Params, error) {
	root, err := msg.Root()
	return WebSession_post_Params{root.Struct()}, err
}

func (s WebSession_post_Params) String() string {
	str, _ := text.Marshal(0xaa6ef20a62c1cafd, s.Struct)
	return str
}

func (s WebSession_post_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_post_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_post_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_post_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_post_Params) Content() (WebSession_PostContent, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_PostContent{Struct: p.Struct()}, err
}

func (s WebSession_post_Params) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_post_Params) SetContent(v WebSession_PostContent) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContent sets the content field to a newly
// allocated WebSession_PostContent struct, preferring placement in s's segment.
func (s WebSession_post_Params) NewContent() (WebSession_PostContent, error) {
	ss, err := NewWebSession_PostContent(s.Struct.Segment())
	if err != nil {
		return WebSession_PostContent{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_post_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_post_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_post_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_post_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_post_Params_List is a list of WebSession_post_Params.
type WebSession_post_Params_List struct{ capnp.List }

// NewWebSession_post_Params creates a new list of WebSession_post_Params.
func NewWebSession_post_Params_List(s *capnp.Segment, sz int32) (WebSession_post_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_post_Params_List{l}, err
}

func (s WebSession_post_Params_List) At(i int) WebSession_post_Params {
	return WebSession_post_Params{s.List.Struct(i)}
}

func (s WebSession_post_Params_List) Set(i int, v WebSession_post_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_post_Params_List) String() string {
	str, _ := text.MarshalList(0xaa6ef20a62c1cafd, s.List)
	return str
}

// WebSession_post_Params_Future is a wrapper for a WebSession_post_Params promised by a client call.
type WebSession_post_Params_Future struct{ *capnp.Future }

func (p WebSession_post_Params_Future) Struct() (WebSession_post_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_post_Params{s}, err
}

func (p WebSession_post_Params_Future) Content() WebSession_PostContent_Future {
	return WebSession_PostContent_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_post_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_openWebSocket_Params struct{ capnp.Struct }

// WebSession_openWebSocket_Params_TypeID is the unique identifier for the type WebSession_openWebSocket_Params.
const WebSession_openWebSocket_Params_TypeID = 0xc7c9c9b19d935e79

func NewWebSession_openWebSocket_Params(s *capnp.Segment) (WebSession_openWebSocket_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_openWebSocket_Params{st}, err
}

func NewRootWebSession_openWebSocket_Params(s *capnp.Segment) (WebSession_openWebSocket_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_openWebSocket_Params{st}, err
}

func ReadRootWebSession_openWebSocket_Params(msg *capnp.Message) (WebSession_openWebSocket_Params, error) {
	root, err := msg.Root()
	return WebSession_openWebSocket_Params{root.Struct()}, err
}

func (s WebSession_openWebSocket_Params) String() string {
	str, _ := text.Marshal(0xc7c9c9b19d935e79, s.Struct)
	return str
}

func (s WebSession_openWebSocket_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_openWebSocket_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_openWebSocket_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_openWebSocket_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_openWebSocket_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_openWebSocket_Params) HasContext() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_openWebSocket_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_openWebSocket_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_openWebSocket_Params) Protocol() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s WebSession_openWebSocket_Params) HasProtocol() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_openWebSocket_Params) SetProtocol(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewProtocol sets the protocol field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s WebSession_openWebSocket_Params) NewProtocol(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s WebSession_openWebSocket_Params) ClientStream() WebSession_WebSocketStream {
	p, _ := s.Struct.Ptr(3)
	return WebSession_WebSocketStream{Client: p.Interface().Client()}
}

func (s WebSession_openWebSocket_Params) HasClientStream() bool {
	return s.Struct.HasPtr(3)
}

func (s WebSession_openWebSocket_Params) SetClientStream(v WebSession_WebSocketStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(3, in.ToPtr())
}

// WebSession_openWebSocket_Params_List is a list of WebSession_openWebSocket_Params.
type WebSession_openWebSocket_Params_List struct{ capnp.List }

// NewWebSession_openWebSocket_Params creates a new list of WebSession_openWebSocket_Params.
func NewWebSession_openWebSocket_Params_List(s *capnp.Segment, sz int32) (WebSession_openWebSocket_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return WebSession_openWebSocket_Params_List{l}, err
}

func (s WebSession_openWebSocket_Params_List) At(i int) WebSession_openWebSocket_Params {
	return WebSession_openWebSocket_Params{s.List.Struct(i)}
}

func (s WebSession_openWebSocket_Params_List) Set(i int, v WebSession_openWebSocket_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_openWebSocket_Params_List) String() string {
	str, _ := text.MarshalList(0xc7c9c9b19d935e79, s.List)
	return str
}

// WebSession_openWebSocket_Params_Future is a wrapper for a WebSession_openWebSocket_Params promised by a client call.
type WebSession_openWebSocket_Params_Future struct{ *capnp.Future }

func (p WebSession_openWebSocket_Params_Future) Struct() (WebSession_openWebSocket_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_openWebSocket_Params{s}, err
}

func (p WebSession_openWebSocket_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_openWebSocket_Params_Future) ClientStream() WebSession_WebSocketStream {
	return WebSession_WebSocketStream{Client: p.Future.Field(3, nil).Client()}
}

type WebSession_openWebSocket_Results struct{ capnp.Struct }

// WebSession_openWebSocket_Results_TypeID is the unique identifier for the type WebSession_openWebSocket_Results.
const WebSession_openWebSocket_Results_TypeID = 0xcc561276d31b392b

func NewWebSession_openWebSocket_Results(s *capnp.Segment) (WebSession_openWebSocket_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_openWebSocket_Results{st}, err
}

func NewRootWebSession_openWebSocket_Results(s *capnp.Segment) (WebSession_openWebSocket_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_openWebSocket_Results{st}, err
}

func ReadRootWebSession_openWebSocket_Results(msg *capnp.Message) (WebSession_openWebSocket_Results, error) {
	root, err := msg.Root()
	return WebSession_openWebSocket_Results{root.Struct()}, err
}

func (s WebSession_openWebSocket_Results) String() string {
	str, _ := text.Marshal(0xcc561276d31b392b, s.Struct)
	return str
}

func (s WebSession_openWebSocket_Results) Protocol() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s WebSession_openWebSocket_Results) HasProtocol() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_openWebSocket_Results) SetProtocol(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewProtocol sets the protocol field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s WebSession_openWebSocket_Results) NewProtocol(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s WebSession_openWebSocket_Results) ServerStream() WebSession_WebSocketStream {
	p, _ := s.Struct.Ptr(1)
	return WebSession_WebSocketStream{Client: p.Interface().Client()}
}

func (s WebSession_openWebSocket_Results) HasServerStream() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_openWebSocket_Results) SetServerStream(v WebSession_WebSocketStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// WebSession_openWebSocket_Results_List is a list of WebSession_openWebSocket_Results.
type WebSession_openWebSocket_Results_List struct{ capnp.List }

// NewWebSession_openWebSocket_Results creates a new list of WebSession_openWebSocket_Results.
func NewWebSession_openWebSocket_Results_List(s *capnp.Segment, sz int32) (WebSession_openWebSocket_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return WebSession_openWebSocket_Results_List{l}, err
}

func (s WebSession_openWebSocket_Results_List) At(i int) WebSession_openWebSocket_Results {
	return WebSession_openWebSocket_Results{s.List.Struct(i)}
}

func (s WebSession_openWebSocket_Results_List) Set(i int, v WebSession_openWebSocket_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_openWebSocket_Results_List) String() string {
	str, _ := text.MarshalList(0xcc561276d31b392b, s.List)
	return str
}

// WebSession_openWebSocket_Results_Future is a wrapper for a WebSession_openWebSocket_Results promised by a client call.
type WebSession_openWebSocket_Results_Future struct{ *capnp.Future }

func (p WebSession_openWebSocket_Results_Future) Struct() (WebSession_openWebSocket_Results, error) {
	s, err := p.Future.Struct()
	return WebSession_openWebSocket_Results{s}, err
}

func (p WebSession_openWebSocket_Results_Future) ServerStream() WebSession_WebSocketStream {
	return WebSession_WebSocketStream{Client: p.Future.Field(1, nil).Client()}
}

type WebSession_put_Params struct{ capnp.Struct }

// WebSession_put_Params_TypeID is the unique identifier for the type WebSession_put_Params.
const WebSession_put_Params_TypeID = 0xf1c587295608596e

func NewWebSession_put_Params(s *capnp.Segment) (WebSession_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_put_Params{st}, err
}

func NewRootWebSession_put_Params(s *capnp.Segment) (WebSession_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_put_Params{st}, err
}

func ReadRootWebSession_put_Params(msg *capnp.Message) (WebSession_put_Params, error) {
	root, err := msg.Root()
	return WebSession_put_Params{root.Struct()}, err
}

func (s WebSession_put_Params) String() string {
	str, _ := text.Marshal(0xf1c587295608596e, s.Struct)
	return str
}

func (s WebSession_put_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_put_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_put_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_put_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_put_Params) Content() (WebSession_PutContent, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_PutContent{Struct: p.Struct()}, err
}

func (s WebSession_put_Params) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_put_Params) SetContent(v WebSession_PutContent) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContent sets the content field to a newly
// allocated WebSession_PutContent struct, preferring placement in s's segment.
func (s WebSession_put_Params) NewContent() (WebSession_PutContent, error) {
	ss, err := NewWebSession_PutContent(s.Struct.Segment())
	if err != nil {
		return WebSession_PutContent{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_put_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_put_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_put_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_put_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_put_Params_List is a list of WebSession_put_Params.
type WebSession_put_Params_List struct{ capnp.List }

// NewWebSession_put_Params creates a new list of WebSession_put_Params.
func NewWebSession_put_Params_List(s *capnp.Segment, sz int32) (WebSession_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_put_Params_List{l}, err
}

func (s WebSession_put_Params_List) At(i int) WebSession_put_Params {
	return WebSession_put_Params{s.List.Struct(i)}
}

func (s WebSession_put_Params_List) Set(i int, v WebSession_put_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_put_Params_List) String() string {
	str, _ := text.MarshalList(0xf1c587295608596e, s.List)
	return str
}

// WebSession_put_Params_Future is a wrapper for a WebSession_put_Params promised by a client call.
type WebSession_put_Params_Future struct{ *capnp.Future }

func (p WebSession_put_Params_Future) Struct() (WebSession_put_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_put_Params{s}, err
}

func (p WebSession_put_Params_Future) Content() WebSession_PutContent_Future {
	return WebSession_PutContent_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_put_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_delete_Params struct{ capnp.Struct }

// WebSession_delete_Params_TypeID is the unique identifier for the type WebSession_delete_Params.
const WebSession_delete_Params_TypeID = 0xeba76bffb27b1975

func NewWebSession_delete_Params(s *capnp.Segment) (WebSession_delete_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_delete_Params{st}, err
}

func NewRootWebSession_delete_Params(s *capnp.Segment) (WebSession_delete_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_delete_Params{st}, err
}

func ReadRootWebSession_delete_Params(msg *capnp.Message) (WebSession_delete_Params, error) {
	root, err := msg.Root()
	return WebSession_delete_Params{root.Struct()}, err
}

func (s WebSession_delete_Params) String() string {
	str, _ := text.Marshal(0xeba76bffb27b1975, s.Struct)
	return str
}

func (s WebSession_delete_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_delete_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_delete_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_delete_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_delete_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_delete_Params) HasContext() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_delete_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_delete_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_delete_Params_List is a list of WebSession_delete_Params.
type WebSession_delete_Params_List struct{ capnp.List }

// NewWebSession_delete_Params creates a new list of WebSession_delete_Params.
func NewWebSession_delete_Params_List(s *capnp.Segment, sz int32) (WebSession_delete_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return WebSession_delete_Params_List{l}, err
}

func (s WebSession_delete_Params_List) At(i int) WebSession_delete_Params {
	return WebSession_delete_Params{s.List.Struct(i)}
}

func (s WebSession_delete_Params_List) Set(i int, v WebSession_delete_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_delete_Params_List) String() string {
	str, _ := text.MarshalList(0xeba76bffb27b1975, s.List)
	return str
}

// WebSession_delete_Params_Future is a wrapper for a WebSession_delete_Params promised by a client call.
type WebSession_delete_Params_Future struct{ *capnp.Future }

func (p WebSession_delete_Params_Future) Struct() (WebSession_delete_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_delete_Params{s}, err
}

func (p WebSession_delete_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(1, nil)}
}

type WebSession_postStreaming_Params struct{ capnp.Struct }

// WebSession_postStreaming_Params_TypeID is the unique identifier for the type WebSession_postStreaming_Params.
const WebSession_postStreaming_Params_TypeID = 0xd26a7affce43b1c0

func NewWebSession_postStreaming_Params(s *capnp.Segment) (WebSession_postStreaming_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_postStreaming_Params{st}, err
}

func NewRootWebSession_postStreaming_Params(s *capnp.Segment) (WebSession_postStreaming_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_postStreaming_Params{st}, err
}

func ReadRootWebSession_postStreaming_Params(msg *capnp.Message) (WebSession_postStreaming_Params, error) {
	root, err := msg.Root()
	return WebSession_postStreaming_Params{root.Struct()}, err
}

func (s WebSession_postStreaming_Params) String() string {
	str, _ := text.Marshal(0xd26a7affce43b1c0, s.Struct)
	return str
}

func (s WebSession_postStreaming_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_postStreaming_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_postStreaming_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_postStreaming_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_postStreaming_Params) MimeType() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_postStreaming_Params) HasMimeType() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_postStreaming_Params) MimeTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_postStreaming_Params) SetMimeType(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_postStreaming_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_postStreaming_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_postStreaming_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_postStreaming_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_postStreaming_Params) Encoding() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s WebSession_postStreaming_Params) HasEncoding() bool {
	return s.Struct.HasPtr(3)
}

func (s WebSession_postStreaming_Params) EncodingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s WebSession_postStreaming_Params) SetEncoding(v string) error {
	return s.Struct.SetText(3, v)
}

// WebSession_postStreaming_Params_List is a list of WebSession_postStreaming_Params.
type WebSession_postStreaming_Params_List struct{ capnp.List }

// NewWebSession_postStreaming_Params creates a new list of WebSession_postStreaming_Params.
func NewWebSession_postStreaming_Params_List(s *capnp.Segment, sz int32) (WebSession_postStreaming_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return WebSession_postStreaming_Params_List{l}, err
}

func (s WebSession_postStreaming_Params_List) At(i int) WebSession_postStreaming_Params {
	return WebSession_postStreaming_Params{s.List.Struct(i)}
}

func (s WebSession_postStreaming_Params_List) Set(i int, v WebSession_postStreaming_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_postStreaming_Params_List) String() string {
	str, _ := text.MarshalList(0xd26a7affce43b1c0, s.List)
	return str
}

// WebSession_postStreaming_Params_Future is a wrapper for a WebSession_postStreaming_Params promised by a client call.
type WebSession_postStreaming_Params_Future struct{ *capnp.Future }

func (p WebSession_postStreaming_Params_Future) Struct() (WebSession_postStreaming_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_postStreaming_Params{s}, err
}

func (p WebSession_postStreaming_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_postStreaming_Results struct{ capnp.Struct }

// WebSession_postStreaming_Results_TypeID is the unique identifier for the type WebSession_postStreaming_Results.
const WebSession_postStreaming_Results_TypeID = 0xbf0e0653dc266205

func NewWebSession_postStreaming_Results(s *capnp.Segment) (WebSession_postStreaming_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_postStreaming_Results{st}, err
}

func NewRootWebSession_postStreaming_Results(s *capnp.Segment) (WebSession_postStreaming_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_postStreaming_Results{st}, err
}

func ReadRootWebSession_postStreaming_Results(msg *capnp.Message) (WebSession_postStreaming_Results, error) {
	root, err := msg.Root()
	return WebSession_postStreaming_Results{root.Struct()}, err
}

func (s WebSession_postStreaming_Results) String() string {
	str, _ := text.Marshal(0xbf0e0653dc266205, s.Struct)
	return str
}

func (s WebSession_postStreaming_Results) Stream() WebSession_RequestStream {
	p, _ := s.Struct.Ptr(0)
	return WebSession_RequestStream{Client: p.Interface().Client()}
}

func (s WebSession_postStreaming_Results) HasStream() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_postStreaming_Results) SetStream(v WebSession_RequestStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// WebSession_postStreaming_Results_List is a list of WebSession_postStreaming_Results.
type WebSession_postStreaming_Results_List struct{ capnp.List }

// NewWebSession_postStreaming_Results creates a new list of WebSession_postStreaming_Results.
func NewWebSession_postStreaming_Results_List(s *capnp.Segment, sz int32) (WebSession_postStreaming_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return WebSession_postStreaming_Results_List{l}, err
}

func (s WebSession_postStreaming_Results_List) At(i int) WebSession_postStreaming_Results {
	return WebSession_postStreaming_Results{s.List.Struct(i)}
}

func (s WebSession_postStreaming_Results_List) Set(i int, v WebSession_postStreaming_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_postStreaming_Results_List) String() string {
	str, _ := text.MarshalList(0xbf0e0653dc266205, s.List)
	return str
}

// WebSession_postStreaming_Results_Future is a wrapper for a WebSession_postStreaming_Results promised by a client call.
type WebSession_postStreaming_Results_Future struct{ *capnp.Future }

func (p WebSession_postStreaming_Results_Future) Struct() (WebSession_postStreaming_Results, error) {
	s, err := p.Future.Struct()
	return WebSession_postStreaming_Results{s}, err
}

func (p WebSession_postStreaming_Results_Future) Stream() WebSession_RequestStream {
	return WebSession_RequestStream{Client: p.Future.Field(0, nil).Client()}
}

type WebSession_putStreaming_Params struct{ capnp.Struct }

// WebSession_putStreaming_Params_TypeID is the unique identifier for the type WebSession_putStreaming_Params.
const WebSession_putStreaming_Params_TypeID = 0xa1ece076a7105939

func NewWebSession_putStreaming_Params(s *capnp.Segment) (WebSession_putStreaming_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_putStreaming_Params{st}, err
}

func NewRootWebSession_putStreaming_Params(s *capnp.Segment) (WebSession_putStreaming_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_putStreaming_Params{st}, err
}

func ReadRootWebSession_putStreaming_Params(msg *capnp.Message) (WebSession_putStreaming_Params, error) {
	root, err := msg.Root()
	return WebSession_putStreaming_Params{root.Struct()}, err
}

func (s WebSession_putStreaming_Params) String() string {
	str, _ := text.Marshal(0xa1ece076a7105939, s.Struct)
	return str
}

func (s WebSession_putStreaming_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_putStreaming_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_putStreaming_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_putStreaming_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_putStreaming_Params) MimeType() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_putStreaming_Params) HasMimeType() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_putStreaming_Params) MimeTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_putStreaming_Params) SetMimeType(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_putStreaming_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_putStreaming_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_putStreaming_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_putStreaming_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_putStreaming_Params) Encoding() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s WebSession_putStreaming_Params) HasEncoding() bool {
	return s.Struct.HasPtr(3)
}

func (s WebSession_putStreaming_Params) EncodingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s WebSession_putStreaming_Params) SetEncoding(v string) error {
	return s.Struct.SetText(3, v)
}

// WebSession_putStreaming_Params_List is a list of WebSession_putStreaming_Params.
type WebSession_putStreaming_Params_List struct{ capnp.List }

// NewWebSession_putStreaming_Params creates a new list of WebSession_putStreaming_Params.
func NewWebSession_putStreaming_Params_List(s *capnp.Segment, sz int32) (WebSession_putStreaming_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return WebSession_putStreaming_Params_List{l}, err
}

func (s WebSession_putStreaming_Params_List) At(i int) WebSession_putStreaming_Params {
	return WebSession_putStreaming_Params{s.List.Struct(i)}
}

func (s WebSession_putStreaming_Params_List) Set(i int, v WebSession_putStreaming_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_putStreaming_Params_List) String() string {
	str, _ := text.MarshalList(0xa1ece076a7105939, s.List)
	return str
}

// WebSession_putStreaming_Params_Future is a wrapper for a WebSession_putStreaming_Params promised by a client call.
type WebSession_putStreaming_Params_Future struct{ *capnp.Future }

func (p WebSession_putStreaming_Params_Future) Struct() (WebSession_putStreaming_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_putStreaming_Params{s}, err
}

func (p WebSession_putStreaming_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_putStreaming_Results struct{ capnp.Struct }

// WebSession_putStreaming_Results_TypeID is the unique identifier for the type WebSession_putStreaming_Results.
const WebSession_putStreaming_Results_TypeID = 0xc60d14bf989d4454

func NewWebSession_putStreaming_Results(s *capnp.Segment) (WebSession_putStreaming_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_putStreaming_Results{st}, err
}

func NewRootWebSession_putStreaming_Results(s *capnp.Segment) (WebSession_putStreaming_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_putStreaming_Results{st}, err
}

func ReadRootWebSession_putStreaming_Results(msg *capnp.Message) (WebSession_putStreaming_Results, error) {
	root, err := msg.Root()
	return WebSession_putStreaming_Results{root.Struct()}, err
}

func (s WebSession_putStreaming_Results) String() string {
	str, _ := text.Marshal(0xc60d14bf989d4454, s.Struct)
	return str
}

func (s WebSession_putStreaming_Results) Stream() WebSession_RequestStream {
	p, _ := s.Struct.Ptr(0)
	return WebSession_RequestStream{Client: p.Interface().Client()}
}

func (s WebSession_putStreaming_Results) HasStream() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_putStreaming_Results) SetStream(v WebSession_RequestStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// WebSession_putStreaming_Results_List is a list of WebSession_putStreaming_Results.
type WebSession_putStreaming_Results_List struct{ capnp.List }

// NewWebSession_putStreaming_Results creates a new list of WebSession_putStreaming_Results.
func NewWebSession_putStreaming_Results_List(s *capnp.Segment, sz int32) (WebSession_putStreaming_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return WebSession_putStreaming_Results_List{l}, err
}

func (s WebSession_putStreaming_Results_List) At(i int) WebSession_putStreaming_Results {
	return WebSession_putStreaming_Results{s.List.Struct(i)}
}

func (s WebSession_putStreaming_Results_List) Set(i int, v WebSession_putStreaming_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_putStreaming_Results_List) String() string {
	str, _ := text.MarshalList(0xc60d14bf989d4454, s.List)
	return str
}

// WebSession_putStreaming_Results_Future is a wrapper for a WebSession_putStreaming_Results promised by a client call.
type WebSession_putStreaming_Results_Future struct{ *capnp.Future }

func (p WebSession_putStreaming_Results_Future) Struct() (WebSession_putStreaming_Results, error) {
	s, err := p.Future.Struct()
	return WebSession_putStreaming_Results{s}, err
}

func (p WebSession_putStreaming_Results_Future) Stream() WebSession_RequestStream {
	return WebSession_RequestStream{Client: p.Future.Field(0, nil).Client()}
}

type WebSession_propfind_Params struct{ capnp.Struct }

// WebSession_propfind_Params_TypeID is the unique identifier for the type WebSession_propfind_Params.
const WebSession_propfind_Params_TypeID = 0xca2d58de88f0b32e

func NewWebSession_propfind_Params(s *capnp.Segment) (WebSession_propfind_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_propfind_Params{st}, err
}

func NewRootWebSession_propfind_Params(s *capnp.Segment) (WebSession_propfind_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_propfind_Params{st}, err
}

func ReadRootWebSession_propfind_Params(msg *capnp.Message) (WebSession_propfind_Params, error) {
	root, err := msg.Root()
	return WebSession_propfind_Params{root.Struct()}, err
}

func (s WebSession_propfind_Params) String() string {
	str, _ := text.Marshal(0xca2d58de88f0b32e, s.Struct)
	return str
}

func (s WebSession_propfind_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_propfind_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_propfind_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_propfind_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_propfind_Params) XmlContent() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_propfind_Params) HasXmlContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_propfind_Params) XmlContentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_propfind_Params) SetXmlContent(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_propfind_Params) Depth() WebSession_PropfindDepth {
	return WebSession_PropfindDepth(s.Struct.Uint16(0))
}

func (s WebSession_propfind_Params) SetDepth(v WebSession_PropfindDepth) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s WebSession_propfind_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_propfind_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_propfind_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_propfind_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_propfind_Params_List is a list of WebSession_propfind_Params.
type WebSession_propfind_Params_List struct{ capnp.List }

// NewWebSession_propfind_Params creates a new list of WebSession_propfind_Params.
func NewWebSession_propfind_Params_List(s *capnp.Segment, sz int32) (WebSession_propfind_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return WebSession_propfind_Params_List{l}, err
}

func (s WebSession_propfind_Params_List) At(i int) WebSession_propfind_Params {
	return WebSession_propfind_Params{s.List.Struct(i)}
}

func (s WebSession_propfind_Params_List) Set(i int, v WebSession_propfind_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_propfind_Params_List) String() string {
	str, _ := text.MarshalList(0xca2d58de88f0b32e, s.List)
	return str
}

// WebSession_propfind_Params_Future is a wrapper for a WebSession_propfind_Params promised by a client call.
type WebSession_propfind_Params_Future struct{ *capnp.Future }

func (p WebSession_propfind_Params_Future) Struct() (WebSession_propfind_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_propfind_Params{s}, err
}

func (p WebSession_propfind_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_proppatch_Params struct{ capnp.Struct }

// WebSession_proppatch_Params_TypeID is the unique identifier for the type WebSession_proppatch_Params.
const WebSession_proppatch_Params_TypeID = 0x9e582e7e054088ae

func NewWebSession_proppatch_Params(s *capnp.Segment) (WebSession_proppatch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_proppatch_Params{st}, err
}

func NewRootWebSession_proppatch_Params(s *capnp.Segment) (WebSession_proppatch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_proppatch_Params{st}, err
}

func ReadRootWebSession_proppatch_Params(msg *capnp.Message) (WebSession_proppatch_Params, error) {
	root, err := msg.Root()
	return WebSession_proppatch_Params{root.Struct()}, err
}

func (s WebSession_proppatch_Params) String() string {
	str, _ := text.Marshal(0x9e582e7e054088ae, s.Struct)
	return str
}

func (s WebSession_proppatch_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_proppatch_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_proppatch_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_proppatch_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_proppatch_Params) XmlContent() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_proppatch_Params) HasXmlContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_proppatch_Params) XmlContentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_proppatch_Params) SetXmlContent(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_proppatch_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_proppatch_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_proppatch_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_proppatch_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_proppatch_Params_List is a list of WebSession_proppatch_Params.
type WebSession_proppatch_Params_List struct{ capnp.List }

// NewWebSession_proppatch_Params creates a new list of WebSession_proppatch_Params.
func NewWebSession_proppatch_Params_List(s *capnp.Segment, sz int32) (WebSession_proppatch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_proppatch_Params_List{l}, err
}

func (s WebSession_proppatch_Params_List) At(i int) WebSession_proppatch_Params {
	return WebSession_proppatch_Params{s.List.Struct(i)}
}

func (s WebSession_proppatch_Params_List) Set(i int, v WebSession_proppatch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_proppatch_Params_List) String() string {
	str, _ := text.MarshalList(0x9e582e7e054088ae, s.List)
	return str
}

// WebSession_proppatch_Params_Future is a wrapper for a WebSession_proppatch_Params promised by a client call.
type WebSession_proppatch_Params_Future struct{ *capnp.Future }

func (p WebSession_proppatch_Params_Future) Struct() (WebSession_proppatch_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_proppatch_Params{s}, err
}

func (p WebSession_proppatch_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_mkcol_Params struct{ capnp.Struct }

// WebSession_mkcol_Params_TypeID is the unique identifier for the type WebSession_mkcol_Params.
const WebSession_mkcol_Params_TypeID = 0xf64da2416445f8b6

func NewWebSession_mkcol_Params(s *capnp.Segment) (WebSession_mkcol_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_mkcol_Params{st}, err
}

func NewRootWebSession_mkcol_Params(s *capnp.Segment) (WebSession_mkcol_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_mkcol_Params{st}, err
}

func ReadRootWebSession_mkcol_Params(msg *capnp.Message) (WebSession_mkcol_Params, error) {
	root, err := msg.Root()
	return WebSession_mkcol_Params{root.Struct()}, err
}

func (s WebSession_mkcol_Params) String() string {
	str, _ := text.Marshal(0xf64da2416445f8b6, s.Struct)
	return str
}

func (s WebSession_mkcol_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_mkcol_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_mkcol_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_mkcol_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_mkcol_Params) Content() (WebSession_PostContent, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_PostContent{Struct: p.Struct()}, err
}

func (s WebSession_mkcol_Params) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_mkcol_Params) SetContent(v WebSession_PostContent) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContent sets the content field to a newly
// allocated WebSession_PostContent struct, preferring placement in s's segment.
func (s WebSession_mkcol_Params) NewContent() (WebSession_PostContent, error) {
	ss, err := NewWebSession_PostContent(s.Struct.Segment())
	if err != nil {
		return WebSession_PostContent{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_mkcol_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_mkcol_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_mkcol_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_mkcol_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_mkcol_Params_List is a list of WebSession_mkcol_Params.
type WebSession_mkcol_Params_List struct{ capnp.List }

// NewWebSession_mkcol_Params creates a new list of WebSession_mkcol_Params.
func NewWebSession_mkcol_Params_List(s *capnp.Segment, sz int32) (WebSession_mkcol_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_mkcol_Params_List{l}, err
}

func (s WebSession_mkcol_Params_List) At(i int) WebSession_mkcol_Params {
	return WebSession_mkcol_Params{s.List.Struct(i)}
}

func (s WebSession_mkcol_Params_List) Set(i int, v WebSession_mkcol_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_mkcol_Params_List) String() string {
	str, _ := text.MarshalList(0xf64da2416445f8b6, s.List)
	return str
}

// WebSession_mkcol_Params_Future is a wrapper for a WebSession_mkcol_Params promised by a client call.
type WebSession_mkcol_Params_Future struct{ *capnp.Future }

func (p WebSession_mkcol_Params_Future) Struct() (WebSession_mkcol_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_mkcol_Params{s}, err
}

func (p WebSession_mkcol_Params_Future) Content() WebSession_PostContent_Future {
	return WebSession_PostContent_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_mkcol_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_copy_Params struct{ capnp.Struct }

// WebSession_copy_Params_TypeID is the unique identifier for the type WebSession_copy_Params.
const WebSession_copy_Params_TypeID = 0x8139673a82bfe07d

func NewWebSession_copy_Params(s *capnp.Segment) (WebSession_copy_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_copy_Params{st}, err
}

func NewRootWebSession_copy_Params(s *capnp.Segment) (WebSession_copy_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_copy_Params{st}, err
}

func ReadRootWebSession_copy_Params(msg *capnp.Message) (WebSession_copy_Params, error) {
	root, err := msg.Root()
	return WebSession_copy_Params{root.Struct()}, err
}

func (s WebSession_copy_Params) String() string {
	str, _ := text.Marshal(0x8139673a82bfe07d, s.Struct)
	return str
}

func (s WebSession_copy_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_copy_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_copy_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_copy_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_copy_Params) Destination() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_copy_Params) HasDestination() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_copy_Params) DestinationBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_copy_Params) SetDestination(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_copy_Params) NoOverwrite() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_copy_Params) SetNoOverwrite(v bool) {
	s.Struct.SetBit(0, v)
}

func (s WebSession_copy_Params) Shallow() bool {
	return s.Struct.Bit(1)
}

func (s WebSession_copy_Params) SetShallow(v bool) {
	s.Struct.SetBit(1, v)
}

func (s WebSession_copy_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_copy_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_copy_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_copy_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_copy_Params_List is a list of WebSession_copy_Params.
type WebSession_copy_Params_List struct{ capnp.List }

// NewWebSession_copy_Params creates a new list of WebSession_copy_Params.
func NewWebSession_copy_Params_List(s *capnp.Segment, sz int32) (WebSession_copy_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return WebSession_copy_Params_List{l}, err
}

func (s WebSession_copy_Params_List) At(i int) WebSession_copy_Params {
	return WebSession_copy_Params{s.List.Struct(i)}
}

func (s WebSession_copy_Params_List) Set(i int, v WebSession_copy_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_copy_Params_List) String() string {
	str, _ := text.MarshalList(0x8139673a82bfe07d, s.List)
	return str
}

// WebSession_copy_Params_Future is a wrapper for a WebSession_copy_Params promised by a client call.
type WebSession_copy_Params_Future struct{ *capnp.Future }

func (p WebSession_copy_Params_Future) Struct() (WebSession_copy_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_copy_Params{s}, err
}

func (p WebSession_copy_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_move_Params struct{ capnp.Struct }

// WebSession_move_Params_TypeID is the unique identifier for the type WebSession_move_Params.
const WebSession_move_Params_TypeID = 0x81f5066b5576a609

func NewWebSession_move_Params(s *capnp.Segment) (WebSession_move_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_move_Params{st}, err
}

func NewRootWebSession_move_Params(s *capnp.Segment) (WebSession_move_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_move_Params{st}, err
}

func ReadRootWebSession_move_Params(msg *capnp.Message) (WebSession_move_Params, error) {
	root, err := msg.Root()
	return WebSession_move_Params{root.Struct()}, err
}

func (s WebSession_move_Params) String() string {
	str, _ := text.Marshal(0x81f5066b5576a609, s.Struct)
	return str
}

func (s WebSession_move_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_move_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_move_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_move_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_move_Params) Destination() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_move_Params) HasDestination() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_move_Params) DestinationBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_move_Params) SetDestination(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_move_Params) NoOverwrite() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_move_Params) SetNoOverwrite(v bool) {
	s.Struct.SetBit(0, v)
}

func (s WebSession_move_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_move_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_move_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_move_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_move_Params_List is a list of WebSession_move_Params.
type WebSession_move_Params_List struct{ capnp.List }

// NewWebSession_move_Params creates a new list of WebSession_move_Params.
func NewWebSession_move_Params_List(s *capnp.Segment, sz int32) (WebSession_move_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return WebSession_move_Params_List{l}, err
}

func (s WebSession_move_Params_List) At(i int) WebSession_move_Params {
	return WebSession_move_Params{s.List.Struct(i)}
}

func (s WebSession_move_Params_List) Set(i int, v WebSession_move_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_move_Params_List) String() string {
	str, _ := text.MarshalList(0x81f5066b5576a609, s.List)
	return str
}

// WebSession_move_Params_Future is a wrapper for a WebSession_move_Params promised by a client call.
type WebSession_move_Params_Future struct{ *capnp.Future }

func (p WebSession_move_Params_Future) Struct() (WebSession_move_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_move_Params{s}, err
}

func (p WebSession_move_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_lock_Params struct{ capnp.Struct }

// WebSession_lock_Params_TypeID is the unique identifier for the type WebSession_lock_Params.
const WebSession_lock_Params_TypeID = 0x9398280f1359570a

func NewWebSession_lock_Params(s *capnp.Segment) (WebSession_lock_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_lock_Params{st}, err
}

func NewRootWebSession_lock_Params(s *capnp.Segment) (WebSession_lock_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_lock_Params{st}, err
}

func ReadRootWebSession_lock_Params(msg *capnp.Message) (WebSession_lock_Params, error) {
	root, err := msg.Root()
	return WebSession_lock_Params{root.Struct()}, err
}

func (s WebSession_lock_Params) String() string {
	str, _ := text.Marshal(0x9398280f1359570a, s.Struct)
	return str
}

func (s WebSession_lock_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_lock_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_lock_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_lock_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_lock_Params) XmlContent() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_lock_Params) HasXmlContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_lock_Params) XmlContentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_lock_Params) SetXmlContent(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_lock_Params) Shallow() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_lock_Params) SetShallow(v bool) {
	s.Struct.SetBit(0, v)
}

func (s WebSession_lock_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_lock_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_lock_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_lock_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_lock_Params_List is a list of WebSession_lock_Params.
type WebSession_lock_Params_List struct{ capnp.List }

// NewWebSession_lock_Params creates a new list of WebSession_lock_Params.
func NewWebSession_lock_Params_List(s *capnp.Segment, sz int32) (WebSession_lock_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return WebSession_lock_Params_List{l}, err
}

func (s WebSession_lock_Params_List) At(i int) WebSession_lock_Params {
	return WebSession_lock_Params{s.List.Struct(i)}
}

func (s WebSession_lock_Params_List) Set(i int, v WebSession_lock_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_lock_Params_List) String() string {
	str, _ := text.MarshalList(0x9398280f1359570a, s.List)
	return str
}

// WebSession_lock_Params_Future is a wrapper for a WebSession_lock_Params promised by a client call.
type WebSession_lock_Params_Future struct{ *capnp.Future }

func (p WebSession_lock_Params_Future) Struct() (WebSession_lock_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_lock_Params{s}, err
}

func (p WebSession_lock_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_unlock_Params struct{ capnp.Struct }

// WebSession_unlock_Params_TypeID is the unique identifier for the type WebSession_unlock_Params.
const WebSession_unlock_Params_TypeID = 0xd684c6a791b97dbc

func NewWebSession_unlock_Params(s *capnp.Segment) (WebSession_unlock_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_unlock_Params{st}, err
}

func NewRootWebSession_unlock_Params(s *capnp.Segment) (WebSession_unlock_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_unlock_Params{st}, err
}

func ReadRootWebSession_unlock_Params(msg *capnp.Message) (WebSession_unlock_Params, error) {
	root, err := msg.Root()
	return WebSession_unlock_Params{root.Struct()}, err
}

func (s WebSession_unlock_Params) String() string {
	str, _ := text.Marshal(0xd684c6a791b97dbc, s.Struct)
	return str
}

func (s WebSession_unlock_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_unlock_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_unlock_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_unlock_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_unlock_Params) LockToken() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_unlock_Params) HasLockToken() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_unlock_Params) LockTokenBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_unlock_Params) SetLockToken(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_unlock_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_unlock_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_unlock_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_unlock_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_unlock_Params_List is a list of WebSession_unlock_Params.
type WebSession_unlock_Params_List struct{ capnp.List }

// NewWebSession_unlock_Params creates a new list of WebSession_unlock_Params.
func NewWebSession_unlock_Params_List(s *capnp.Segment, sz int32) (WebSession_unlock_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_unlock_Params_List{l}, err
}

func (s WebSession_unlock_Params_List) At(i int) WebSession_unlock_Params {
	return WebSession_unlock_Params{s.List.Struct(i)}
}

func (s WebSession_unlock_Params_List) Set(i int, v WebSession_unlock_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_unlock_Params_List) String() string {
	str, _ := text.MarshalList(0xd684c6a791b97dbc, s.List)
	return str
}

// WebSession_unlock_Params_Future is a wrapper for a WebSession_unlock_Params promised by a client call.
type WebSession_unlock_Params_Future struct{ *capnp.Future }

func (p WebSession_unlock_Params_Future) Struct() (WebSession_unlock_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_unlock_Params{s}, err
}

func (p WebSession_unlock_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_acl_Params struct{ capnp.Struct }

// WebSession_acl_Params_TypeID is the unique identifier for the type WebSession_acl_Params.
const WebSession_acl_Params_TypeID = 0x9f79c33e20119e8d

func NewWebSession_acl_Params(s *capnp.Segment) (WebSession_acl_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_acl_Params{st}, err
}

func NewRootWebSession_acl_Params(s *capnp.Segment) (WebSession_acl_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_acl_Params{st}, err
}

func ReadRootWebSession_acl_Params(msg *capnp.Message) (WebSession_acl_Params, error) {
	root, err := msg.Root()
	return WebSession_acl_Params{root.Struct()}, err
}

func (s WebSession_acl_Params) String() string {
	str, _ := text.Marshal(0x9f79c33e20119e8d, s.Struct)
	return str
}

func (s WebSession_acl_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_acl_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_acl_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_acl_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_acl_Params) XmlContent() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_acl_Params) HasXmlContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_acl_Params) XmlContentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_acl_Params) SetXmlContent(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_acl_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_acl_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_acl_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_acl_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_acl_Params_List is a list of WebSession_acl_Params.
type WebSession_acl_Params_List struct{ capnp.List }

// NewWebSession_acl_Params creates a new list of WebSession_acl_Params.
func NewWebSession_acl_Params_List(s *capnp.Segment, sz int32) (WebSession_acl_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_acl_Params_List{l}, err
}

func (s WebSession_acl_Params_List) At(i int) WebSession_acl_Params {
	return WebSession_acl_Params{s.List.Struct(i)}
}

func (s WebSession_acl_Params_List) Set(i int, v WebSession_acl_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_acl_Params_List) String() string {
	str, _ := text.MarshalList(0x9f79c33e20119e8d, s.List)
	return str
}

// WebSession_acl_Params_Future is a wrapper for a WebSession_acl_Params promised by a client call.
type WebSession_acl_Params_Future struct{ *capnp.Future }

func (p WebSession_acl_Params_Future) Struct() (WebSession_acl_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_acl_Params{s}, err
}

func (p WebSession_acl_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_report_Params struct{ capnp.Struct }

// WebSession_report_Params_TypeID is the unique identifier for the type WebSession_report_Params.
const WebSession_report_Params_TypeID = 0xc0643ea68efc60ae

func NewWebSession_report_Params(s *capnp.Segment) (WebSession_report_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_report_Params{st}, err
}

func NewRootWebSession_report_Params(s *capnp.Segment) (WebSession_report_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_report_Params{st}, err
}

func ReadRootWebSession_report_Params(msg *capnp.Message) (WebSession_report_Params, error) {
	root, err := msg.Root()
	return WebSession_report_Params{root.Struct()}, err
}

func (s WebSession_report_Params) String() string {
	str, _ := text.Marshal(0xc0643ea68efc60ae, s.Struct)
	return str
}

func (s WebSession_report_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_report_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_report_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_report_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_report_Params) Content() (WebSession_PostContent, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_PostContent{Struct: p.Struct()}, err
}

func (s WebSession_report_Params) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_report_Params) SetContent(v WebSession_PostContent) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContent sets the content field to a newly
// allocated WebSession_PostContent struct, preferring placement in s's segment.
func (s WebSession_report_Params) NewContent() (WebSession_PostContent, error) {
	ss, err := NewWebSession_PostContent(s.Struct.Segment())
	if err != nil {
		return WebSession_PostContent{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_report_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_report_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_report_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_report_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_report_Params_List is a list of WebSession_report_Params.
type WebSession_report_Params_List struct{ capnp.List }

// NewWebSession_report_Params creates a new list of WebSession_report_Params.
func NewWebSession_report_Params_List(s *capnp.Segment, sz int32) (WebSession_report_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_report_Params_List{l}, err
}

func (s WebSession_report_Params_List) At(i int) WebSession_report_Params {
	return WebSession_report_Params{s.List.Struct(i)}
}

func (s WebSession_report_Params_List) Set(i int, v WebSession_report_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_report_Params_List) String() string {
	str, _ := text.MarshalList(0xc0643ea68efc60ae, s.List)
	return str
}

// WebSession_report_Params_Future is a wrapper for a WebSession_report_Params promised by a client call.
type WebSession_report_Params_Future struct{ *capnp.Future }

func (p WebSession_report_Params_Future) Struct() (WebSession_report_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_report_Params{s}, err
}

func (p WebSession_report_Params_Future) Content() WebSession_PostContent_Future {
	return WebSession_PostContent_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_report_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_options_Params struct{ capnp.Struct }

// WebSession_options_Params_TypeID is the unique identifier for the type WebSession_options_Params.
const WebSession_options_Params_TypeID = 0xd2e47e8eac54ea7e

func NewWebSession_options_Params(s *capnp.Segment) (WebSession_options_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_options_Params{st}, err
}

func NewRootWebSession_options_Params(s *capnp.Segment) (WebSession_options_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_options_Params{st}, err
}

func ReadRootWebSession_options_Params(msg *capnp.Message) (WebSession_options_Params, error) {
	root, err := msg.Root()
	return WebSession_options_Params{root.Struct()}, err
}

func (s WebSession_options_Params) String() string {
	str, _ := text.Marshal(0xd2e47e8eac54ea7e, s.Struct)
	return str
}

func (s WebSession_options_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_options_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_options_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_options_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_options_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_options_Params) HasContext() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_options_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_options_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_options_Params_List is a list of WebSession_options_Params.
type WebSession_options_Params_List struct{ capnp.List }

// NewWebSession_options_Params creates a new list of WebSession_options_Params.
func NewWebSession_options_Params_List(s *capnp.Segment, sz int32) (WebSession_options_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return WebSession_options_Params_List{l}, err
}

func (s WebSession_options_Params_List) At(i int) WebSession_options_Params {
	return WebSession_options_Params{s.List.Struct(i)}
}

func (s WebSession_options_Params_List) Set(i int, v WebSession_options_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_options_Params_List) String() string {
	str, _ := text.MarshalList(0xd2e47e8eac54ea7e, s.List)
	return str
}

// WebSession_options_Params_Future is a wrapper for a WebSession_options_Params promised by a client call.
type WebSession_options_Params_Future struct{ *capnp.Future }

func (p WebSession_options_Params_Future) Struct() (WebSession_options_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_options_Params{s}, err
}

func (p WebSession_options_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(1, nil)}
}

type WebSession_patch_Params struct{ capnp.Struct }

// WebSession_patch_Params_TypeID is the unique identifier for the type WebSession_patch_Params.
const WebSession_patch_Params_TypeID = 0xadef95edc22ca880

func NewWebSession_patch_Params(s *capnp.Segment) (WebSession_patch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_patch_Params{st}, err
}

func NewRootWebSession_patch_Params(s *capnp.Segment) (WebSession_patch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_patch_Params{st}, err
}

func ReadRootWebSession_patch_Params(msg *capnp.Message) (WebSession_patch_Params, error) {
	root, err := msg.Root()
	return WebSession_patch_Params{root.Struct()}, err
}

func (s WebSession_patch_Params) String() string {
	str, _ := text.Marshal(0xadef95edc22ca880, s.Struct)
	return str
}

func (s WebSession_patch_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_patch_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_patch_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_patch_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_patch_Params) Content() (WebSession_PostContent, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_PostContent{Struct: p.Struct()}, err
}

func (s WebSession_patch_Params) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_patch_Params) SetContent(v WebSession_PostContent) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContent sets the content field to a newly
// allocated WebSession_PostContent struct, preferring placement in s's segment.
func (s WebSession_patch_Params) NewContent() (WebSession_PostContent, error) {
	ss, err := NewWebSession_PostContent(s.Struct.Segment())
	if err != nil {
		return WebSession_PostContent{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_patch_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_patch_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_patch_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_patch_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_patch_Params_List is a list of WebSession_patch_Params.
type WebSession_patch_Params_List struct{ capnp.List }

// NewWebSession_patch_Params creates a new list of WebSession_patch_Params.
func NewWebSession_patch_Params_List(s *capnp.Segment, sz int32) (WebSession_patch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_patch_Params_List{l}, err
}

func (s WebSession_patch_Params_List) At(i int) WebSession_patch_Params {
	return WebSession_patch_Params{s.List.Struct(i)}
}

func (s WebSession_patch_Params_List) Set(i int, v WebSession_patch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_patch_Params_List) String() string {
	str, _ := text.MarshalList(0xadef95edc22ca880, s.List)
	return str
}

// WebSession_patch_Params_Future is a wrapper for a WebSession_patch_Params promised by a client call.
type WebSession_patch_Params_Future struct{ *capnp.Future }

func (p WebSession_patch_Params_Future) Struct() (WebSession_patch_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_patch_Params{s}, err
}

func (p WebSession_patch_Params_Future) Content() WebSession_PostContent_Future {
	return WebSession_PostContent_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_patch_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

const schema_a8cb0f2f1a756b32 = "x\xda\xcc{}x\\U\xb5\xf7Z\xe7\xcc\xe44\xa5" +
	"a\xb2{\x02R\xda0i\xe9W\xd2N\xa0\x09\x01\xdb" +
	"W\xc8W\x03m^Js\xf2Ai^\xab\x9c\x99\xd9" +
	"MN2s\xce\xe4\x9c3m\xa6\x82\x85\x00\xaf\x88\x8a" +
	"RZ\xa5}\x00\x05E\x10\xca+\xdf\xafx\xadP\xaf" +
	"\xa8E@\xe1\x8a\x1f\xf7^\x14\x1f\xe5*J\xaf\x14\x01" +
	"\xed\x158\xf7\xd9\xfb\xcc\xf9H\x98NB\xbd\xf7>\xfc" +
	"\x97\xd9g\xed\xb5\xd7^\xfb\xb7\xd6^\x1f;g\xc6I" +
	"\x9b\xb0*\xfa\xab\xf9\x00}k1Z\xe1\\\xfe\xe2c" +
	"\x13k\x86V_\x09J-\"@T\x94\x00\x9a\x9f\xaf" +
	"\xeaF\xc0\xe6_W\xc5\x11\xd0Y\xfeb\xd5\x9b\xd1\x81" +
	"\xbe+\x81\xd4\x0b\x7f\xb9f\xdd\xff\xfd\xcd\xc2\x8f=\x08" +
	"\xd8|\xf4\xc4\x1d(W\xc5$\x00\xb92\xb6\x13\xd0\xb9" +
	"\xea\xe6\x8e\x873\xfbotY9\xcf\xdc\xd5\xb2\xe16" +
	"\"\xdd\x01]\x95R\x05b\xf3\xfaX\x13\xca\x9bc\x9b" +
	"\x00\x9ao\x8b9\x8co\xe5W\xb7\x0d\x8cV\xbc1y" +
	"\xe9v\xc2\x96\x967\x90\xdf\x01\xfe\xea\xb3\xd7>\xf7\x94" +
	"$O\x90\xa5B\xc0\x1c\xb0\xb9~\xee.\x94\xdb\xe7\xb2" +
	"\x95\xcf\x9d\xfbu@\xe7G\xbb\xff*\x8c=b_\x05" +
	"\xcaR\x0c\xc9qR\xa5\x84\x00\xcd\x87\xe5\x09\xc6\xf2\xa8" +
	"\xbc\x1d\xd0\xe9:\xed\xad\x7f\xfe\xd4O^\xf9Ti\xd2" +
	"\xcd5;\x18)\xada\\qc\xe4\xc2\x7f\x99\xff\xe5" +
	"\xeba\xea\xfa\x95'=\x80\xf2\xc2\x93\x98\xb8\xb5'\xb5" +
	"\xb2\xad\xcc\xde\xb4Y\x8e-\xbf\xe9\xc6I[\xb9\xed\x14" +
	"\xbe\x95{O\xf9\x1dc\xb6r\xdf\xea\xff\xf5o_\xd8" +
	"\x0ddih\xd9h\x84\x11^3o\x02\xe5\xbd\xf3\xd8" +
	"~\xf6\xccc\xc4\xe7\xd5\x9c\xb0\xf4gwn\xfc\x02(" +
	"K\x10\x9d\xa1\xef\xdf\xf3\xca\x8a\x97\x9e|\x03\x06*$" +
	"\x8c\x024\xe7O}\x80\x1d\xcf5\xa7\xf2\xe3\xf9\xe2\xc8" +
	"\xbe7\xff\xfc\x1dg/\x90Z1\xd0:`\xf3\xc1\xf9" +
	"\x83(??\x9f\xb1}v\xfe\x05\xf2\xdb\xf3?\x00\xe0" +
	"\xfc\xfc\xd3\xf7\xbe\xf5\x9b\x95c\xfb\x80$\x98\xa0\xc8\xd6" +
	"?<\xff5&(.h\x05t\xfe\xdf\xb5m\xd1\x8f" +
	"7^r+\x90Z\x7f'\x0b\x17\x98\x8c \xb1\x80\xa9" +
	"\xa5\xe2\xe4\x83\xbbz\x96\xdey+\x90\xb9\x11\xa7i4" +
	"\x7f\xea\x19\xb1\x1f\xde\xc5\xd6;\xb4\xa0\x1b\xe5\x17\x16H" +
	"\x00}?_ b\xdfo\x17\x08\x08\xe0|\xe6VR" +
	"w\xde?\x16\xbe\x18f\xf8\xfc\x82\x0e\xc6\xf0\x05\xcep" +
	"\xf5\xe6\xea;\xb7\xbd\xf8\xcamE\x02\xae\x92B\xedu" +
	"\x8c\xe0\x93\xb5L\x1d\xfe\xa6\xc8\\1\xbc\xa2LO\xfb" +
	"\x83<v\xda\xef\x00\x9a\xcf\x8d\x7f\"\"/\\\xc4v" +
	"\xd8)<\xf2\x8bo\xd3\xcb\xefbg!\x04s\xdd\x85" +
	"\xc9\xa2E(/\\\xc4\x8fn\x11W\xdf\xdbO\x1eL" +
	"\xce~M\xbf;,\xdeI\xa7\xf3\x93[x:\x13\xef" +
	"\xe8\xc1\xcb\x92\xf3\x85\xa3wO\x81\xb5\xab\xbaGO\xef" +
	"E\xf9\xe9\xd3\x99\x8e\x0f\x9d\xce\xf0u\xd7\xdf\x0ao\xdf" +
	"\xf7\xe1\xef\xdeS\x1a_\xf5\x8b\x99\"\x9b[\x16\x7f\x96" +
	"-}\xc5]+\xbfsx\xcf\x9f\xee\x0d/\xbdwI" +
	"/[\xfa\x8e%l\xe9O\\{Of\xce\xecu_" +
	"\x07ent\xd6\xa4\x9d\x9f\xbb\xf4\x0f\xf2\xfa\xa5L\xd5" +
	"k\x97\x8a\x08\xe8\xd9\xe5d\x19\xb9*[\x96v\xa3\xbc" +
	"~\xe9\x07\x00de)S\xe7\xfc\xaf<\xb8\xb7\xeb\xbb" +
	"7?\x08\xa4V\x98\x04\x98\x96e\x83(\xaf_\xc66" +
	"\xd3\xb5l#\xa0\xf3\x91g\x1e\xdeQc}\xe3\xa1)" +
	"\xa0\x158h\x97\x8d\xa0\xbc\x97\x13\xefY\xc6v^\x7f" +
	"\xb5\xfd\xc3\xa7^\x7f\xe9! KB\x98u\x89\x8f," +
	"K\xa2\x1c]\xce\x88q9#>\xef\x91\x91\xf6\xfd\x8d" +
	"?\xff\xffl\xebS\xcfh\xcb\xf2n\x94\xc78qv" +
	"9S\xc3\x1fS\xe7\xf7\xe7~\xbf\xff\x9b@\x96D\x02" +
	"\xce\x80\xcdU\xf5w\xa3\xbc\xa4\x9e\xa9\xa1\xae^\xc4\xbe" +
	"\x0f\xd5s\xc4\xfd\xf2T\xeb\xcbW\xb5\xb4|\x0b\x94\xb9" +
	"\x88\x81\xda\xdc\x13{\xa1~\x0d\xca\x87\xd9\x1c\xf9\xe5z" +
	"&\xca\xf6u\xe37?\xf2\x7fF\x0f\x80\xb2\x18\x85\x00" +
	"=\x03\xa2\x84\"@sWC\x92\x1d\x88\xd2\xc0$\xf9" +
	"\xfd\xf7k\xdfy\xec\x9a;\x0e\x94\xc4\xc2\x91\x06\x13\xe5" +
	"\xe8\x0a\xbe\xc9\x15\x8cs4\xb9\xf4_\xfb*N|\xac" +
	"x\xbe\x9cH]\xb1\x8f\xb1\x1b[\xc1m\xed\xd2\xb7\xae" +
	"\xff\xeay\xe9\xc7\xc3\x00\xb8a\xc5 #\xb8e\x05[" +
	"\xaf\x7f\xed-7=VS\xf5\xbd0\x87\x96\x95\xbb\x18" +
	"A\xd7J\xc6\xa1\xf0\x91\x1bo\xb9\xff\xd0\xa1\xef\x87m" +
	"\x87\xba\x04\xf9\x95\xec\xb0\x1b\x1f|\xf5\xda_^\x92x" +
	"r\x92gR\x13#\x8c\"\x9b`\x14+V\xcf\xff\xa7" +
	"ms/~\xaa\xc8\x82\x9fWW#\x97r\xa0\x91m" +
	"c\xf9U\xdb_\x7fa\xff\xee\xa7=\x16\x9c\xe2P#" +
	"\xb7\xe0g\x1b\x99\x98\x97\xd0\x83\x8f\xbet\xc2\xca\xe7J" +
	"\xaa%{\xc6\\\x94/?\x83\xa9\xa5p\x06\xe3\xf7\xf8" +
	"\xfd\x9d\xcf8;F\x9e\x0b\xcb\xfc\xfc\x19\\\xe6\x97\xce" +
	"`\x12}\xfc\x0f\xfd\xfb\xaf\xff\xf8o\x9f\x0bKt\xf0" +
	"L~\x0cO\x9f\xc98|\xeb\xf2Go\xb8\xf3{W" +
	"\xff4\xac\xb7\xfaU\\o-\xab\x98@\x9f\xbf\xef\xcd" +
	"M_\x98\x1f\xfdY)x=\xbbj\x11\xca\xbf^\xc5" +
	"\xe4y\x81\x137\xdd@W\xbfs\xe4\xeb%\x89\xf74" +
	"u\xa0|G\x13#\xbe\xad\x89\x11\xaf\xfd\xc6\x15\x97\xa5" +
	"\xef\xdb\xf9\x8b\xd2\xf6\xdd\xde\xcc\xb7\xa143\xd2\xdc\x81" +
	"\x03\xf3\x9a\x1a\xbe\xf42\x90\x15\x08\xae-\xbe\xd1\xfc\x1a" +
	"B\xc4\xf9\xa9u\xd1+\xdf\xaep^.\xa9\xaf\x97\x9b" +
	"\x1bP>\xda\xcc\x96|\xa3\x99\xa9#?\xefc\x0f8" +
	"\xa3w\xfe1\xac\x8e\x97\xcf\xe2\xbb}\xe3,\xa6\x8e\xef" +
	"|\xf2f\xf9\xe5\xd9\xd7\x1d\x06\xa5\x11C\x1eh\xa0R" +
	"B\x01\xa0Yi\xe1\x87\xa9\xb60\xda\x89\xfd+\x1fi" +
	"\xef\xfa\xc0\x9f\x80,\x8dL\xba\xd4\x0e\xb4<\x80\xf2\xf3" +
	"-\xcc\x96~\xdc\"b\xdf+-\xdc\x96\xa4\xeeM\x1f" +
	"\xa9}\x0b_}\xd7\xedr\xb4e\x04\xe5\xaa\xb3\xf9\xf5" +
	"\x7f\xf6\x05r\x0b\xfb\xcb9\xf4\xf4\xbeJT.x\xb5" +
	"\xb4vj\xcf\xe6\xdaI\x9c\xcd\x04\xd17\xcf\xba\xb8\xfe" +
	"\x13O\x1c\x99\x84\xfd\xb39\xa8\xf6\x9e\xcd\xd4\x17\x8b]" +
	"z\xfd\x82?E_/\xcdk\xd59Or+8\x87" +
	"Y\x81\xef\x13\xa6\xe8\xb3\x821\xd5\xcei@\xb9p\xce" +
	"2\xc6\xff\x9cM\xcc\xef>\xf2\xd7\xaet\xfb\xed\x1b\xde" +
	"\x0c/=o5\xf7\xbbKV\xb3\xa57\xff\xc3i\xe7" +
	"\x1emN\xfc\xa5\x94BQl>\xb0\xfa9\x8e\xfd\xd5" +
	"\xdb\xe1\xcf\xcev\x9aLX\xd4\xb2\"\x9a\xa17\xa6\xd4" +
	"\x9c\x9e[\xb3\x89&\xfb\xa8e\xf1\x01#WX\xdc\xa3" +
	"\x9aj\xd6\x02Pj\xc4\x08@\x04\x01\xc8\xe5\x0d\x00\xca" +
	"\xb8\x88\xca\xd5\x02\x12\xc4\x1afX\xe4\xca$\x80r\x85" +
	"\x88\xca\xa7\x05D\xa1\x86\x1d\x1e\xf9$\x1b\xbbVDe" +
	"\xb7\x80D\xc4\x1a\xe6\x93\xc8\x0d\x1d\x00\xca\xa7ETn" +
	"\x12\x90D\x84\x1a\x8c\x00\x90=l\xf0s\"*7\x0b" +
	"\x18\xcb\xa9\xf60\xce\x01\x01\xe7\x00:ij\xd9\x9a\xae" +
	"\xda i\x86\xee\x8f\xea\xc6\xc6m\xd4\xdcn\x82\xa4\xd9" +
	"\x14\x11\x04D\xc0\x9d\xd6\xb0\x9a\xc9\x18\xdb\xfd\xdf)C" +
	"\xb7\xe9\xb8\x8d\xd5a\xc7\x8b\xd5\xcco\x96\xddx\xa7\x9a" +
	"\x1a\xa6=FFK\x15Z\x1b\xfbRF\x8e\xf6 *" +
	"\xee\x9eZ\x1a\x18\x0f\x92\x18\x04@\x81\xd4w\x00\xa0H" +
	"\x16\x9a\x00\x18!\xb5\xbd\x001\xdd\xd0\xa9\x93\xa3&g" +
	"\x06\xa2\xa1\xef\xccQs\xc0\xa2&\x1bl\xcf\xe5.\xa6" +
	"\x107\xd92N^\xd7\xb6Q\xd3R\x013\xbe@b" +
	"I\x81z\xa9\x15\xcf\x19\xbaE\x95\x1a\x0c\"\xcb\x85\xc9" +
	"P\x98\xb7p\"t\xe3-\\\x13\x8a\xd9j{C\x86" +
	"S;\xe1\xf4\xe5S)jY\x9d \x19i\xeatf" +
	"4\xaa\xdb]&\x9a\x86\xd9i\xa4)\xb4\xae\xa3j\x9a" +
	"\x9aN\x97i\x1af\x87\x91\x06,8\xc3|h\xd30" +
	"j6\xcdh\x96\x0d\xcab\x1f\x0d\x87\x07\x01\x94WD" +
	"\xec\x9b\x85\x02VE\x1d\x07C\x81\xaa\x1c\xc5n\x10\xaa" +
	"\x84w\x9c0\x16\xc9\x91\x0e\x10\xaa*\xdef\x83\xbeO" +
	"\"\xbfH\x82P%\xbd\xc5\x06}S$O\xb0A\xf1" +
	"ol\xd0\x0f\x94\xc9\xfd\xbd \x10\xac\xa8\xc1j\x00r" +
	"\x0b\x03\xd9\xcd\"*w\x09X\x15\xf9\x0fF\xe9[\x1f" +
	"\xb9c\x1f\x08d\xd6\xac\x1a\xaca \xdb\x05\xa0\xdc$" +
	"\xa2\xf2\x90\x80\x8eE\xedN\xc3\x18\xd5@\xa4\x16\x9e\x08" +
	"\xd8#\"V\x077( \x1btL\x9a\xd6L\x9a\xb2" +
	"\x01\xc0E\x93n;\xa9\xa2\xc6@2\x0d\xd3\xb1\xa8\xb9" +
	"\x8d\x9a\xde/\xdd\xe8\xe4T\x80\xb6\x93*\xa2\x08$-" +
	"U\xc0\xea \xfb\xe0\x08\xcc\x994e\xe8i\x0dm\xcd" +
	"\xd0\xcfW\xb5\x8cH\xd3\x8e\x9aNk\xec7\xaa\x19\xf7" +
	"\x140$\x9b\x7f\xbcE\xd9\xcac8kl\xa3\x81\xf1" +
	"V\xfb\xc7\xa52\xe3\xfd\xb0\x88\xcap\xc8x)\xd3a" +
	"ZD%\x17\x18o\x96\x8deDT\xc6\x99\xf1\x0a\xae" +
	"\xf1\xe6\x99\x9d\xe6DT.\xfb{\xectz\xbb\x8c\x1e" +
	"\xcb\x0c\xb8\x154z\x106\xd2\xc8Ms\x01\x97x\xc3" +
	"\xa9dC\x1c\x91\x8cu\x90\xb18\x0adO7\xd9\x1b" +
	"G\x91\x1c\xec%O\xc41B\x0e\xef G\xe2\x18\x95" +
	"\xe7aR\xae\xc58V\xc8]\x98\x94\xd7c\\4F" +
	"\x95\x08\x0a\xa1\x905\"`\xfb)L$\xe8A\xc4\x1f" +
	"\x10<U\xdc\xf8\xbf\x19\x06L\xaa\xda4]\x96\xfa\x10" +
	"\xc1\x8e\x9d\x9d.!\x80\xa3\xa6R4\xc7\xff\x84\x12\xd3" +
	"\x16\xf8\xd3\x9e$\xd8\xed\xb4\xfb\xc4\x18\xc6R\xd9\x89O" +
	"\x11\x1ct.2\xea85\x88\xba\x0d\xe0\xe4T\xd3\xd6" +
	"\xd4L'\xb4\xba\xa0-\xcb\xe0\x19\x82\x13N\x8f;\xa3" +
	"\x0e\xddE\x19\xe2\x9dl>ck}\xb6\x0a\x92\x9d\xb7" +
	"\xca\xb2\xf8\x11\xc1\x11g\x03#O\xf4\xd9\x10S\xed\xbc" +
	"\x05\xe0\xe8\x86\xbd\xc1Hk[A\xd2J\xea\xcc\x9f/" +
	"\x9e\x89\x8c\xc1E\x86]\xc7&@l\xab\xc6u7C" +
	"8x\x9a\xb2A\x99\xc5\x80^\x831\x00R?\x01\xa0" +
	",\x17Q9\xab\x88t\x19\x80\xacb\xf0_)\xa2\xf2" +
	"A\xe6\x03\x86\x8d|&\xddK\xd1\xa2\xf6\xf9\x86\x99\x05" +
	"\x0f\xa11\xda\xaf\x0eau\x10\x1b\xce\xe8\xda\xf0\xe51" +
	"i\xab\xeb6\x949\xae8\xcc\xc6\xba\x98=\xad\x15Q" +
	"\xe9\x11\x90\x08X\x83'0\xc8v\x03(\x17\x8a\xa8\\" +
	"R\x94q\x0e\x00\x19`\x94\xfd\"*\x97\x0a\xe8hV" +
	"\x0f5\xb3\xaa\x0e\x12\xd5mO>'c\xa4T\xe6(" +
	"\x00\xc0\xb75k\xbbf\xa7\x86\xfb\x0d\x90.\xa0\x01\xe5" +
	"\x0cU\xe8]\x03\xa6\x11\xe7\xd7\x00\xb3\xaa\xb3\xb8U\xed" +
	"\x19dV\x84E+\x12\xc8\xe1nfE\xa2<\x0f\xaf" +
	"\x93\x17b\x1c#\xf2\x064e\x05\x99e\x15\xb0[\xbe" +
	"\x9c[\xd6\x1d\xd8 \xdf\x81q\x9c%\x1f\xc2\x07\xe4g" +
	"1\x8e\x952\x0a\xbb\xe4J!\x8e\xb3\xe5\x16\xe1n\xf9" +
	"\\!\x8e'\xc8\x9a\xd0+g\x858J\xf2\x1ea\x9f" +
	"|\x8b\x10\xc79\xf2!\xe1v\xf9Y!\xee$\xd5t" +
	"/\x1d\xcbS\x10\xad\xb2\x00\x16?\x87\x04\x93N\x87\x9a" +
	"\xaec\xf4 Q\x8b\xd9\xc0V\xc3Lj\xe94\x05\xd4" +
	"\xcb\xce\xbe\x11\x09\xf6:\xe7\x07\xd4.r\xcf7\xf2\xfa" +
	"tF+\xee\xe6s\x19n\x199 \x03m\x96\xda\xc3" +
	"F\xfa\"\x03\xedv\x16\x8d0 \x97\xe0Q\xe7\xf3\xd8" +
	"\x83\x04\xf79\x1b\xf8\xac\xba\x8b\xd0\xb0\xeb\xf8<\x91[" +
	"\x80n\xd8\xdc'@\xdcV\x93\x19ZV\x98\xcf#\xc1" +
	"\x1d\\\x186\x05Zs|\x0a\x80\x932\xf4\xad\x19\x8d" +
	"\xdfbe\x19\xecE\xe6\x83:}j\x8c\x0d\x19:-" +
	"\xe7\xec\xc4}H\xb0!v\x81\xa1\xb3uLvZ\x96" +
	"\xdd\x85\xba\xad\xd9\x85~\xc3\x88_\xa8\x9aC\xa5\x18," +
	"\xf6\x19\xdc\x82\x04\x9ftz\xdd\x99uB\x17\x9fZ\xd7" +
	"o\x18u|.\xbf\x83\xf9\xb7\x014\xb5~\xc3\xb8\xd0" +
	"\xd0q\xa8\xac>oE\x82w{\x1c\x138\xd0\xbb\x9e" +
	"\xb3\x8b]h\xe8C\x00N^\xb7\xf2\xb9\x9ca\xa2M" +
	"\xd3\x1bhZSc\xfd\x85\x1c-\xcb\xf1\x8bH\xf0\x9b" +
	"\xce@hb\x1d\x9b\xd9\xaa\xd6\xb1\xa9\x00\x8e\x96m\xef" +
	"\xa7j\xce\x98\xc6U\x8b\xb7s7\xb7~Y\xb6N\xad" +
	"\xb3)\xc4\xd4\x9c\xc1\xbdu\x89X\xa0\xac@7#\xc1" +
	"\xdb\x9d\x9e\xf0\xb4\xba\xf3UM\xcap\xcc\xe4\xf5\x9ci" +
	"\xa4\xa8\x85\x16;\xff.\xdd\x964\xbbP\x96\xdfW\xb9" +
	"\xca\x06&\xcd\xab\xeb\xd2c\xec,Bn\xb8\xb4\xdb\xcb" +
	"\x18\xa9\xd1\x99G\x1a\x83%\"\x0d\x16T\x0c\x8b\xa8\xd8" +
	"\xa1Hc\xac#\x08?&G\x1a\xe3\xd9\x8c\x7f\xd5y" +
	"\x83\xc7\x11\xfaO\xe3\x10\xbd\xf0\xb7\xc0\x144\xed\xae\xba" +
	"\x83]\x11\xc1\xdbVw8\x80\x12\x8b\x01\x14\x1b\xb4E" +
	"T\xae\x100\x96Vm\x15\xab@\xc0*@\x87\xea)" +
	"#\xad1\x88\x06.=\xa3\xeaCyu\x88\x86\xc7\xb2" +
	"Z\x96\xba\xb0\x0b\xc6\xca\xef\xa9\xd3\xd5E#\xbb\xd4\x8a" +
	"\x98\x89\xf30\x93\xe5ts\x1c\xc7M\xc1\xc2Y]\x15" +
	"\xbe\xe3\xd4`\x94\xa5uk\x00\x94\xcbDT\xae\x15\xb0" +
	"V|\xdb\x89\xd4`\x05\x00\xb9f\x04@\xb9ZD\xe5" +
	"K\x02\xd6F\xdeb\xc3\x12\x8b\xc5\xcdb,\xfe\x0d\x01" +
	"\xab\x84\xbf958\x0b\x80<\xcc\xee\xb3\x87DT\x1e" +
	"\x17\x90\xa7GP\xd1J\xc75\xcb\xb6\xa0\xc2\xc9\xaav" +
	"j\x98Z\x1b!\xa6\xd3\x8d[\x83h7|\xf5\xb2h" +
	"\xb7Hw\x11\xc4\x8d\xf2\x84i\x83Z\xba\xdd5\x0e\x12" +
	"KT*\xa6\xbd\xb3\xb9\x9b\xe8\xb3M*\xaaYv\xd4" +
	"\x111\xcaL\xb2X\xff@/w'$\x09\x02\xa9\x94" +
	"\x9c!js\x90\x80\xa4[\xb4\x0d\x95\x08\xa2\xf3\xd1\xdf" +
	"\xfc\xa8~\xfb\x077=\x0d!c\xa9(\xb9\x1e\xfb\xd3" +
	"H\x8dR\xbe\xa2\x9am\xb4\xa8\x9e\xee(\xd8\xd4Z\xdc" +
	"\x13\xe7&\xa4D|\xa8U1\x13\x98%\xa2R#\xe0" +
	"\xce,\xb5,u\x88\xfap)\xbf\xad\x9ci\xe4rL" +
	"c>\xdb9>\xdb.v\xd0m\"*\x17\x86\x10\xbc" +
	"\x9e\xd9\xe5:\x11\x95\xfe\x10\x82\x95\x8e :\x99\x81\x0d" +
	"\xbe\xa7t{\xd8\xb6s}6\x0b\x14\xdbu\xdd\xb0y" +
	"4\xb3>\xedF\x93\x95 `e\xe0\xac\xa6\xf5@j" +
	"*\xe39\xa0\xf7\xc7>K\xdba._<uM\x1f" +
	"\x9a\xb9\xc3,\xe9Z&y\xcc\xa2k\x19\xeb>Vn" +
	"V\xc2e\x94\xd9D)G\xe4mL\x98\xba\xb1\x18\xdb" +
	"\x99\xf2A\x0c\x97-\xb55\x01OB;B\xf5r5" +
	"\x19*X\xaa\x83\x81\xed\x12\xb5!\xc8\xbd\xc9\x965A" +
	"\xe3\x82l\x1e\x09*\xd7d\xf3uA1\x8dl\xe9\x0e" +
	"\xf5\x8f\xb6\x98\xa1r\xdf\x96\x09/\xdb&[\x92A\xc5" +
	"\x92l\xe9\x085\x106\x9b\xad\xee!\xec,:H\xa7" +
	"\xc7\xb0l\xf67\x8f\xb5\x9d\x9e\xbc\xed\x9f}\xac\xab_" +
	"\x1dj\xe5\x05\x03\x1a$i<r\xf0\x7fb\x97\xaf8" +
	"\xc7\xbbF\x80\xff\xed\xba\x18\x88\xf3\xc3w<\x17 \x14" +
	"\xd1\x00^\xb9I\xd2R\x85\x9d\x1bs\xcc\x12,\xa7\xc7" +
	"4r[5=\x0d\xf1\xb54g\x0f+\xeb\xb8[\xf2" +
	"\xca\xd9\xbe[\x92W\x09\x8b@\x90\x97\x08\x12\x06\xed\xa0" +
	"\xe0\xeb<\xa1\x01\x04\xb9J\x90P\xf2\xcb\xed\xe8\x15\xcd" +
	"e\x14L\x10\xe4\xa3(\xa1\xe0\x974\x83\xb9\x87\x91q" +
	"\xfe5J(\xfae\xdc\xe0\xeb\xf3\xb8\x06\x04\xf9\x10J" +
	"\x18\xf5\x8b\xe2\xe85\x0d\xe4\x03\xc88?\x8c\x12V\xf8" +
	"-2\xf4\x1a\x02\xf2\xd7p\x04\x04\xf96\x94p\x96_" +
	"\xe3\x0f8\xef\xc1n\x10\xe4\xcf\xa0\x84\x95~C/\xf8" +
	"z%\xf6\x82 \x17P\xc2\xd9~-4\xf8\x9a\xc5&" +
	"\x10d\x15%<\xc1\xef\x0e\x07_\x07\x90ic=J" +
	"8\xc7o\xe0\x06_\xcf\xe5_W\xa1\x84U~O4" +
	"\xf8\xba\x84\x7f\x9d\x87\x12\x9e\xe8\x97\xf0\x83\xafU\\\x1b" +
	"\x88\x12\xc6\xfc\x9eapu\xbc\xb1\x08\x04\xf2\xb2\x84\xd5" +
	"~\xd3$\xf8\xf6\xc2\x1a\x10\xc8\xb3\x12\x12\xbfs\x80\x1e" +
	"^\xc9\x13\x1d \x90G%\x8c\xf8\xdd\xb6`\xde\xbdM" +
	" \x90\xdb$i\x88\xdam\x18\xcb\x19\x96\xdd\x86\x8e\x91" +
	"\xa3:\x83\x17\xc4\xf9\x1d\xd3\x86R.o\xb7ak\x9a" +
	"f\xa8M\xdb\xd0at\x0cu\x10\xe7^\x88\x8d\x14\x9d" +
	"\x12\xc4\xbc\x01\x0fx\x00\xc5_\xec\"\x01\x1cn\xc3x" +
	"v4ed\xda0\x962r\x856\x8ce\x8dm\xb4" +
	"\x0dc,\x00l\xc3\xd6\xbc\xee\xfe!\xa9\xa9L\x1b\xb6" +
	"\x9a4g\x98v\x1b\xee4\\D\xb7a\x9c\xdfH\xc5" +
	"+\xd38\xf9\xe1K\xfe\xbd\xbd\xe9\xcd\xb0w\x17\x8f\x11" +
	"\xbe\x18\xd2\xa8\xe6\x96`\xa7\xa9A7\x05\xc1\x0a\x0a\x18" +
	"j\x8f\x91k\x98*\xc5j7\xa8\x99\x14\x99E\x047" +
	"\xa4\xc97\x84\xdc\xa7\xaef\xa9\xe7\xfc\xe2\xdb\xd4L\xde" +
	"\xff\xb5\x93\x8e\xe74\x93Z\x0e\xbb\xc06\xea\x99\x02s" +
	"\x93^\xd9`\x92\xd7\x9d\xe6\x866,;\xb8\x04\xa6\xbb" +
	"\xb5:\xc2\xb5\x83\xe2%\xb0\xa1#\xb8\xca&\xad\xecU" +
	"*\xb1:p\xbd\xaeo?\xee\x8a\xb8\xe7\xe3\xfa\x0b9" +
	"\xb7\xe26\xcb\x17\xb8\xbe;(\xb3py\x11\xc9\xaa5" +
	"\xa1*K\x89\xdb\xa7u\xecb\xae\xd3\xd9 \x1c\x9c}" +
	"E\xeb\xcc++)#\xee\xd6\xb3\x16\x88\x11\xae\x1d\xa6" +
	"\x88\x87\xbb\x83\xf8\x92k\x87\xdd\x86\x07\xd8\xe0\xb7DT" +
	"~P\xbc\"Y\x8c\xfb\x04\x1b\xfc\xae\x88\xca\x8f\x05\xc4" +
	"(\x86\xbaO\xe4\xe9\x06\x10\xaa\x85\x1a\x9c\xcd\x18\x0e\x06" +
	"\x0c\xb1\x02C=\x15r\x80E\x81\x11\xa9\x06\x09\x00\xf9" +
	"\x1a;\xab\xaf\x88\xa8\xdc'\xfc]\xf1{,i\xa4\x0b" +
	"\x8e\xc5\xa3\xa1N\x03\xc44\xc5\x98W\xe5\x07\xc4\x18\x8b" +
	"j5+gX\x9a[^=\xbe\xf2T1\x1ed\x90" +
	"C\xeb}\x848ajP\xc8\xcb\x87,\x0e\xac\x0e\xba" +
	"\xe1\xef\xa5g\xc3\xab\x1c\xe1\xa7?\xd8\x14\xe7]\x9cp" +
	"\xac\xd5\x0b\xa0\\*\xa2\x92\x09mZ\xeb\x0d\x85UB" +
	"\x9d\xbb\xe9\xb1\x1d\x81_ \xe2B\x17]\x85\x1d\x81\xfb" +
	"q\xb6k\xf6p\xe70M\x01\x8eb,X\xb6xr" +
	"9^\xbe\xe3e\xdc\x12_\xb7\xa9\xa6F\xad\x8d:\x14" +
	"\x83\x0b\xbfn\x17|pm\xef]\x05\xbd\xd2j\xf0\xc2" +
	"\x86\xb54'\xda\xc3\xccR\xe7\xf0]\xd4v\x93\x85q" +
	"D\xd2\xde\xc0\xfbV\xab\x17\x018\x9a\xbeU\xd3y\x86" +
	"\xef\x96\x85\x9e\xb9\xe1\xc8;\x85;\xd3\xaf\xb9\xd5\x81\x1a" +
	"\xe4\xc5H\xec\x0d\xe8\xf0\xa3\x00\xb1\x1d\xd44$C\xa7" +
	"35\xd9u4\xa6\xa6\xa99\xc5i0\xcc-\x16Q" +
	"93\xa4\xfeDS\xe0I\xcax\xe0\xe9\x80P\xccv" +
	"\xd7QU\xfa\x9f\\\xd7\x0b\x1ey\xed\x9c+>\xb0\xb0" +
	"\xee\x901y\xab\x86\x8d)\xc8D\x18e\x8f\x88\xca\x87" +
	"\x852a\xbbn\x97\xad\x1a\xcc\xac\x1a\xe0\xf5\xf44\x9b" +
	"\xc62\x9ae3\x83+&\xd5\x8c\xd1\x89\xec\xec\xb7\x91" +
	"\x96]\xe4\xdc\x09\xd2n\x92\xaeA\xb2\xbe\x97l\x18$" +
	"J\x92\x0cL\x90\xcd\x83dK/Q'\x08\xbd\x8ed" +
	"\x93dl\xc4\x19OX\xaa\x9e\xb6l4\xcclB\xcd" +
	"\xe5\x12\xd8\xe0\x18\xa9\x84m\xd8jFHd\xa8>d" +
	"\x0f\x83\x91J\xa4\x86\xf3\xfah<ai;\xa83\x9e" +
	"0R\x89\xac\xad\x81\x98\xa5\x8cx\xab\x96\xa1\x1a`\xda" +
	"\xf1\xe8@\xa4\xc5\x1f45\x0a\x92\x95\xcf\xfa\x9f\x84\x84" +
	"\xb1u\xabEm\xc63\xa3\xee(\x18b\xcer\xc6\x13" +
	"\xc3C\xaa9\x94\x00lp\xc6\x13\xb9a5ijb" +
	"J\xb5\x0d3\xd1\x00\xe3\x89b)\x91\xa6\x13\xccf\x01" +
	"\x9c\xf1D\xca2\xb7\xda\x06H\xa3T/\xfeJ\xd8\x10" +
	"3\xd8\xcf\x12a\xc9:?k]K\xadT\xab\xa9\xe5" +
	"lc*\xc4N\x0d V\x0aa\xa2\x96F\x09\x04\x94" +
	"\x00\xe3\xb6fgf\x8ek\xe6\x1f\x1aY\xf8!\x99\x94" +
	";p^\xbb\x11\xa6\xb8\xf0Z|\xc7)\xb6\xda\xd7w" +
	"\x07\x10\xab\x15\xdef\xc3\x91) +\xd6c\x1c5i" +
	"\x19\x99\xbc\xcd\xb1\x16\x05\x01\xa3\xbc\xf0\x9aQmm\x1b" +
	"\x1f\xe3)\xf9\x8c\xc3\x84.=\x15\xe7\xb0\x9c\xa2\x1as" +
	"\x9aP\xa1\x88\xeeNpgO\x1f.D\x8f\x19[\x05" +
	"\x99v/\xb5\xf2\x19\xd1\x9eTYY\x13TVZ-" +
	"N\x89$H&\x01\x91L\xbbW7\xbe\xe5\xf7\xa9\x98" +
	"}?\xdd\xa73(>p\x95\xd8x\xfc*)\xbd\x86" +
	"\x97~\xf0\xe4\xc3\x8f4\xa6+pt\x84nbO3" +
	"Zw\xf1&\xbe:T\xe0\xb8r$xbRB]" +
	"%\x95\x923\x0d\xdbH\x19\x19\x86\xe1I\xde\x0d\x8b}" +
	"\xfc>\x1bb\xc5\xcd\xfa\xf5\x83\x19\x9d\xbf\x97'-\xee" +
	"Qc\xbc\xc2v<\x95\xef\xa6\xbf\xbb\xf2\x1dO\xd3\x9c" +
	"=\x8c\xb1\xa0\xb0\xe1F\x16\xc7\x0d\x94\xc9\x87\xe8\x1bO" +
	"\x89\x80\x7fmhw\xed#\x01\xe8\xcb)\xdd}.q" +
	"\xdcJ\x1f\xa2\xf6\x8c+}!\x8b\xf3\xf4\xbda\xf0\x18" +
	"\x85\xbe2\xda\xd2\x86t\xc3\xa4\x1d,,/\xbc+\x08" +
	"+\x9d\xb1v\xf5\xab8\xd5\xf55\x95\xb8\x15\x1a\x02w" +
	"89\xd4\x88m\xa7\xea\xe8\x0c[\xb8\x93\x9d\xddL\x8d" +
	"\xee}UU\x8c\x1c\x03\x88\xbcn\xc0\xb6$1\xfb\x9a" +
	".\x8a\xeb\x08Eq3<\xdb\xf2\x02\xb8\x05\x8d\x19{" +
	"\xf8\xde\xf7TYf\xac\xfb\x8dQ\x0a\xa8\xbf\x07AK" +
	"\xe3\xad\xa8\xa1\x99\x04\x9d\xbd\xa1\xf7\x06\x9e\x90\x03\xb7\x03" +
	"(\x97\xb8\xe7\xee$U\x8b\xf6\xa8,8\x0a\xce)o" +
	"Q\xb3}\xc8Ma\xbc1\xf7Y\x8b\x9a\xc4\x0c\xbd\x90" +
	"g\xb9\xd2P\xf0\x90\xca\xb3\xf6i\"\xe6\xbc\x1f0\xbf" +
	"\x8f\xe3\xe5\xa0\xf6\xe0?\x91@\xd3{\xd8!1i\x07" +
	"\xa7H;\x8bI;1E\xd1'M}\xd819\xdd" +
	"\x0f^\xf2y\x09?\xb5R,\xbcD\xcd\xd0\xd7\xd9\xd9" +
	"\x0c\x84\xdeT\xf1\x81\x0e\x90\x8ct\x01\xab\x83\x97~S" +
	"\xb0R1]\xc3K\xcd6z\xcd,\xdd\xa2^\xa7h" +
	"\x1a\xacm\xcc\xd91f\x96\xa1\xae(b\x89t\x1aq" +
	"J:\xcdN\x0c\x91\x8c\xf5\x06\xfe\x04\x8b>\xa6`\x16" +
	"\xb3\xe9\xdd\x02:iu[gF\xb5,\xc0U\xbe\x07" +
	"\x0c\xc6\x9aJ\x8c5\x87\xc7\xba\xc6m\xaaC\x9c\xc9\xfa" +
	"\x1e\xe1\xe8\x16I}s\xffot7\xd3\x01\xcd\xc5l" +
	"c\xd2\x10\xd3\x05&\xc7\x02\xc7\x89\xb8\x95\xcb\xf05\xc2" +
	"\x02\xfdb;6\xb1&t\x93$\x0b6\xb5<\xc0\x07" +
	"\xa1\xdc\x8b\x1d\x97^\xba\x7f\xf1\xeb7\xcd,\x94\xf3\x85" +
	"\x09\xd2\xc48=V\x9ax2\x89\xee\"U\x83%S" +
	"\xc0I)^\xf9\x03\x08\xf5Fyt\x10tc\xbd\x7f" +
	"\xfcA\xfd\xfe\xc7\xb77\xef\xfb\xe8^Bz\xddn\xac" +
	"\xd7?\x05\xb4\xda\xb0\x07g\xbc-\xef\xd9&7\xe6Y" +
	"b\xa4\x1ak\xb0\xf2]\x8f\xc6\x84\x1a<\x19\x80\xacb" +
	"v{\xa6\x88\xca\x87\x84\xff\x0a\xc3\x8c\x1c+@?\x9e" +
	"\xd0\xe6=%\x13~\xf3m\xc6\xc9DEy5z/" +
	"W\xbc\x87+\xeec'W\x9dsYV1\xc2\x8b\xdb" +
	"\xa8\x9c\"\x14[\xf8\xcc\xf7\xf2nZ\x99\xfa\xe5\xb1\xfa" +
	"\x00z\x8cI\xab\xcc\xc2\xf0?\xecT\xae\x09\xfd\x8fM" +
	"t\xc2{\xbe\xfc\xee'\xcb\xa7\xf8J\xdd\xcbT\xb5\xdb" +
	"\xad\xdb\xfaJ\xbdw\x07\x80\xb2\xdf}\xbb\xe0+\xf5a" +
	"fX\xf7\x89\xa8<% \x89\x16\xdd\xd5\xa1]\x00\xca" +
	"S\"*\xbf\x17\x10#\x18\xfa\x977\xf2\xd2u \x10" +
	"1\xeab\xe9y\xc6\xf1'\"*\xaf\x0aL\xd5,}" +
	"\x0f=\xe7]|\xd6\xfd\xf7\xfc\xf6\xca/\xed\x0e\x9e\x1a" +
	"\x17[\x86\xad}\x9e\xc9\x06\xcf\x0a\xb8\xc9\xb6\xbawn" +
	"\xc0\xc2o\x92\x16Y\x94}>\xeck\xacH\xec\xbd\x06" +
	"A\xef\xfc\xfc\xb7\xaa]:\xb4\xba\xb7d0\xdbo\xc1" +
	"\xce\xec\xf1\xf1h\xca\xc8\xbc\x0fK\xcd\x153s\xbc^" +
	"\xb1]3Pg\xce\x81\xd7Y\xaa\x98wX3\xd9\xfd" +
	"Fk\xb8\x03Lt\x075\x8cV\xdd0\xb3j\x06*" +
	"\x9c\xb4\xb1]\xcf\x18j:\x14j\xfcg\x00\x00\x00\xff" +
	"\xff\x99O;$"

func init() {
	schemas.Register(schema_a8cb0f2f1a756b32,
		0x8139673a82bfe07d,
		0x81535505f60de028,
		0x8193ac6cb5429c83,
		0x81f5066b5576a609,
		0x82130007ccd2888f,
		0x8374b67102f894cf,
		0x8becd48bdafc1e45,
		0x8ea31bdb4c044f01,
		0x9398280f1359570a,
		0x9497e63b399a2c01,
		0x974fa7d7260b143e,
		0x99ffc2f3f69a6a9f,
		0x9a712ce3fcad8cd8,
		0x9e582e7e054088ae,
		0x9ea7265092c11606,
		0x9f79c33e20119e8d,
		0xa1ece076a7105939,
		0xa50711a14d35a8ce,
		0xa87d65bed9b60243,
		0xaa6ef20a62c1cafd,
		0xaaf9021b627cc1f9,
		0xabc45cb0fd79fba8,
		0xadef95edc22ca880,
		0xaf480a0c6cab8887,
		0xb37b21e300864885,
		0xb39cc44599b3a41b,
		0xb4b873147ab5ce5e,
		0xb4e5f4cccb748429,
		0xb7d82eac416ab63e,
		0xbaace870544663eb,
		0xbc353583a3731ade,
		0xbd6b5bb69c784877,
		0xbda585bffe1dc7e8,
		0xbf0e0653dc266205,
		0xc0643ea68efc60ae,
		0xc60d14bf989d4454,
		0xc7c9c9b19d935e79,
		0xca2d58de88f0b32e,
		0xcc561276d31b392b,
		0xcd94acddf4778328,
		0xd22c0be5b9c16558,
		0xd26a7affce43b1c0,
		0xd2e47e8eac54ea7e,
		0xd684c6a791b97dbc,
		0xd7051b9757f6b096,
		0xd7aff1fe39659132,
		0xd97fb0647c80b844,
		0xe9a02a3219bdbd70,
		0xe9ff06beec4e73d6,
		0xeba76bffb27b1975,
		0xed8a0ae9139c89c2,
		0xef174541b62cac82,
		0xf001fc1d5e574a07,
		0xf0475101099acdc9,
		0xf1c587295608596e,
		0xf405ef1c8e600f0f,
		0xf5cae52becabc767,
		0xf64da2416445f8b6,
		0xf72d33f93d1ebb59)
}

var x_a8cb0f2f1a756b32 = []byte{
	0, 0, 0, 0, 45, 0, 0, 0,
	1, 0, 0, 0, 118, 0, 0, 0,
	53, 0, 0, 0, 146, 0, 0, 0,
	61, 0, 0, 0, 130, 0, 0, 0,
	65, 0, 0, 0, 114, 0, 0, 0,
	69, 0, 0, 0, 90, 0, 0, 0,
	73, 0, 0, 0, 82, 0, 0, 0,
	77, 0, 0, 0, 90, 0, 0, 0,
	81, 0, 0, 0, 98, 0, 0, 0,
	85, 0, 0, 0, 130, 0, 0, 0,
	89, 0, 0, 0, 90, 0, 0, 0,
	93, 0, 0, 0, 82, 0, 0, 0,
	97, 0, 0, 0, 130, 0, 0, 0,
	101, 0, 0, 0, 138, 0, 0, 0,
	109, 0, 0, 0, 98, 0, 0, 0,
	113, 0, 0, 0, 106, 0, 0, 0,
	120, 45, 115, 97, 110, 100, 115, 116,
	111, 114, 109, 45, 97, 112, 112, 45,
	42, 0, 0, 0, 0, 0, 0, 0,
	111, 99, 45, 116, 111, 116, 97, 108,
	45, 108, 101, 110, 103, 116, 104, 0,
	111, 99, 45, 99, 104, 117, 110, 107,
	45, 115, 105, 122, 101, 0, 0, 0,
	120, 45, 111, 99, 45, 109, 116, 105,
	109, 101, 0, 0, 0, 0, 0, 0,
	111, 99, 45, 102, 105, 108, 101, 105,
	100, 0, 0, 0, 0, 0, 0, 0,
	111, 99, 45, 99, 104, 117, 110, 107,
	101, 100, 0, 0, 0, 0, 0, 0,
	111, 99, 45, 99, 104, 101, 99, 107,
	115, 117, 109, 0, 0, 0, 0, 0,
	111, 99, 45, 99, 104, 117, 110, 107,
	45, 111, 102, 102, 115, 101, 116, 0,
	111, 99, 45, 108, 97, 122, 121, 111,
	112, 115, 0, 0, 0, 0, 0, 0,
	120, 45, 104, 103, 97, 114, 103, 45,
	42, 0, 0, 0, 0, 0, 0, 0,
	120, 45, 112, 104, 97, 98, 114, 105,
	99, 97, 116, 111, 114, 45, 42, 0,
	120, 45, 114, 101, 113, 117, 101, 115,
	116, 101, 100, 45, 119, 105, 116, 104,
	0, 0, 0, 0, 0, 0, 0, 0,
	120, 45, 99, 115, 114, 102, 116, 111,
	107, 101, 110, 0, 0, 0, 0, 0,
	120, 45, 99, 115, 114, 102, 45, 116,
	111, 107, 101, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	1, 0, 0, 0, 22, 0, 0, 0,
	5, 0, 0, 0, 146, 0, 0, 0,
	13, 0, 0, 0, 90, 0, 0, 0,
	120, 45, 115, 97, 110, 100, 115, 116,
	111, 114, 109, 45, 97, 112, 112, 45,
	42, 0, 0, 0, 0, 0, 0, 0,
	120, 45, 111, 99, 45, 109, 116, 105,
	109, 101, 0, 0, 0, 0, 0, 0,
}
