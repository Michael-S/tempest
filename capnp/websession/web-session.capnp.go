// Code generated by capnpc-go. DO NOT EDIT.

package websession

import (
	context "context"
	math "math"
	strconv "strconv"
	util "zenhack.net/go/sandstorm/capnp/util"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

const HttpStatus = uint64(0xaf480a0c6cab8887)

// Constants defined in web-session.capnp.
const (
	HttpStatusAnnotationId = uint64(12630356203439622279)
)

// Constants defined in web-session.capnp.
var (
	WebSession_Context_headerWhitelist  = capnp.TextList{List: capnp.MustUnmarshalRoot(x_a8cb0f2f1a756b32[0:248]).List()}
	WebSession_Response_headerWhitelist = capnp.TextList{List: capnp.MustUnmarshalRoot(x_a8cb0f2f1a756b32[248:320]).List()}
)

type HttpStatusDescriptor struct{ capnp.Struct }

// HttpStatusDescriptor_TypeID is the unique identifier for the type HttpStatusDescriptor.
const HttpStatusDescriptor_TypeID = 0xbc353583a3731ade

func NewHttpStatusDescriptor(s *capnp.Segment) (HttpStatusDescriptor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HttpStatusDescriptor{st}, err
}

func NewRootHttpStatusDescriptor(s *capnp.Segment) (HttpStatusDescriptor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HttpStatusDescriptor{st}, err
}

func ReadRootHttpStatusDescriptor(msg *capnp.Message) (HttpStatusDescriptor, error) {
	root, err := msg.Root()
	return HttpStatusDescriptor{root.Struct()}, err
}

func (s HttpStatusDescriptor) String() string {
	str, _ := text.Marshal(0xbc353583a3731ade, s.Struct)
	return str
}

func (s HttpStatusDescriptor) Id() uint16 {
	return s.Struct.Uint16(0)
}

func (s HttpStatusDescriptor) SetId(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s HttpStatusDescriptor) Title() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HttpStatusDescriptor) HasTitle() bool {
	return s.Struct.HasPtr(0)
}

func (s HttpStatusDescriptor) TitleBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HttpStatusDescriptor) SetTitle(v string) error {
	return s.Struct.SetText(0, v)
}

// HttpStatusDescriptor_List is a list of HttpStatusDescriptor.
type HttpStatusDescriptor_List struct{ capnp.List }

// NewHttpStatusDescriptor creates a new list of HttpStatusDescriptor.
func NewHttpStatusDescriptor_List(s *capnp.Segment, sz int32) (HttpStatusDescriptor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return HttpStatusDescriptor_List{l}, err
}

func (s HttpStatusDescriptor_List) At(i int) HttpStatusDescriptor {
	return HttpStatusDescriptor{s.List.Struct(i)}
}

func (s HttpStatusDescriptor_List) Set(i int, v HttpStatusDescriptor) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HttpStatusDescriptor_List) String() string {
	str, _ := text.MarshalList(0xbc353583a3731ade, s.List)
	return str
}

// HttpStatusDescriptor_Future is a wrapper for a HttpStatusDescriptor promised by a client call.
type HttpStatusDescriptor_Future struct{ *capnp.Future }

func (p HttpStatusDescriptor_Future) Struct() (HttpStatusDescriptor, error) {
	s, err := p.Future.Struct()
	return HttpStatusDescriptor{s}, err
}

type WebSession struct{ Client *capnp.Client }

// WebSession_TypeID is the unique identifier for the type WebSession.
const WebSession_TypeID = 0xa50711a14d35a8ce

func (c WebSession) Get(ctx context.Context, params func(WebSession_get_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Post(ctx context.Context, params func(WebSession_post_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_post_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) OpenWebSocket(ctx context.Context, params func(WebSession_openWebSocket_Params) error) (WebSession_openWebSocket_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_openWebSocket_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_openWebSocket_Results_Future{Future: ans.Future()}, release
}
func (c WebSession) Put(ctx context.Context, params func(WebSession_put_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_put_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Delete(ctx context.Context, params func(WebSession_delete_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_delete_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) PostStreaming(ctx context.Context, params func(WebSession_postStreaming_Params) error) (WebSession_postStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_postStreaming_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_postStreaming_Results_Future{Future: ans.Future()}, release
}
func (c WebSession) PutStreaming(ctx context.Context, params func(WebSession_putStreaming_Params) error) (WebSession_putStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_putStreaming_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_putStreaming_Results_Future{Future: ans.Future()}, release
}
func (c WebSession) Propfind(ctx context.Context, params func(WebSession_propfind_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_propfind_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Proppatch(ctx context.Context, params func(WebSession_proppatch_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_proppatch_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Mkcol(ctx context.Context, params func(WebSession_mkcol_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_mkcol_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Copy(ctx context.Context, params func(WebSession_copy_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_copy_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Move(ctx context.Context, params func(WebSession_move_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_move_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Lock(ctx context.Context, params func(WebSession_lock_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_lock_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Unlock(ctx context.Context, params func(WebSession_unlock_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_unlock_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Acl(ctx context.Context, params func(WebSession_acl_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_acl_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Report(ctx context.Context, params func(WebSession_report_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_report_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Options(ctx context.Context, params func(WebSession_options_Params) error) (WebSession_Options_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_options_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Options_Future{Future: ans.Future()}, release
}
func (c WebSession) Patch(ctx context.Context, params func(WebSession_patch_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_patch_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}

// A WebSession_Server is a WebSession with a local implementation.
type WebSession_Server interface {
	Get(context.Context, WebSession_get) error

	Post(context.Context, WebSession_post) error

	OpenWebSocket(context.Context, WebSession_openWebSocket) error

	Put(context.Context, WebSession_put) error

	Delete(context.Context, WebSession_delete) error

	PostStreaming(context.Context, WebSession_postStreaming) error

	PutStreaming(context.Context, WebSession_putStreaming) error

	Propfind(context.Context, WebSession_propfind) error

	Proppatch(context.Context, WebSession_proppatch) error

	Mkcol(context.Context, WebSession_mkcol) error

	Copy(context.Context, WebSession_copy) error

	Move(context.Context, WebSession_move) error

	Lock(context.Context, WebSession_lock) error

	Unlock(context.Context, WebSession_unlock) error

	Acl(context.Context, WebSession_acl) error

	Report(context.Context, WebSession_report) error

	Options(context.Context, WebSession_options) error

	Patch(context.Context, WebSession_patch) error
}

// WebSession_NewServer creates a new Server from an implementation of WebSession_Server.
func WebSession_NewServer(s WebSession_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WebSession_Methods(nil, s), s, c, policy)
}

// WebSession_ServerToClient creates a new Client from an implementation of WebSession_Server.
// The caller is responsible for calling Release on the returned Client.
func WebSession_ServerToClient(s WebSession_Server, policy *server.Policy) WebSession {
	return WebSession{Client: capnp.NewClient(WebSession_NewServer(s, policy))}
}

// WebSession_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WebSession_Methods(methods []server.Method, s WebSession_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 18)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, WebSession_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Post(ctx, WebSession_post{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.OpenWebSocket(ctx, WebSession_openWebSocket{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, WebSession_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Delete(ctx, WebSession_delete{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PostStreaming(ctx, WebSession_postStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PutStreaming(ctx, WebSession_putStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Propfind(ctx, WebSession_propfind{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Proppatch(ctx, WebSession_proppatch{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Mkcol(ctx, WebSession_mkcol{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Copy(ctx, WebSession_copy{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Move(ctx, WebSession_move{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lock(ctx, WebSession_lock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unlock(ctx, WebSession_unlock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Acl(ctx, WebSession_acl{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Report(ctx, WebSession_report{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Options(ctx, WebSession_options{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Patch(ctx, WebSession_patch{call})
		},
	})

	return methods
}

// WebSession_get holds the state for a server call to WebSession.get.
// See server.Call for documentation.
type WebSession_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_get) Args() WebSession_get_Params {
	return WebSession_get_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_get) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_post holds the state for a server call to WebSession.post.
// See server.Call for documentation.
type WebSession_post struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_post) Args() WebSession_post_Params {
	return WebSession_post_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_post) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_openWebSocket holds the state for a server call to WebSession.openWebSocket.
// See server.Call for documentation.
type WebSession_openWebSocket struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_openWebSocket) Args() WebSession_openWebSocket_Params {
	return WebSession_openWebSocket_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_openWebSocket) AllocResults() (WebSession_openWebSocket_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_openWebSocket_Results{Struct: r}, err
}

// WebSession_put holds the state for a server call to WebSession.put.
// See server.Call for documentation.
type WebSession_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_put) Args() WebSession_put_Params {
	return WebSession_put_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_put) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_delete holds the state for a server call to WebSession.delete.
// See server.Call for documentation.
type WebSession_delete struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_delete) Args() WebSession_delete_Params {
	return WebSession_delete_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_delete) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_postStreaming holds the state for a server call to WebSession.postStreaming.
// See server.Call for documentation.
type WebSession_postStreaming struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_postStreaming) Args() WebSession_postStreaming_Params {
	return WebSession_postStreaming_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_postStreaming) AllocResults() (WebSession_postStreaming_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_postStreaming_Results{Struct: r}, err
}

// WebSession_putStreaming holds the state for a server call to WebSession.putStreaming.
// See server.Call for documentation.
type WebSession_putStreaming struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_putStreaming) Args() WebSession_putStreaming_Params {
	return WebSession_putStreaming_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_putStreaming) AllocResults() (WebSession_putStreaming_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_putStreaming_Results{Struct: r}, err
}

// WebSession_propfind holds the state for a server call to WebSession.propfind.
// See server.Call for documentation.
type WebSession_propfind struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_propfind) Args() WebSession_propfind_Params {
	return WebSession_propfind_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_propfind) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_proppatch holds the state for a server call to WebSession.proppatch.
// See server.Call for documentation.
type WebSession_proppatch struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_proppatch) Args() WebSession_proppatch_Params {
	return WebSession_proppatch_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_proppatch) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_mkcol holds the state for a server call to WebSession.mkcol.
// See server.Call for documentation.
type WebSession_mkcol struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_mkcol) Args() WebSession_mkcol_Params {
	return WebSession_mkcol_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_mkcol) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_copy holds the state for a server call to WebSession.copy.
// See server.Call for documentation.
type WebSession_copy struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_copy) Args() WebSession_copy_Params {
	return WebSession_copy_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_copy) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_move holds the state for a server call to WebSession.move.
// See server.Call for documentation.
type WebSession_move struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_move) Args() WebSession_move_Params {
	return WebSession_move_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_move) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_lock holds the state for a server call to WebSession.lock.
// See server.Call for documentation.
type WebSession_lock struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_lock) Args() WebSession_lock_Params {
	return WebSession_lock_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_lock) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_unlock holds the state for a server call to WebSession.unlock.
// See server.Call for documentation.
type WebSession_unlock struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_unlock) Args() WebSession_unlock_Params {
	return WebSession_unlock_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_unlock) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_acl holds the state for a server call to WebSession.acl.
// See server.Call for documentation.
type WebSession_acl struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_acl) Args() WebSession_acl_Params {
	return WebSession_acl_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_acl) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_report holds the state for a server call to WebSession.report.
// See server.Call for documentation.
type WebSession_report struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_report) Args() WebSession_report_Params {
	return WebSession_report_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_report) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_options holds the state for a server call to WebSession.options.
// See server.Call for documentation.
type WebSession_options struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_options) Args() WebSession_options_Params {
	return WebSession_options_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_options) AllocResults() (WebSession_Options, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_Options{Struct: r}, err
}

// WebSession_patch holds the state for a server call to WebSession.patch.
// See server.Call for documentation.
type WebSession_patch struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_patch) Args() WebSession_patch_Params {
	return WebSession_patch_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_patch) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

type WebSession_Params struct{ capnp.Struct }

// WebSession_Params_TypeID is the unique identifier for the type WebSession_Params.
const WebSession_Params_TypeID = 0xd7051b9757f6b096

func NewWebSession_Params(s *capnp.Segment) (WebSession_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_Params{st}, err
}

func NewRootWebSession_Params(s *capnp.Segment) (WebSession_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_Params{st}, err
}

func ReadRootWebSession_Params(msg *capnp.Message) (WebSession_Params, error) {
	root, err := msg.Root()
	return WebSession_Params{root.Struct()}, err
}

func (s WebSession_Params) String() string {
	str, _ := text.Marshal(0xd7051b9757f6b096, s.Struct)
	return str
}

func (s WebSession_Params) BasePath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_Params) HasBasePath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Params) BasePathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_Params) SetBasePath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_Params) UserAgent() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Params) HasUserAgent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Params) UserAgentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Params) SetUserAgent(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_Params) AcceptableLanguages() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s WebSession_Params) HasAcceptableLanguages() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_Params) SetAcceptableLanguages(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewAcceptableLanguages sets the acceptableLanguages field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s WebSession_Params) NewAcceptableLanguages(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// WebSession_Params_List is a list of WebSession_Params.
type WebSession_Params_List struct{ capnp.List }

// NewWebSession_Params creates a new list of WebSession_Params.
func NewWebSession_Params_List(s *capnp.Segment, sz int32) (WebSession_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_Params_List{l}, err
}

func (s WebSession_Params_List) At(i int) WebSession_Params {
	return WebSession_Params{s.List.Struct(i)}
}

func (s WebSession_Params_List) Set(i int, v WebSession_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Params_List) String() string {
	str, _ := text.MarshalList(0xd7051b9757f6b096, s.List)
	return str
}

// WebSession_Params_Future is a wrapper for a WebSession_Params promised by a client call.
type WebSession_Params_Future struct{ *capnp.Future }

func (p WebSession_Params_Future) Struct() (WebSession_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_Params{s}, err
}

type WebSession_Context struct{ capnp.Struct }
type WebSession_Context_eTagPrecondition WebSession_Context
type WebSession_Context_eTagPrecondition_Which uint16

const (
	WebSession_Context_eTagPrecondition_Which_none          WebSession_Context_eTagPrecondition_Which = 0
	WebSession_Context_eTagPrecondition_Which_exists        WebSession_Context_eTagPrecondition_Which = 1
	WebSession_Context_eTagPrecondition_Which_doesntExist   WebSession_Context_eTagPrecondition_Which = 4
	WebSession_Context_eTagPrecondition_Which_matchesOneOf  WebSession_Context_eTagPrecondition_Which = 2
	WebSession_Context_eTagPrecondition_Which_matchesNoneOf WebSession_Context_eTagPrecondition_Which = 3
)

func (w WebSession_Context_eTagPrecondition_Which) String() string {
	const s = "noneexistsdoesntExistmatchesOneOfmatchesNoneOf"
	switch w {
	case WebSession_Context_eTagPrecondition_Which_none:
		return s[0:4]
	case WebSession_Context_eTagPrecondition_Which_exists:
		return s[4:10]
	case WebSession_Context_eTagPrecondition_Which_doesntExist:
		return s[10:21]
	case WebSession_Context_eTagPrecondition_Which_matchesOneOf:
		return s[21:33]
	case WebSession_Context_eTagPrecondition_Which_matchesNoneOf:
		return s[33:46]

	}
	return "WebSession_Context_eTagPrecondition_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// WebSession_Context_TypeID is the unique identifier for the type WebSession_Context.
const WebSession_Context_TypeID = 0xf5cae52becabc767

func NewWebSession_Context(s *capnp.Segment) (WebSession_Context, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return WebSession_Context{st}, err
}

func NewRootWebSession_Context(s *capnp.Segment) (WebSession_Context, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return WebSession_Context{st}, err
}

func ReadRootWebSession_Context(msg *capnp.Message) (WebSession_Context, error) {
	root, err := msg.Root()
	return WebSession_Context{root.Struct()}, err
}

func (s WebSession_Context) String() string {
	str, _ := text.Marshal(0xf5cae52becabc767, s.Struct)
	return str
}

func (s WebSession_Context) Cookies() (util.KeyValue_List, error) {
	p, err := s.Struct.Ptr(0)
	return util.KeyValue_List{List: p.List()}, err
}

func (s WebSession_Context) HasCookies() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Context) SetCookies(v util.KeyValue_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCookies sets the cookies field to a newly
// allocated util.KeyValue_List, preferring placement in s's segment.
func (s WebSession_Context) NewCookies(n int32) (util.KeyValue_List, error) {
	l, err := util.NewKeyValue_List(s.Struct.Segment(), n)
	if err != nil {
		return util.KeyValue_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s WebSession_Context) ResponseStream() util.ByteStream {
	p, _ := s.Struct.Ptr(1)
	return util.ByteStream{Client: p.Interface().Client()}
}

func (s WebSession_Context) HasResponseStream() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Context) SetResponseStream(v util.ByteStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

func (s WebSession_Context) Accept() (WebSession_AcceptedType_List, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_AcceptedType_List{List: p.List()}, err
}

func (s WebSession_Context) HasAccept() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_Context) SetAccept(v WebSession_AcceptedType_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewAccept sets the accept field to a newly
// allocated WebSession_AcceptedType_List, preferring placement in s's segment.
func (s WebSession_Context) NewAccept(n int32) (WebSession_AcceptedType_List, error) {
	l, err := NewWebSession_AcceptedType_List(s.Struct.Segment(), n)
	if err != nil {
		return WebSession_AcceptedType_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s WebSession_Context) AcceptEncoding() (WebSession_AcceptedEncoding_List, error) {
	p, err := s.Struct.Ptr(5)
	return WebSession_AcceptedEncoding_List{List: p.List()}, err
}

func (s WebSession_Context) HasAcceptEncoding() bool {
	return s.Struct.HasPtr(5)
}

func (s WebSession_Context) SetAcceptEncoding(v WebSession_AcceptedEncoding_List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewAcceptEncoding sets the acceptEncoding field to a newly
// allocated WebSession_AcceptedEncoding_List, preferring placement in s's segment.
func (s WebSession_Context) NewAcceptEncoding(n int32) (WebSession_AcceptedEncoding_List, error) {
	l, err := NewWebSession_AcceptedEncoding_List(s.Struct.Segment(), n)
	if err != nil {
		return WebSession_AcceptedEncoding_List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

func (s WebSession_Context) ETagPrecondition() WebSession_Context_eTagPrecondition {
	return WebSession_Context_eTagPrecondition(s)
}

func (s WebSession_Context_eTagPrecondition) Which() WebSession_Context_eTagPrecondition_Which {
	return WebSession_Context_eTagPrecondition_Which(s.Struct.Uint16(0))
}
func (s WebSession_Context_eTagPrecondition) SetNone() {
	s.Struct.SetUint16(0, 0)

}

func (s WebSession_Context_eTagPrecondition) SetExists() {
	s.Struct.SetUint16(0, 1)

}

func (s WebSession_Context_eTagPrecondition) SetDoesntExist() {
	s.Struct.SetUint16(0, 4)

}

func (s WebSession_Context_eTagPrecondition) MatchesOneOf() (WebSession_ETag_List, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != matchesOneOf")
	}
	p, err := s.Struct.Ptr(4)
	return WebSession_ETag_List{List: p.List()}, err
}

func (s WebSession_Context_eTagPrecondition) HasMatchesOneOf() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	return s.Struct.HasPtr(4)
}

func (s WebSession_Context_eTagPrecondition) SetMatchesOneOf(v WebSession_ETag_List) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewMatchesOneOf sets the matchesOneOf field to a newly
// allocated WebSession_ETag_List, preferring placement in s's segment.
func (s WebSession_Context_eTagPrecondition) NewMatchesOneOf(n int32) (WebSession_ETag_List, error) {
	s.Struct.SetUint16(0, 2)
	l, err := NewWebSession_ETag_List(s.Struct.Segment(), n)
	if err != nil {
		return WebSession_ETag_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s WebSession_Context_eTagPrecondition) MatchesNoneOf() (WebSession_ETag_List, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != matchesNoneOf")
	}
	p, err := s.Struct.Ptr(4)
	return WebSession_ETag_List{List: p.List()}, err
}

func (s WebSession_Context_eTagPrecondition) HasMatchesNoneOf() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	return s.Struct.HasPtr(4)
}

func (s WebSession_Context_eTagPrecondition) SetMatchesNoneOf(v WebSession_ETag_List) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewMatchesNoneOf sets the matchesNoneOf field to a newly
// allocated WebSession_ETag_List, preferring placement in s's segment.
func (s WebSession_Context_eTagPrecondition) NewMatchesNoneOf(n int32) (WebSession_ETag_List, error) {
	s.Struct.SetUint16(0, 3)
	l, err := NewWebSession_ETag_List(s.Struct.Segment(), n)
	if err != nil {
		return WebSession_ETag_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s WebSession_Context) AdditionalHeaders() (WebSession_Context_Header_List, error) {
	p, err := s.Struct.Ptr(3)
	return WebSession_Context_Header_List{List: p.List()}, err
}

func (s WebSession_Context) HasAdditionalHeaders() bool {
	return s.Struct.HasPtr(3)
}

func (s WebSession_Context) SetAdditionalHeaders(v WebSession_Context_Header_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewAdditionalHeaders sets the additionalHeaders field to a newly
// allocated WebSession_Context_Header_List, preferring placement in s's segment.
func (s WebSession_Context) NewAdditionalHeaders(n int32) (WebSession_Context_Header_List, error) {
	l, err := NewWebSession_Context_Header_List(s.Struct.Segment(), n)
	if err != nil {
		return WebSession_Context_Header_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// WebSession_Context_List is a list of WebSession_Context.
type WebSession_Context_List struct{ capnp.List }

// NewWebSession_Context creates a new list of WebSession_Context.
func NewWebSession_Context_List(s *capnp.Segment, sz int32) (WebSession_Context_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6}, sz)
	return WebSession_Context_List{l}, err
}

func (s WebSession_Context_List) At(i int) WebSession_Context {
	return WebSession_Context{s.List.Struct(i)}
}

func (s WebSession_Context_List) Set(i int, v WebSession_Context) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Context_List) String() string {
	str, _ := text.MarshalList(0xf5cae52becabc767, s.List)
	return str
}

// WebSession_Context_Future is a wrapper for a WebSession_Context promised by a client call.
type WebSession_Context_Future struct{ *capnp.Future }

func (p WebSession_Context_Future) Struct() (WebSession_Context, error) {
	s, err := p.Future.Struct()
	return WebSession_Context{s}, err
}

func (p WebSession_Context_Future) ResponseStream() util.ByteStream {
	return util.ByteStream{Client: p.Future.Field(1, nil).Client()}
}

func (p WebSession_Context_Future) ETagPrecondition() WebSession_Context_eTagPrecondition_Future {
	return WebSession_Context_eTagPrecondition_Future{p.Future}
}

// WebSession_Context_eTagPrecondition_Future is a wrapper for a WebSession_Context_eTagPrecondition promised by a client call.
type WebSession_Context_eTagPrecondition_Future struct{ *capnp.Future }

func (p WebSession_Context_eTagPrecondition_Future) Struct() (WebSession_Context_eTagPrecondition, error) {
	s, err := p.Future.Struct()
	return WebSession_Context_eTagPrecondition{s}, err
}

type WebSession_Context_Header struct{ capnp.Struct }

// WebSession_Context_Header_TypeID is the unique identifier for the type WebSession_Context_Header.
const WebSession_Context_Header_TypeID = 0xb4e5f4cccb748429

func NewWebSession_Context_Header(s *capnp.Segment) (WebSession_Context_Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_Context_Header{st}, err
}

func NewRootWebSession_Context_Header(s *capnp.Segment) (WebSession_Context_Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_Context_Header{st}, err
}

func ReadRootWebSession_Context_Header(msg *capnp.Message) (WebSession_Context_Header, error) {
	root, err := msg.Root()
	return WebSession_Context_Header{root.Struct()}, err
}

func (s WebSession_Context_Header) String() string {
	str, _ := text.Marshal(0xb4e5f4cccb748429, s.Struct)
	return str
}

func (s WebSession_Context_Header) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_Context_Header) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Context_Header) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_Context_Header) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_Context_Header) Value() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Context_Header) HasValue() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Context_Header) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Context_Header) SetValue(v string) error {
	return s.Struct.SetText(1, v)
}

// WebSession_Context_Header_List is a list of WebSession_Context_Header.
type WebSession_Context_Header_List struct{ capnp.List }

// NewWebSession_Context_Header creates a new list of WebSession_Context_Header.
func NewWebSession_Context_Header_List(s *capnp.Segment, sz int32) (WebSession_Context_Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return WebSession_Context_Header_List{l}, err
}

func (s WebSession_Context_Header_List) At(i int) WebSession_Context_Header {
	return WebSession_Context_Header{s.List.Struct(i)}
}

func (s WebSession_Context_Header_List) Set(i int, v WebSession_Context_Header) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Context_Header_List) String() string {
	str, _ := text.MarshalList(0xb4e5f4cccb748429, s.List)
	return str
}

// WebSession_Context_Header_Future is a wrapper for a WebSession_Context_Header promised by a client call.
type WebSession_Context_Header_Future struct{ *capnp.Future }

func (p WebSession_Context_Header_Future) Struct() (WebSession_Context_Header, error) {
	s, err := p.Future.Struct()
	return WebSession_Context_Header{s}, err
}

type WebSession_PostContent struct{ capnp.Struct }

// WebSession_PostContent_TypeID is the unique identifier for the type WebSession_PostContent.
const WebSession_PostContent_TypeID = 0xb7d82eac416ab63e

func NewWebSession_PostContent(s *capnp.Segment) (WebSession_PostContent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_PostContent{st}, err
}

func NewRootWebSession_PostContent(s *capnp.Segment) (WebSession_PostContent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_PostContent{st}, err
}

func ReadRootWebSession_PostContent(msg *capnp.Message) (WebSession_PostContent, error) {
	root, err := msg.Root()
	return WebSession_PostContent{root.Struct()}, err
}

func (s WebSession_PostContent) String() string {
	str, _ := text.Marshal(0xb7d82eac416ab63e, s.Struct)
	return str
}

func (s WebSession_PostContent) MimeType() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_PostContent) HasMimeType() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_PostContent) MimeTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_PostContent) SetMimeType(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_PostContent) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s WebSession_PostContent) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_PostContent) SetContent(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s WebSession_PostContent) Encoding() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s WebSession_PostContent) HasEncoding() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_PostContent) EncodingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s WebSession_PostContent) SetEncoding(v string) error {
	return s.Struct.SetText(2, v)
}

// WebSession_PostContent_List is a list of WebSession_PostContent.
type WebSession_PostContent_List struct{ capnp.List }

// NewWebSession_PostContent creates a new list of WebSession_PostContent.
func NewWebSession_PostContent_List(s *capnp.Segment, sz int32) (WebSession_PostContent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_PostContent_List{l}, err
}

func (s WebSession_PostContent_List) At(i int) WebSession_PostContent {
	return WebSession_PostContent{s.List.Struct(i)}
}

func (s WebSession_PostContent_List) Set(i int, v WebSession_PostContent) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_PostContent_List) String() string {
	str, _ := text.MarshalList(0xb7d82eac416ab63e, s.List)
	return str
}

// WebSession_PostContent_Future is a wrapper for a WebSession_PostContent promised by a client call.
type WebSession_PostContent_Future struct{ *capnp.Future }

func (p WebSession_PostContent_Future) Struct() (WebSession_PostContent, error) {
	s, err := p.Future.Struct()
	return WebSession_PostContent{s}, err
}

type WebSession_PutContent struct{ capnp.Struct }

// WebSession_PutContent_TypeID is the unique identifier for the type WebSession_PutContent.
const WebSession_PutContent_TypeID = 0xd7aff1fe39659132

func NewWebSession_PutContent(s *capnp.Segment) (WebSession_PutContent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_PutContent{st}, err
}

func NewRootWebSession_PutContent(s *capnp.Segment) (WebSession_PutContent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_PutContent{st}, err
}

func ReadRootWebSession_PutContent(msg *capnp.Message) (WebSession_PutContent, error) {
	root, err := msg.Root()
	return WebSession_PutContent{root.Struct()}, err
}

func (s WebSession_PutContent) String() string {
	str, _ := text.Marshal(0xd7aff1fe39659132, s.Struct)
	return str
}

func (s WebSession_PutContent) MimeType() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_PutContent) HasMimeType() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_PutContent) MimeTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_PutContent) SetMimeType(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_PutContent) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s WebSession_PutContent) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_PutContent) SetContent(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s WebSession_PutContent) Encoding() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s WebSession_PutContent) HasEncoding() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_PutContent) EncodingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s WebSession_PutContent) SetEncoding(v string) error {
	return s.Struct.SetText(2, v)
}

// WebSession_PutContent_List is a list of WebSession_PutContent.
type WebSession_PutContent_List struct{ capnp.List }

// NewWebSession_PutContent creates a new list of WebSession_PutContent.
func NewWebSession_PutContent_List(s *capnp.Segment, sz int32) (WebSession_PutContent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_PutContent_List{l}, err
}

func (s WebSession_PutContent_List) At(i int) WebSession_PutContent {
	return WebSession_PutContent{s.List.Struct(i)}
}

func (s WebSession_PutContent_List) Set(i int, v WebSession_PutContent) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_PutContent_List) String() string {
	str, _ := text.MarshalList(0xd7aff1fe39659132, s.List)
	return str
}

// WebSession_PutContent_Future is a wrapper for a WebSession_PutContent promised by a client call.
type WebSession_PutContent_Future struct{ *capnp.Future }

func (p WebSession_PutContent_Future) Struct() (WebSession_PutContent, error) {
	s, err := p.Future.Struct()
	return WebSession_PutContent{s}, err
}

type WebSession_ETag struct{ capnp.Struct }

// WebSession_ETag_TypeID is the unique identifier for the type WebSession_ETag.
const WebSession_ETag_TypeID = 0xd22c0be5b9c16558

func NewWebSession_ETag(s *capnp.Segment) (WebSession_ETag, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_ETag{st}, err
}

func NewRootWebSession_ETag(s *capnp.Segment) (WebSession_ETag, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_ETag{st}, err
}

func ReadRootWebSession_ETag(msg *capnp.Message) (WebSession_ETag, error) {
	root, err := msg.Root()
	return WebSession_ETag{root.Struct()}, err
}

func (s WebSession_ETag) String() string {
	str, _ := text.Marshal(0xd22c0be5b9c16558, s.Struct)
	return str
}

func (s WebSession_ETag) Value() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_ETag) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_ETag) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_ETag) SetValue(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_ETag) Weak() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_ETag) SetWeak(v bool) {
	s.Struct.SetBit(0, v)
}

// WebSession_ETag_List is a list of WebSession_ETag.
type WebSession_ETag_List struct{ capnp.List }

// NewWebSession_ETag creates a new list of WebSession_ETag.
func NewWebSession_ETag_List(s *capnp.Segment, sz int32) (WebSession_ETag_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return WebSession_ETag_List{l}, err
}

func (s WebSession_ETag_List) At(i int) WebSession_ETag { return WebSession_ETag{s.List.Struct(i)} }

func (s WebSession_ETag_List) Set(i int, v WebSession_ETag) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_ETag_List) String() string {
	str, _ := text.MarshalList(0xd22c0be5b9c16558, s.List)
	return str
}

// WebSession_ETag_Future is a wrapper for a WebSession_ETag promised by a client call.
type WebSession_ETag_Future struct{ *capnp.Future }

func (p WebSession_ETag_Future) Struct() (WebSession_ETag, error) {
	s, err := p.Future.Struct()
	return WebSession_ETag{s}, err
}

type WebSession_Cookie struct{ capnp.Struct }
type WebSession_Cookie_expires WebSession_Cookie
type WebSession_Cookie_expires_Which uint16

const (
	WebSession_Cookie_expires_Which_none     WebSession_Cookie_expires_Which = 0
	WebSession_Cookie_expires_Which_absolute WebSession_Cookie_expires_Which = 1
	WebSession_Cookie_expires_Which_relative WebSession_Cookie_expires_Which = 2
)

func (w WebSession_Cookie_expires_Which) String() string {
	const s = "noneabsoluterelative"
	switch w {
	case WebSession_Cookie_expires_Which_none:
		return s[0:4]
	case WebSession_Cookie_expires_Which_absolute:
		return s[4:12]
	case WebSession_Cookie_expires_Which_relative:
		return s[12:20]

	}
	return "WebSession_Cookie_expires_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// WebSession_Cookie_TypeID is the unique identifier for the type WebSession_Cookie.
const WebSession_Cookie_TypeID = 0xa87d65bed9b60243

func NewWebSession_Cookie(s *capnp.Segment) (WebSession_Cookie, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return WebSession_Cookie{st}, err
}

func NewRootWebSession_Cookie(s *capnp.Segment) (WebSession_Cookie, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return WebSession_Cookie{st}, err
}

func ReadRootWebSession_Cookie(msg *capnp.Message) (WebSession_Cookie, error) {
	root, err := msg.Root()
	return WebSession_Cookie{root.Struct()}, err
}

func (s WebSession_Cookie) String() string {
	str, _ := text.Marshal(0xa87d65bed9b60243, s.Struct)
	return str
}

func (s WebSession_Cookie) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_Cookie) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Cookie) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_Cookie) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_Cookie) Value() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Cookie) HasValue() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Cookie) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Cookie) SetValue(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_Cookie) Expires() WebSession_Cookie_expires { return WebSession_Cookie_expires(s) }

func (s WebSession_Cookie_expires) Which() WebSession_Cookie_expires_Which {
	return WebSession_Cookie_expires_Which(s.Struct.Uint16(0))
}
func (s WebSession_Cookie_expires) SetNone() {
	s.Struct.SetUint16(0, 0)

}

func (s WebSession_Cookie_expires) Absolute() int64 {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != absolute")
	}
	return int64(s.Struct.Uint64(8))
}

func (s WebSession_Cookie_expires) SetAbsolute(v int64) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetUint64(8, uint64(v))
}

func (s WebSession_Cookie_expires) Relative() uint64 {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != relative")
	}
	return s.Struct.Uint64(8)
}

func (s WebSession_Cookie_expires) SetRelative(v uint64) {
	s.Struct.SetUint16(0, 2)
	s.Struct.SetUint64(8, v)
}

func (s WebSession_Cookie) HttpOnly() bool {
	return s.Struct.Bit(16)
}

func (s WebSession_Cookie) SetHttpOnly(v bool) {
	s.Struct.SetBit(16, v)
}

func (s WebSession_Cookie) Path() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s WebSession_Cookie) HasPath() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_Cookie) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s WebSession_Cookie) SetPath(v string) error {
	return s.Struct.SetText(2, v)
}

// WebSession_Cookie_List is a list of WebSession_Cookie.
type WebSession_Cookie_List struct{ capnp.List }

// NewWebSession_Cookie creates a new list of WebSession_Cookie.
func NewWebSession_Cookie_List(s *capnp.Segment, sz int32) (WebSession_Cookie_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return WebSession_Cookie_List{l}, err
}

func (s WebSession_Cookie_List) At(i int) WebSession_Cookie {
	return WebSession_Cookie{s.List.Struct(i)}
}

func (s WebSession_Cookie_List) Set(i int, v WebSession_Cookie) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Cookie_List) String() string {
	str, _ := text.MarshalList(0xa87d65bed9b60243, s.List)
	return str
}

// WebSession_Cookie_Future is a wrapper for a WebSession_Cookie promised by a client call.
type WebSession_Cookie_Future struct{ *capnp.Future }

func (p WebSession_Cookie_Future) Struct() (WebSession_Cookie, error) {
	s, err := p.Future.Struct()
	return WebSession_Cookie{s}, err
}

func (p WebSession_Cookie_Future) Expires() WebSession_Cookie_expires_Future {
	return WebSession_Cookie_expires_Future{p.Future}
}

// WebSession_Cookie_expires_Future is a wrapper for a WebSession_Cookie_expires promised by a client call.
type WebSession_Cookie_expires_Future struct{ *capnp.Future }

func (p WebSession_Cookie_expires_Future) Struct() (WebSession_Cookie_expires, error) {
	s, err := p.Future.Struct()
	return WebSession_Cookie_expires{s}, err
}

type WebSession_AcceptedType struct{ capnp.Struct }

// WebSession_AcceptedType_TypeID is the unique identifier for the type WebSession_AcceptedType.
const WebSession_AcceptedType_TypeID = 0xaaf9021b627cc1f9

func NewWebSession_AcceptedType(s *capnp.Segment) (WebSession_AcceptedType, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_AcceptedType{st}, err
}

func NewRootWebSession_AcceptedType(s *capnp.Segment) (WebSession_AcceptedType, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_AcceptedType{st}, err
}

func ReadRootWebSession_AcceptedType(msg *capnp.Message) (WebSession_AcceptedType, error) {
	root, err := msg.Root()
	return WebSession_AcceptedType{root.Struct()}, err
}

func (s WebSession_AcceptedType) String() string {
	str, _ := text.Marshal(0xaaf9021b627cc1f9, s.Struct)
	return str
}

func (s WebSession_AcceptedType) MimeType() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_AcceptedType) HasMimeType() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_AcceptedType) MimeTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_AcceptedType) SetMimeType(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_AcceptedType) QValue() float32 {
	return math.Float32frombits(s.Struct.Uint32(0) ^ 0x3f800000)
}

func (s WebSession_AcceptedType) SetQValue(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v)^0x3f800000)
}

// WebSession_AcceptedType_List is a list of WebSession_AcceptedType.
type WebSession_AcceptedType_List struct{ capnp.List }

// NewWebSession_AcceptedType creates a new list of WebSession_AcceptedType.
func NewWebSession_AcceptedType_List(s *capnp.Segment, sz int32) (WebSession_AcceptedType_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return WebSession_AcceptedType_List{l}, err
}

func (s WebSession_AcceptedType_List) At(i int) WebSession_AcceptedType {
	return WebSession_AcceptedType{s.List.Struct(i)}
}

func (s WebSession_AcceptedType_List) Set(i int, v WebSession_AcceptedType) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_AcceptedType_List) String() string {
	str, _ := text.MarshalList(0xaaf9021b627cc1f9, s.List)
	return str
}

// WebSession_AcceptedType_Future is a wrapper for a WebSession_AcceptedType promised by a client call.
type WebSession_AcceptedType_Future struct{ *capnp.Future }

func (p WebSession_AcceptedType_Future) Struct() (WebSession_AcceptedType, error) {
	s, err := p.Future.Struct()
	return WebSession_AcceptedType{s}, err
}

type WebSession_AcceptedEncoding struct{ capnp.Struct }

// WebSession_AcceptedEncoding_TypeID is the unique identifier for the type WebSession_AcceptedEncoding.
const WebSession_AcceptedEncoding_TypeID = 0xbda585bffe1dc7e8

func NewWebSession_AcceptedEncoding(s *capnp.Segment) (WebSession_AcceptedEncoding, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_AcceptedEncoding{st}, err
}

func NewRootWebSession_AcceptedEncoding(s *capnp.Segment) (WebSession_AcceptedEncoding, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_AcceptedEncoding{st}, err
}

func ReadRootWebSession_AcceptedEncoding(msg *capnp.Message) (WebSession_AcceptedEncoding, error) {
	root, err := msg.Root()
	return WebSession_AcceptedEncoding{root.Struct()}, err
}

func (s WebSession_AcceptedEncoding) String() string {
	str, _ := text.Marshal(0xbda585bffe1dc7e8, s.Struct)
	return str
}

func (s WebSession_AcceptedEncoding) ContentCoding() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_AcceptedEncoding) HasContentCoding() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_AcceptedEncoding) ContentCodingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_AcceptedEncoding) SetContentCoding(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_AcceptedEncoding) QValue() float32 {
	return math.Float32frombits(s.Struct.Uint32(0) ^ 0x3f800000)
}

func (s WebSession_AcceptedEncoding) SetQValue(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v)^0x3f800000)
}

// WebSession_AcceptedEncoding_List is a list of WebSession_AcceptedEncoding.
type WebSession_AcceptedEncoding_List struct{ capnp.List }

// NewWebSession_AcceptedEncoding creates a new list of WebSession_AcceptedEncoding.
func NewWebSession_AcceptedEncoding_List(s *capnp.Segment, sz int32) (WebSession_AcceptedEncoding_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return WebSession_AcceptedEncoding_List{l}, err
}

func (s WebSession_AcceptedEncoding_List) At(i int) WebSession_AcceptedEncoding {
	return WebSession_AcceptedEncoding{s.List.Struct(i)}
}

func (s WebSession_AcceptedEncoding_List) Set(i int, v WebSession_AcceptedEncoding) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_AcceptedEncoding_List) String() string {
	str, _ := text.MarshalList(0xbda585bffe1dc7e8, s.List)
	return str
}

// WebSession_AcceptedEncoding_Future is a wrapper for a WebSession_AcceptedEncoding promised by a client call.
type WebSession_AcceptedEncoding_Future struct{ *capnp.Future }

func (p WebSession_AcceptedEncoding_Future) Struct() (WebSession_AcceptedEncoding, error) {
	s, err := p.Future.Struct()
	return WebSession_AcceptedEncoding{s}, err
}

type WebSession_Response struct{ capnp.Struct }
type WebSession_Response_content WebSession_Response
type WebSession_Response_content_body WebSession_Response
type WebSession_Response_content_disposition WebSession_Response
type WebSession_Response_noContent WebSession_Response
type WebSession_Response_preconditionFailed WebSession_Response
type WebSession_Response_redirect WebSession_Response
type WebSession_Response_clientError WebSession_Response
type WebSession_Response_serverError WebSession_Response
type WebSession_Response_Which uint16

const (
	WebSession_Response_Which_content            WebSession_Response_Which = 1
	WebSession_Response_Which_noContent          WebSession_Response_Which = 4
	WebSession_Response_Which_preconditionFailed WebSession_Response_Which = 5
	WebSession_Response_Which_redirect           WebSession_Response_Which = 0
	WebSession_Response_Which_clientError        WebSession_Response_Which = 2
	WebSession_Response_Which_serverError        WebSession_Response_Which = 3
)

func (w WebSession_Response_Which) String() string {
	const s = "contentnoContentpreconditionFailedredirectclientErrorserverError"
	switch w {
	case WebSession_Response_Which_content:
		return s[0:7]
	case WebSession_Response_Which_noContent:
		return s[7:16]
	case WebSession_Response_Which_preconditionFailed:
		return s[16:34]
	case WebSession_Response_Which_redirect:
		return s[34:42]
	case WebSession_Response_Which_clientError:
		return s[42:53]
	case WebSession_Response_Which_serverError:
		return s[53:64]

	}
	return "WebSession_Response_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type WebSession_Response_content_body_Which uint16

const (
	WebSession_Response_content_body_Which_bytes  WebSession_Response_content_body_Which = 0
	WebSession_Response_content_body_Which_stream WebSession_Response_content_body_Which = 1
)

func (w WebSession_Response_content_body_Which) String() string {
	const s = "bytesstream"
	switch w {
	case WebSession_Response_content_body_Which_bytes:
		return s[0:5]
	case WebSession_Response_content_body_Which_stream:
		return s[5:11]

	}
	return "WebSession_Response_content_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type WebSession_Response_content_disposition_Which uint16

const (
	WebSession_Response_content_disposition_Which_normal   WebSession_Response_content_disposition_Which = 0
	WebSession_Response_content_disposition_Which_download WebSession_Response_content_disposition_Which = 1
)

func (w WebSession_Response_content_disposition_Which) String() string {
	const s = "normaldownload"
	switch w {
	case WebSession_Response_content_disposition_Which_normal:
		return s[0:6]
	case WebSession_Response_content_disposition_Which_download:
		return s[6:14]

	}
	return "WebSession_Response_content_disposition_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// WebSession_Response_TypeID is the unique identifier for the type WebSession_Response.
const WebSession_Response_TypeID = 0x8193ac6cb5429c83

func NewWebSession_Response(s *capnp.Segment) (WebSession_Response, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{st}, err
}

func NewRootWebSession_Response(s *capnp.Segment) (WebSession_Response, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{st}, err
}

func ReadRootWebSession_Response(msg *capnp.Message) (WebSession_Response, error) {
	root, err := msg.Root()
	return WebSession_Response{root.Struct()}, err
}

func (s WebSession_Response) String() string {
	str, _ := text.Marshal(0x8193ac6cb5429c83, s.Struct)
	return str
}

func (s WebSession_Response) Which() WebSession_Response_Which {
	return WebSession_Response_Which(s.Struct.Uint16(2))
}
func (s WebSession_Response) SetCookies() (WebSession_Cookie_List, error) {
	p, err := s.Struct.Ptr(0)
	return WebSession_Cookie_List{List: p.List()}, err
}

func (s WebSession_Response) HasSetCookies() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Response) SetSetCookies(v WebSession_Cookie_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSetCookies sets the setCookies field to a newly
// allocated WebSession_Cookie_List, preferring placement in s's segment.
func (s WebSession_Response) NewSetCookies(n int32) (WebSession_Cookie_List, error) {
	l, err := NewWebSession_Cookie_List(s.Struct.Segment(), n)
	if err != nil {
		return WebSession_Cookie_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s WebSession_Response) CachePolicy() (WebSession_CachePolicy, error) {
	p, err := s.Struct.Ptr(6)
	return WebSession_CachePolicy{Struct: p.Struct()}, err
}

func (s WebSession_Response) HasCachePolicy() bool {
	return s.Struct.HasPtr(6)
}

func (s WebSession_Response) SetCachePolicy(v WebSession_CachePolicy) error {
	return s.Struct.SetPtr(6, v.Struct.ToPtr())
}

// NewCachePolicy sets the cachePolicy field to a newly
// allocated WebSession_CachePolicy struct, preferring placement in s's segment.
func (s WebSession_Response) NewCachePolicy() (WebSession_CachePolicy, error) {
	ss, err := NewWebSession_CachePolicy(s.Struct.Segment())
	if err != nil {
		return WebSession_CachePolicy{}, err
	}
	err = s.Struct.SetPtr(6, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_Response) Content() WebSession_Response_content {
	return WebSession_Response_content(s)
}

func (s WebSession_Response) SetContent() {
	s.Struct.SetUint16(2, 1)
}

func (s WebSession_Response_content) StatusCode() WebSession_Response_SuccessCode {
	return WebSession_Response_SuccessCode(s.Struct.Uint16(4))
}

func (s WebSession_Response_content) SetStatusCode(v WebSession_Response_SuccessCode) {
	s.Struct.SetUint16(4, uint16(v))
}

func (s WebSession_Response_content) Encoding() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_content) HasEncoding() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_content) EncodingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_content) SetEncoding(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_Response_content) Language() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s WebSession_Response_content) HasLanguage() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_Response_content) LanguageBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s WebSession_Response_content) SetLanguage(v string) error {
	return s.Struct.SetText(2, v)
}

func (s WebSession_Response_content) MimeType() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s WebSession_Response_content) HasMimeType() bool {
	return s.Struct.HasPtr(3)
}

func (s WebSession_Response_content) MimeTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s WebSession_Response_content) SetMimeType(v string) error {
	return s.Struct.SetText(3, v)
}

func (s WebSession_Response_content) ETag() (WebSession_ETag, error) {
	p, err := s.Struct.Ptr(7)
	return WebSession_ETag{Struct: p.Struct()}, err
}

func (s WebSession_Response_content) HasETag() bool {
	return s.Struct.HasPtr(7)
}

func (s WebSession_Response_content) SetETag(v WebSession_ETag) error {
	return s.Struct.SetPtr(7, v.Struct.ToPtr())
}

// NewETag sets the eTag field to a newly
// allocated WebSession_ETag struct, preferring placement in s's segment.
func (s WebSession_Response_content) NewETag() (WebSession_ETag, error) {
	ss, err := NewWebSession_ETag(s.Struct.Segment())
	if err != nil {
		return WebSession_ETag{}, err
	}
	err = s.Struct.SetPtr(7, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_Response_content) Body() WebSession_Response_content_body {
	return WebSession_Response_content_body(s)
}

func (s WebSession_Response_content_body) Which() WebSession_Response_content_body_Which {
	return WebSession_Response_content_body_Which(s.Struct.Uint16(0))
}
func (s WebSession_Response_content_body) Bytes() ([]byte, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != bytes")
	}
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s WebSession_Response_content_body) HasBytes() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(4)
}

func (s WebSession_Response_content_body) SetBytes(v []byte) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetData(4, v)
}

func (s WebSession_Response_content_body) Stream() util.Handle {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != stream")
	}
	p, _ := s.Struct.Ptr(4)
	return util.Handle{Client: p.Interface().Client()}
}

func (s WebSession_Response_content_body) HasStream() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(4)
}

func (s WebSession_Response_content_body) SetStream(v util.Handle) error {
	s.Struct.SetUint16(0, 1)
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(4, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(4, in.ToPtr())
}

func (s WebSession_Response_content) Disposition() WebSession_Response_content_disposition {
	return WebSession_Response_content_disposition(s)
}

func (s WebSession_Response_content_disposition) Which() WebSession_Response_content_disposition_Which {
	return WebSession_Response_content_disposition_Which(s.Struct.Uint16(6))
}
func (s WebSession_Response_content_disposition) SetNormal() {
	s.Struct.SetUint16(6, 0)

}

func (s WebSession_Response_content_disposition) Download() (string, error) {
	if s.Struct.Uint16(6) != 1 {
		panic("Which() != download")
	}
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s WebSession_Response_content_disposition) HasDownload() bool {
	if s.Struct.Uint16(6) != 1 {
		return false
	}
	return s.Struct.HasPtr(5)
}

func (s WebSession_Response_content_disposition) DownloadBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s WebSession_Response_content_disposition) SetDownload(v string) error {
	s.Struct.SetUint16(6, 1)
	return s.Struct.SetText(5, v)
}

func (s WebSession_Response) NoContent() WebSession_Response_noContent {
	return WebSession_Response_noContent(s)
}

func (s WebSession_Response) SetNoContent() {
	s.Struct.SetUint16(2, 4)
}

func (s WebSession_Response_noContent) ShouldResetForm() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_Response_noContent) SetShouldResetForm(v bool) {
	s.Struct.SetBit(0, v)
}

func (s WebSession_Response_noContent) ETag() (WebSession_ETag, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_ETag{Struct: p.Struct()}, err
}

func (s WebSession_Response_noContent) HasETag() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_noContent) SetETag(v WebSession_ETag) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewETag sets the eTag field to a newly
// allocated WebSession_ETag struct, preferring placement in s's segment.
func (s WebSession_Response_noContent) NewETag() (WebSession_ETag, error) {
	ss, err := NewWebSession_ETag(s.Struct.Segment())
	if err != nil {
		return WebSession_ETag{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_Response) PreconditionFailed() WebSession_Response_preconditionFailed {
	return WebSession_Response_preconditionFailed(s)
}

func (s WebSession_Response) SetPreconditionFailed() {
	s.Struct.SetUint16(2, 5)
}

func (s WebSession_Response_preconditionFailed) MatchingETag() (WebSession_ETag, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_ETag{Struct: p.Struct()}, err
}

func (s WebSession_Response_preconditionFailed) HasMatchingETag() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_preconditionFailed) SetMatchingETag(v WebSession_ETag) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewMatchingETag sets the matchingETag field to a newly
// allocated WebSession_ETag struct, preferring placement in s's segment.
func (s WebSession_Response_preconditionFailed) NewMatchingETag() (WebSession_ETag, error) {
	ss, err := NewWebSession_ETag(s.Struct.Segment())
	if err != nil {
		return WebSession_ETag{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_Response) Redirect() WebSession_Response_redirect {
	return WebSession_Response_redirect(s)
}

func (s WebSession_Response) SetRedirect() {
	s.Struct.SetUint16(2, 0)
}

func (s WebSession_Response_redirect) IsPermanent() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_Response_redirect) SetIsPermanent(v bool) {
	s.Struct.SetBit(0, v)
}

func (s WebSession_Response_redirect) SwitchToGet() bool {
	return s.Struct.Bit(1)
}

func (s WebSession_Response_redirect) SetSwitchToGet(v bool) {
	s.Struct.SetBit(1, v)
}

func (s WebSession_Response_redirect) Location() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_redirect) HasLocation() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_redirect) LocationBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_redirect) SetLocation(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_Response) ClientError() WebSession_Response_clientError {
	return WebSession_Response_clientError(s)
}

func (s WebSession_Response) SetClientError() {
	s.Struct.SetUint16(2, 2)
}

func (s WebSession_Response_clientError) StatusCode() WebSession_Response_ClientErrorCode {
	return WebSession_Response_ClientErrorCode(s.Struct.Uint16(0))
}

func (s WebSession_Response_clientError) SetStatusCode(v WebSession_Response_ClientErrorCode) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s WebSession_Response_clientError) DescriptionHtml() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_clientError) HasDescriptionHtml() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_clientError) DescriptionHtmlBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_clientError) SetDescriptionHtml(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_Response_clientError) NonHtmlBody() (WebSession_Response_ErrorBody, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Response_ErrorBody{Struct: p.Struct()}, err
}

func (s WebSession_Response_clientError) HasNonHtmlBody() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_Response_clientError) SetNonHtmlBody(v WebSession_Response_ErrorBody) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewNonHtmlBody sets the nonHtmlBody field to a newly
// allocated WebSession_Response_ErrorBody struct, preferring placement in s's segment.
func (s WebSession_Response_clientError) NewNonHtmlBody() (WebSession_Response_ErrorBody, error) {
	ss, err := NewWebSession_Response_ErrorBody(s.Struct.Segment())
	if err != nil {
		return WebSession_Response_ErrorBody{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_Response) ServerError() WebSession_Response_serverError {
	return WebSession_Response_serverError(s)
}

func (s WebSession_Response) SetServerError() {
	s.Struct.SetUint16(2, 3)
}

func (s WebSession_Response_serverError) DescriptionHtml() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_serverError) HasDescriptionHtml() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_serverError) DescriptionHtmlBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_serverError) SetDescriptionHtml(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_Response_serverError) NonHtmlBody() (WebSession_Response_ErrorBody, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Response_ErrorBody{Struct: p.Struct()}, err
}

func (s WebSession_Response_serverError) HasNonHtmlBody() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_Response_serverError) SetNonHtmlBody(v WebSession_Response_ErrorBody) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewNonHtmlBody sets the nonHtmlBody field to a newly
// allocated WebSession_Response_ErrorBody struct, preferring placement in s's segment.
func (s WebSession_Response_serverError) NewNonHtmlBody() (WebSession_Response_ErrorBody, error) {
	ss, err := NewWebSession_Response_ErrorBody(s.Struct.Segment())
	if err != nil {
		return WebSession_Response_ErrorBody{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_Response) AdditionalHeaders() (WebSession_Response_Header_List, error) {
	p, err := s.Struct.Ptr(8)
	return WebSession_Response_Header_List{List: p.List()}, err
}

func (s WebSession_Response) HasAdditionalHeaders() bool {
	return s.Struct.HasPtr(8)
}

func (s WebSession_Response) SetAdditionalHeaders(v WebSession_Response_Header_List) error {
	return s.Struct.SetPtr(8, v.List.ToPtr())
}

// NewAdditionalHeaders sets the additionalHeaders field to a newly
// allocated WebSession_Response_Header_List, preferring placement in s's segment.
func (s WebSession_Response) NewAdditionalHeaders(n int32) (WebSession_Response_Header_List, error) {
	l, err := NewWebSession_Response_Header_List(s.Struct.Segment(), n)
	if err != nil {
		return WebSession_Response_Header_List{}, err
	}
	err = s.Struct.SetPtr(8, l.List.ToPtr())
	return l, err
}

// WebSession_Response_List is a list of WebSession_Response.
type WebSession_Response_List struct{ capnp.List }

// NewWebSession_Response creates a new list of WebSession_Response.
func NewWebSession_Response_List(s *capnp.Segment, sz int32) (WebSession_Response_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 9}, sz)
	return WebSession_Response_List{l}, err
}

func (s WebSession_Response_List) At(i int) WebSession_Response {
	return WebSession_Response{s.List.Struct(i)}
}

func (s WebSession_Response_List) Set(i int, v WebSession_Response) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Response_List) String() string {
	str, _ := text.MarshalList(0x8193ac6cb5429c83, s.List)
	return str
}

// WebSession_Response_Future is a wrapper for a WebSession_Response promised by a client call.
type WebSession_Response_Future struct{ *capnp.Future }

func (p WebSession_Response_Future) Struct() (WebSession_Response, error) {
	s, err := p.Future.Struct()
	return WebSession_Response{s}, err
}

func (p WebSession_Response_Future) CachePolicy() WebSession_CachePolicy_Future {
	return WebSession_CachePolicy_Future{Future: p.Future.Field(6, nil)}
}

func (p WebSession_Response_Future) Content() WebSession_Response_content_Future {
	return WebSession_Response_content_Future{p.Future}
}

// WebSession_Response_content_Future is a wrapper for a WebSession_Response_content promised by a client call.
type WebSession_Response_content_Future struct{ *capnp.Future }

func (p WebSession_Response_content_Future) Struct() (WebSession_Response_content, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_content{s}, err
}

func (p WebSession_Response_content_Future) ETag() WebSession_ETag_Future {
	return WebSession_ETag_Future{Future: p.Future.Field(7, nil)}
}

func (p WebSession_Response_content_Future) Body() WebSession_Response_content_body_Future {
	return WebSession_Response_content_body_Future{p.Future}
}

// WebSession_Response_content_body_Future is a wrapper for a WebSession_Response_content_body promised by a client call.
type WebSession_Response_content_body_Future struct{ *capnp.Future }

func (p WebSession_Response_content_body_Future) Struct() (WebSession_Response_content_body, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_content_body{s}, err
}

func (p WebSession_Response_content_body_Future) Stream() util.Handle {
	return util.Handle{Client: p.Future.Field(4, nil).Client()}
}

func (p WebSession_Response_content_Future) Disposition() WebSession_Response_content_disposition_Future {
	return WebSession_Response_content_disposition_Future{p.Future}
}

// WebSession_Response_content_disposition_Future is a wrapper for a WebSession_Response_content_disposition promised by a client call.
type WebSession_Response_content_disposition_Future struct{ *capnp.Future }

func (p WebSession_Response_content_disposition_Future) Struct() (WebSession_Response_content_disposition, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_content_disposition{s}, err
}

func (p WebSession_Response_Future) NoContent() WebSession_Response_noContent_Future {
	return WebSession_Response_noContent_Future{p.Future}
}

// WebSession_Response_noContent_Future is a wrapper for a WebSession_Response_noContent promised by a client call.
type WebSession_Response_noContent_Future struct{ *capnp.Future }

func (p WebSession_Response_noContent_Future) Struct() (WebSession_Response_noContent, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_noContent{s}, err
}

func (p WebSession_Response_noContent_Future) ETag() WebSession_ETag_Future {
	return WebSession_ETag_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_Response_Future) PreconditionFailed() WebSession_Response_preconditionFailed_Future {
	return WebSession_Response_preconditionFailed_Future{p.Future}
}

// WebSession_Response_preconditionFailed_Future is a wrapper for a WebSession_Response_preconditionFailed promised by a client call.
type WebSession_Response_preconditionFailed_Future struct{ *capnp.Future }

func (p WebSession_Response_preconditionFailed_Future) Struct() (WebSession_Response_preconditionFailed, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_preconditionFailed{s}, err
}

func (p WebSession_Response_preconditionFailed_Future) MatchingETag() WebSession_ETag_Future {
	return WebSession_ETag_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_Response_Future) Redirect() WebSession_Response_redirect_Future {
	return WebSession_Response_redirect_Future{p.Future}
}

// WebSession_Response_redirect_Future is a wrapper for a WebSession_Response_redirect promised by a client call.
type WebSession_Response_redirect_Future struct{ *capnp.Future }

func (p WebSession_Response_redirect_Future) Struct() (WebSession_Response_redirect, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_redirect{s}, err
}

func (p WebSession_Response_Future) ClientError() WebSession_Response_clientError_Future {
	return WebSession_Response_clientError_Future{p.Future}
}

// WebSession_Response_clientError_Future is a wrapper for a WebSession_Response_clientError promised by a client call.
type WebSession_Response_clientError_Future struct{ *capnp.Future }

func (p WebSession_Response_clientError_Future) Struct() (WebSession_Response_clientError, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_clientError{s}, err
}

func (p WebSession_Response_clientError_Future) NonHtmlBody() WebSession_Response_ErrorBody_Future {
	return WebSession_Response_ErrorBody_Future{Future: p.Future.Field(2, nil)}
}

func (p WebSession_Response_Future) ServerError() WebSession_Response_serverError_Future {
	return WebSession_Response_serverError_Future{p.Future}
}

// WebSession_Response_serverError_Future is a wrapper for a WebSession_Response_serverError promised by a client call.
type WebSession_Response_serverError_Future struct{ *capnp.Future }

func (p WebSession_Response_serverError_Future) Struct() (WebSession_Response_serverError, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_serverError{s}, err
}

func (p WebSession_Response_serverError_Future) NonHtmlBody() WebSession_Response_ErrorBody_Future {
	return WebSession_Response_ErrorBody_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_Response_SuccessCode uint16

// WebSession_Response_SuccessCode_TypeID is the unique identifier for the type WebSession_Response_SuccessCode.
const WebSession_Response_SuccessCode_TypeID = 0x82130007ccd2888f

// Values of WebSession_Response_SuccessCode.
const (
	WebSession_Response_SuccessCode_ok             WebSession_Response_SuccessCode = 0
	WebSession_Response_SuccessCode_created        WebSession_Response_SuccessCode = 1
	WebSession_Response_SuccessCode_accepted       WebSession_Response_SuccessCode = 2
	WebSession_Response_SuccessCode_noContent      WebSession_Response_SuccessCode = 3
	WebSession_Response_SuccessCode_partialContent WebSession_Response_SuccessCode = 4
	WebSession_Response_SuccessCode_multiStatus    WebSession_Response_SuccessCode = 5
	WebSession_Response_SuccessCode_notModified    WebSession_Response_SuccessCode = 6
)

// String returns the enum's constant name.
func (c WebSession_Response_SuccessCode) String() string {
	switch c {
	case WebSession_Response_SuccessCode_ok:
		return "ok"
	case WebSession_Response_SuccessCode_created:
		return "created"
	case WebSession_Response_SuccessCode_accepted:
		return "accepted"
	case WebSession_Response_SuccessCode_noContent:
		return "noContent"
	case WebSession_Response_SuccessCode_partialContent:
		return "partialContent"
	case WebSession_Response_SuccessCode_multiStatus:
		return "multiStatus"
	case WebSession_Response_SuccessCode_notModified:
		return "notModified"

	default:
		return ""
	}
}

// WebSession_Response_SuccessCodeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func WebSession_Response_SuccessCodeFromString(c string) WebSession_Response_SuccessCode {
	switch c {
	case "ok":
		return WebSession_Response_SuccessCode_ok
	case "created":
		return WebSession_Response_SuccessCode_created
	case "accepted":
		return WebSession_Response_SuccessCode_accepted
	case "noContent":
		return WebSession_Response_SuccessCode_noContent
	case "partialContent":
		return WebSession_Response_SuccessCode_partialContent
	case "multiStatus":
		return WebSession_Response_SuccessCode_multiStatus
	case "notModified":
		return WebSession_Response_SuccessCode_notModified

	default:
		return 0
	}
}

type WebSession_Response_SuccessCode_List struct{ capnp.List }

func NewWebSession_Response_SuccessCode_List(s *capnp.Segment, sz int32) (WebSession_Response_SuccessCode_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return WebSession_Response_SuccessCode_List{l.List}, err
}

func (l WebSession_Response_SuccessCode_List) At(i int) WebSession_Response_SuccessCode {
	ul := capnp.UInt16List{List: l.List}
	return WebSession_Response_SuccessCode(ul.At(i))
}

func (l WebSession_Response_SuccessCode_List) Set(i int, v WebSession_Response_SuccessCode) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type WebSession_Response_ClientErrorCode uint16

// WebSession_Response_ClientErrorCode_TypeID is the unique identifier for the type WebSession_Response_ClientErrorCode.
const WebSession_Response_ClientErrorCode_TypeID = 0x8ea31bdb4c044f01

// Values of WebSession_Response_ClientErrorCode.
const (
	WebSession_Response_ClientErrorCode_badRequest            WebSession_Response_ClientErrorCode = 0
	WebSession_Response_ClientErrorCode_forbidden             WebSession_Response_ClientErrorCode = 1
	WebSession_Response_ClientErrorCode_notFound              WebSession_Response_ClientErrorCode = 2
	WebSession_Response_ClientErrorCode_methodNotAllowed      WebSession_Response_ClientErrorCode = 3
	WebSession_Response_ClientErrorCode_notAcceptable         WebSession_Response_ClientErrorCode = 4
	WebSession_Response_ClientErrorCode_conflict              WebSession_Response_ClientErrorCode = 5
	WebSession_Response_ClientErrorCode_gone                  WebSession_Response_ClientErrorCode = 6
	WebSession_Response_ClientErrorCode_preconditionFailed    WebSession_Response_ClientErrorCode = 11
	WebSession_Response_ClientErrorCode_requestEntityTooLarge WebSession_Response_ClientErrorCode = 7
	WebSession_Response_ClientErrorCode_requestUriTooLong     WebSession_Response_ClientErrorCode = 8
	WebSession_Response_ClientErrorCode_unsupportedMediaType  WebSession_Response_ClientErrorCode = 9
	WebSession_Response_ClientErrorCode_imATeapot             WebSession_Response_ClientErrorCode = 10
	WebSession_Response_ClientErrorCode_unprocessableEntity   WebSession_Response_ClientErrorCode = 12
)

// String returns the enum's constant name.
func (c WebSession_Response_ClientErrorCode) String() string {
	switch c {
	case WebSession_Response_ClientErrorCode_badRequest:
		return "badRequest"
	case WebSession_Response_ClientErrorCode_forbidden:
		return "forbidden"
	case WebSession_Response_ClientErrorCode_notFound:
		return "notFound"
	case WebSession_Response_ClientErrorCode_methodNotAllowed:
		return "methodNotAllowed"
	case WebSession_Response_ClientErrorCode_notAcceptable:
		return "notAcceptable"
	case WebSession_Response_ClientErrorCode_conflict:
		return "conflict"
	case WebSession_Response_ClientErrorCode_gone:
		return "gone"
	case WebSession_Response_ClientErrorCode_preconditionFailed:
		return "preconditionFailed"
	case WebSession_Response_ClientErrorCode_requestEntityTooLarge:
		return "requestEntityTooLarge"
	case WebSession_Response_ClientErrorCode_requestUriTooLong:
		return "requestUriTooLong"
	case WebSession_Response_ClientErrorCode_unsupportedMediaType:
		return "unsupportedMediaType"
	case WebSession_Response_ClientErrorCode_imATeapot:
		return "imATeapot"
	case WebSession_Response_ClientErrorCode_unprocessableEntity:
		return "unprocessableEntity"

	default:
		return ""
	}
}

// WebSession_Response_ClientErrorCodeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func WebSession_Response_ClientErrorCodeFromString(c string) WebSession_Response_ClientErrorCode {
	switch c {
	case "badRequest":
		return WebSession_Response_ClientErrorCode_badRequest
	case "forbidden":
		return WebSession_Response_ClientErrorCode_forbidden
	case "notFound":
		return WebSession_Response_ClientErrorCode_notFound
	case "methodNotAllowed":
		return WebSession_Response_ClientErrorCode_methodNotAllowed
	case "notAcceptable":
		return WebSession_Response_ClientErrorCode_notAcceptable
	case "conflict":
		return WebSession_Response_ClientErrorCode_conflict
	case "gone":
		return WebSession_Response_ClientErrorCode_gone
	case "preconditionFailed":
		return WebSession_Response_ClientErrorCode_preconditionFailed
	case "requestEntityTooLarge":
		return WebSession_Response_ClientErrorCode_requestEntityTooLarge
	case "requestUriTooLong":
		return WebSession_Response_ClientErrorCode_requestUriTooLong
	case "unsupportedMediaType":
		return WebSession_Response_ClientErrorCode_unsupportedMediaType
	case "imATeapot":
		return WebSession_Response_ClientErrorCode_imATeapot
	case "unprocessableEntity":
		return WebSession_Response_ClientErrorCode_unprocessableEntity

	default:
		return 0
	}
}

type WebSession_Response_ClientErrorCode_List struct{ capnp.List }

func NewWebSession_Response_ClientErrorCode_List(s *capnp.Segment, sz int32) (WebSession_Response_ClientErrorCode_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return WebSession_Response_ClientErrorCode_List{l.List}, err
}

func (l WebSession_Response_ClientErrorCode_List) At(i int) WebSession_Response_ClientErrorCode {
	ul := capnp.UInt16List{List: l.List}
	return WebSession_Response_ClientErrorCode(ul.At(i))
}

func (l WebSession_Response_ClientErrorCode_List) Set(i int, v WebSession_Response_ClientErrorCode) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type WebSession_Response_Header struct{ capnp.Struct }

// WebSession_Response_Header_TypeID is the unique identifier for the type WebSession_Response_Header.
const WebSession_Response_Header_TypeID = 0xb4b873147ab5ce5e

func NewWebSession_Response_Header(s *capnp.Segment) (WebSession_Response_Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_Response_Header{st}, err
}

func NewRootWebSession_Response_Header(s *capnp.Segment) (WebSession_Response_Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_Response_Header{st}, err
}

func ReadRootWebSession_Response_Header(msg *capnp.Message) (WebSession_Response_Header, error) {
	root, err := msg.Root()
	return WebSession_Response_Header{root.Struct()}, err
}

func (s WebSession_Response_Header) String() string {
	str, _ := text.Marshal(0xb4b873147ab5ce5e, s.Struct)
	return str
}

func (s WebSession_Response_Header) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_Response_Header) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Response_Header) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_Response_Header) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_Response_Header) Value() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_Header) HasValue() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_Header) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_Header) SetValue(v string) error {
	return s.Struct.SetText(1, v)
}

// WebSession_Response_Header_List is a list of WebSession_Response_Header.
type WebSession_Response_Header_List struct{ capnp.List }

// NewWebSession_Response_Header creates a new list of WebSession_Response_Header.
func NewWebSession_Response_Header_List(s *capnp.Segment, sz int32) (WebSession_Response_Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return WebSession_Response_Header_List{l}, err
}

func (s WebSession_Response_Header_List) At(i int) WebSession_Response_Header {
	return WebSession_Response_Header{s.List.Struct(i)}
}

func (s WebSession_Response_Header_List) Set(i int, v WebSession_Response_Header) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Response_Header_List) String() string {
	str, _ := text.MarshalList(0xb4b873147ab5ce5e, s.List)
	return str
}

// WebSession_Response_Header_Future is a wrapper for a WebSession_Response_Header promised by a client call.
type WebSession_Response_Header_Future struct{ *capnp.Future }

func (p WebSession_Response_Header_Future) Struct() (WebSession_Response_Header, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_Header{s}, err
}

type WebSession_Response_ErrorBody struct{ capnp.Struct }

// WebSession_Response_ErrorBody_TypeID is the unique identifier for the type WebSession_Response_ErrorBody.
const WebSession_Response_ErrorBody_TypeID = 0x9497e63b399a2c01

func NewWebSession_Response_ErrorBody(s *capnp.Segment) (WebSession_Response_ErrorBody, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_Response_ErrorBody{st}, err
}

func NewRootWebSession_Response_ErrorBody(s *capnp.Segment) (WebSession_Response_ErrorBody, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_Response_ErrorBody{st}, err
}

func ReadRootWebSession_Response_ErrorBody(msg *capnp.Message) (WebSession_Response_ErrorBody, error) {
	root, err := msg.Root()
	return WebSession_Response_ErrorBody{root.Struct()}, err
}

func (s WebSession_Response_ErrorBody) String() string {
	str, _ := text.Marshal(0x9497e63b399a2c01, s.Struct)
	return str
}

func (s WebSession_Response_ErrorBody) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s WebSession_Response_ErrorBody) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Response_ErrorBody) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s WebSession_Response_ErrorBody) Encoding() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_ErrorBody) HasEncoding() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_ErrorBody) EncodingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_ErrorBody) SetEncoding(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_Response_ErrorBody) Language() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s WebSession_Response_ErrorBody) HasLanguage() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_Response_ErrorBody) LanguageBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s WebSession_Response_ErrorBody) SetLanguage(v string) error {
	return s.Struct.SetText(2, v)
}

func (s WebSession_Response_ErrorBody) MimeType() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s WebSession_Response_ErrorBody) HasMimeType() bool {
	return s.Struct.HasPtr(3)
}

func (s WebSession_Response_ErrorBody) MimeTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s WebSession_Response_ErrorBody) SetMimeType(v string) error {
	return s.Struct.SetText(3, v)
}

// WebSession_Response_ErrorBody_List is a list of WebSession_Response_ErrorBody.
type WebSession_Response_ErrorBody_List struct{ capnp.List }

// NewWebSession_Response_ErrorBody creates a new list of WebSession_Response_ErrorBody.
func NewWebSession_Response_ErrorBody_List(s *capnp.Segment, sz int32) (WebSession_Response_ErrorBody_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return WebSession_Response_ErrorBody_List{l}, err
}

func (s WebSession_Response_ErrorBody_List) At(i int) WebSession_Response_ErrorBody {
	return WebSession_Response_ErrorBody{s.List.Struct(i)}
}

func (s WebSession_Response_ErrorBody_List) Set(i int, v WebSession_Response_ErrorBody) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Response_ErrorBody_List) String() string {
	str, _ := text.MarshalList(0x9497e63b399a2c01, s.List)
	return str
}

// WebSession_Response_ErrorBody_Future is a wrapper for a WebSession_Response_ErrorBody promised by a client call.
type WebSession_Response_ErrorBody_Future struct{ *capnp.Future }

func (p WebSession_Response_ErrorBody_Future) Struct() (WebSession_Response_ErrorBody, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_ErrorBody{s}, err
}

type WebSession_RequestStream struct{ Client *capnp.Client }

// WebSession_RequestStream_TypeID is the unique identifier for the type WebSession_RequestStream.
const WebSession_RequestStream_TypeID = 0x99ffc2f3f69a6a9f

func (c WebSession_RequestStream) GetResponse(ctx context.Context, params func(WebSession_RequestStream_getResponse_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x99ffc2f3f69a6a9f,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession.RequestStream",
			MethodName:    "getResponse",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_RequestStream_getResponse_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession_RequestStream) Write(ctx context.Context, params func(util.ByteStream_write_Params) error) (util.ByteStream_write_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      0,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(util.ByteStream_write_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return util.ByteStream_write_Results_Future{Future: ans.Future()}, release
}
func (c WebSession_RequestStream) Done(ctx context.Context, params func(util.ByteStream_done_Params) error) (util.ByteStream_done_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      1,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "done",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(util.ByteStream_done_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return util.ByteStream_done_Results_Future{Future: ans.Future()}, release
}
func (c WebSession_RequestStream) ExpectSize(ctx context.Context, params func(util.ByteStream_expectSize_Params) error) (util.ByteStream_expectSize_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      2,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "expectSize",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(util.ByteStream_expectSize_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return util.ByteStream_expectSize_Results_Future{Future: ans.Future()}, release
}

// A WebSession_RequestStream_Server is a WebSession_RequestStream with a local implementation.
type WebSession_RequestStream_Server interface {
	GetResponse(context.Context, WebSession_RequestStream_getResponse) error

	Write(context.Context, util.ByteStream_write) error

	Done(context.Context, util.ByteStream_done) error

	ExpectSize(context.Context, util.ByteStream_expectSize) error
}

// WebSession_RequestStream_NewServer creates a new Server from an implementation of WebSession_RequestStream_Server.
func WebSession_RequestStream_NewServer(s WebSession_RequestStream_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WebSession_RequestStream_Methods(nil, s), s, c, policy)
}

// WebSession_RequestStream_ServerToClient creates a new Client from an implementation of WebSession_RequestStream_Server.
// The caller is responsible for calling Release on the returned Client.
func WebSession_RequestStream_ServerToClient(s WebSession_RequestStream_Server, policy *server.Policy) WebSession_RequestStream {
	return WebSession_RequestStream{Client: capnp.NewClient(WebSession_RequestStream_NewServer(s, policy))}
}

// WebSession_RequestStream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WebSession_RequestStream_Methods(methods []server.Method, s WebSession_RequestStream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x99ffc2f3f69a6a9f,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession.RequestStream",
			MethodName:    "getResponse",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetResponse(ctx, WebSession_RequestStream_getResponse{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      0,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, util.ByteStream_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      1,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "done",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Done(ctx, util.ByteStream_done{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      2,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "expectSize",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ExpectSize(ctx, util.ByteStream_expectSize{call})
		},
	})

	return methods
}

// WebSession_RequestStream_getResponse holds the state for a server call to WebSession_RequestStream.getResponse.
// See server.Call for documentation.
type WebSession_RequestStream_getResponse struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_RequestStream_getResponse) Args() WebSession_RequestStream_getResponse_Params {
	return WebSession_RequestStream_getResponse_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_RequestStream_getResponse) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

type WebSession_RequestStream_getResponse_Params struct{ capnp.Struct }

// WebSession_RequestStream_getResponse_Params_TypeID is the unique identifier for the type WebSession_RequestStream_getResponse_Params.
const WebSession_RequestStream_getResponse_Params_TypeID = 0xe9a02a3219bdbd70

func NewWebSession_RequestStream_getResponse_Params(s *capnp.Segment) (WebSession_RequestStream_getResponse_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebSession_RequestStream_getResponse_Params{st}, err
}

func NewRootWebSession_RequestStream_getResponse_Params(s *capnp.Segment) (WebSession_RequestStream_getResponse_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebSession_RequestStream_getResponse_Params{st}, err
}

func ReadRootWebSession_RequestStream_getResponse_Params(msg *capnp.Message) (WebSession_RequestStream_getResponse_Params, error) {
	root, err := msg.Root()
	return WebSession_RequestStream_getResponse_Params{root.Struct()}, err
}

func (s WebSession_RequestStream_getResponse_Params) String() string {
	str, _ := text.Marshal(0xe9a02a3219bdbd70, s.Struct)
	return str
}

// WebSession_RequestStream_getResponse_Params_List is a list of WebSession_RequestStream_getResponse_Params.
type WebSession_RequestStream_getResponse_Params_List struct{ capnp.List }

// NewWebSession_RequestStream_getResponse_Params creates a new list of WebSession_RequestStream_getResponse_Params.
func NewWebSession_RequestStream_getResponse_Params_List(s *capnp.Segment, sz int32) (WebSession_RequestStream_getResponse_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return WebSession_RequestStream_getResponse_Params_List{l}, err
}

func (s WebSession_RequestStream_getResponse_Params_List) At(i int) WebSession_RequestStream_getResponse_Params {
	return WebSession_RequestStream_getResponse_Params{s.List.Struct(i)}
}

func (s WebSession_RequestStream_getResponse_Params_List) Set(i int, v WebSession_RequestStream_getResponse_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_RequestStream_getResponse_Params_List) String() string {
	str, _ := text.MarshalList(0xe9a02a3219bdbd70, s.List)
	return str
}

// WebSession_RequestStream_getResponse_Params_Future is a wrapper for a WebSession_RequestStream_getResponse_Params promised by a client call.
type WebSession_RequestStream_getResponse_Params_Future struct{ *capnp.Future }

func (p WebSession_RequestStream_getResponse_Params_Future) Struct() (WebSession_RequestStream_getResponse_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_RequestStream_getResponse_Params{s}, err
}

type WebSession_WebSocketStream struct{ Client *capnp.Client }

// WebSession_WebSocketStream_TypeID is the unique identifier for the type WebSession_WebSocketStream.
const WebSession_WebSocketStream_TypeID = 0xf001fc1d5e574a07

func (c WebSession_WebSocketStream) SendBytes(ctx context.Context, params func(WebSession_WebSocketStream_sendBytes_Params) error) (WebSession_WebSocketStream_sendBytes_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf001fc1d5e574a07,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession.WebSocketStream",
			MethodName:    "sendBytes",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_WebSocketStream_sendBytes_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_WebSocketStream_sendBytes_Results_Future{Future: ans.Future()}, release
}

// A WebSession_WebSocketStream_Server is a WebSession_WebSocketStream with a local implementation.
type WebSession_WebSocketStream_Server interface {
	SendBytes(context.Context, WebSession_WebSocketStream_sendBytes) error
}

// WebSession_WebSocketStream_NewServer creates a new Server from an implementation of WebSession_WebSocketStream_Server.
func WebSession_WebSocketStream_NewServer(s WebSession_WebSocketStream_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WebSession_WebSocketStream_Methods(nil, s), s, c, policy)
}

// WebSession_WebSocketStream_ServerToClient creates a new Client from an implementation of WebSession_WebSocketStream_Server.
// The caller is responsible for calling Release on the returned Client.
func WebSession_WebSocketStream_ServerToClient(s WebSession_WebSocketStream_Server, policy *server.Policy) WebSession_WebSocketStream {
	return WebSession_WebSocketStream{Client: capnp.NewClient(WebSession_WebSocketStream_NewServer(s, policy))}
}

// WebSession_WebSocketStream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WebSession_WebSocketStream_Methods(methods []server.Method, s WebSession_WebSocketStream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf001fc1d5e574a07,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession.WebSocketStream",
			MethodName:    "sendBytes",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SendBytes(ctx, WebSession_WebSocketStream_sendBytes{call})
		},
	})

	return methods
}

// WebSession_WebSocketStream_sendBytes holds the state for a server call to WebSession_WebSocketStream.sendBytes.
// See server.Call for documentation.
type WebSession_WebSocketStream_sendBytes struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_WebSocketStream_sendBytes) Args() WebSession_WebSocketStream_sendBytes_Params {
	return WebSession_WebSocketStream_sendBytes_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_WebSocketStream_sendBytes) AllocResults() (WebSession_WebSocketStream_sendBytes_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebSession_WebSocketStream_sendBytes_Results{Struct: r}, err
}

type WebSession_WebSocketStream_sendBytes_Params struct{ capnp.Struct }

// WebSession_WebSocketStream_sendBytes_Params_TypeID is the unique identifier for the type WebSession_WebSocketStream_sendBytes_Params.
const WebSession_WebSocketStream_sendBytes_Params_TypeID = 0x9a712ce3fcad8cd8

func NewWebSession_WebSocketStream_sendBytes_Params(s *capnp.Segment) (WebSession_WebSocketStream_sendBytes_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_WebSocketStream_sendBytes_Params{st}, err
}

func NewRootWebSession_WebSocketStream_sendBytes_Params(s *capnp.Segment) (WebSession_WebSocketStream_sendBytes_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_WebSocketStream_sendBytes_Params{st}, err
}

func ReadRootWebSession_WebSocketStream_sendBytes_Params(msg *capnp.Message) (WebSession_WebSocketStream_sendBytes_Params, error) {
	root, err := msg.Root()
	return WebSession_WebSocketStream_sendBytes_Params{root.Struct()}, err
}

func (s WebSession_WebSocketStream_sendBytes_Params) String() string {
	str, _ := text.Marshal(0x9a712ce3fcad8cd8, s.Struct)
	return str
}

func (s WebSession_WebSocketStream_sendBytes_Params) Message() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s WebSession_WebSocketStream_sendBytes_Params) HasMessage() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_WebSocketStream_sendBytes_Params) SetMessage(v []byte) error {
	return s.Struct.SetData(0, v)
}

// WebSession_WebSocketStream_sendBytes_Params_List is a list of WebSession_WebSocketStream_sendBytes_Params.
type WebSession_WebSocketStream_sendBytes_Params_List struct{ capnp.List }

// NewWebSession_WebSocketStream_sendBytes_Params creates a new list of WebSession_WebSocketStream_sendBytes_Params.
func NewWebSession_WebSocketStream_sendBytes_Params_List(s *capnp.Segment, sz int32) (WebSession_WebSocketStream_sendBytes_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return WebSession_WebSocketStream_sendBytes_Params_List{l}, err
}

func (s WebSession_WebSocketStream_sendBytes_Params_List) At(i int) WebSession_WebSocketStream_sendBytes_Params {
	return WebSession_WebSocketStream_sendBytes_Params{s.List.Struct(i)}
}

func (s WebSession_WebSocketStream_sendBytes_Params_List) Set(i int, v WebSession_WebSocketStream_sendBytes_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_WebSocketStream_sendBytes_Params_List) String() string {
	str, _ := text.MarshalList(0x9a712ce3fcad8cd8, s.List)
	return str
}

// WebSession_WebSocketStream_sendBytes_Params_Future is a wrapper for a WebSession_WebSocketStream_sendBytes_Params promised by a client call.
type WebSession_WebSocketStream_sendBytes_Params_Future struct{ *capnp.Future }

func (p WebSession_WebSocketStream_sendBytes_Params_Future) Struct() (WebSession_WebSocketStream_sendBytes_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_WebSocketStream_sendBytes_Params{s}, err
}

type WebSession_WebSocketStream_sendBytes_Results struct{ capnp.Struct }

// WebSession_WebSocketStream_sendBytes_Results_TypeID is the unique identifier for the type WebSession_WebSocketStream_sendBytes_Results.
const WebSession_WebSocketStream_sendBytes_Results_TypeID = 0x82a3ee23aa0ae3a3

func NewWebSession_WebSocketStream_sendBytes_Results(s *capnp.Segment) (WebSession_WebSocketStream_sendBytes_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebSession_WebSocketStream_sendBytes_Results{st}, err
}

func NewRootWebSession_WebSocketStream_sendBytes_Results(s *capnp.Segment) (WebSession_WebSocketStream_sendBytes_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebSession_WebSocketStream_sendBytes_Results{st}, err
}

func ReadRootWebSession_WebSocketStream_sendBytes_Results(msg *capnp.Message) (WebSession_WebSocketStream_sendBytes_Results, error) {
	root, err := msg.Root()
	return WebSession_WebSocketStream_sendBytes_Results{root.Struct()}, err
}

func (s WebSession_WebSocketStream_sendBytes_Results) String() string {
	str, _ := text.Marshal(0x82a3ee23aa0ae3a3, s.Struct)
	return str
}

// WebSession_WebSocketStream_sendBytes_Results_List is a list of WebSession_WebSocketStream_sendBytes_Results.
type WebSession_WebSocketStream_sendBytes_Results_List struct{ capnp.List }

// NewWebSession_WebSocketStream_sendBytes_Results creates a new list of WebSession_WebSocketStream_sendBytes_Results.
func NewWebSession_WebSocketStream_sendBytes_Results_List(s *capnp.Segment, sz int32) (WebSession_WebSocketStream_sendBytes_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return WebSession_WebSocketStream_sendBytes_Results_List{l}, err
}

func (s WebSession_WebSocketStream_sendBytes_Results_List) At(i int) WebSession_WebSocketStream_sendBytes_Results {
	return WebSession_WebSocketStream_sendBytes_Results{s.List.Struct(i)}
}

func (s WebSession_WebSocketStream_sendBytes_Results_List) Set(i int, v WebSession_WebSocketStream_sendBytes_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_WebSocketStream_sendBytes_Results_List) String() string {
	str, _ := text.MarshalList(0x82a3ee23aa0ae3a3, s.List)
	return str
}

// WebSession_WebSocketStream_sendBytes_Results_Future is a wrapper for a WebSession_WebSocketStream_sendBytes_Results promised by a client call.
type WebSession_WebSocketStream_sendBytes_Results_Future struct{ *capnp.Future }

func (p WebSession_WebSocketStream_sendBytes_Results_Future) Struct() (WebSession_WebSocketStream_sendBytes_Results, error) {
	s, err := p.Future.Struct()
	return WebSession_WebSocketStream_sendBytes_Results{s}, err
}

type WebSession_CachePolicy struct{ capnp.Struct }

// WebSession_CachePolicy_TypeID is the unique identifier for the type WebSession_CachePolicy.
const WebSession_CachePolicy_TypeID = 0xb37b21e300864885

func NewWebSession_CachePolicy(s *capnp.Segment) (WebSession_CachePolicy, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebSession_CachePolicy{st}, err
}

func NewRootWebSession_CachePolicy(s *capnp.Segment) (WebSession_CachePolicy, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebSession_CachePolicy{st}, err
}

func ReadRootWebSession_CachePolicy(msg *capnp.Message) (WebSession_CachePolicy, error) {
	root, err := msg.Root()
	return WebSession_CachePolicy{root.Struct()}, err
}

func (s WebSession_CachePolicy) String() string {
	str, _ := text.Marshal(0xb37b21e300864885, s.Struct)
	return str
}

func (s WebSession_CachePolicy) WithCheck() WebSession_CachePolicy_Scope {
	return WebSession_CachePolicy_Scope(s.Struct.Uint16(0))
}

func (s WebSession_CachePolicy) SetWithCheck(v WebSession_CachePolicy_Scope) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s WebSession_CachePolicy) Permanent() WebSession_CachePolicy_Scope {
	return WebSession_CachePolicy_Scope(s.Struct.Uint16(2))
}

func (s WebSession_CachePolicy) SetPermanent(v WebSession_CachePolicy_Scope) {
	s.Struct.SetUint16(2, uint16(v))
}

func (s WebSession_CachePolicy) VariesOnCookie() bool {
	return s.Struct.Bit(32)
}

func (s WebSession_CachePolicy) SetVariesOnCookie(v bool) {
	s.Struct.SetBit(32, v)
}

func (s WebSession_CachePolicy) VariesOnAccept() bool {
	return s.Struct.Bit(33)
}

func (s WebSession_CachePolicy) SetVariesOnAccept(v bool) {
	s.Struct.SetBit(33, v)
}

// WebSession_CachePolicy_List is a list of WebSession_CachePolicy.
type WebSession_CachePolicy_List struct{ capnp.List }

// NewWebSession_CachePolicy creates a new list of WebSession_CachePolicy.
func NewWebSession_CachePolicy_List(s *capnp.Segment, sz int32) (WebSession_CachePolicy_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return WebSession_CachePolicy_List{l}, err
}

func (s WebSession_CachePolicy_List) At(i int) WebSession_CachePolicy {
	return WebSession_CachePolicy{s.List.Struct(i)}
}

func (s WebSession_CachePolicy_List) Set(i int, v WebSession_CachePolicy) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_CachePolicy_List) String() string {
	str, _ := text.MarshalList(0xb37b21e300864885, s.List)
	return str
}

// WebSession_CachePolicy_Future is a wrapper for a WebSession_CachePolicy promised by a client call.
type WebSession_CachePolicy_Future struct{ *capnp.Future }

func (p WebSession_CachePolicy_Future) Struct() (WebSession_CachePolicy, error) {
	s, err := p.Future.Struct()
	return WebSession_CachePolicy{s}, err
}

type WebSession_CachePolicy_Scope uint16

// WebSession_CachePolicy_Scope_TypeID is the unique identifier for the type WebSession_CachePolicy_Scope.
const WebSession_CachePolicy_Scope_TypeID = 0x81535505f60de028

// Values of WebSession_CachePolicy_Scope.
const (
	WebSession_CachePolicy_Scope_none          WebSession_CachePolicy_Scope = 0
	WebSession_CachePolicy_Scope_perSession    WebSession_CachePolicy_Scope = 1
	WebSession_CachePolicy_Scope_perUser       WebSession_CachePolicy_Scope = 2
	WebSession_CachePolicy_Scope_perAppVersion WebSession_CachePolicy_Scope = 3
	WebSession_CachePolicy_Scope_universal     WebSession_CachePolicy_Scope = 4
)

// String returns the enum's constant name.
func (c WebSession_CachePolicy_Scope) String() string {
	switch c {
	case WebSession_CachePolicy_Scope_none:
		return "none"
	case WebSession_CachePolicy_Scope_perSession:
		return "perSession"
	case WebSession_CachePolicy_Scope_perUser:
		return "perUser"
	case WebSession_CachePolicy_Scope_perAppVersion:
		return "perAppVersion"
	case WebSession_CachePolicy_Scope_universal:
		return "universal"

	default:
		return ""
	}
}

// WebSession_CachePolicy_ScopeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func WebSession_CachePolicy_ScopeFromString(c string) WebSession_CachePolicy_Scope {
	switch c {
	case "none":
		return WebSession_CachePolicy_Scope_none
	case "perSession":
		return WebSession_CachePolicy_Scope_perSession
	case "perUser":
		return WebSession_CachePolicy_Scope_perUser
	case "perAppVersion":
		return WebSession_CachePolicy_Scope_perAppVersion
	case "universal":
		return WebSession_CachePolicy_Scope_universal

	default:
		return 0
	}
}

type WebSession_CachePolicy_Scope_List struct{ capnp.List }

func NewWebSession_CachePolicy_Scope_List(s *capnp.Segment, sz int32) (WebSession_CachePolicy_Scope_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return WebSession_CachePolicy_Scope_List{l.List}, err
}

func (l WebSession_CachePolicy_Scope_List) At(i int) WebSession_CachePolicy_Scope {
	ul := capnp.UInt16List{List: l.List}
	return WebSession_CachePolicy_Scope(ul.At(i))
}

func (l WebSession_CachePolicy_Scope_List) Set(i int, v WebSession_CachePolicy_Scope) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type WebSession_Options struct{ capnp.Struct }

// WebSession_Options_TypeID is the unique identifier for the type WebSession_Options.
const WebSession_Options_TypeID = 0xe9ff06beec4e73d6

func NewWebSession_Options(s *capnp.Segment) (WebSession_Options, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_Options{st}, err
}

func NewRootWebSession_Options(s *capnp.Segment) (WebSession_Options, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_Options{st}, err
}

func ReadRootWebSession_Options(msg *capnp.Message) (WebSession_Options, error) {
	root, err := msg.Root()
	return WebSession_Options{root.Struct()}, err
}

func (s WebSession_Options) String() string {
	str, _ := text.Marshal(0xe9ff06beec4e73d6, s.Struct)
	return str
}

func (s WebSession_Options) DavClass1() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_Options) SetDavClass1(v bool) {
	s.Struct.SetBit(0, v)
}

func (s WebSession_Options) DavClass2() bool {
	return s.Struct.Bit(1)
}

func (s WebSession_Options) SetDavClass2(v bool) {
	s.Struct.SetBit(1, v)
}

func (s WebSession_Options) DavClass3() bool {
	return s.Struct.Bit(2)
}

func (s WebSession_Options) SetDavClass3(v bool) {
	s.Struct.SetBit(2, v)
}

func (s WebSession_Options) DavExtensions() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s WebSession_Options) HasDavExtensions() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Options) SetDavExtensions(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewDavExtensions sets the davExtensions field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s WebSession_Options) NewDavExtensions(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// WebSession_Options_List is a list of WebSession_Options.
type WebSession_Options_List struct{ capnp.List }

// NewWebSession_Options creates a new list of WebSession_Options.
func NewWebSession_Options_List(s *capnp.Segment, sz int32) (WebSession_Options_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return WebSession_Options_List{l}, err
}

func (s WebSession_Options_List) At(i int) WebSession_Options {
	return WebSession_Options{s.List.Struct(i)}
}

func (s WebSession_Options_List) Set(i int, v WebSession_Options) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Options_List) String() string {
	str, _ := text.MarshalList(0xe9ff06beec4e73d6, s.List)
	return str
}

// WebSession_Options_Future is a wrapper for a WebSession_Options promised by a client call.
type WebSession_Options_Future struct{ *capnp.Future }

func (p WebSession_Options_Future) Struct() (WebSession_Options, error) {
	s, err := p.Future.Struct()
	return WebSession_Options{s}, err
}

type WebSession_PropfindDepth uint16

// WebSession_PropfindDepth_TypeID is the unique identifier for the type WebSession_PropfindDepth.
const WebSession_PropfindDepth_TypeID = 0xb39cc44599b3a41b

// Values of WebSession_PropfindDepth.
const (
	WebSession_PropfindDepth_infinity WebSession_PropfindDepth = 0
	WebSession_PropfindDepth_zero     WebSession_PropfindDepth = 1
	WebSession_PropfindDepth_one      WebSession_PropfindDepth = 2
)

// String returns the enum's constant name.
func (c WebSession_PropfindDepth) String() string {
	switch c {
	case WebSession_PropfindDepth_infinity:
		return "infinity"
	case WebSession_PropfindDepth_zero:
		return "zero"
	case WebSession_PropfindDepth_one:
		return "one"

	default:
		return ""
	}
}

// WebSession_PropfindDepthFromString returns the enum value with a name,
// or the zero value if there's no such value.
func WebSession_PropfindDepthFromString(c string) WebSession_PropfindDepth {
	switch c {
	case "infinity":
		return WebSession_PropfindDepth_infinity
	case "zero":
		return WebSession_PropfindDepth_zero
	case "one":
		return WebSession_PropfindDepth_one

	default:
		return 0
	}
}

type WebSession_PropfindDepth_List struct{ capnp.List }

func NewWebSession_PropfindDepth_List(s *capnp.Segment, sz int32) (WebSession_PropfindDepth_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return WebSession_PropfindDepth_List{l.List}, err
}

func (l WebSession_PropfindDepth_List) At(i int) WebSession_PropfindDepth {
	ul := capnp.UInt16List{List: l.List}
	return WebSession_PropfindDepth(ul.At(i))
}

func (l WebSession_PropfindDepth_List) Set(i int, v WebSession_PropfindDepth) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type WebSession_get_Params struct{ capnp.Struct }

// WebSession_get_Params_TypeID is the unique identifier for the type WebSession_get_Params.
const WebSession_get_Params_TypeID = 0xcd94acddf4778328

func NewWebSession_get_Params(s *capnp.Segment) (WebSession_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return WebSession_get_Params{st}, err
}

func NewRootWebSession_get_Params(s *capnp.Segment) (WebSession_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return WebSession_get_Params{st}, err
}

func ReadRootWebSession_get_Params(msg *capnp.Message) (WebSession_get_Params, error) {
	root, err := msg.Root()
	return WebSession_get_Params{root.Struct()}, err
}

func (s WebSession_get_Params) String() string {
	str, _ := text.Marshal(0xcd94acddf4778328, s.Struct)
	return str
}

func (s WebSession_get_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_get_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_get_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_get_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_get_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_get_Params) HasContext() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_get_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_get_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_get_Params) IgnoreBody() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_get_Params) SetIgnoreBody(v bool) {
	s.Struct.SetBit(0, v)
}

// WebSession_get_Params_List is a list of WebSession_get_Params.
type WebSession_get_Params_List struct{ capnp.List }

// NewWebSession_get_Params creates a new list of WebSession_get_Params.
func NewWebSession_get_Params_List(s *capnp.Segment, sz int32) (WebSession_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return WebSession_get_Params_List{l}, err
}

func (s WebSession_get_Params_List) At(i int) WebSession_get_Params {
	return WebSession_get_Params{s.List.Struct(i)}
}

func (s WebSession_get_Params_List) Set(i int, v WebSession_get_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_get_Params_List) String() string {
	str, _ := text.MarshalList(0xcd94acddf4778328, s.List)
	return str
}

// WebSession_get_Params_Future is a wrapper for a WebSession_get_Params promised by a client call.
type WebSession_get_Params_Future struct{ *capnp.Future }

func (p WebSession_get_Params_Future) Struct() (WebSession_get_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_get_Params{s}, err
}

func (p WebSession_get_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(1, nil)}
}

type WebSession_post_Params struct{ capnp.Struct }

// WebSession_post_Params_TypeID is the unique identifier for the type WebSession_post_Params.
const WebSession_post_Params_TypeID = 0xaa6ef20a62c1cafd

func NewWebSession_post_Params(s *capnp.Segment) (WebSession_post_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_post_Params{st}, err
}

func NewRootWebSession_post_Params(s *capnp.Segment) (WebSession_post_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_post_Params{st}, err
}

func ReadRootWebSession_post_Params(msg *capnp.Message) (WebSession_post_Params, error) {
	root, err := msg.Root()
	return WebSession_post_Params{root.Struct()}, err
}

func (s WebSession_post_Params) String() string {
	str, _ := text.Marshal(0xaa6ef20a62c1cafd, s.Struct)
	return str
}

func (s WebSession_post_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_post_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_post_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_post_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_post_Params) Content() (WebSession_PostContent, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_PostContent{Struct: p.Struct()}, err
}

func (s WebSession_post_Params) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_post_Params) SetContent(v WebSession_PostContent) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContent sets the content field to a newly
// allocated WebSession_PostContent struct, preferring placement in s's segment.
func (s WebSession_post_Params) NewContent() (WebSession_PostContent, error) {
	ss, err := NewWebSession_PostContent(s.Struct.Segment())
	if err != nil {
		return WebSession_PostContent{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_post_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_post_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_post_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_post_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_post_Params_List is a list of WebSession_post_Params.
type WebSession_post_Params_List struct{ capnp.List }

// NewWebSession_post_Params creates a new list of WebSession_post_Params.
func NewWebSession_post_Params_List(s *capnp.Segment, sz int32) (WebSession_post_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_post_Params_List{l}, err
}

func (s WebSession_post_Params_List) At(i int) WebSession_post_Params {
	return WebSession_post_Params{s.List.Struct(i)}
}

func (s WebSession_post_Params_List) Set(i int, v WebSession_post_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_post_Params_List) String() string {
	str, _ := text.MarshalList(0xaa6ef20a62c1cafd, s.List)
	return str
}

// WebSession_post_Params_Future is a wrapper for a WebSession_post_Params promised by a client call.
type WebSession_post_Params_Future struct{ *capnp.Future }

func (p WebSession_post_Params_Future) Struct() (WebSession_post_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_post_Params{s}, err
}

func (p WebSession_post_Params_Future) Content() WebSession_PostContent_Future {
	return WebSession_PostContent_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_post_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_openWebSocket_Params struct{ capnp.Struct }

// WebSession_openWebSocket_Params_TypeID is the unique identifier for the type WebSession_openWebSocket_Params.
const WebSession_openWebSocket_Params_TypeID = 0xc7c9c9b19d935e79

func NewWebSession_openWebSocket_Params(s *capnp.Segment) (WebSession_openWebSocket_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_openWebSocket_Params{st}, err
}

func NewRootWebSession_openWebSocket_Params(s *capnp.Segment) (WebSession_openWebSocket_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_openWebSocket_Params{st}, err
}

func ReadRootWebSession_openWebSocket_Params(msg *capnp.Message) (WebSession_openWebSocket_Params, error) {
	root, err := msg.Root()
	return WebSession_openWebSocket_Params{root.Struct()}, err
}

func (s WebSession_openWebSocket_Params) String() string {
	str, _ := text.Marshal(0xc7c9c9b19d935e79, s.Struct)
	return str
}

func (s WebSession_openWebSocket_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_openWebSocket_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_openWebSocket_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_openWebSocket_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_openWebSocket_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_openWebSocket_Params) HasContext() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_openWebSocket_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_openWebSocket_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_openWebSocket_Params) Protocol() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s WebSession_openWebSocket_Params) HasProtocol() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_openWebSocket_Params) SetProtocol(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewProtocol sets the protocol field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s WebSession_openWebSocket_Params) NewProtocol(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s WebSession_openWebSocket_Params) ClientStream() WebSession_WebSocketStream {
	p, _ := s.Struct.Ptr(3)
	return WebSession_WebSocketStream{Client: p.Interface().Client()}
}

func (s WebSession_openWebSocket_Params) HasClientStream() bool {
	return s.Struct.HasPtr(3)
}

func (s WebSession_openWebSocket_Params) SetClientStream(v WebSession_WebSocketStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(3, in.ToPtr())
}

// WebSession_openWebSocket_Params_List is a list of WebSession_openWebSocket_Params.
type WebSession_openWebSocket_Params_List struct{ capnp.List }

// NewWebSession_openWebSocket_Params creates a new list of WebSession_openWebSocket_Params.
func NewWebSession_openWebSocket_Params_List(s *capnp.Segment, sz int32) (WebSession_openWebSocket_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return WebSession_openWebSocket_Params_List{l}, err
}

func (s WebSession_openWebSocket_Params_List) At(i int) WebSession_openWebSocket_Params {
	return WebSession_openWebSocket_Params{s.List.Struct(i)}
}

func (s WebSession_openWebSocket_Params_List) Set(i int, v WebSession_openWebSocket_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_openWebSocket_Params_List) String() string {
	str, _ := text.MarshalList(0xc7c9c9b19d935e79, s.List)
	return str
}

// WebSession_openWebSocket_Params_Future is a wrapper for a WebSession_openWebSocket_Params promised by a client call.
type WebSession_openWebSocket_Params_Future struct{ *capnp.Future }

func (p WebSession_openWebSocket_Params_Future) Struct() (WebSession_openWebSocket_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_openWebSocket_Params{s}, err
}

func (p WebSession_openWebSocket_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_openWebSocket_Params_Future) ClientStream() WebSession_WebSocketStream {
	return WebSession_WebSocketStream{Client: p.Future.Field(3, nil).Client()}
}

type WebSession_openWebSocket_Results struct{ capnp.Struct }

// WebSession_openWebSocket_Results_TypeID is the unique identifier for the type WebSession_openWebSocket_Results.
const WebSession_openWebSocket_Results_TypeID = 0xcc561276d31b392b

func NewWebSession_openWebSocket_Results(s *capnp.Segment) (WebSession_openWebSocket_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_openWebSocket_Results{st}, err
}

func NewRootWebSession_openWebSocket_Results(s *capnp.Segment) (WebSession_openWebSocket_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_openWebSocket_Results{st}, err
}

func ReadRootWebSession_openWebSocket_Results(msg *capnp.Message) (WebSession_openWebSocket_Results, error) {
	root, err := msg.Root()
	return WebSession_openWebSocket_Results{root.Struct()}, err
}

func (s WebSession_openWebSocket_Results) String() string {
	str, _ := text.Marshal(0xcc561276d31b392b, s.Struct)
	return str
}

func (s WebSession_openWebSocket_Results) Protocol() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s WebSession_openWebSocket_Results) HasProtocol() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_openWebSocket_Results) SetProtocol(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewProtocol sets the protocol field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s WebSession_openWebSocket_Results) NewProtocol(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s WebSession_openWebSocket_Results) ServerStream() WebSession_WebSocketStream {
	p, _ := s.Struct.Ptr(1)
	return WebSession_WebSocketStream{Client: p.Interface().Client()}
}

func (s WebSession_openWebSocket_Results) HasServerStream() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_openWebSocket_Results) SetServerStream(v WebSession_WebSocketStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// WebSession_openWebSocket_Results_List is a list of WebSession_openWebSocket_Results.
type WebSession_openWebSocket_Results_List struct{ capnp.List }

// NewWebSession_openWebSocket_Results creates a new list of WebSession_openWebSocket_Results.
func NewWebSession_openWebSocket_Results_List(s *capnp.Segment, sz int32) (WebSession_openWebSocket_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return WebSession_openWebSocket_Results_List{l}, err
}

func (s WebSession_openWebSocket_Results_List) At(i int) WebSession_openWebSocket_Results {
	return WebSession_openWebSocket_Results{s.List.Struct(i)}
}

func (s WebSession_openWebSocket_Results_List) Set(i int, v WebSession_openWebSocket_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_openWebSocket_Results_List) String() string {
	str, _ := text.MarshalList(0xcc561276d31b392b, s.List)
	return str
}

// WebSession_openWebSocket_Results_Future is a wrapper for a WebSession_openWebSocket_Results promised by a client call.
type WebSession_openWebSocket_Results_Future struct{ *capnp.Future }

func (p WebSession_openWebSocket_Results_Future) Struct() (WebSession_openWebSocket_Results, error) {
	s, err := p.Future.Struct()
	return WebSession_openWebSocket_Results{s}, err
}

func (p WebSession_openWebSocket_Results_Future) ServerStream() WebSession_WebSocketStream {
	return WebSession_WebSocketStream{Client: p.Future.Field(1, nil).Client()}
}

type WebSession_put_Params struct{ capnp.Struct }

// WebSession_put_Params_TypeID is the unique identifier for the type WebSession_put_Params.
const WebSession_put_Params_TypeID = 0xf1c587295608596e

func NewWebSession_put_Params(s *capnp.Segment) (WebSession_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_put_Params{st}, err
}

func NewRootWebSession_put_Params(s *capnp.Segment) (WebSession_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_put_Params{st}, err
}

func ReadRootWebSession_put_Params(msg *capnp.Message) (WebSession_put_Params, error) {
	root, err := msg.Root()
	return WebSession_put_Params{root.Struct()}, err
}

func (s WebSession_put_Params) String() string {
	str, _ := text.Marshal(0xf1c587295608596e, s.Struct)
	return str
}

func (s WebSession_put_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_put_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_put_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_put_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_put_Params) Content() (WebSession_PutContent, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_PutContent{Struct: p.Struct()}, err
}

func (s WebSession_put_Params) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_put_Params) SetContent(v WebSession_PutContent) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContent sets the content field to a newly
// allocated WebSession_PutContent struct, preferring placement in s's segment.
func (s WebSession_put_Params) NewContent() (WebSession_PutContent, error) {
	ss, err := NewWebSession_PutContent(s.Struct.Segment())
	if err != nil {
		return WebSession_PutContent{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_put_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_put_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_put_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_put_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_put_Params_List is a list of WebSession_put_Params.
type WebSession_put_Params_List struct{ capnp.List }

// NewWebSession_put_Params creates a new list of WebSession_put_Params.
func NewWebSession_put_Params_List(s *capnp.Segment, sz int32) (WebSession_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_put_Params_List{l}, err
}

func (s WebSession_put_Params_List) At(i int) WebSession_put_Params {
	return WebSession_put_Params{s.List.Struct(i)}
}

func (s WebSession_put_Params_List) Set(i int, v WebSession_put_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_put_Params_List) String() string {
	str, _ := text.MarshalList(0xf1c587295608596e, s.List)
	return str
}

// WebSession_put_Params_Future is a wrapper for a WebSession_put_Params promised by a client call.
type WebSession_put_Params_Future struct{ *capnp.Future }

func (p WebSession_put_Params_Future) Struct() (WebSession_put_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_put_Params{s}, err
}

func (p WebSession_put_Params_Future) Content() WebSession_PutContent_Future {
	return WebSession_PutContent_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_put_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_delete_Params struct{ capnp.Struct }

// WebSession_delete_Params_TypeID is the unique identifier for the type WebSession_delete_Params.
const WebSession_delete_Params_TypeID = 0xeba76bffb27b1975

func NewWebSession_delete_Params(s *capnp.Segment) (WebSession_delete_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_delete_Params{st}, err
}

func NewRootWebSession_delete_Params(s *capnp.Segment) (WebSession_delete_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_delete_Params{st}, err
}

func ReadRootWebSession_delete_Params(msg *capnp.Message) (WebSession_delete_Params, error) {
	root, err := msg.Root()
	return WebSession_delete_Params{root.Struct()}, err
}

func (s WebSession_delete_Params) String() string {
	str, _ := text.Marshal(0xeba76bffb27b1975, s.Struct)
	return str
}

func (s WebSession_delete_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_delete_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_delete_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_delete_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_delete_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_delete_Params) HasContext() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_delete_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_delete_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_delete_Params_List is a list of WebSession_delete_Params.
type WebSession_delete_Params_List struct{ capnp.List }

// NewWebSession_delete_Params creates a new list of WebSession_delete_Params.
func NewWebSession_delete_Params_List(s *capnp.Segment, sz int32) (WebSession_delete_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return WebSession_delete_Params_List{l}, err
}

func (s WebSession_delete_Params_List) At(i int) WebSession_delete_Params {
	return WebSession_delete_Params{s.List.Struct(i)}
}

func (s WebSession_delete_Params_List) Set(i int, v WebSession_delete_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_delete_Params_List) String() string {
	str, _ := text.MarshalList(0xeba76bffb27b1975, s.List)
	return str
}

// WebSession_delete_Params_Future is a wrapper for a WebSession_delete_Params promised by a client call.
type WebSession_delete_Params_Future struct{ *capnp.Future }

func (p WebSession_delete_Params_Future) Struct() (WebSession_delete_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_delete_Params{s}, err
}

func (p WebSession_delete_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(1, nil)}
}

type WebSession_postStreaming_Params struct{ capnp.Struct }

// WebSession_postStreaming_Params_TypeID is the unique identifier for the type WebSession_postStreaming_Params.
const WebSession_postStreaming_Params_TypeID = 0xd26a7affce43b1c0

func NewWebSession_postStreaming_Params(s *capnp.Segment) (WebSession_postStreaming_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_postStreaming_Params{st}, err
}

func NewRootWebSession_postStreaming_Params(s *capnp.Segment) (WebSession_postStreaming_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_postStreaming_Params{st}, err
}

func ReadRootWebSession_postStreaming_Params(msg *capnp.Message) (WebSession_postStreaming_Params, error) {
	root, err := msg.Root()
	return WebSession_postStreaming_Params{root.Struct()}, err
}

func (s WebSession_postStreaming_Params) String() string {
	str, _ := text.Marshal(0xd26a7affce43b1c0, s.Struct)
	return str
}

func (s WebSession_postStreaming_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_postStreaming_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_postStreaming_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_postStreaming_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_postStreaming_Params) MimeType() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_postStreaming_Params) HasMimeType() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_postStreaming_Params) MimeTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_postStreaming_Params) SetMimeType(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_postStreaming_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_postStreaming_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_postStreaming_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_postStreaming_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_postStreaming_Params) Encoding() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s WebSession_postStreaming_Params) HasEncoding() bool {
	return s.Struct.HasPtr(3)
}

func (s WebSession_postStreaming_Params) EncodingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s WebSession_postStreaming_Params) SetEncoding(v string) error {
	return s.Struct.SetText(3, v)
}

// WebSession_postStreaming_Params_List is a list of WebSession_postStreaming_Params.
type WebSession_postStreaming_Params_List struct{ capnp.List }

// NewWebSession_postStreaming_Params creates a new list of WebSession_postStreaming_Params.
func NewWebSession_postStreaming_Params_List(s *capnp.Segment, sz int32) (WebSession_postStreaming_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return WebSession_postStreaming_Params_List{l}, err
}

func (s WebSession_postStreaming_Params_List) At(i int) WebSession_postStreaming_Params {
	return WebSession_postStreaming_Params{s.List.Struct(i)}
}

func (s WebSession_postStreaming_Params_List) Set(i int, v WebSession_postStreaming_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_postStreaming_Params_List) String() string {
	str, _ := text.MarshalList(0xd26a7affce43b1c0, s.List)
	return str
}

// WebSession_postStreaming_Params_Future is a wrapper for a WebSession_postStreaming_Params promised by a client call.
type WebSession_postStreaming_Params_Future struct{ *capnp.Future }

func (p WebSession_postStreaming_Params_Future) Struct() (WebSession_postStreaming_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_postStreaming_Params{s}, err
}

func (p WebSession_postStreaming_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_postStreaming_Results struct{ capnp.Struct }

// WebSession_postStreaming_Results_TypeID is the unique identifier for the type WebSession_postStreaming_Results.
const WebSession_postStreaming_Results_TypeID = 0xbf0e0653dc266205

func NewWebSession_postStreaming_Results(s *capnp.Segment) (WebSession_postStreaming_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_postStreaming_Results{st}, err
}

func NewRootWebSession_postStreaming_Results(s *capnp.Segment) (WebSession_postStreaming_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_postStreaming_Results{st}, err
}

func ReadRootWebSession_postStreaming_Results(msg *capnp.Message) (WebSession_postStreaming_Results, error) {
	root, err := msg.Root()
	return WebSession_postStreaming_Results{root.Struct()}, err
}

func (s WebSession_postStreaming_Results) String() string {
	str, _ := text.Marshal(0xbf0e0653dc266205, s.Struct)
	return str
}

func (s WebSession_postStreaming_Results) Stream() WebSession_RequestStream {
	p, _ := s.Struct.Ptr(0)
	return WebSession_RequestStream{Client: p.Interface().Client()}
}

func (s WebSession_postStreaming_Results) HasStream() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_postStreaming_Results) SetStream(v WebSession_RequestStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// WebSession_postStreaming_Results_List is a list of WebSession_postStreaming_Results.
type WebSession_postStreaming_Results_List struct{ capnp.List }

// NewWebSession_postStreaming_Results creates a new list of WebSession_postStreaming_Results.
func NewWebSession_postStreaming_Results_List(s *capnp.Segment, sz int32) (WebSession_postStreaming_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return WebSession_postStreaming_Results_List{l}, err
}

func (s WebSession_postStreaming_Results_List) At(i int) WebSession_postStreaming_Results {
	return WebSession_postStreaming_Results{s.List.Struct(i)}
}

func (s WebSession_postStreaming_Results_List) Set(i int, v WebSession_postStreaming_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_postStreaming_Results_List) String() string {
	str, _ := text.MarshalList(0xbf0e0653dc266205, s.List)
	return str
}

// WebSession_postStreaming_Results_Future is a wrapper for a WebSession_postStreaming_Results promised by a client call.
type WebSession_postStreaming_Results_Future struct{ *capnp.Future }

func (p WebSession_postStreaming_Results_Future) Struct() (WebSession_postStreaming_Results, error) {
	s, err := p.Future.Struct()
	return WebSession_postStreaming_Results{s}, err
}

func (p WebSession_postStreaming_Results_Future) Stream() WebSession_RequestStream {
	return WebSession_RequestStream{Client: p.Future.Field(0, nil).Client()}
}

type WebSession_putStreaming_Params struct{ capnp.Struct }

// WebSession_putStreaming_Params_TypeID is the unique identifier for the type WebSession_putStreaming_Params.
const WebSession_putStreaming_Params_TypeID = 0xa1ece076a7105939

func NewWebSession_putStreaming_Params(s *capnp.Segment) (WebSession_putStreaming_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_putStreaming_Params{st}, err
}

func NewRootWebSession_putStreaming_Params(s *capnp.Segment) (WebSession_putStreaming_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_putStreaming_Params{st}, err
}

func ReadRootWebSession_putStreaming_Params(msg *capnp.Message) (WebSession_putStreaming_Params, error) {
	root, err := msg.Root()
	return WebSession_putStreaming_Params{root.Struct()}, err
}

func (s WebSession_putStreaming_Params) String() string {
	str, _ := text.Marshal(0xa1ece076a7105939, s.Struct)
	return str
}

func (s WebSession_putStreaming_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_putStreaming_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_putStreaming_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_putStreaming_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_putStreaming_Params) MimeType() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_putStreaming_Params) HasMimeType() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_putStreaming_Params) MimeTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_putStreaming_Params) SetMimeType(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_putStreaming_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_putStreaming_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_putStreaming_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_putStreaming_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_putStreaming_Params) Encoding() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s WebSession_putStreaming_Params) HasEncoding() bool {
	return s.Struct.HasPtr(3)
}

func (s WebSession_putStreaming_Params) EncodingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s WebSession_putStreaming_Params) SetEncoding(v string) error {
	return s.Struct.SetText(3, v)
}

// WebSession_putStreaming_Params_List is a list of WebSession_putStreaming_Params.
type WebSession_putStreaming_Params_List struct{ capnp.List }

// NewWebSession_putStreaming_Params creates a new list of WebSession_putStreaming_Params.
func NewWebSession_putStreaming_Params_List(s *capnp.Segment, sz int32) (WebSession_putStreaming_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return WebSession_putStreaming_Params_List{l}, err
}

func (s WebSession_putStreaming_Params_List) At(i int) WebSession_putStreaming_Params {
	return WebSession_putStreaming_Params{s.List.Struct(i)}
}

func (s WebSession_putStreaming_Params_List) Set(i int, v WebSession_putStreaming_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_putStreaming_Params_List) String() string {
	str, _ := text.MarshalList(0xa1ece076a7105939, s.List)
	return str
}

// WebSession_putStreaming_Params_Future is a wrapper for a WebSession_putStreaming_Params promised by a client call.
type WebSession_putStreaming_Params_Future struct{ *capnp.Future }

func (p WebSession_putStreaming_Params_Future) Struct() (WebSession_putStreaming_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_putStreaming_Params{s}, err
}

func (p WebSession_putStreaming_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_putStreaming_Results struct{ capnp.Struct }

// WebSession_putStreaming_Results_TypeID is the unique identifier for the type WebSession_putStreaming_Results.
const WebSession_putStreaming_Results_TypeID = 0xc60d14bf989d4454

func NewWebSession_putStreaming_Results(s *capnp.Segment) (WebSession_putStreaming_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_putStreaming_Results{st}, err
}

func NewRootWebSession_putStreaming_Results(s *capnp.Segment) (WebSession_putStreaming_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_putStreaming_Results{st}, err
}

func ReadRootWebSession_putStreaming_Results(msg *capnp.Message) (WebSession_putStreaming_Results, error) {
	root, err := msg.Root()
	return WebSession_putStreaming_Results{root.Struct()}, err
}

func (s WebSession_putStreaming_Results) String() string {
	str, _ := text.Marshal(0xc60d14bf989d4454, s.Struct)
	return str
}

func (s WebSession_putStreaming_Results) Stream() WebSession_RequestStream {
	p, _ := s.Struct.Ptr(0)
	return WebSession_RequestStream{Client: p.Interface().Client()}
}

func (s WebSession_putStreaming_Results) HasStream() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_putStreaming_Results) SetStream(v WebSession_RequestStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// WebSession_putStreaming_Results_List is a list of WebSession_putStreaming_Results.
type WebSession_putStreaming_Results_List struct{ capnp.List }

// NewWebSession_putStreaming_Results creates a new list of WebSession_putStreaming_Results.
func NewWebSession_putStreaming_Results_List(s *capnp.Segment, sz int32) (WebSession_putStreaming_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return WebSession_putStreaming_Results_List{l}, err
}

func (s WebSession_putStreaming_Results_List) At(i int) WebSession_putStreaming_Results {
	return WebSession_putStreaming_Results{s.List.Struct(i)}
}

func (s WebSession_putStreaming_Results_List) Set(i int, v WebSession_putStreaming_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_putStreaming_Results_List) String() string {
	str, _ := text.MarshalList(0xc60d14bf989d4454, s.List)
	return str
}

// WebSession_putStreaming_Results_Future is a wrapper for a WebSession_putStreaming_Results promised by a client call.
type WebSession_putStreaming_Results_Future struct{ *capnp.Future }

func (p WebSession_putStreaming_Results_Future) Struct() (WebSession_putStreaming_Results, error) {
	s, err := p.Future.Struct()
	return WebSession_putStreaming_Results{s}, err
}

func (p WebSession_putStreaming_Results_Future) Stream() WebSession_RequestStream {
	return WebSession_RequestStream{Client: p.Future.Field(0, nil).Client()}
}

type WebSession_propfind_Params struct{ capnp.Struct }

// WebSession_propfind_Params_TypeID is the unique identifier for the type WebSession_propfind_Params.
const WebSession_propfind_Params_TypeID = 0xca2d58de88f0b32e

func NewWebSession_propfind_Params(s *capnp.Segment) (WebSession_propfind_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_propfind_Params{st}, err
}

func NewRootWebSession_propfind_Params(s *capnp.Segment) (WebSession_propfind_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_propfind_Params{st}, err
}

func ReadRootWebSession_propfind_Params(msg *capnp.Message) (WebSession_propfind_Params, error) {
	root, err := msg.Root()
	return WebSession_propfind_Params{root.Struct()}, err
}

func (s WebSession_propfind_Params) String() string {
	str, _ := text.Marshal(0xca2d58de88f0b32e, s.Struct)
	return str
}

func (s WebSession_propfind_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_propfind_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_propfind_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_propfind_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_propfind_Params) XmlContent() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_propfind_Params) HasXmlContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_propfind_Params) XmlContentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_propfind_Params) SetXmlContent(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_propfind_Params) Depth() WebSession_PropfindDepth {
	return WebSession_PropfindDepth(s.Struct.Uint16(0))
}

func (s WebSession_propfind_Params) SetDepth(v WebSession_PropfindDepth) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s WebSession_propfind_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_propfind_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_propfind_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_propfind_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_propfind_Params_List is a list of WebSession_propfind_Params.
type WebSession_propfind_Params_List struct{ capnp.List }

// NewWebSession_propfind_Params creates a new list of WebSession_propfind_Params.
func NewWebSession_propfind_Params_List(s *capnp.Segment, sz int32) (WebSession_propfind_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return WebSession_propfind_Params_List{l}, err
}

func (s WebSession_propfind_Params_List) At(i int) WebSession_propfind_Params {
	return WebSession_propfind_Params{s.List.Struct(i)}
}

func (s WebSession_propfind_Params_List) Set(i int, v WebSession_propfind_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_propfind_Params_List) String() string {
	str, _ := text.MarshalList(0xca2d58de88f0b32e, s.List)
	return str
}

// WebSession_propfind_Params_Future is a wrapper for a WebSession_propfind_Params promised by a client call.
type WebSession_propfind_Params_Future struct{ *capnp.Future }

func (p WebSession_propfind_Params_Future) Struct() (WebSession_propfind_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_propfind_Params{s}, err
}

func (p WebSession_propfind_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_proppatch_Params struct{ capnp.Struct }

// WebSession_proppatch_Params_TypeID is the unique identifier for the type WebSession_proppatch_Params.
const WebSession_proppatch_Params_TypeID = 0x9e582e7e054088ae

func NewWebSession_proppatch_Params(s *capnp.Segment) (WebSession_proppatch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_proppatch_Params{st}, err
}

func NewRootWebSession_proppatch_Params(s *capnp.Segment) (WebSession_proppatch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_proppatch_Params{st}, err
}

func ReadRootWebSession_proppatch_Params(msg *capnp.Message) (WebSession_proppatch_Params, error) {
	root, err := msg.Root()
	return WebSession_proppatch_Params{root.Struct()}, err
}

func (s WebSession_proppatch_Params) String() string {
	str, _ := text.Marshal(0x9e582e7e054088ae, s.Struct)
	return str
}

func (s WebSession_proppatch_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_proppatch_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_proppatch_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_proppatch_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_proppatch_Params) XmlContent() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_proppatch_Params) HasXmlContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_proppatch_Params) XmlContentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_proppatch_Params) SetXmlContent(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_proppatch_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_proppatch_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_proppatch_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_proppatch_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_proppatch_Params_List is a list of WebSession_proppatch_Params.
type WebSession_proppatch_Params_List struct{ capnp.List }

// NewWebSession_proppatch_Params creates a new list of WebSession_proppatch_Params.
func NewWebSession_proppatch_Params_List(s *capnp.Segment, sz int32) (WebSession_proppatch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_proppatch_Params_List{l}, err
}

func (s WebSession_proppatch_Params_List) At(i int) WebSession_proppatch_Params {
	return WebSession_proppatch_Params{s.List.Struct(i)}
}

func (s WebSession_proppatch_Params_List) Set(i int, v WebSession_proppatch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_proppatch_Params_List) String() string {
	str, _ := text.MarshalList(0x9e582e7e054088ae, s.List)
	return str
}

// WebSession_proppatch_Params_Future is a wrapper for a WebSession_proppatch_Params promised by a client call.
type WebSession_proppatch_Params_Future struct{ *capnp.Future }

func (p WebSession_proppatch_Params_Future) Struct() (WebSession_proppatch_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_proppatch_Params{s}, err
}

func (p WebSession_proppatch_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_mkcol_Params struct{ capnp.Struct }

// WebSession_mkcol_Params_TypeID is the unique identifier for the type WebSession_mkcol_Params.
const WebSession_mkcol_Params_TypeID = 0xf64da2416445f8b6

func NewWebSession_mkcol_Params(s *capnp.Segment) (WebSession_mkcol_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_mkcol_Params{st}, err
}

func NewRootWebSession_mkcol_Params(s *capnp.Segment) (WebSession_mkcol_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_mkcol_Params{st}, err
}

func ReadRootWebSession_mkcol_Params(msg *capnp.Message) (WebSession_mkcol_Params, error) {
	root, err := msg.Root()
	return WebSession_mkcol_Params{root.Struct()}, err
}

func (s WebSession_mkcol_Params) String() string {
	str, _ := text.Marshal(0xf64da2416445f8b6, s.Struct)
	return str
}

func (s WebSession_mkcol_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_mkcol_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_mkcol_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_mkcol_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_mkcol_Params) Content() (WebSession_PostContent, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_PostContent{Struct: p.Struct()}, err
}

func (s WebSession_mkcol_Params) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_mkcol_Params) SetContent(v WebSession_PostContent) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContent sets the content field to a newly
// allocated WebSession_PostContent struct, preferring placement in s's segment.
func (s WebSession_mkcol_Params) NewContent() (WebSession_PostContent, error) {
	ss, err := NewWebSession_PostContent(s.Struct.Segment())
	if err != nil {
		return WebSession_PostContent{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_mkcol_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_mkcol_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_mkcol_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_mkcol_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_mkcol_Params_List is a list of WebSession_mkcol_Params.
type WebSession_mkcol_Params_List struct{ capnp.List }

// NewWebSession_mkcol_Params creates a new list of WebSession_mkcol_Params.
func NewWebSession_mkcol_Params_List(s *capnp.Segment, sz int32) (WebSession_mkcol_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_mkcol_Params_List{l}, err
}

func (s WebSession_mkcol_Params_List) At(i int) WebSession_mkcol_Params {
	return WebSession_mkcol_Params{s.List.Struct(i)}
}

func (s WebSession_mkcol_Params_List) Set(i int, v WebSession_mkcol_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_mkcol_Params_List) String() string {
	str, _ := text.MarshalList(0xf64da2416445f8b6, s.List)
	return str
}

// WebSession_mkcol_Params_Future is a wrapper for a WebSession_mkcol_Params promised by a client call.
type WebSession_mkcol_Params_Future struct{ *capnp.Future }

func (p WebSession_mkcol_Params_Future) Struct() (WebSession_mkcol_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_mkcol_Params{s}, err
}

func (p WebSession_mkcol_Params_Future) Content() WebSession_PostContent_Future {
	return WebSession_PostContent_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_mkcol_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_copy_Params struct{ capnp.Struct }

// WebSession_copy_Params_TypeID is the unique identifier for the type WebSession_copy_Params.
const WebSession_copy_Params_TypeID = 0x8139673a82bfe07d

func NewWebSession_copy_Params(s *capnp.Segment) (WebSession_copy_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_copy_Params{st}, err
}

func NewRootWebSession_copy_Params(s *capnp.Segment) (WebSession_copy_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_copy_Params{st}, err
}

func ReadRootWebSession_copy_Params(msg *capnp.Message) (WebSession_copy_Params, error) {
	root, err := msg.Root()
	return WebSession_copy_Params{root.Struct()}, err
}

func (s WebSession_copy_Params) String() string {
	str, _ := text.Marshal(0x8139673a82bfe07d, s.Struct)
	return str
}

func (s WebSession_copy_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_copy_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_copy_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_copy_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_copy_Params) Destination() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_copy_Params) HasDestination() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_copy_Params) DestinationBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_copy_Params) SetDestination(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_copy_Params) NoOverwrite() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_copy_Params) SetNoOverwrite(v bool) {
	s.Struct.SetBit(0, v)
}

func (s WebSession_copy_Params) Shallow() bool {
	return s.Struct.Bit(1)
}

func (s WebSession_copy_Params) SetShallow(v bool) {
	s.Struct.SetBit(1, v)
}

func (s WebSession_copy_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_copy_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_copy_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_copy_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_copy_Params_List is a list of WebSession_copy_Params.
type WebSession_copy_Params_List struct{ capnp.List }

// NewWebSession_copy_Params creates a new list of WebSession_copy_Params.
func NewWebSession_copy_Params_List(s *capnp.Segment, sz int32) (WebSession_copy_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return WebSession_copy_Params_List{l}, err
}

func (s WebSession_copy_Params_List) At(i int) WebSession_copy_Params {
	return WebSession_copy_Params{s.List.Struct(i)}
}

func (s WebSession_copy_Params_List) Set(i int, v WebSession_copy_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_copy_Params_List) String() string {
	str, _ := text.MarshalList(0x8139673a82bfe07d, s.List)
	return str
}

// WebSession_copy_Params_Future is a wrapper for a WebSession_copy_Params promised by a client call.
type WebSession_copy_Params_Future struct{ *capnp.Future }

func (p WebSession_copy_Params_Future) Struct() (WebSession_copy_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_copy_Params{s}, err
}

func (p WebSession_copy_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_move_Params struct{ capnp.Struct }

// WebSession_move_Params_TypeID is the unique identifier for the type WebSession_move_Params.
const WebSession_move_Params_TypeID = 0x81f5066b5576a609

func NewWebSession_move_Params(s *capnp.Segment) (WebSession_move_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_move_Params{st}, err
}

func NewRootWebSession_move_Params(s *capnp.Segment) (WebSession_move_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_move_Params{st}, err
}

func ReadRootWebSession_move_Params(msg *capnp.Message) (WebSession_move_Params, error) {
	root, err := msg.Root()
	return WebSession_move_Params{root.Struct()}, err
}

func (s WebSession_move_Params) String() string {
	str, _ := text.Marshal(0x81f5066b5576a609, s.Struct)
	return str
}

func (s WebSession_move_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_move_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_move_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_move_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_move_Params) Destination() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_move_Params) HasDestination() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_move_Params) DestinationBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_move_Params) SetDestination(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_move_Params) NoOverwrite() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_move_Params) SetNoOverwrite(v bool) {
	s.Struct.SetBit(0, v)
}

func (s WebSession_move_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_move_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_move_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_move_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_move_Params_List is a list of WebSession_move_Params.
type WebSession_move_Params_List struct{ capnp.List }

// NewWebSession_move_Params creates a new list of WebSession_move_Params.
func NewWebSession_move_Params_List(s *capnp.Segment, sz int32) (WebSession_move_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return WebSession_move_Params_List{l}, err
}

func (s WebSession_move_Params_List) At(i int) WebSession_move_Params {
	return WebSession_move_Params{s.List.Struct(i)}
}

func (s WebSession_move_Params_List) Set(i int, v WebSession_move_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_move_Params_List) String() string {
	str, _ := text.MarshalList(0x81f5066b5576a609, s.List)
	return str
}

// WebSession_move_Params_Future is a wrapper for a WebSession_move_Params promised by a client call.
type WebSession_move_Params_Future struct{ *capnp.Future }

func (p WebSession_move_Params_Future) Struct() (WebSession_move_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_move_Params{s}, err
}

func (p WebSession_move_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_lock_Params struct{ capnp.Struct }

// WebSession_lock_Params_TypeID is the unique identifier for the type WebSession_lock_Params.
const WebSession_lock_Params_TypeID = 0x9398280f1359570a

func NewWebSession_lock_Params(s *capnp.Segment) (WebSession_lock_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_lock_Params{st}, err
}

func NewRootWebSession_lock_Params(s *capnp.Segment) (WebSession_lock_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_lock_Params{st}, err
}

func ReadRootWebSession_lock_Params(msg *capnp.Message) (WebSession_lock_Params, error) {
	root, err := msg.Root()
	return WebSession_lock_Params{root.Struct()}, err
}

func (s WebSession_lock_Params) String() string {
	str, _ := text.Marshal(0x9398280f1359570a, s.Struct)
	return str
}

func (s WebSession_lock_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_lock_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_lock_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_lock_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_lock_Params) XmlContent() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_lock_Params) HasXmlContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_lock_Params) XmlContentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_lock_Params) SetXmlContent(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_lock_Params) Shallow() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_lock_Params) SetShallow(v bool) {
	s.Struct.SetBit(0, v)
}

func (s WebSession_lock_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_lock_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_lock_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_lock_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_lock_Params_List is a list of WebSession_lock_Params.
type WebSession_lock_Params_List struct{ capnp.List }

// NewWebSession_lock_Params creates a new list of WebSession_lock_Params.
func NewWebSession_lock_Params_List(s *capnp.Segment, sz int32) (WebSession_lock_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return WebSession_lock_Params_List{l}, err
}

func (s WebSession_lock_Params_List) At(i int) WebSession_lock_Params {
	return WebSession_lock_Params{s.List.Struct(i)}
}

func (s WebSession_lock_Params_List) Set(i int, v WebSession_lock_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_lock_Params_List) String() string {
	str, _ := text.MarshalList(0x9398280f1359570a, s.List)
	return str
}

// WebSession_lock_Params_Future is a wrapper for a WebSession_lock_Params promised by a client call.
type WebSession_lock_Params_Future struct{ *capnp.Future }

func (p WebSession_lock_Params_Future) Struct() (WebSession_lock_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_lock_Params{s}, err
}

func (p WebSession_lock_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_unlock_Params struct{ capnp.Struct }

// WebSession_unlock_Params_TypeID is the unique identifier for the type WebSession_unlock_Params.
const WebSession_unlock_Params_TypeID = 0xd684c6a791b97dbc

func NewWebSession_unlock_Params(s *capnp.Segment) (WebSession_unlock_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_unlock_Params{st}, err
}

func NewRootWebSession_unlock_Params(s *capnp.Segment) (WebSession_unlock_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_unlock_Params{st}, err
}

func ReadRootWebSession_unlock_Params(msg *capnp.Message) (WebSession_unlock_Params, error) {
	root, err := msg.Root()
	return WebSession_unlock_Params{root.Struct()}, err
}

func (s WebSession_unlock_Params) String() string {
	str, _ := text.Marshal(0xd684c6a791b97dbc, s.Struct)
	return str
}

func (s WebSession_unlock_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_unlock_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_unlock_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_unlock_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_unlock_Params) LockToken() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_unlock_Params) HasLockToken() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_unlock_Params) LockTokenBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_unlock_Params) SetLockToken(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_unlock_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_unlock_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_unlock_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_unlock_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_unlock_Params_List is a list of WebSession_unlock_Params.
type WebSession_unlock_Params_List struct{ capnp.List }

// NewWebSession_unlock_Params creates a new list of WebSession_unlock_Params.
func NewWebSession_unlock_Params_List(s *capnp.Segment, sz int32) (WebSession_unlock_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_unlock_Params_List{l}, err
}

func (s WebSession_unlock_Params_List) At(i int) WebSession_unlock_Params {
	return WebSession_unlock_Params{s.List.Struct(i)}
}

func (s WebSession_unlock_Params_List) Set(i int, v WebSession_unlock_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_unlock_Params_List) String() string {
	str, _ := text.MarshalList(0xd684c6a791b97dbc, s.List)
	return str
}

// WebSession_unlock_Params_Future is a wrapper for a WebSession_unlock_Params promised by a client call.
type WebSession_unlock_Params_Future struct{ *capnp.Future }

func (p WebSession_unlock_Params_Future) Struct() (WebSession_unlock_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_unlock_Params{s}, err
}

func (p WebSession_unlock_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_acl_Params struct{ capnp.Struct }

// WebSession_acl_Params_TypeID is the unique identifier for the type WebSession_acl_Params.
const WebSession_acl_Params_TypeID = 0x9f79c33e20119e8d

func NewWebSession_acl_Params(s *capnp.Segment) (WebSession_acl_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_acl_Params{st}, err
}

func NewRootWebSession_acl_Params(s *capnp.Segment) (WebSession_acl_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_acl_Params{st}, err
}

func ReadRootWebSession_acl_Params(msg *capnp.Message) (WebSession_acl_Params, error) {
	root, err := msg.Root()
	return WebSession_acl_Params{root.Struct()}, err
}

func (s WebSession_acl_Params) String() string {
	str, _ := text.Marshal(0x9f79c33e20119e8d, s.Struct)
	return str
}

func (s WebSession_acl_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_acl_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_acl_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_acl_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_acl_Params) XmlContent() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_acl_Params) HasXmlContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_acl_Params) XmlContentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_acl_Params) SetXmlContent(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_acl_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_acl_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_acl_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_acl_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_acl_Params_List is a list of WebSession_acl_Params.
type WebSession_acl_Params_List struct{ capnp.List }

// NewWebSession_acl_Params creates a new list of WebSession_acl_Params.
func NewWebSession_acl_Params_List(s *capnp.Segment, sz int32) (WebSession_acl_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_acl_Params_List{l}, err
}

func (s WebSession_acl_Params_List) At(i int) WebSession_acl_Params {
	return WebSession_acl_Params{s.List.Struct(i)}
}

func (s WebSession_acl_Params_List) Set(i int, v WebSession_acl_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_acl_Params_List) String() string {
	str, _ := text.MarshalList(0x9f79c33e20119e8d, s.List)
	return str
}

// WebSession_acl_Params_Future is a wrapper for a WebSession_acl_Params promised by a client call.
type WebSession_acl_Params_Future struct{ *capnp.Future }

func (p WebSession_acl_Params_Future) Struct() (WebSession_acl_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_acl_Params{s}, err
}

func (p WebSession_acl_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_report_Params struct{ capnp.Struct }

// WebSession_report_Params_TypeID is the unique identifier for the type WebSession_report_Params.
const WebSession_report_Params_TypeID = 0xc0643ea68efc60ae

func NewWebSession_report_Params(s *capnp.Segment) (WebSession_report_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_report_Params{st}, err
}

func NewRootWebSession_report_Params(s *capnp.Segment) (WebSession_report_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_report_Params{st}, err
}

func ReadRootWebSession_report_Params(msg *capnp.Message) (WebSession_report_Params, error) {
	root, err := msg.Root()
	return WebSession_report_Params{root.Struct()}, err
}

func (s WebSession_report_Params) String() string {
	str, _ := text.Marshal(0xc0643ea68efc60ae, s.Struct)
	return str
}

func (s WebSession_report_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_report_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_report_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_report_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_report_Params) Content() (WebSession_PostContent, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_PostContent{Struct: p.Struct()}, err
}

func (s WebSession_report_Params) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_report_Params) SetContent(v WebSession_PostContent) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContent sets the content field to a newly
// allocated WebSession_PostContent struct, preferring placement in s's segment.
func (s WebSession_report_Params) NewContent() (WebSession_PostContent, error) {
	ss, err := NewWebSession_PostContent(s.Struct.Segment())
	if err != nil {
		return WebSession_PostContent{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_report_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_report_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_report_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_report_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_report_Params_List is a list of WebSession_report_Params.
type WebSession_report_Params_List struct{ capnp.List }

// NewWebSession_report_Params creates a new list of WebSession_report_Params.
func NewWebSession_report_Params_List(s *capnp.Segment, sz int32) (WebSession_report_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_report_Params_List{l}, err
}

func (s WebSession_report_Params_List) At(i int) WebSession_report_Params {
	return WebSession_report_Params{s.List.Struct(i)}
}

func (s WebSession_report_Params_List) Set(i int, v WebSession_report_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_report_Params_List) String() string {
	str, _ := text.MarshalList(0xc0643ea68efc60ae, s.List)
	return str
}

// WebSession_report_Params_Future is a wrapper for a WebSession_report_Params promised by a client call.
type WebSession_report_Params_Future struct{ *capnp.Future }

func (p WebSession_report_Params_Future) Struct() (WebSession_report_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_report_Params{s}, err
}

func (p WebSession_report_Params_Future) Content() WebSession_PostContent_Future {
	return WebSession_PostContent_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_report_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_options_Params struct{ capnp.Struct }

// WebSession_options_Params_TypeID is the unique identifier for the type WebSession_options_Params.
const WebSession_options_Params_TypeID = 0xd2e47e8eac54ea7e

func NewWebSession_options_Params(s *capnp.Segment) (WebSession_options_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_options_Params{st}, err
}

func NewRootWebSession_options_Params(s *capnp.Segment) (WebSession_options_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_options_Params{st}, err
}

func ReadRootWebSession_options_Params(msg *capnp.Message) (WebSession_options_Params, error) {
	root, err := msg.Root()
	return WebSession_options_Params{root.Struct()}, err
}

func (s WebSession_options_Params) String() string {
	str, _ := text.Marshal(0xd2e47e8eac54ea7e, s.Struct)
	return str
}

func (s WebSession_options_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_options_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_options_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_options_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_options_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_options_Params) HasContext() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_options_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_options_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_options_Params_List is a list of WebSession_options_Params.
type WebSession_options_Params_List struct{ capnp.List }

// NewWebSession_options_Params creates a new list of WebSession_options_Params.
func NewWebSession_options_Params_List(s *capnp.Segment, sz int32) (WebSession_options_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return WebSession_options_Params_List{l}, err
}

func (s WebSession_options_Params_List) At(i int) WebSession_options_Params {
	return WebSession_options_Params{s.List.Struct(i)}
}

func (s WebSession_options_Params_List) Set(i int, v WebSession_options_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_options_Params_List) String() string {
	str, _ := text.MarshalList(0xd2e47e8eac54ea7e, s.List)
	return str
}

// WebSession_options_Params_Future is a wrapper for a WebSession_options_Params promised by a client call.
type WebSession_options_Params_Future struct{ *capnp.Future }

func (p WebSession_options_Params_Future) Struct() (WebSession_options_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_options_Params{s}, err
}

func (p WebSession_options_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(1, nil)}
}

type WebSession_patch_Params struct{ capnp.Struct }

// WebSession_patch_Params_TypeID is the unique identifier for the type WebSession_patch_Params.
const WebSession_patch_Params_TypeID = 0xadef95edc22ca880

func NewWebSession_patch_Params(s *capnp.Segment) (WebSession_patch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_patch_Params{st}, err
}

func NewRootWebSession_patch_Params(s *capnp.Segment) (WebSession_patch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_patch_Params{st}, err
}

func ReadRootWebSession_patch_Params(msg *capnp.Message) (WebSession_patch_Params, error) {
	root, err := msg.Root()
	return WebSession_patch_Params{root.Struct()}, err
}

func (s WebSession_patch_Params) String() string {
	str, _ := text.Marshal(0xadef95edc22ca880, s.Struct)
	return str
}

func (s WebSession_patch_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_patch_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_patch_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_patch_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_patch_Params) Content() (WebSession_PostContent, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_PostContent{Struct: p.Struct()}, err
}

func (s WebSession_patch_Params) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_patch_Params) SetContent(v WebSession_PostContent) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContent sets the content field to a newly
// allocated WebSession_PostContent struct, preferring placement in s's segment.
func (s WebSession_patch_Params) NewContent() (WebSession_PostContent, error) {
	ss, err := NewWebSession_PostContent(s.Struct.Segment())
	if err != nil {
		return WebSession_PostContent{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_patch_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_patch_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_patch_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_patch_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_patch_Params_List is a list of WebSession_patch_Params.
type WebSession_patch_Params_List struct{ capnp.List }

// NewWebSession_patch_Params creates a new list of WebSession_patch_Params.
func NewWebSession_patch_Params_List(s *capnp.Segment, sz int32) (WebSession_patch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_patch_Params_List{l}, err
}

func (s WebSession_patch_Params_List) At(i int) WebSession_patch_Params {
	return WebSession_patch_Params{s.List.Struct(i)}
}

func (s WebSession_patch_Params_List) Set(i int, v WebSession_patch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_patch_Params_List) String() string {
	str, _ := text.MarshalList(0xadef95edc22ca880, s.List)
	return str
}

// WebSession_patch_Params_Future is a wrapper for a WebSession_patch_Params promised by a client call.
type WebSession_patch_Params_Future struct{ *capnp.Future }

func (p WebSession_patch_Params_Future) Struct() (WebSession_patch_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_patch_Params{s}, err
}

func (p WebSession_patch_Params_Future) Content() WebSession_PostContent_Future {
	return WebSession_PostContent_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_patch_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

const schema_a8cb0f2f1a756b32 = "x\xda\xcc;}|\x14\xe5\x99\xcf3\xb3\x9b!H\xdc" +
	"\xbc\xccbE\x88\x1b\x90\x0f\x13\xd8H\x12c\x85;\xcc" +
	"\x17Q\xc8\x89d\x92 \x92\xab\xad\x93\xdd\x97d\xc8\xee" +
	"\xcc23\x0b,\xd5\xa2Q\xafj\xab\xad\x08\xad\xf2S" +
	"[\xb4V\xabp\xf5\x0b\xaf\xf6J-\xbd\xda\x16\xab\xf6" +
	"\xf4j?\xee\xae\xad\xfe\xacWm\xa5UOmi\xc5" +
	"\xb9\xdf\xfb\xce\xceG\xe2\xb2\x89xw?\xff\xcb\xbe\xf3" +
	"\xbc\xcf\xfb\xbc\xcf\xf7\xc7\x9b%'\x936\xa11\xfa\xeb" +
	"Y\x00}+0Z\xe1\\\xf6\xfcc\xa3\xcb\x86\x96^" +
	"\x01J\x0d\"@T\x94\x00\x9a\x9f\xab\xeaF\xc0\xe6\x17" +
	"\xaa\x12\x08\xe8\x9c\xfe|\xd5\xdb\xd1\xb5}W\x00\xa9\x13" +
	"\xfet\xf5\xca\x7fxq\xce'\x1f\x02l>r\xe26" +
	"\x94\xabb\x12\x80\\\x19\xdb\x0e\xe8\\yk\xc7\xfe\xcc" +
	"\xde\x9b\\T\xce\xd3\xf7\xb4\xac\xdeC\xa4\xbb\xa0\xabR" +
	"\xaa@l^\x15kBy}l\x1d@\xf3\x9e\x98\xc3" +
	"\xf0V~u\xf3\xda\x91\x8a\xb7\xc6\x1e\xddN\xd8\xd1\xf2" +
	"j\xf2[\xc0_\x7f\xee\x9ag\x9f\x94\xe4Q\xb2@\x08" +
	"\x90\x036\xd7M\xdf\x81r\xfbtv\xf2\xf2\xe9_\x07" +
	"t\xee|q\xea\xbd\xa7\xfd\xe1\xceQ I\x04\x880" +
	"<\x87\xe5\xbf D\x9c\x1f\xef\xfc\xb3\xb0\xe9\x11\xfbJ" +
	"P\x16`\x88\xc2\x19\x95\x12\x024\xbf \x8f\xb2\xc3\x0e" +
	"\xcb[\x00\x9d\xaeS\xdf\xf9\xf7\xcf\xfc\xe4\xd5\xcf\x94\x06" +
	"]\x1d\xdf\xc6@\xd7\xc7\xd9y\xb8&r\xfe\x7f\xcc\xba" +
	"\xf3\x06\x18O\xd9\xd1\xf8\x83(\xcf\x98\xc1\x08 3Z" +
	"\xd9%\xa7\xae[/\xc7N\xbf\xf9\xa61\x97\xdcu2" +
	"\xbf\xe4\x9e\x93\x7f\xcb\x90-\xde\xbd\xf4o\xfe\xeb\x8b;" +
	"\x81,\x08\x1d\x1b\xe5\xb7(\xcc\x1cE\xf9\xfa\x99\xec\xa6" +
	"\xd7\xced\xc0\xe7\xc4OX\xf0\xb3\xbb\xd7|\x11\x94\xf9" +
	"\x88\xce\xd0\x0f\xee{u\xd1KO\xbc\x05k+$\x8c" +
	"\x024k\xa7<\xc8\x04W8\x85\x0b\xeeK\x1bw\xbf" +
	"\xfd\xdf\xdfun\x01R#\x06\xf2\x00l\xde?k\x00" +
	"\xe5C\xb3\x18\xda\xc7g\x9d'\xbf>\xeb#\x00\xce\xcf" +
	"?\xbb\xef\x9d\x17\x17o\xda\xed21\x8a\xec\xfc\x17f" +
	"\xbd\xc1\x08}kV+\xa0\xf3\x8f\xd7\xb4E?\xd5p" +
	"\xd1\xed@j\xfc\x9b\xcc\x98m2\x809\xb3\x19[*" +
	"N:\xb8\xa3g\xc1\xdd\xb7\x03\x99\x1eq\x9aF\xf2\xa7" +
	"\x9c\x11\xfb\xd1=\xec\xbc\x03\xb3\xbbQ~f\xb6\x04\xd0" +
	"\xf7\xe4l\x11\xfb~>[@\x00\xe7\xfa\xdbI\xed9" +
	"\xffR\xf8R\x18\xe1\xa1\xd9\x1d\x0c\xe13\x1c\xe1\xd2\xf5" +
	"\xd5wo~\xfe\xd5=E\x00\xce\x92l\xcdu\x0c\xe0" +
	"\xb2\x1a\xc6\x0e\xffRd\xba\x18>Q^\x7f\xea\xefd" +
	"z\xeao\x01\x9a\x1b\x13\x9f\x8e\xc83\xe6\xb2\x1bv\x0a" +
	"\x8f\xfc\xe2\xdb\xf4\xb2{\x98,\x84`\xaf{pt\xee" +
	"\\\x94g\xcc\xe5\xa2\x9b\xcb\xd9w\xf4\x89\x83\x83S\xdf" +
	"\xd0\xef\x0d\x93Wy\x1a\x97\xdc\x8c\xd3\x18yG\x0e^" +
	":8K8r\xef8\x85wY\xb7\xef\xb4^\x94\x0f" +
	"\x9e\xc6x|\xe04\xa6_\xf7\xfc\xb5p\xf4\xfe\x8f}" +
	"\xef\xbe\xd2\xfaU3\x8f1\xb2\xb9n\xde\xe7\xd8\xd1\x97" +
	"\xdf\xb3\xf8\xbb\x87w\xfdq_\xf8\xe8\xeb\xe7\xf7\xb2\xa3" +
	"o\x99\xcf\x8e\xfe\xf45\xf7e\xa6M]\xf9uP\xa6" +
	"G\xa7\x8c\xb9y\xe3\x82\xdf\xc9\xcb\x170V\x9f\xbd@" +
	"D@\xcfb\xc7\xd2\xc8YY\xb7\xa0\x1b\xe5\xe5\x0b>" +
	"\x02 w-`\xec\x9c\xf5\x95\x87n\xe9\xfa\xde\xad\x0f" +
	"\x01\xa9\x11\xc6(L\xdd\xc2\x01\x94\x97/d\x97Y\xba" +
	"p\x0d\xa0\xf3\xf1\xa7\xf7o\x8b[\xdfxx\x9c\xd2\x0a" +
	"\\i\x17nD\xf9z\x0e|\xedBv\xf3\xba\xab\xec" +
	"\x1f=\xf9\xe6K\x0f\x03\x99\x1f\xd2Y\x17\xf8\xa5\x85\x83" +
	"(\x1f\xe1\xc0oq\xe0s\x1e\xd9\xd8\xbe\xb7\xe1\xe7\xff" +
	"\xc4\xae>^F\xca\xe9\xdd(\xd3\xd3\x19\xb0z:c" +
	"\xc3\xefS\xe7\xf6\xe7^\xde\xfbM \xf3#\x01f\xc0" +
	"f\xac\xbb\x17\xe5\x99u\x8c\x0d\xf1:\x11\xfb\x96\xd4q" +
	"\x8d\xfb\xd5)\xd6\x9dW\xb6\xb4|\x0b\x94\xe9\x88\x01\xdb" +
	"\\\x89\xed\xaa[\x86\xf2]l\x8f\xbc\xa7\x8e\x91\xb2e" +
	"\xe5\xd6[\x1f\xf9\xfb\x91\x03\xa0\xccC!\xd0\x9e\xb5\xa2" +
	"\x84\"@\xf3\xd1\xbaA&\x90\xcazF\xc9\xcb?\xa8" +
	"y\xf7\xb1\xab\xef:PR\x17\xbeVo\xa2|\xa0\x9e" +
	"a~\xb4\x9ea\x8e\x0e.\xf8\xcf\xbe\x8a\x13\x1f+\xca" +
	"\x97\x03\xcd\\\xb4\x9b\xa1\xab[\xc4m\xed\x92wn\xf8" +
	"\xea9\xe9\xef\x84\x15`\xd5\xa2\x01\x06\xb0v\x11;\xaf" +
	"\x7f\xc5m7?\x16\xaf\xfa~\x18\xc3\xe1E;\x18\xc0" +
	"Q\x8e\xa1\xf0\xf1\x9bn{\xe0\xd0\xa1\x1f\x84m\xa7f" +
	"1\x07H.f\xc2nx\xe8\xb5k~uQ\xf2\x89" +
	"1\x9eifr#\x83\x98\x9fd\x10\x8b\x96\xce\xfa\xb7" +
	"\xcd\xd3/|\xb2\x88\x82\xcb\xebh\x92SY\xd5\xc0\xae" +
	"q\xfa\x95[\xde\xfc\xe5\xde\x9dOy(8\xc4\x15\x0d" +
	"\xdc\x82\xafm`d^D\x0f>\xfa\xd2\x09\x8b\x9f-" +
	"\xc9\x96\xf9gLG\xb9\xe5\x0c\xc6\x96\xc63\x18\xbe\xef" +
	"<\xd0\xf9\xb4\xb3m\xe3\xb3a\x9a\xaf?\x83\xd3|\xdb" +
	"\x19\x8c\xa2O\xfd\xae\x7f\xef\x0d\x9f\xfa\xcd\xb3a\x8a\x0a" +
	"K\xb8\x18\xae^\xc20|\xeb\xb2Go\xbc\xfb\xfbW" +
	"\xfd4\xcc\xb7\x17\x96p\xbe\x1d^\xc2\x08\xfa\xc2\xfdo" +
	"\xaf\xfb\xe2\xac\xe8\xcfJ\xa9\xd7\xb5\x8dsQ\xbe\xa5\x91" +
	"\xd1\xb3\xab\x91\x017\xddH\x97\xbe\xfb\xfa\xd7K\x02\xaf" +
	"n\xea@\xf9\xe2&\x06\xbc\xbe\x89\x01\xaf\xf8\xc6\xe5\x97" +
	"\xa6\xef\xdf\xfe\x8b\xd2\xf6}\xa4\x89_\xa3\xb2\x99\x81\xe6" +
	"\x0e\x1c\x98\xd9T\xff\xe5W\x80,\xf2\xe2\xd5\xbe\xe67" +
	"X\xbc\xfa\xa9u\xc1\xab\xdf\xaep^)\xc9\xaf=\xcd" +
	"\xf5(?\xd0\xcc\x8e\xdc\xd7\xcc\xd8\x91\x9f\xf9\xc9\x07\x9d" +
	"\x91\xbb\x7f\x1ff\xc7\x9e3\xf9m\xf7\x9d\xc9\xd8\xf1\xdd" +
	"ko\x95_\x99z\xddaP\x1a0\xe4\x81\xd6VJ" +
	"(0o\xd6\xc2\x859\xb3\x85\xc1\x8e\xee]\xfcH{" +
	"\xd7G\xfe\x08dAdLP\xcb\xb7<\x88\xf2\xf5-" +
	"\xcc\x96\xaei\x11\xb1\xef+-\xdc\x96\xa4\xeeu\x1f\xaf" +
	"y\x07_{Oty\xa0e#\xca\x8f3x\xf9`" +
	"\xcby\xf2a\xf6\x97s\xe8\xa9\xdd\x95\xa8\x9c\xf7Zi" +
	"\xee<\xd7\xc2\xb9\xf3\x12'D_?\xe5\xc2\xbaO?" +
	"\xfe\xfa\x18\xdd?\x8b+\x95r\x16c_,v\xc9\x0d" +
	"\xb3\xff\x18}\xb34\xaeW\xcez\x82[\xc1Y\xcc\x0a" +
	"|\x9f0\x8e\x9f\x15\x0c\xe9\x9c\x8f\xd6\xa3\xdc\xf8\xd1\x85" +
	"\x0c\xffG\xd71\xbf\xfb\xc8\x9f\xbb\xd2\xedw\xac~;" +
	"|\xf43gs\xbf\xfb\xcb\xb3\xd9\xd1\xeb\xff\xf9\xd4\xe5" +
	"G\x9a\x93\x7f*\xc5P\x14\x9b\xf3K\x9f\xe5\xba\xbft" +
	"\x0b\xbc\xecl\xa1\x83I\x8bZVD3\xf4\x86\x94\x9a" +
	"\xd3s\xcb\xd6\xd1\xc1>jY|\xc1\xc8\x15\xe6\xf5\xa8" +
	"\xa6\x9a\xb5\x00\x94\xb8\x18\x01\x88 \x00\xb9\xac\x1e@\xd9" +
	"*\xa2r\x95\x80\x041\xce\x0c\x8b\\1\x08\xa0\\." +
	"\xa2\xf2Y\x01Q\x883\xe1\x91k\xd9\xda5\"*;" +
	"\x05$\"\xc6\x99O\"7v\x00(\x9f\x15Q\xb9Y" +
	"@\x12\x11\xe2\x18\x01 \xbb\xd8\xe2\xe7ETn\x150" +
	"\x96S\xeda\x9c\x06\x02N\x03t\xd2\xd4\xb25]\xb5" +
	"A\xd2\x0c\xdd_\xd5\x8d5\x9b\xa9\xb9\xc5\x04I\xb3)" +
	"\"\x08\x88\x80\xdb\xada5\x931\xb6\xf8\xbfS\x86n" +
	"\xd3\xad6V\x87\x1d/V3\xbfY\xf6\xe2\x9djj" +
	"\x98\xf6\x18\x19-Uhm\xe8K\x199\xda\x83\xa8\xb8" +
	"wj\xa9g8Hr\x00\x00\x05R\xd7\x01\x80\"\x99" +
	"c\x02`\x84\xd4\xf4\x02\xc4tC\xa7N\x8e\x9a\x1c\x19" +
	"\x88\x86\xbe=G\xcd\xb5\x165\xd9b{.w!\x85" +
	"\x84\xc9\x8eq\xf2\xba\xb6\x99\x9a\x96\x0a\x98\xf1\x09\x12K" +
	"\x12\xd4K\xadD\xce\xd0-\xaa\xc41\xc89\xe7\x0c\x86" +
	"\xd2\xbc9\xa3\xa1\x887gY(g\xab\xe9\x0d\x19N" +
	"\xcd\xa8\xd3\x97O\xa5\xa8eu\x82d\xa4\xa9\xd3\x99\xd1" +
	"\xa8nw\x99h\x1af\xa7\x91\xa6\xd0\xba\x92\xaaij" +
	":]\xa6i\x98\x1dF\x1a\xb0\xe0\x0c\xf3\xa5u\xc3\xa8" +
	"\xd94\xa3Y6(\xf3|m8<\x00\xa0\xbc*b" +
	"\xdf\x14\x14\xb0*\xea8\x18JT\xe5(v\x83P%" +
	"\xbc\xeb\x84u\x91\xbc\xde\x01BU\xc5Q\xb6\xe8\xfb$" +
	"\xf2\x8bA\x10\xaa\xa4w\xd8\xa2o\x8a\xe4q\xb6(\xfe" +
	"\x95-\xfa\x892y\xa0\x17\x04\x82\x15q\xac\x06 \xb7" +
	"1%\xbbUD\xe5\x1e\x01\xab\"\x7fa\x90\xbe\xf5\x91" +
	"\xbbv\x83@\xa6L\x89c\x9c)\xd9\x0e\x00\xe5f\x11" +
	"\x95\x87\x05t,jw\x1a\xc6\x88\x06\"\xb5\xf0D\xc0" +
	"\x1e\x11\xb1:\x88\xa0\x80l\xd11iZ3i\xca\x06" +
	"\x00W\x9bt\xdbI\x159\x06\x92i\x98\x8eE\xcd\xcd" +
	"\xd4\xf4~\xe9F'\x87\x02\xb4\x9dTQ\x8b@\xd2R" +
	"\x05\xac\x0e\xea\x12\xae\x819\x93\xa6\x0c=\xad\xa1\xad\x19" +
	"\xfa\xb9\xaa\x96\x11i\xdaQ\xd3i\x8d\xfdF5\xe3J" +
	"\x01C\xb4\xf9\xe2-\xd2V^\x87\xb3\xc6f\x1a\x18o" +
	"\xb5/.\x95\x19\xef\xc7DT\x86C\xc6K\x19\x0f\xd3" +
	"\"*\xb9\xc0x\xb3l-#\xa2\xb2\x95\x19\xaf\xe0\x1a" +
	"o\x9e\xd9iND\xe5\xd2\x0fb\xa7\x13\xdbe\xf4X" +
	"f\xc0\xad\xa0\xc1Sa#\x8d\xdc4gs\x8aW\x9f" +
	"BV'\x10\xc9\xa6\x0e\xb2)\x81\x02\xd9\xd5MnI" +
	"\xa0H\x0e\xf6\x92\xc7\x13\x18!\x87\xb7\x91\xd7\x13\x18\x95" +
	"g\xe2\xa0\\\x83\x09\xac\x90\xbbpP^\x85\x09\xd1\x18" +
	"Q\"(\x84R\xd6\x88\x80\xed'3\x92\xa0\x07\x11\x7f" +
	"H\xf0\x14q\xcd\xdf1\x1d0\xa9j\xd3tY\xe8C" +
	"\x04;\xb6w\xba\x80\x00\x8e\x9aJ\xd1\x1c\xff\x13Jl" +
	"\x9b\xedo{\x82`\xb7\xd3\xee\x03cX\x97\xcan|" +
	"\x92\xe0\x80s\x81Q\xcb\xa1A\xd4m\x00'\xa7\x9a\xb6" +
	"\xa6f:\xa1\xd5U\xda\xb2\x08\x9e&8\xea\xf4\xb8;" +
	"j\xd1=\x94i\xbc\x93\xcdgl\xad\xcfVA\xb2\xf3" +
	"VY\x14?&\xb8\xd1Y\xcd\xc0\x93}6\xc4T;" +
	"o\x018\xbaa\xaf6\xd2\xda\x06\x90\xb4\x92<\xf3\xf7" +
	"\x8bK\x90!\xb8\xc0\xb0k\xd9\x06\x88m\xd08\xef<" +
	"u\xa8(\xa9\x0e\xecO#5B\xed>\xdb\xa4j\xb6" +
	"\xc1\xa2z\xba\xa3`Sk^o+\xb5\xf2\x19\xdb\x9a" +
	"\xac>y\xac\xb6A\x99\xc2,%\x8e1\x00R7\x0a" +
	"\xa0\x9c.\xa2rf\xd1Td\x00\xd2\xc8\xecg\xb1\x88" +
	"\xca\xd9\xcc\x89\x0c\x1b\xf9L\xba\x97\xa2E\xeds\x0d3" +
	"\x0b\x9e\x8a\xc7h\xbf:\x84\xd5Ar9\xa9\xb8\xe3\xd3" +
	"c\xd2V\xd7\xef(\xd3\\r\x98\x91v1\x83\\!" +
	"\xa2\xd2# \x110\x8e'0\x9d\xef\x06P\xce\x17Q" +
	"\xb9\xa8H\xe34\x00\xb2\x96A\xf6\x8b\xa8\\\"\xa0\xa3" +
	"Y=\xd4\xcc\xaa:HT\xb7=\xfa\x9c\x8c\x91R\x99" +
	"\xa7\x01\x00\xdfX\xad-\x9a\x9d\x1a\xee7@:\x8f\x06" +
	"\x90\x93d\xa1\x17GL#\xc1\xe3\x083\xcb3\xb9Y" +
	"\xee\x1a`f\x88E3\x14\xc8\xe1nf\x86\xa2<\x13" +
	"\xaf\x93\xe7`\x02#\xf2j4e\x05\x99i\x16\xb0[" +
	"\xbe\x8c\x9b\xe6]X/\xdf\x85\x09\x9c\"\x1f\xc2\x07\xe5" +
	"g0\x81\x952\x0a;\xe4J!\x81S\xe5\x16\xe1^" +
	"y\xb9\x90\xc0\x13dM\xe8\x95\xb3B\x02%y\x97\xb0" +
	"[\xbeMH\xe04\xf9\x90p\x87\xfc\x8c\x90p\x06\xd5" +
	"t/\xdd\x94\xa7 Ze-@\xfc<\x12\x1ct:" +
	"\xd4t-\x83\x07\x89Z\xcc\x886\x18\xe6\xa0\x96NS" +
	"@\xbd\xec\xee\x9b\x90`\xafsn\x00\xed\xaa\xfe\xb9F" +
	"^\x9f\xc8\xea\xc5\x9d|/S|\x06\x0e\xc8\xb4>K" +
	"\xeda#}\x81\x81v;Kg\x98%\x94\xc0Q\xeb" +
	"\xe3\xd8\x85\x04w;\xab\xf9\xae\xda\x0b\xd0\xb0k\xf9>" +
	"\x91\x9b\x90n\xd8\xdc\xa9@\xc2V\x073\xb4,1_" +
	"@\x82\xdb81l\x0b\xb4\xe6\xf8\x16\x00'e\xe8\x1b" +
	"2\x1a\x0f\x83e\x11\xdc\x82\xcc\x89u\xfa\xd0\x18\x1b2" +
	"tZ\xce[\x8a\xbb\x91`}\xec<Cg\xe7\x98L" +
	"Z\x96\xdd\x85\xba\xad\xd9\x85~\xc3H\x9c\xaf\x9aC\xa5" +
	"\x10\xcc\xf3\x11\xdc\x86\x04\x9fpz\xdd\x9d\xb5B\x17\xdf" +
	"Z\xdbo\x18\xb5|/\x0f\xe2\xfc\xdbZ4\xb5~\xc3" +
	"8\xdf\xd0q\xa8,?oG\x82\xf7z\x18\x93\xb8\xb6" +
	"w\x15G\x17;\xdf\xd0\x87\x00\x9c\xbcn\xe5s9\xc3" +
	"D\x9b\xa6W\xd3\xb4\xa6\xc6\xfa\x0b9Z\x16\xe3\x97\x90" +
	"\xe07\x9d\xb5\xa1\x8d\xb5lg\xabZ\xcb\xb6\x028Z" +
	"\xb6\xbd\x9f\xaa9c\x02_/\xde\xc1\xfd\xe4\xaa\x85\xd9" +
	"Z\xb5\xd6\xa6\x10Ss\x06w\xf7%\x92\x89\xb2\x04\xdd" +
	"\x8a\x04\xefpz\xc2\xdbj\xcfU5)\xc3u&\xaf" +
	"\xe7L#E-\xb4\x98\xfc\xbbt[\xd2\xecBY|" +
	"_\xe5,[;f_m\x97\x1ec\xb2\x08\xf9\xf1\xd2" +
	"n/c\xa4F&\x9f\xaa\x0c\x94HUXV2," +
	"\xa2b\x87R\x95M\x1dA\xfe26U\xd9\x9a\xcd\xf8" +
	"\xb1\xd2[<\x8e\xdaa\x02\x87\xe8\xe5\xcf\x05\xc6\xa0\x09" +
	"o\xd5\x1d\xdc\x8a\x08\xde\xb5\xba\xc3\x19\x98X\xcc\xc0\xd8" +
	"\xa2-\xa2r\xb9\x80\xb1\xb4j\xabX\x05\x02V\x01:" +
	"TO\x19i\x8d\xa9h\xe0\xd23\xaa>\x94W\x87h" +
	"x-\xabe\xa9\xabv\xc1Z\xf9;u\xba\xbch`" +
	"A\xad\xa83\x09\x9e\xa7\xb2\xa2p\x9a\xe3\xb85\\\xb8" +
	",\xac\xc2w\x9d8FY]\xb8\x0c@\xb9TD\xe5" +
	"\x1a\x01k\xc4\xa3N$\x8e\x15\x00\xe4\xea\x8d\x00\xcaU" +
	"\"*_\x16\xb0&\xf2\x0e[\x96X2o\x16\x93\xf9" +
	"o\x08X%\xfc\xd5\x89\xe3\x14\x00\xb2\x9f\xc5\xb3\x87E" +
	"T\xbe# \xaf\xaf\xa0\xa2\x95n\xd5,\xdb\x82\x0a'" +
	"\xab\xda\xa9aj\xad\x81\x98N\xd7l\x08\xd2\xe5p\xe8" +
	"e\xe9r\x11\xee\x02H\x18\xe5\x01\xd3\x06\xb5t\xbbk" +
	"+H\xac\xd2\xa9\x980fs7\xc1R\x10Q\xcd2" +
	"QG\xc4(3\xc9b\x03\x05\xbd\xe2\x9f\x90A\x10H" +
	"\xa5\xe4\x0cQ\x9b+\x09H\xbaE\xdbP\x89 :\x9f" +
	"x\xf1\xc7u[\xce^\xf7\x14|\x80\xa4\xa7'\xc1M" +
	"H\x89\xf8\xaaV\xc5L`\x8a\x88J\\\xc0\xedYj" +
	"Y\xea\x10\xf5\xd5\xa5\xfc\xb5r\xa6\x91\xcb1\x8e\xf9h" +
	"\xa7\xf9h\xbb\x98\xa0\xdbDT\xce\x0fi\xf0*f\x97" +
	"+ET\xfaC\x1a\xact\x04\xd9\xc9$l\xf0}\xd5" +
	"\xeb\xc3\xb6\x9d\xeb\xb3Y\xa6\xd9\xae\xeb\x86\xcd\xb3\x99U" +
	"i7\x1d\xad\x04\x01+\x03g5\xa1\x07RS\x19\xcf" +
	"\x01}8\xeeY\xda\x0es\xf9\xa2\xd45}h\xf2\x0e" +
	"\xb3\xa4k\x19\xe31\x8b\xaeeS\xf7\xb1\x8a\xbb\x12." +
	"\xa3\xcc%J9\"\xefb\xc2\xf8\x8b\xc5\xd8\xcd\x94\xb3" +
	"1\xdc\xf7\xd4\x96\x058\x09\xed\x085\xdc\xd5\xc1P\xc7" +
	"S\x1d\x08l\x97\xa8\xf5A\xf1N.^\x16L>\xc8" +
	"\xfa\x8dA\xeb\x9b\xac\xbf.\xe8\xc6\x91\x8b\xbbC\x03\xa8" +
	"\x8b\xcdP\xbf\xf0\xe2Q\xaf\\'\x17\x0f\x06-Or" +
	"qGh\x02\xb1\xdelu\x85\xb0\xbd\xe8 \x9d\x1e\xc3" +
	"\xb2\xd9\xdf<\xd7vz\xf2\xb6/\xfbXW\xbf:\xd4" +
	"\xca;\x0e4\xa8\xf2x\xe6\xe0\xff\xc4.\x9fq\x8e\x17" +
	"F\x80\xff\xed\xba\x18Hp\xe1;\x9e\x0b\x10\x8a\xda\x00" +
	"^\xbfJ\xd2R\x85\xedkr\xcc\x12,\xa7\xc74r" +
	"\x1b4=\x0d\x89\x154g\x0f++\xb9[\xf2\xfa\xe1" +
	"\xbe[\x92\x1b\x85\xb9 \xc8\xf3\x05\x09\x83yR\xf0u" +
	"\xa6P\x0f\x82\\%H(\xf9\xfdz\xf4\xba\xee2\x0a" +
	"&\x08\xf2\x11\x94P\xf0{\xa2\xc1\xde\xc3\xc80\xbf\x80" +
	"\x12\x8a~\x1f8\xf8\xfa\x1c.\x03A>\x84\x12F\xfd" +
	"\xae:zS\x07\xf9\x002\xcc\xfbQ\xc2\x0a\x7f\xc6\x86" +
	"\xdeDA\xfe\x1an\x04A\xde\x83\x12N\xf1\x87\x04\x01" +
	"\xe6]\xd8\x0d\x82|=JX\xe9O\x04\x83\xafW`" +
	"/\x08r\x01%\x9c\xea7S\x83\xafYl\x02AV" +
	"Q\xc2\x13\xfc\xc1s\xf0u-2n\xacB\x09\xa7\xf9" +
	"\xb3\xe1\xe0\xebr\xfe\xb5\x11%\xac\xf2\x87\xaa\xc1\xd7\xf9" +
	"\xfc\xebL\x94\xf0D\x7f\x06\x10|\xad\xe2\xdc@\x940" +
	"\xe6\x0f\x1d\x83\xd0\xf1\xd6\\\x10\xc8+\x12V\xfbS\x97" +
	"\xe0\xdb/\x97\x81@\x9e\x91\x90\xf8\xa3\x07\xf4\xf4\x95<" +
	"\xde\x01\x02yT\xc2\x88?\xae\x0b\xf6\xedk\x02\x81\xec" +
	"\x91\xa4!j\xb7a,gXv\x1b:F\x8e\xeaL" +
	"\xbd \xc1cL\x1bJ\xb9\xbc\xdd\x86\xadi\x9a\xa16" +
	"mC\x87\xc11\xad\x83\x04\xf7Bl\xa5\xe8\x94 \xe6" +
	"-x\x8a\x07P\xfc\xc5\x02\x09\xe0p\x1b&\xb2#)" +
	"#\xd3\x86\xb1\x94\x91+\xb4a,kl\xa6m\x18c" +
	"\x09`\x1b\xb6\xe6u\xf7\x0fIMe\xda\xb0\xd5\xa49" +
	"\xc3\xb4\xdbp\xbb\xe1jt\x1b&xD*\x86L\xe3" +
	"\xa4\xfd\x17\xfd\xa1\xbd\xe9\xed\xb0w\x17\x8f\x91\xbe\x18\xd2" +
	"\x88\xe6\xf6p'hb7\x05\xc9\x0a\x0a\x18\x9a\xaf\x91" +
	"\xab\x19+\xc5j7\xa9\x19\x93\x99E\x047\xa5\xc9\xd7" +
	"\x87\xdc\xa7\xaef\xa9\xe7\xfc\x12\x9b\xd5L\xde\xff\xb5\x9d" +
	"n\xcdi&\xb5\x1c\x16\xc0\xd6\xe8\x99\x02s\x93^\xdb" +
	"`\x8c\xd7\x9d B\x1b\x96\x1d\x04\x81\x89\xa2VG\xb8" +
	"wP\x0c\x02\xab;\x82P6\xe6d\xaf\xd5\x89\xd5\x81" +
	"\xebu}\xfbq\xb7\xd4=\x1f\xd7_\xc8\xb9-\xbb)" +
	">\xc1u\xddA\x9b\x85\xd3\x8bH\x1a\x97\x85\xba,%" +
	"\xa2O\xeb\xa6\x0b9O\xa7\x82pp\xea\xe5\xad\x93\xef" +
	"\xac\xa4\x8c\x84\xdb\x10\x9b-F8w\x18#\xf6w\x07" +
	"\xf9%\xe7\x0e\x8b\x86\x07\xd8\xe2\xb7DT~X\x0c\x91" +
	",\xc7}\x9c-~OD\xe5_\x05\xc4(\x86\xc6W" +
	"\xe4\xa9z\x10\xaa\x858Ne\x08\x07\x02\x84X\x81\xa1" +
	"\xa1\x0c9\xc0\xb2\xc0\x88\x14G\x02@\xbe\xc6d\xf5\x15" +
	"\x11\x95\xfb\x85\x0f\x94\xbf\xc7\x06\x8dt\xc1\xb1x6\xd4" +
	"i\x80\x98\xa6\x18\xf3\xc6\x04\x80\x18cY\xadf\xe5\x0c" +
	"Ks\xfb\xb3\xc7\xd7\x9e*\xe6\x83L\xe5\xd0\xfa\x10i" +
	"\x9c0>)\xe4\xfdG\x96\x07V\x07\xe3\xf4\xf73\xf4" +
	"\xe1]\x8e\xf0\xab\"lJ\xf01P8\xd7\xea\x05P" +
	".\x11Q\xc9\x84.\xad\xf5\x86\xd2*\xa1\xd6\xbd\xf4\xa6" +
	"m\x81_ \xe2\x1cW\xbb\x0a\xdb\x02\xf7\xe3l\xd1\xec" +
	"\xe1\xcea\x9a\x02\x1c\xc1XplQr9\xde\xbe\xe3" +
	"}\xe0\x12_7\xab\xa6F\xad5:\x14\x93\x0b\xbfo" +
	"\x17|pm\xef=\x0d\xbd\xd2l\xf0\xd2\x86\x154'" +
	"\xda\xc3\xccR\xa7\xf1[\xd4t\x939\x09D\xd2^\xcf" +
	"\x07_K\xe7\x028\x9a\xbeA\xd3y\x85\xef\xb6\x85\x9e" +
	"\xbe\xf1\xf5w\x0bw\xa7\xdfp\xbb\x03q\xe4\xcdH\xec" +
	"\x0d\xe0\xf0\x13\x00\xb1m\xd44$C\xa7\x935\xd9\x95" +
	"4\xa6\xa6\xa99\xcei0\x9d\x9b'\xa2\xb2$\xc4\xfe" +
	"dS\xe0I\xcax\xe0\x89\x14\xa1X\xed\xae\xa4\xaa\xf4" +
	"\xffy\xae\x97<\xf2\xe6;g|`a\xdd!c\xf2" +
	"N\x0d\x1bSP\x890\xc8\x1e\x11\x95\x8f\x09e\xd2v" +
	"\xdd.\xdb5\x98\\7\xc0\x1b\x0aj6\x8de4\xcb" +
	"f\x06W,\xaa\x19\xa2\x13\x99\xec/ sv\x90\xba" +
	"Q\x924I\xe3\x00i\xe9%K\x07\xc8\xf2^\xd2>" +
	"J\xba\xaes\xb6&-UO[6\x1af6\xa9\xe6" +
	"rI\xacw\x8cT\xd26l5#$3T\x1f\xb2" +
	"\x87\xc1H%S\xc3y}$\x91\xb4\xb4m\xd4\xd9\x9a" +
	"4R\xc9\xac\xad\x81\x98\xa5\x0cx\x83\x96\xa1\x1a`\xda" +
	"\xf1\xe0@\xa4igkrxH5\x87\x92\x80\xf5\xce" +
	"\xd6dnX\x1d451\xa5\xda\x86\x99\xac\x87\xad\xc9" +
	"bC\x90\xa6\x93\xcc\xf2J\xe7\x0f+\xfd\xf2r\x05\xb5" +
	"R\xad\xa6\x96\xb3\x8d\xf1\xbapJ\xa0\x0b\xa5TA\xd4" +
	"\xd2(\x81\x80\x12`\xc2\xd6\xec\xcc\xe4\x15\x90\x19r\x03" +
	"\xcb\x13$\x93rO\xcb\x9b,\xc28_[\x83\xef:" +
	"\xc5\xa1\xfa\xaa\xee@\x17j\x84\xa3l92N\x1b\x8a" +
	"\x8d\x13G\x1d\xb4\x8cL\xde\xe6J\x11\x05\x01\xa3\xbcC" +
	"\x9aQmm3_\xe3\xb5\xf3\xa4\xe3y\x97\x9eJp" +
	"\xfd\x19\xc7\x1as\x82\x98^T\xc3NpwO\x1c\xd7" +
	"\xa3\xc7L\x82\x82\x92\xb8\x97Z\xf9\x8ch\x8fi\x81," +
	"\x0bZ \xad\x16\x87D\x12T}\x80H&\xbc\xab\x9b" +
	"\x88\xf2\xc0'f?L\x81o\x12]\x02\xce\x12\x1b\x8f" +
	"\x9f%\xa5\xcf\xf0\xea\x04^%\xf8)\xc1D\x9d\x88\x8e" +
	"P\xc8\xf48\xa3u\x17C\xe6U\xa1N\xc4\x15\x1b\x83" +
	"\xc7$%\xd8U\x92)9\xd3\xb0\x8d\x94\x91a:<" +
	"\xc6\x0daqb\xdfgC\xacxY\xbf\xd0\x9f\x94\xfc" +
	"\xbd\x82f^\x8f\x1a\xe3\xad\xb0\xe3iQ7}\xe0\x16" +
	"u\"\xcd\xeax\x8c\x05\x1d\x087\x058nE\x19+" +
	"D\xdfxJd\xe6+B\xb7k\xdf\x18(}9\xa6" +
	"\xbb\x0f#\x8e\x9b\xe9C\xd4\x9etK.dq\x1e\xbf" +
	"W\x0f\x1c\xa3#W\x86[\xda\x90n\x98\xb4\x83\xe5\xcf" +
	"\x85\xf7dK\xa5K\xcb\xae~\x15\xc7\xbb\xbe\xa6\x12Q" +
	"\xa1>p\x87cs\x82\xd8\x16\xaa\x8eLr\xd6:\xd6" +
	"\xd9M\xd6\xe8>T\xed\xbf\xc81\x14\x91\x17\xf8\xecJ" +
	"\x12\xb3\xaf\x89\xd2\xad\x8eP\xba5I\xd9\x96'\xc0\xed" +
	"<L\xda\xc3\xf7\xbe\xaf\x160C\xddo\x8cP@\xfd" +
	"}\x10ZZ\xdf\x8a\x1c\x9aLv\xd8\x1bz\x18\xe0\x11" +
	"\xb9\xf6\x0e\x00\xe5\"W\xee\xce\xa0j\xd1\x1e\x95\xe5?" +
	"\x81\x9c\xf2\x165\xdb\x87\xdcZ\xc3[s\x1f\xb0\xa8\x83" +
	"\x98\xa1\xe7\xf3rT\x1a\x0a\x9eLy\xd6>Aj\x9b" +
	"\xf73\xdb\x0fqb\x1b4\x09\xfc\xb7\x0chz/0" +
	"$F\xed\xc08j\xa70jG\xc71z\xc6\xf8\x17" +
	"\x18c\xeb\xf2\xe0\xcd\x9eW\x99S+\xc5\xd2K\xd4\x0c" +
	"}\xa5\x9d\xcd@\xe8\xf5\x14_\xe8\x00\xc9H\x17\xb0:" +
	"x\xd37NW*&\x9aL\xa9\xd9\x06o\xea\xa4[" +
	"\xd4\x1b\xe9L\xa0kkrv\x8c\x99eh|\x89X" +
	"\xa2\xeeE\x1cW\xf72\x89!\x92M\xbd\x81?\xc1\xa2" +
	"\x8f)\x98\xc5\xb2w\xa7\x80NZ\xdd\xdc\x99Q-\x0b" +
	"\xb0\xd1\xf7\x80\xc1ZS\x89\xb5\xe6\xf0Z\xd7V\x9b\xea" +
	"\x90`\xb4\xbeOut\xbb\x99\xbe\xb9\xff\x1f\xba\x9b\x89" +
	"\x14\xcd\xd5\xd9\x86ACL\x17\x18\x1d\xb3\x1d'\xe2\xb6" +
	"\x18\xc3a\x84%\xfa\xc5\xb9irY(\x92\x0c\x16l" +
	"jy\x0a\x1f\xa4r\xcfw\\r\xc9\xdeyo\xde<" +
	"\xb9T\xce'&\xa8\xe7\x12\xf4X\xf5\xdcI$\xba\x83" +
	"T\x0d\x94,\xdd\xc6\x94f\xe5\x05\x10\x1ab\xf2\xec " +
	"\x18\x9bz\xff\xe2\x83\xde?L\x11\xd2\xeb\x8eM\xbdA" +
	"'\xa0\xd5\x86=8\xe9ky\x0f4\xb91O\x11#" +
	"\xd5\x18\xc7\xca\xf7\xbc\xee\x12\xe2x\x12\x00idv\xbb" +
	"DD\xe5o\x85\xff\x0d\xc3\x8c\x1c+A?\x9e\xd4\xe6" +
	"}\x15\x13\xfe\x94l\xd2\xc5DEy6zOL\xbc" +
	"\x17&\xee\xab$\x97\x9d\xd3YU\xb1\x91w\xa1Q9" +
	"Y(\xce\xda\x99\xef\xe5c\xaf2\x8d\xc6c5\xec\xf5" +
	"\x18\xa3V\x99\x82\xe1\x7f\xcd\xa9\\\x16\xfao\x9a\xe8\xa8" +
	"\xf7P\xf9\xbd\x8f\x93O\xf6\x99z\x0bc\xd5N\xb7\xc1" +
	"\xea3u\xdf6\x00e\xaf\xfb\xc8\xc0g\xea~fX" +
	"\xf7\x8b\xa8<) \x89\x16\xdd\xd5\xa1\x1d\x00\xca\x93\"" +
	"*/\x0b\x88\x11\x0c\xfds\x1by\xe9:\x10\x88\x18u" +
	"u\xe99\x86\xf1'\"*\xaf\x09\x8c\xd5\xac|\x0f=" +
	"\xdc\x9dw\xe6\x03\xf7\xfd\xe6\x8a/\xef\x0c\x1e\x15\x17g" +
	"{\xad}\x9e\xc9\x06\xf3\x7fn\xb2\xadn\xcc\x0dP\xf8" +
	"\xd3\xcc\"\x8a\xb2\x0f\x85}\x8e\x15\x81\xbdg\x1b\xe8\xc9" +
	"\xcf\x7f\x95\xda\xa5C\xab\x1b%\x83\xdd\xfe\xactr\xcf" +
	"\x8cGRF\xe6C\xd8\x13\xae\x98\x9c\xe3\xf5\xba\xe2\x9a" +
	"\x81:s\x0e\xbc\xcfR\xc5\xbc\xc3\xb2\xb1\xee7\x1a\xe7" +
	"\x0e0\xd9\x1d\xf40Zu\xc3\xcc\xaa\x19\xa8p\xd2\xc6" +
	"\x16=c\xa8\xe9P\xaa\xf1?\x01\x00\x00\xff\xffKO" +
	";\x93"

func init() {
	schemas.Register(schema_a8cb0f2f1a756b32,
		0x8139673a82bfe07d,
		0x81535505f60de028,
		0x8193ac6cb5429c83,
		0x81f5066b5576a609,
		0x82130007ccd2888f,
		0x82a3ee23aa0ae3a3,
		0x8374b67102f894cf,
		0x8becd48bdafc1e45,
		0x8ea31bdb4c044f01,
		0x9398280f1359570a,
		0x9497e63b399a2c01,
		0x974fa7d7260b143e,
		0x99ffc2f3f69a6a9f,
		0x9a712ce3fcad8cd8,
		0x9e582e7e054088ae,
		0x9ea7265092c11606,
		0x9f79c33e20119e8d,
		0xa1ece076a7105939,
		0xa50711a14d35a8ce,
		0xa87d65bed9b60243,
		0xaa6ef20a62c1cafd,
		0xaaf9021b627cc1f9,
		0xabc45cb0fd79fba8,
		0xadef95edc22ca880,
		0xaf480a0c6cab8887,
		0xb37b21e300864885,
		0xb39cc44599b3a41b,
		0xb4b873147ab5ce5e,
		0xb4e5f4cccb748429,
		0xb7d82eac416ab63e,
		0xbaace870544663eb,
		0xbc353583a3731ade,
		0xbd6b5bb69c784877,
		0xbda585bffe1dc7e8,
		0xbf0e0653dc266205,
		0xc0643ea68efc60ae,
		0xc60d14bf989d4454,
		0xc7c9c9b19d935e79,
		0xca2d58de88f0b32e,
		0xcc561276d31b392b,
		0xcd94acddf4778328,
		0xd22c0be5b9c16558,
		0xd26a7affce43b1c0,
		0xd2e47e8eac54ea7e,
		0xd684c6a791b97dbc,
		0xd7051b9757f6b096,
		0xd7aff1fe39659132,
		0xd97fb0647c80b844,
		0xe9a02a3219bdbd70,
		0xe9ff06beec4e73d6,
		0xeba76bffb27b1975,
		0xed8a0ae9139c89c2,
		0xef174541b62cac82,
		0xf001fc1d5e574a07,
		0xf0475101099acdc9,
		0xf1c587295608596e,
		0xf405ef1c8e600f0f,
		0xf5cae52becabc767,
		0xf64da2416445f8b6,
		0xf72d33f93d1ebb59)
}

var x_a8cb0f2f1a756b32 = []byte{
	0, 0, 0, 0, 30, 0, 0, 0,
	1, 0, 0, 0, 78, 0, 0, 0,
	33, 0, 0, 0, 146, 0, 0, 0,
	41, 0, 0, 0, 130, 0, 0, 0,
	45, 0, 0, 0, 114, 0, 0, 0,
	49, 0, 0, 0, 90, 0, 0, 0,
	53, 0, 0, 0, 82, 0, 0, 0,
	57, 0, 0, 0, 90, 0, 0, 0,
	61, 0, 0, 0, 82, 0, 0, 0,
	65, 0, 0, 0, 130, 0, 0, 0,
	69, 0, 0, 0, 138, 0, 0, 0,
	120, 45, 115, 97, 110, 100, 115, 116,
	111, 114, 109, 45, 97, 112, 112, 45,
	42, 0, 0, 0, 0, 0, 0, 0,
	111, 99, 45, 116, 111, 116, 97, 108,
	45, 108, 101, 110, 103, 116, 104, 0,
	111, 99, 45, 99, 104, 117, 110, 107,
	45, 115, 105, 122, 101, 0, 0, 0,
	120, 45, 111, 99, 45, 109, 116, 105,
	109, 101, 0, 0, 0, 0, 0, 0,
	111, 99, 45, 102, 105, 108, 101, 105,
	100, 0, 0, 0, 0, 0, 0, 0,
	111, 99, 45, 99, 104, 117, 110, 107,
	101, 100, 0, 0, 0, 0, 0, 0,
	120, 45, 104, 103, 97, 114, 103, 45,
	42, 0, 0, 0, 0, 0, 0, 0,
	120, 45, 112, 104, 97, 98, 114, 105,
	99, 97, 116, 111, 114, 45, 42, 0,
	120, 45, 114, 101, 113, 117, 101, 115,
	116, 101, 100, 45, 119, 105, 116, 104,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	1, 0, 0, 0, 22, 0, 0, 0,
	5, 0, 0, 0, 146, 0, 0, 0,
	13, 0, 0, 0, 90, 0, 0, 0,
	120, 45, 115, 97, 110, 100, 115, 116,
	111, 114, 109, 45, 97, 112, 112, 45,
	42, 0, 0, 0, 0, 0, 0, 0,
	120, 45, 111, 99, 45, 109, 116, 105,
	109, 101, 0, 0, 0, 0, 0, 0,
}
