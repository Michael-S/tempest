// Code generated by capnpc-go. DO NOT EDIT.

package websession

import (
	context "context"
	math "math"
	strconv "strconv"
	util "zenhack.net/go/sandstorm/capnp/util"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

const HttpStatus = uint64(0xaf480a0c6cab8887)

// Constants defined in web-session.capnp.
const (
	HttpStatusAnnotationId = uint64(12630356203439622279)
)

// Constants defined in web-session.capnp.
var (
	WebSession_Context_headerWhitelist  = capnp.TextList{List: capnp.MustUnmarshalRoot(x_a8cb0f2f1a756b32[0:248]).List()}
	WebSession_Response_headerWhitelist = capnp.TextList{List: capnp.MustUnmarshalRoot(x_a8cb0f2f1a756b32[248:320]).List()}
)

type HttpStatusDescriptor struct{ capnp.Struct }

// HttpStatusDescriptor_TypeID is the unique identifier for the type HttpStatusDescriptor.
const HttpStatusDescriptor_TypeID = 0xbc353583a3731ade

func NewHttpStatusDescriptor(s *capnp.Segment) (HttpStatusDescriptor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HttpStatusDescriptor{st}, err
}

func NewRootHttpStatusDescriptor(s *capnp.Segment) (HttpStatusDescriptor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HttpStatusDescriptor{st}, err
}

func ReadRootHttpStatusDescriptor(msg *capnp.Message) (HttpStatusDescriptor, error) {
	root, err := msg.Root()
	return HttpStatusDescriptor{root.Struct()}, err
}

func (s HttpStatusDescriptor) String() string {
	str, _ := text.Marshal(0xbc353583a3731ade, s.Struct)
	return str
}

func (s HttpStatusDescriptor) Id() uint16 {
	return s.Struct.Uint16(0)
}

func (s HttpStatusDescriptor) SetId(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s HttpStatusDescriptor) Title() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HttpStatusDescriptor) HasTitle() bool {
	return s.Struct.HasPtr(0)
}

func (s HttpStatusDescriptor) TitleBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HttpStatusDescriptor) SetTitle(v string) error {
	return s.Struct.SetText(0, v)
}

// HttpStatusDescriptor_List is a list of HttpStatusDescriptor.
type HttpStatusDescriptor_List struct{ capnp.List }

// NewHttpStatusDescriptor creates a new list of HttpStatusDescriptor.
func NewHttpStatusDescriptor_List(s *capnp.Segment, sz int32) (HttpStatusDescriptor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return HttpStatusDescriptor_List{l}, err
}

func (s HttpStatusDescriptor_List) At(i int) HttpStatusDescriptor {
	return HttpStatusDescriptor{s.List.Struct(i)}
}

func (s HttpStatusDescriptor_List) Set(i int, v HttpStatusDescriptor) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HttpStatusDescriptor_List) String() string {
	str, _ := text.MarshalList(0xbc353583a3731ade, s.List)
	return str
}

// HttpStatusDescriptor_Future is a wrapper for a HttpStatusDescriptor promised by a client call.
type HttpStatusDescriptor_Future struct{ *capnp.Future }

func (p HttpStatusDescriptor_Future) Struct() (HttpStatusDescriptor, error) {
	s, err := p.Future.Struct()
	return HttpStatusDescriptor{s}, err
}

type WebSession struct{ Client *capnp.Client }

// WebSession_TypeID is the unique identifier for the type WebSession.
const WebSession_TypeID = 0xa50711a14d35a8ce

func (c WebSession) Get(ctx context.Context, params func(WebSession_get_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Post(ctx context.Context, params func(WebSession_post_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_post_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) OpenWebSocket(ctx context.Context, params func(WebSession_openWebSocket_Params) error) (WebSession_openWebSocket_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_openWebSocket_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_openWebSocket_Results_Future{Future: ans.Future()}, release
}
func (c WebSession) Put(ctx context.Context, params func(WebSession_put_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_put_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Delete(ctx context.Context, params func(WebSession_delete_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_delete_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) PostStreaming(ctx context.Context, params func(WebSession_postStreaming_Params) error) (WebSession_postStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_postStreaming_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_postStreaming_Results_Future{Future: ans.Future()}, release
}
func (c WebSession) PutStreaming(ctx context.Context, params func(WebSession_putStreaming_Params) error) (WebSession_putStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_putStreaming_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_putStreaming_Results_Future{Future: ans.Future()}, release
}
func (c WebSession) Propfind(ctx context.Context, params func(WebSession_propfind_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_propfind_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Proppatch(ctx context.Context, params func(WebSession_proppatch_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_proppatch_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Mkcol(ctx context.Context, params func(WebSession_mkcol_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_mkcol_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Copy(ctx context.Context, params func(WebSession_copy_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_copy_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Move(ctx context.Context, params func(WebSession_move_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_move_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Lock(ctx context.Context, params func(WebSession_lock_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_lock_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Unlock(ctx context.Context, params func(WebSession_unlock_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_unlock_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Acl(ctx context.Context, params func(WebSession_acl_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_acl_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Report(ctx context.Context, params func(WebSession_report_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_report_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession) Options(ctx context.Context, params func(WebSession_options_Params) error) (WebSession_Options_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_options_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Options_Future{Future: ans.Future()}, release
}
func (c WebSession) Patch(ctx context.Context, params func(WebSession_patch_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_patch_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}

// A WebSession_Server is a WebSession with a local implementation.
type WebSession_Server interface {
	Get(context.Context, WebSession_get) error

	Post(context.Context, WebSession_post) error

	OpenWebSocket(context.Context, WebSession_openWebSocket) error

	Put(context.Context, WebSession_put) error

	Delete(context.Context, WebSession_delete) error

	PostStreaming(context.Context, WebSession_postStreaming) error

	PutStreaming(context.Context, WebSession_putStreaming) error

	Propfind(context.Context, WebSession_propfind) error

	Proppatch(context.Context, WebSession_proppatch) error

	Mkcol(context.Context, WebSession_mkcol) error

	Copy(context.Context, WebSession_copy) error

	Move(context.Context, WebSession_move) error

	Lock(context.Context, WebSession_lock) error

	Unlock(context.Context, WebSession_unlock) error

	Acl(context.Context, WebSession_acl) error

	Report(context.Context, WebSession_report) error

	Options(context.Context, WebSession_options) error

	Patch(context.Context, WebSession_patch) error
}

// WebSession_NewServer creates a new Server from an implementation of WebSession_Server.
func WebSession_NewServer(s WebSession_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WebSession_Methods(nil, s), s, c, policy)
}

// WebSession_ServerToClient creates a new Client from an implementation of WebSession_Server.
// The caller is responsible for calling Release on the returned Client.
func WebSession_ServerToClient(s WebSession_Server, policy *server.Policy) WebSession {
	return WebSession{Client: capnp.NewClient(WebSession_NewServer(s, policy))}
}

// WebSession_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WebSession_Methods(methods []server.Method, s WebSession_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 18)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, WebSession_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Post(ctx, WebSession_post{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.OpenWebSocket(ctx, WebSession_openWebSocket{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, WebSession_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Delete(ctx, WebSession_delete{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PostStreaming(ctx, WebSession_postStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PutStreaming(ctx, WebSession_putStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Propfind(ctx, WebSession_propfind{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Proppatch(ctx, WebSession_proppatch{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Mkcol(ctx, WebSession_mkcol{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Copy(ctx, WebSession_copy{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Move(ctx, WebSession_move{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lock(ctx, WebSession_lock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unlock(ctx, WebSession_unlock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Acl(ctx, WebSession_acl{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Report(ctx, WebSession_report{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Options(ctx, WebSession_options{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Patch(ctx, WebSession_patch{call})
		},
	})

	return methods
}

// WebSession_get holds the state for a server call to WebSession.get.
// See server.Call for documentation.
type WebSession_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_get) Args() WebSession_get_Params {
	return WebSession_get_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_get) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_post holds the state for a server call to WebSession.post.
// See server.Call for documentation.
type WebSession_post struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_post) Args() WebSession_post_Params {
	return WebSession_post_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_post) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_openWebSocket holds the state for a server call to WebSession.openWebSocket.
// See server.Call for documentation.
type WebSession_openWebSocket struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_openWebSocket) Args() WebSession_openWebSocket_Params {
	return WebSession_openWebSocket_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_openWebSocket) AllocResults() (WebSession_openWebSocket_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_openWebSocket_Results{Struct: r}, err
}

// WebSession_put holds the state for a server call to WebSession.put.
// See server.Call for documentation.
type WebSession_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_put) Args() WebSession_put_Params {
	return WebSession_put_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_put) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_delete holds the state for a server call to WebSession.delete.
// See server.Call for documentation.
type WebSession_delete struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_delete) Args() WebSession_delete_Params {
	return WebSession_delete_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_delete) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_postStreaming holds the state for a server call to WebSession.postStreaming.
// See server.Call for documentation.
type WebSession_postStreaming struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_postStreaming) Args() WebSession_postStreaming_Params {
	return WebSession_postStreaming_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_postStreaming) AllocResults() (WebSession_postStreaming_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_postStreaming_Results{Struct: r}, err
}

// WebSession_putStreaming holds the state for a server call to WebSession.putStreaming.
// See server.Call for documentation.
type WebSession_putStreaming struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_putStreaming) Args() WebSession_putStreaming_Params {
	return WebSession_putStreaming_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_putStreaming) AllocResults() (WebSession_putStreaming_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_putStreaming_Results{Struct: r}, err
}

// WebSession_propfind holds the state for a server call to WebSession.propfind.
// See server.Call for documentation.
type WebSession_propfind struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_propfind) Args() WebSession_propfind_Params {
	return WebSession_propfind_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_propfind) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_proppatch holds the state for a server call to WebSession.proppatch.
// See server.Call for documentation.
type WebSession_proppatch struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_proppatch) Args() WebSession_proppatch_Params {
	return WebSession_proppatch_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_proppatch) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_mkcol holds the state for a server call to WebSession.mkcol.
// See server.Call for documentation.
type WebSession_mkcol struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_mkcol) Args() WebSession_mkcol_Params {
	return WebSession_mkcol_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_mkcol) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_copy holds the state for a server call to WebSession.copy.
// See server.Call for documentation.
type WebSession_copy struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_copy) Args() WebSession_copy_Params {
	return WebSession_copy_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_copy) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_move holds the state for a server call to WebSession.move.
// See server.Call for documentation.
type WebSession_move struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_move) Args() WebSession_move_Params {
	return WebSession_move_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_move) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_lock holds the state for a server call to WebSession.lock.
// See server.Call for documentation.
type WebSession_lock struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_lock) Args() WebSession_lock_Params {
	return WebSession_lock_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_lock) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_unlock holds the state for a server call to WebSession.unlock.
// See server.Call for documentation.
type WebSession_unlock struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_unlock) Args() WebSession_unlock_Params {
	return WebSession_unlock_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_unlock) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_acl holds the state for a server call to WebSession.acl.
// See server.Call for documentation.
type WebSession_acl struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_acl) Args() WebSession_acl_Params {
	return WebSession_acl_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_acl) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_report holds the state for a server call to WebSession.report.
// See server.Call for documentation.
type WebSession_report struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_report) Args() WebSession_report_Params {
	return WebSession_report_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_report) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

// WebSession_options holds the state for a server call to WebSession.options.
// See server.Call for documentation.
type WebSession_options struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_options) Args() WebSession_options_Params {
	return WebSession_options_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_options) AllocResults() (WebSession_Options, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_Options{Struct: r}, err
}

// WebSession_patch holds the state for a server call to WebSession.patch.
// See server.Call for documentation.
type WebSession_patch struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_patch) Args() WebSession_patch_Params {
	return WebSession_patch_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_patch) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

type WebSession_Params struct{ capnp.Struct }

// WebSession_Params_TypeID is the unique identifier for the type WebSession_Params.
const WebSession_Params_TypeID = 0xd7051b9757f6b096

func NewWebSession_Params(s *capnp.Segment) (WebSession_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_Params{st}, err
}

func NewRootWebSession_Params(s *capnp.Segment) (WebSession_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_Params{st}, err
}

func ReadRootWebSession_Params(msg *capnp.Message) (WebSession_Params, error) {
	root, err := msg.Root()
	return WebSession_Params{root.Struct()}, err
}

func (s WebSession_Params) String() string {
	str, _ := text.Marshal(0xd7051b9757f6b096, s.Struct)
	return str
}

func (s WebSession_Params) BasePath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_Params) HasBasePath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Params) BasePathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_Params) SetBasePath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_Params) UserAgent() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Params) HasUserAgent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Params) UserAgentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Params) SetUserAgent(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_Params) AcceptableLanguages() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s WebSession_Params) HasAcceptableLanguages() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_Params) SetAcceptableLanguages(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewAcceptableLanguages sets the acceptableLanguages field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s WebSession_Params) NewAcceptableLanguages(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// WebSession_Params_List is a list of WebSession_Params.
type WebSession_Params_List struct{ capnp.List }

// NewWebSession_Params creates a new list of WebSession_Params.
func NewWebSession_Params_List(s *capnp.Segment, sz int32) (WebSession_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_Params_List{l}, err
}

func (s WebSession_Params_List) At(i int) WebSession_Params {
	return WebSession_Params{s.List.Struct(i)}
}

func (s WebSession_Params_List) Set(i int, v WebSession_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Params_List) String() string {
	str, _ := text.MarshalList(0xd7051b9757f6b096, s.List)
	return str
}

// WebSession_Params_Future is a wrapper for a WebSession_Params promised by a client call.
type WebSession_Params_Future struct{ *capnp.Future }

func (p WebSession_Params_Future) Struct() (WebSession_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_Params{s}, err
}

type WebSession_Context struct{ capnp.Struct }
type WebSession_Context_eTagPrecondition WebSession_Context
type WebSession_Context_eTagPrecondition_Which uint16

const (
	WebSession_Context_eTagPrecondition_Which_none          WebSession_Context_eTagPrecondition_Which = 0
	WebSession_Context_eTagPrecondition_Which_exists        WebSession_Context_eTagPrecondition_Which = 1
	WebSession_Context_eTagPrecondition_Which_doesntExist   WebSession_Context_eTagPrecondition_Which = 4
	WebSession_Context_eTagPrecondition_Which_matchesOneOf  WebSession_Context_eTagPrecondition_Which = 2
	WebSession_Context_eTagPrecondition_Which_matchesNoneOf WebSession_Context_eTagPrecondition_Which = 3
)

func (w WebSession_Context_eTagPrecondition_Which) String() string {
	const s = "noneexistsdoesntExistmatchesOneOfmatchesNoneOf"
	switch w {
	case WebSession_Context_eTagPrecondition_Which_none:
		return s[0:4]
	case WebSession_Context_eTagPrecondition_Which_exists:
		return s[4:10]
	case WebSession_Context_eTagPrecondition_Which_doesntExist:
		return s[10:21]
	case WebSession_Context_eTagPrecondition_Which_matchesOneOf:
		return s[21:33]
	case WebSession_Context_eTagPrecondition_Which_matchesNoneOf:
		return s[33:46]

	}
	return "WebSession_Context_eTagPrecondition_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// WebSession_Context_TypeID is the unique identifier for the type WebSession_Context.
const WebSession_Context_TypeID = 0xf5cae52becabc767

func NewWebSession_Context(s *capnp.Segment) (WebSession_Context, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return WebSession_Context{st}, err
}

func NewRootWebSession_Context(s *capnp.Segment) (WebSession_Context, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return WebSession_Context{st}, err
}

func ReadRootWebSession_Context(msg *capnp.Message) (WebSession_Context, error) {
	root, err := msg.Root()
	return WebSession_Context{root.Struct()}, err
}

func (s WebSession_Context) String() string {
	str, _ := text.Marshal(0xf5cae52becabc767, s.Struct)
	return str
}

func (s WebSession_Context) Cookies() (util.KeyValue_List, error) {
	p, err := s.Struct.Ptr(0)
	return util.KeyValue_List{List: p.List()}, err
}

func (s WebSession_Context) HasCookies() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Context) SetCookies(v util.KeyValue_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCookies sets the cookies field to a newly
// allocated util.KeyValue_List, preferring placement in s's segment.
func (s WebSession_Context) NewCookies(n int32) (util.KeyValue_List, error) {
	l, err := util.NewKeyValue_List(s.Struct.Segment(), n)
	if err != nil {
		return util.KeyValue_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s WebSession_Context) ResponseStream() util.ByteStream {
	p, _ := s.Struct.Ptr(1)
	return util.ByteStream{Client: p.Interface().Client()}
}

func (s WebSession_Context) HasResponseStream() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Context) SetResponseStream(v util.ByteStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

func (s WebSession_Context) Accept() (WebSession_AcceptedType_List, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_AcceptedType_List{List: p.List()}, err
}

func (s WebSession_Context) HasAccept() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_Context) SetAccept(v WebSession_AcceptedType_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewAccept sets the accept field to a newly
// allocated WebSession_AcceptedType_List, preferring placement in s's segment.
func (s WebSession_Context) NewAccept(n int32) (WebSession_AcceptedType_List, error) {
	l, err := NewWebSession_AcceptedType_List(s.Struct.Segment(), n)
	if err != nil {
		return WebSession_AcceptedType_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s WebSession_Context) AcceptEncoding() (WebSession_AcceptedEncoding_List, error) {
	p, err := s.Struct.Ptr(5)
	return WebSession_AcceptedEncoding_List{List: p.List()}, err
}

func (s WebSession_Context) HasAcceptEncoding() bool {
	return s.Struct.HasPtr(5)
}

func (s WebSession_Context) SetAcceptEncoding(v WebSession_AcceptedEncoding_List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewAcceptEncoding sets the acceptEncoding field to a newly
// allocated WebSession_AcceptedEncoding_List, preferring placement in s's segment.
func (s WebSession_Context) NewAcceptEncoding(n int32) (WebSession_AcceptedEncoding_List, error) {
	l, err := NewWebSession_AcceptedEncoding_List(s.Struct.Segment(), n)
	if err != nil {
		return WebSession_AcceptedEncoding_List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

func (s WebSession_Context) ETagPrecondition() WebSession_Context_eTagPrecondition {
	return WebSession_Context_eTagPrecondition(s)
}

func (s WebSession_Context_eTagPrecondition) Which() WebSession_Context_eTagPrecondition_Which {
	return WebSession_Context_eTagPrecondition_Which(s.Struct.Uint16(0))
}
func (s WebSession_Context_eTagPrecondition) SetNone() {
	s.Struct.SetUint16(0, 0)

}

func (s WebSession_Context_eTagPrecondition) SetExists() {
	s.Struct.SetUint16(0, 1)

}

func (s WebSession_Context_eTagPrecondition) SetDoesntExist() {
	s.Struct.SetUint16(0, 4)

}

func (s WebSession_Context_eTagPrecondition) MatchesOneOf() (WebSession_ETag_List, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != matchesOneOf")
	}
	p, err := s.Struct.Ptr(4)
	return WebSession_ETag_List{List: p.List()}, err
}

func (s WebSession_Context_eTagPrecondition) HasMatchesOneOf() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	return s.Struct.HasPtr(4)
}

func (s WebSession_Context_eTagPrecondition) SetMatchesOneOf(v WebSession_ETag_List) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewMatchesOneOf sets the matchesOneOf field to a newly
// allocated WebSession_ETag_List, preferring placement in s's segment.
func (s WebSession_Context_eTagPrecondition) NewMatchesOneOf(n int32) (WebSession_ETag_List, error) {
	s.Struct.SetUint16(0, 2)
	l, err := NewWebSession_ETag_List(s.Struct.Segment(), n)
	if err != nil {
		return WebSession_ETag_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s WebSession_Context_eTagPrecondition) MatchesNoneOf() (WebSession_ETag_List, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != matchesNoneOf")
	}
	p, err := s.Struct.Ptr(4)
	return WebSession_ETag_List{List: p.List()}, err
}

func (s WebSession_Context_eTagPrecondition) HasMatchesNoneOf() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	return s.Struct.HasPtr(4)
}

func (s WebSession_Context_eTagPrecondition) SetMatchesNoneOf(v WebSession_ETag_List) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewMatchesNoneOf sets the matchesNoneOf field to a newly
// allocated WebSession_ETag_List, preferring placement in s's segment.
func (s WebSession_Context_eTagPrecondition) NewMatchesNoneOf(n int32) (WebSession_ETag_List, error) {
	s.Struct.SetUint16(0, 3)
	l, err := NewWebSession_ETag_List(s.Struct.Segment(), n)
	if err != nil {
		return WebSession_ETag_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s WebSession_Context) AdditionalHeaders() (WebSession_Context_Header_List, error) {
	p, err := s.Struct.Ptr(3)
	return WebSession_Context_Header_List{List: p.List()}, err
}

func (s WebSession_Context) HasAdditionalHeaders() bool {
	return s.Struct.HasPtr(3)
}

func (s WebSession_Context) SetAdditionalHeaders(v WebSession_Context_Header_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewAdditionalHeaders sets the additionalHeaders field to a newly
// allocated WebSession_Context_Header_List, preferring placement in s's segment.
func (s WebSession_Context) NewAdditionalHeaders(n int32) (WebSession_Context_Header_List, error) {
	l, err := NewWebSession_Context_Header_List(s.Struct.Segment(), n)
	if err != nil {
		return WebSession_Context_Header_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// WebSession_Context_List is a list of WebSession_Context.
type WebSession_Context_List struct{ capnp.List }

// NewWebSession_Context creates a new list of WebSession_Context.
func NewWebSession_Context_List(s *capnp.Segment, sz int32) (WebSession_Context_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6}, sz)
	return WebSession_Context_List{l}, err
}

func (s WebSession_Context_List) At(i int) WebSession_Context {
	return WebSession_Context{s.List.Struct(i)}
}

func (s WebSession_Context_List) Set(i int, v WebSession_Context) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Context_List) String() string {
	str, _ := text.MarshalList(0xf5cae52becabc767, s.List)
	return str
}

// WebSession_Context_Future is a wrapper for a WebSession_Context promised by a client call.
type WebSession_Context_Future struct{ *capnp.Future }

func (p WebSession_Context_Future) Struct() (WebSession_Context, error) {
	s, err := p.Future.Struct()
	return WebSession_Context{s}, err
}

func (p WebSession_Context_Future) ResponseStream() util.ByteStream {
	return util.ByteStream{Client: p.Future.Field(1, nil).Client()}
}

func (p WebSession_Context_Future) ETagPrecondition() WebSession_Context_eTagPrecondition_Future {
	return WebSession_Context_eTagPrecondition_Future{p.Future}
}

// WebSession_Context_eTagPrecondition_Future is a wrapper for a WebSession_Context_eTagPrecondition promised by a client call.
type WebSession_Context_eTagPrecondition_Future struct{ *capnp.Future }

func (p WebSession_Context_eTagPrecondition_Future) Struct() (WebSession_Context_eTagPrecondition, error) {
	s, err := p.Future.Struct()
	return WebSession_Context_eTagPrecondition{s}, err
}

type WebSession_Context_Header struct{ capnp.Struct }

// WebSession_Context_Header_TypeID is the unique identifier for the type WebSession_Context_Header.
const WebSession_Context_Header_TypeID = 0xb4e5f4cccb748429

func NewWebSession_Context_Header(s *capnp.Segment) (WebSession_Context_Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_Context_Header{st}, err
}

func NewRootWebSession_Context_Header(s *capnp.Segment) (WebSession_Context_Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_Context_Header{st}, err
}

func ReadRootWebSession_Context_Header(msg *capnp.Message) (WebSession_Context_Header, error) {
	root, err := msg.Root()
	return WebSession_Context_Header{root.Struct()}, err
}

func (s WebSession_Context_Header) String() string {
	str, _ := text.Marshal(0xb4e5f4cccb748429, s.Struct)
	return str
}

func (s WebSession_Context_Header) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_Context_Header) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Context_Header) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_Context_Header) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_Context_Header) Value() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Context_Header) HasValue() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Context_Header) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Context_Header) SetValue(v string) error {
	return s.Struct.SetText(1, v)
}

// WebSession_Context_Header_List is a list of WebSession_Context_Header.
type WebSession_Context_Header_List struct{ capnp.List }

// NewWebSession_Context_Header creates a new list of WebSession_Context_Header.
func NewWebSession_Context_Header_List(s *capnp.Segment, sz int32) (WebSession_Context_Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return WebSession_Context_Header_List{l}, err
}

func (s WebSession_Context_Header_List) At(i int) WebSession_Context_Header {
	return WebSession_Context_Header{s.List.Struct(i)}
}

func (s WebSession_Context_Header_List) Set(i int, v WebSession_Context_Header) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Context_Header_List) String() string {
	str, _ := text.MarshalList(0xb4e5f4cccb748429, s.List)
	return str
}

// WebSession_Context_Header_Future is a wrapper for a WebSession_Context_Header promised by a client call.
type WebSession_Context_Header_Future struct{ *capnp.Future }

func (p WebSession_Context_Header_Future) Struct() (WebSession_Context_Header, error) {
	s, err := p.Future.Struct()
	return WebSession_Context_Header{s}, err
}

type WebSession_PostContent struct{ capnp.Struct }

// WebSession_PostContent_TypeID is the unique identifier for the type WebSession_PostContent.
const WebSession_PostContent_TypeID = 0xb7d82eac416ab63e

func NewWebSession_PostContent(s *capnp.Segment) (WebSession_PostContent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_PostContent{st}, err
}

func NewRootWebSession_PostContent(s *capnp.Segment) (WebSession_PostContent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_PostContent{st}, err
}

func ReadRootWebSession_PostContent(msg *capnp.Message) (WebSession_PostContent, error) {
	root, err := msg.Root()
	return WebSession_PostContent{root.Struct()}, err
}

func (s WebSession_PostContent) String() string {
	str, _ := text.Marshal(0xb7d82eac416ab63e, s.Struct)
	return str
}

func (s WebSession_PostContent) MimeType() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_PostContent) HasMimeType() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_PostContent) MimeTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_PostContent) SetMimeType(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_PostContent) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s WebSession_PostContent) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_PostContent) SetContent(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s WebSession_PostContent) Encoding() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s WebSession_PostContent) HasEncoding() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_PostContent) EncodingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s WebSession_PostContent) SetEncoding(v string) error {
	return s.Struct.SetText(2, v)
}

// WebSession_PostContent_List is a list of WebSession_PostContent.
type WebSession_PostContent_List struct{ capnp.List }

// NewWebSession_PostContent creates a new list of WebSession_PostContent.
func NewWebSession_PostContent_List(s *capnp.Segment, sz int32) (WebSession_PostContent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_PostContent_List{l}, err
}

func (s WebSession_PostContent_List) At(i int) WebSession_PostContent {
	return WebSession_PostContent{s.List.Struct(i)}
}

func (s WebSession_PostContent_List) Set(i int, v WebSession_PostContent) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_PostContent_List) String() string {
	str, _ := text.MarshalList(0xb7d82eac416ab63e, s.List)
	return str
}

// WebSession_PostContent_Future is a wrapper for a WebSession_PostContent promised by a client call.
type WebSession_PostContent_Future struct{ *capnp.Future }

func (p WebSession_PostContent_Future) Struct() (WebSession_PostContent, error) {
	s, err := p.Future.Struct()
	return WebSession_PostContent{s}, err
}

type WebSession_PutContent struct{ capnp.Struct }

// WebSession_PutContent_TypeID is the unique identifier for the type WebSession_PutContent.
const WebSession_PutContent_TypeID = 0xd7aff1fe39659132

func NewWebSession_PutContent(s *capnp.Segment) (WebSession_PutContent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_PutContent{st}, err
}

func NewRootWebSession_PutContent(s *capnp.Segment) (WebSession_PutContent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_PutContent{st}, err
}

func ReadRootWebSession_PutContent(msg *capnp.Message) (WebSession_PutContent, error) {
	root, err := msg.Root()
	return WebSession_PutContent{root.Struct()}, err
}

func (s WebSession_PutContent) String() string {
	str, _ := text.Marshal(0xd7aff1fe39659132, s.Struct)
	return str
}

func (s WebSession_PutContent) MimeType() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_PutContent) HasMimeType() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_PutContent) MimeTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_PutContent) SetMimeType(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_PutContent) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s WebSession_PutContent) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_PutContent) SetContent(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s WebSession_PutContent) Encoding() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s WebSession_PutContent) HasEncoding() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_PutContent) EncodingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s WebSession_PutContent) SetEncoding(v string) error {
	return s.Struct.SetText(2, v)
}

// WebSession_PutContent_List is a list of WebSession_PutContent.
type WebSession_PutContent_List struct{ capnp.List }

// NewWebSession_PutContent creates a new list of WebSession_PutContent.
func NewWebSession_PutContent_List(s *capnp.Segment, sz int32) (WebSession_PutContent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_PutContent_List{l}, err
}

func (s WebSession_PutContent_List) At(i int) WebSession_PutContent {
	return WebSession_PutContent{s.List.Struct(i)}
}

func (s WebSession_PutContent_List) Set(i int, v WebSession_PutContent) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_PutContent_List) String() string {
	str, _ := text.MarshalList(0xd7aff1fe39659132, s.List)
	return str
}

// WebSession_PutContent_Future is a wrapper for a WebSession_PutContent promised by a client call.
type WebSession_PutContent_Future struct{ *capnp.Future }

func (p WebSession_PutContent_Future) Struct() (WebSession_PutContent, error) {
	s, err := p.Future.Struct()
	return WebSession_PutContent{s}, err
}

type WebSession_ETag struct{ capnp.Struct }

// WebSession_ETag_TypeID is the unique identifier for the type WebSession_ETag.
const WebSession_ETag_TypeID = 0xd22c0be5b9c16558

func NewWebSession_ETag(s *capnp.Segment) (WebSession_ETag, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_ETag{st}, err
}

func NewRootWebSession_ETag(s *capnp.Segment) (WebSession_ETag, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_ETag{st}, err
}

func ReadRootWebSession_ETag(msg *capnp.Message) (WebSession_ETag, error) {
	root, err := msg.Root()
	return WebSession_ETag{root.Struct()}, err
}

func (s WebSession_ETag) String() string {
	str, _ := text.Marshal(0xd22c0be5b9c16558, s.Struct)
	return str
}

func (s WebSession_ETag) Value() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_ETag) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_ETag) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_ETag) SetValue(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_ETag) Weak() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_ETag) SetWeak(v bool) {
	s.Struct.SetBit(0, v)
}

// WebSession_ETag_List is a list of WebSession_ETag.
type WebSession_ETag_List struct{ capnp.List }

// NewWebSession_ETag creates a new list of WebSession_ETag.
func NewWebSession_ETag_List(s *capnp.Segment, sz int32) (WebSession_ETag_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return WebSession_ETag_List{l}, err
}

func (s WebSession_ETag_List) At(i int) WebSession_ETag { return WebSession_ETag{s.List.Struct(i)} }

func (s WebSession_ETag_List) Set(i int, v WebSession_ETag) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_ETag_List) String() string {
	str, _ := text.MarshalList(0xd22c0be5b9c16558, s.List)
	return str
}

// WebSession_ETag_Future is a wrapper for a WebSession_ETag promised by a client call.
type WebSession_ETag_Future struct{ *capnp.Future }

func (p WebSession_ETag_Future) Struct() (WebSession_ETag, error) {
	s, err := p.Future.Struct()
	return WebSession_ETag{s}, err
}

type WebSession_Cookie struct{ capnp.Struct }
type WebSession_Cookie_expires WebSession_Cookie
type WebSession_Cookie_expires_Which uint16

const (
	WebSession_Cookie_expires_Which_none     WebSession_Cookie_expires_Which = 0
	WebSession_Cookie_expires_Which_absolute WebSession_Cookie_expires_Which = 1
	WebSession_Cookie_expires_Which_relative WebSession_Cookie_expires_Which = 2
)

func (w WebSession_Cookie_expires_Which) String() string {
	const s = "noneabsoluterelative"
	switch w {
	case WebSession_Cookie_expires_Which_none:
		return s[0:4]
	case WebSession_Cookie_expires_Which_absolute:
		return s[4:12]
	case WebSession_Cookie_expires_Which_relative:
		return s[12:20]

	}
	return "WebSession_Cookie_expires_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// WebSession_Cookie_TypeID is the unique identifier for the type WebSession_Cookie.
const WebSession_Cookie_TypeID = 0xa87d65bed9b60243

func NewWebSession_Cookie(s *capnp.Segment) (WebSession_Cookie, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return WebSession_Cookie{st}, err
}

func NewRootWebSession_Cookie(s *capnp.Segment) (WebSession_Cookie, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return WebSession_Cookie{st}, err
}

func ReadRootWebSession_Cookie(msg *capnp.Message) (WebSession_Cookie, error) {
	root, err := msg.Root()
	return WebSession_Cookie{root.Struct()}, err
}

func (s WebSession_Cookie) String() string {
	str, _ := text.Marshal(0xa87d65bed9b60243, s.Struct)
	return str
}

func (s WebSession_Cookie) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_Cookie) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Cookie) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_Cookie) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_Cookie) Value() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Cookie) HasValue() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Cookie) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Cookie) SetValue(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_Cookie) Expires() WebSession_Cookie_expires { return WebSession_Cookie_expires(s) }

func (s WebSession_Cookie_expires) Which() WebSession_Cookie_expires_Which {
	return WebSession_Cookie_expires_Which(s.Struct.Uint16(0))
}
func (s WebSession_Cookie_expires) SetNone() {
	s.Struct.SetUint16(0, 0)

}

func (s WebSession_Cookie_expires) Absolute() int64 {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != absolute")
	}
	return int64(s.Struct.Uint64(8))
}

func (s WebSession_Cookie_expires) SetAbsolute(v int64) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetUint64(8, uint64(v))
}

func (s WebSession_Cookie_expires) Relative() uint64 {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != relative")
	}
	return s.Struct.Uint64(8)
}

func (s WebSession_Cookie_expires) SetRelative(v uint64) {
	s.Struct.SetUint16(0, 2)
	s.Struct.SetUint64(8, v)
}

func (s WebSession_Cookie) HttpOnly() bool {
	return s.Struct.Bit(16)
}

func (s WebSession_Cookie) SetHttpOnly(v bool) {
	s.Struct.SetBit(16, v)
}

func (s WebSession_Cookie) Path() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s WebSession_Cookie) HasPath() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_Cookie) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s WebSession_Cookie) SetPath(v string) error {
	return s.Struct.SetText(2, v)
}

// WebSession_Cookie_List is a list of WebSession_Cookie.
type WebSession_Cookie_List struct{ capnp.List }

// NewWebSession_Cookie creates a new list of WebSession_Cookie.
func NewWebSession_Cookie_List(s *capnp.Segment, sz int32) (WebSession_Cookie_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return WebSession_Cookie_List{l}, err
}

func (s WebSession_Cookie_List) At(i int) WebSession_Cookie {
	return WebSession_Cookie{s.List.Struct(i)}
}

func (s WebSession_Cookie_List) Set(i int, v WebSession_Cookie) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Cookie_List) String() string {
	str, _ := text.MarshalList(0xa87d65bed9b60243, s.List)
	return str
}

// WebSession_Cookie_Future is a wrapper for a WebSession_Cookie promised by a client call.
type WebSession_Cookie_Future struct{ *capnp.Future }

func (p WebSession_Cookie_Future) Struct() (WebSession_Cookie, error) {
	s, err := p.Future.Struct()
	return WebSession_Cookie{s}, err
}

func (p WebSession_Cookie_Future) Expires() WebSession_Cookie_expires_Future {
	return WebSession_Cookie_expires_Future{p.Future}
}

// WebSession_Cookie_expires_Future is a wrapper for a WebSession_Cookie_expires promised by a client call.
type WebSession_Cookie_expires_Future struct{ *capnp.Future }

func (p WebSession_Cookie_expires_Future) Struct() (WebSession_Cookie_expires, error) {
	s, err := p.Future.Struct()
	return WebSession_Cookie_expires{s}, err
}

type WebSession_AcceptedType struct{ capnp.Struct }

// WebSession_AcceptedType_TypeID is the unique identifier for the type WebSession_AcceptedType.
const WebSession_AcceptedType_TypeID = 0xaaf9021b627cc1f9

func NewWebSession_AcceptedType(s *capnp.Segment) (WebSession_AcceptedType, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_AcceptedType{st}, err
}

func NewRootWebSession_AcceptedType(s *capnp.Segment) (WebSession_AcceptedType, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_AcceptedType{st}, err
}

func ReadRootWebSession_AcceptedType(msg *capnp.Message) (WebSession_AcceptedType, error) {
	root, err := msg.Root()
	return WebSession_AcceptedType{root.Struct()}, err
}

func (s WebSession_AcceptedType) String() string {
	str, _ := text.Marshal(0xaaf9021b627cc1f9, s.Struct)
	return str
}

func (s WebSession_AcceptedType) MimeType() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_AcceptedType) HasMimeType() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_AcceptedType) MimeTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_AcceptedType) SetMimeType(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_AcceptedType) QValue() float32 {
	return math.Float32frombits(s.Struct.Uint32(0) ^ 0x3f800000)
}

func (s WebSession_AcceptedType) SetQValue(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v)^0x3f800000)
}

// WebSession_AcceptedType_List is a list of WebSession_AcceptedType.
type WebSession_AcceptedType_List struct{ capnp.List }

// NewWebSession_AcceptedType creates a new list of WebSession_AcceptedType.
func NewWebSession_AcceptedType_List(s *capnp.Segment, sz int32) (WebSession_AcceptedType_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return WebSession_AcceptedType_List{l}, err
}

func (s WebSession_AcceptedType_List) At(i int) WebSession_AcceptedType {
	return WebSession_AcceptedType{s.List.Struct(i)}
}

func (s WebSession_AcceptedType_List) Set(i int, v WebSession_AcceptedType) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_AcceptedType_List) String() string {
	str, _ := text.MarshalList(0xaaf9021b627cc1f9, s.List)
	return str
}

// WebSession_AcceptedType_Future is a wrapper for a WebSession_AcceptedType promised by a client call.
type WebSession_AcceptedType_Future struct{ *capnp.Future }

func (p WebSession_AcceptedType_Future) Struct() (WebSession_AcceptedType, error) {
	s, err := p.Future.Struct()
	return WebSession_AcceptedType{s}, err
}

type WebSession_AcceptedEncoding struct{ capnp.Struct }

// WebSession_AcceptedEncoding_TypeID is the unique identifier for the type WebSession_AcceptedEncoding.
const WebSession_AcceptedEncoding_TypeID = 0xbda585bffe1dc7e8

func NewWebSession_AcceptedEncoding(s *capnp.Segment) (WebSession_AcceptedEncoding, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_AcceptedEncoding{st}, err
}

func NewRootWebSession_AcceptedEncoding(s *capnp.Segment) (WebSession_AcceptedEncoding, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_AcceptedEncoding{st}, err
}

func ReadRootWebSession_AcceptedEncoding(msg *capnp.Message) (WebSession_AcceptedEncoding, error) {
	root, err := msg.Root()
	return WebSession_AcceptedEncoding{root.Struct()}, err
}

func (s WebSession_AcceptedEncoding) String() string {
	str, _ := text.Marshal(0xbda585bffe1dc7e8, s.Struct)
	return str
}

func (s WebSession_AcceptedEncoding) ContentCoding() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_AcceptedEncoding) HasContentCoding() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_AcceptedEncoding) ContentCodingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_AcceptedEncoding) SetContentCoding(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_AcceptedEncoding) QValue() float32 {
	return math.Float32frombits(s.Struct.Uint32(0) ^ 0x3f800000)
}

func (s WebSession_AcceptedEncoding) SetQValue(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v)^0x3f800000)
}

// WebSession_AcceptedEncoding_List is a list of WebSession_AcceptedEncoding.
type WebSession_AcceptedEncoding_List struct{ capnp.List }

// NewWebSession_AcceptedEncoding creates a new list of WebSession_AcceptedEncoding.
func NewWebSession_AcceptedEncoding_List(s *capnp.Segment, sz int32) (WebSession_AcceptedEncoding_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return WebSession_AcceptedEncoding_List{l}, err
}

func (s WebSession_AcceptedEncoding_List) At(i int) WebSession_AcceptedEncoding {
	return WebSession_AcceptedEncoding{s.List.Struct(i)}
}

func (s WebSession_AcceptedEncoding_List) Set(i int, v WebSession_AcceptedEncoding) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_AcceptedEncoding_List) String() string {
	str, _ := text.MarshalList(0xbda585bffe1dc7e8, s.List)
	return str
}

// WebSession_AcceptedEncoding_Future is a wrapper for a WebSession_AcceptedEncoding promised by a client call.
type WebSession_AcceptedEncoding_Future struct{ *capnp.Future }

func (p WebSession_AcceptedEncoding_Future) Struct() (WebSession_AcceptedEncoding, error) {
	s, err := p.Future.Struct()
	return WebSession_AcceptedEncoding{s}, err
}

type WebSession_Response struct{ capnp.Struct }
type WebSession_Response_content WebSession_Response
type WebSession_Response_content_body WebSession_Response
type WebSession_Response_content_disposition WebSession_Response
type WebSession_Response_noContent WebSession_Response
type WebSession_Response_preconditionFailed WebSession_Response
type WebSession_Response_redirect WebSession_Response
type WebSession_Response_clientError WebSession_Response
type WebSession_Response_serverError WebSession_Response
type WebSession_Response_Which uint16

const (
	WebSession_Response_Which_content            WebSession_Response_Which = 1
	WebSession_Response_Which_noContent          WebSession_Response_Which = 4
	WebSession_Response_Which_preconditionFailed WebSession_Response_Which = 5
	WebSession_Response_Which_redirect           WebSession_Response_Which = 0
	WebSession_Response_Which_clientError        WebSession_Response_Which = 2
	WebSession_Response_Which_serverError        WebSession_Response_Which = 3
)

func (w WebSession_Response_Which) String() string {
	const s = "contentnoContentpreconditionFailedredirectclientErrorserverError"
	switch w {
	case WebSession_Response_Which_content:
		return s[0:7]
	case WebSession_Response_Which_noContent:
		return s[7:16]
	case WebSession_Response_Which_preconditionFailed:
		return s[16:34]
	case WebSession_Response_Which_redirect:
		return s[34:42]
	case WebSession_Response_Which_clientError:
		return s[42:53]
	case WebSession_Response_Which_serverError:
		return s[53:64]

	}
	return "WebSession_Response_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type WebSession_Response_content_body_Which uint16

const (
	WebSession_Response_content_body_Which_bytes  WebSession_Response_content_body_Which = 0
	WebSession_Response_content_body_Which_stream WebSession_Response_content_body_Which = 1
)

func (w WebSession_Response_content_body_Which) String() string {
	const s = "bytesstream"
	switch w {
	case WebSession_Response_content_body_Which_bytes:
		return s[0:5]
	case WebSession_Response_content_body_Which_stream:
		return s[5:11]

	}
	return "WebSession_Response_content_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type WebSession_Response_content_disposition_Which uint16

const (
	WebSession_Response_content_disposition_Which_normal   WebSession_Response_content_disposition_Which = 0
	WebSession_Response_content_disposition_Which_download WebSession_Response_content_disposition_Which = 1
)

func (w WebSession_Response_content_disposition_Which) String() string {
	const s = "normaldownload"
	switch w {
	case WebSession_Response_content_disposition_Which_normal:
		return s[0:6]
	case WebSession_Response_content_disposition_Which_download:
		return s[6:14]

	}
	return "WebSession_Response_content_disposition_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// WebSession_Response_TypeID is the unique identifier for the type WebSession_Response.
const WebSession_Response_TypeID = 0x8193ac6cb5429c83

func NewWebSession_Response(s *capnp.Segment) (WebSession_Response, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{st}, err
}

func NewRootWebSession_Response(s *capnp.Segment) (WebSession_Response, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{st}, err
}

func ReadRootWebSession_Response(msg *capnp.Message) (WebSession_Response, error) {
	root, err := msg.Root()
	return WebSession_Response{root.Struct()}, err
}

func (s WebSession_Response) String() string {
	str, _ := text.Marshal(0x8193ac6cb5429c83, s.Struct)
	return str
}

func (s WebSession_Response) Which() WebSession_Response_Which {
	return WebSession_Response_Which(s.Struct.Uint16(2))
}
func (s WebSession_Response) SetCookies() (WebSession_Cookie_List, error) {
	p, err := s.Struct.Ptr(0)
	return WebSession_Cookie_List{List: p.List()}, err
}

func (s WebSession_Response) HasSetCookies() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Response) SetSetCookies(v WebSession_Cookie_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSetCookies sets the setCookies field to a newly
// allocated WebSession_Cookie_List, preferring placement in s's segment.
func (s WebSession_Response) NewSetCookies(n int32) (WebSession_Cookie_List, error) {
	l, err := NewWebSession_Cookie_List(s.Struct.Segment(), n)
	if err != nil {
		return WebSession_Cookie_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s WebSession_Response) CachePolicy() (WebSession_CachePolicy, error) {
	p, err := s.Struct.Ptr(6)
	return WebSession_CachePolicy{Struct: p.Struct()}, err
}

func (s WebSession_Response) HasCachePolicy() bool {
	return s.Struct.HasPtr(6)
}

func (s WebSession_Response) SetCachePolicy(v WebSession_CachePolicy) error {
	return s.Struct.SetPtr(6, v.Struct.ToPtr())
}

// NewCachePolicy sets the cachePolicy field to a newly
// allocated WebSession_CachePolicy struct, preferring placement in s's segment.
func (s WebSession_Response) NewCachePolicy() (WebSession_CachePolicy, error) {
	ss, err := NewWebSession_CachePolicy(s.Struct.Segment())
	if err != nil {
		return WebSession_CachePolicy{}, err
	}
	err = s.Struct.SetPtr(6, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_Response) Content() WebSession_Response_content {
	return WebSession_Response_content(s)
}

func (s WebSession_Response) SetContent() {
	s.Struct.SetUint16(2, 1)
}

func (s WebSession_Response_content) StatusCode() WebSession_Response_SuccessCode {
	return WebSession_Response_SuccessCode(s.Struct.Uint16(4))
}

func (s WebSession_Response_content) SetStatusCode(v WebSession_Response_SuccessCode) {
	s.Struct.SetUint16(4, uint16(v))
}

func (s WebSession_Response_content) Encoding() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_content) HasEncoding() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_content) EncodingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_content) SetEncoding(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_Response_content) Language() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s WebSession_Response_content) HasLanguage() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_Response_content) LanguageBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s WebSession_Response_content) SetLanguage(v string) error {
	return s.Struct.SetText(2, v)
}

func (s WebSession_Response_content) MimeType() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s WebSession_Response_content) HasMimeType() bool {
	return s.Struct.HasPtr(3)
}

func (s WebSession_Response_content) MimeTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s WebSession_Response_content) SetMimeType(v string) error {
	return s.Struct.SetText(3, v)
}

func (s WebSession_Response_content) ETag() (WebSession_ETag, error) {
	p, err := s.Struct.Ptr(7)
	return WebSession_ETag{Struct: p.Struct()}, err
}

func (s WebSession_Response_content) HasETag() bool {
	return s.Struct.HasPtr(7)
}

func (s WebSession_Response_content) SetETag(v WebSession_ETag) error {
	return s.Struct.SetPtr(7, v.Struct.ToPtr())
}

// NewETag sets the eTag field to a newly
// allocated WebSession_ETag struct, preferring placement in s's segment.
func (s WebSession_Response_content) NewETag() (WebSession_ETag, error) {
	ss, err := NewWebSession_ETag(s.Struct.Segment())
	if err != nil {
		return WebSession_ETag{}, err
	}
	err = s.Struct.SetPtr(7, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_Response_content) Body() WebSession_Response_content_body {
	return WebSession_Response_content_body(s)
}

func (s WebSession_Response_content_body) Which() WebSession_Response_content_body_Which {
	return WebSession_Response_content_body_Which(s.Struct.Uint16(0))
}
func (s WebSession_Response_content_body) Bytes() ([]byte, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != bytes")
	}
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s WebSession_Response_content_body) HasBytes() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(4)
}

func (s WebSession_Response_content_body) SetBytes(v []byte) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetData(4, v)
}

func (s WebSession_Response_content_body) Stream() util.Handle {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != stream")
	}
	p, _ := s.Struct.Ptr(4)
	return util.Handle{Client: p.Interface().Client()}
}

func (s WebSession_Response_content_body) HasStream() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(4)
}

func (s WebSession_Response_content_body) SetStream(v util.Handle) error {
	s.Struct.SetUint16(0, 1)
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(4, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(4, in.ToPtr())
}

func (s WebSession_Response_content) Disposition() WebSession_Response_content_disposition {
	return WebSession_Response_content_disposition(s)
}

func (s WebSession_Response_content_disposition) Which() WebSession_Response_content_disposition_Which {
	return WebSession_Response_content_disposition_Which(s.Struct.Uint16(6))
}
func (s WebSession_Response_content_disposition) SetNormal() {
	s.Struct.SetUint16(6, 0)

}

func (s WebSession_Response_content_disposition) Download() (string, error) {
	if s.Struct.Uint16(6) != 1 {
		panic("Which() != download")
	}
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s WebSession_Response_content_disposition) HasDownload() bool {
	if s.Struct.Uint16(6) != 1 {
		return false
	}
	return s.Struct.HasPtr(5)
}

func (s WebSession_Response_content_disposition) DownloadBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s WebSession_Response_content_disposition) SetDownload(v string) error {
	s.Struct.SetUint16(6, 1)
	return s.Struct.SetText(5, v)
}

func (s WebSession_Response) NoContent() WebSession_Response_noContent {
	return WebSession_Response_noContent(s)
}

func (s WebSession_Response) SetNoContent() {
	s.Struct.SetUint16(2, 4)
}

func (s WebSession_Response_noContent) ShouldResetForm() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_Response_noContent) SetShouldResetForm(v bool) {
	s.Struct.SetBit(0, v)
}

func (s WebSession_Response_noContent) ETag() (WebSession_ETag, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_ETag{Struct: p.Struct()}, err
}

func (s WebSession_Response_noContent) HasETag() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_noContent) SetETag(v WebSession_ETag) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewETag sets the eTag field to a newly
// allocated WebSession_ETag struct, preferring placement in s's segment.
func (s WebSession_Response_noContent) NewETag() (WebSession_ETag, error) {
	ss, err := NewWebSession_ETag(s.Struct.Segment())
	if err != nil {
		return WebSession_ETag{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_Response) PreconditionFailed() WebSession_Response_preconditionFailed {
	return WebSession_Response_preconditionFailed(s)
}

func (s WebSession_Response) SetPreconditionFailed() {
	s.Struct.SetUint16(2, 5)
}

func (s WebSession_Response_preconditionFailed) MatchingETag() (WebSession_ETag, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_ETag{Struct: p.Struct()}, err
}

func (s WebSession_Response_preconditionFailed) HasMatchingETag() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_preconditionFailed) SetMatchingETag(v WebSession_ETag) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewMatchingETag sets the matchingETag field to a newly
// allocated WebSession_ETag struct, preferring placement in s's segment.
func (s WebSession_Response_preconditionFailed) NewMatchingETag() (WebSession_ETag, error) {
	ss, err := NewWebSession_ETag(s.Struct.Segment())
	if err != nil {
		return WebSession_ETag{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_Response) Redirect() WebSession_Response_redirect {
	return WebSession_Response_redirect(s)
}

func (s WebSession_Response) SetRedirect() {
	s.Struct.SetUint16(2, 0)
}

func (s WebSession_Response_redirect) IsPermanent() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_Response_redirect) SetIsPermanent(v bool) {
	s.Struct.SetBit(0, v)
}

func (s WebSession_Response_redirect) SwitchToGet() bool {
	return s.Struct.Bit(1)
}

func (s WebSession_Response_redirect) SetSwitchToGet(v bool) {
	s.Struct.SetBit(1, v)
}

func (s WebSession_Response_redirect) Location() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_redirect) HasLocation() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_redirect) LocationBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_redirect) SetLocation(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_Response) ClientError() WebSession_Response_clientError {
	return WebSession_Response_clientError(s)
}

func (s WebSession_Response) SetClientError() {
	s.Struct.SetUint16(2, 2)
}

func (s WebSession_Response_clientError) StatusCode() WebSession_Response_ClientErrorCode {
	return WebSession_Response_ClientErrorCode(s.Struct.Uint16(0))
}

func (s WebSession_Response_clientError) SetStatusCode(v WebSession_Response_ClientErrorCode) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s WebSession_Response_clientError) DescriptionHtml() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_clientError) HasDescriptionHtml() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_clientError) DescriptionHtmlBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_clientError) SetDescriptionHtml(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_Response_clientError) NonHtmlBody() (WebSession_Response_ErrorBody, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Response_ErrorBody{Struct: p.Struct()}, err
}

func (s WebSession_Response_clientError) HasNonHtmlBody() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_Response_clientError) SetNonHtmlBody(v WebSession_Response_ErrorBody) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewNonHtmlBody sets the nonHtmlBody field to a newly
// allocated WebSession_Response_ErrorBody struct, preferring placement in s's segment.
func (s WebSession_Response_clientError) NewNonHtmlBody() (WebSession_Response_ErrorBody, error) {
	ss, err := NewWebSession_Response_ErrorBody(s.Struct.Segment())
	if err != nil {
		return WebSession_Response_ErrorBody{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_Response) ServerError() WebSession_Response_serverError {
	return WebSession_Response_serverError(s)
}

func (s WebSession_Response) SetServerError() {
	s.Struct.SetUint16(2, 3)
}

func (s WebSession_Response_serverError) DescriptionHtml() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_serverError) HasDescriptionHtml() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_serverError) DescriptionHtmlBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_serverError) SetDescriptionHtml(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_Response_serverError) NonHtmlBody() (WebSession_Response_ErrorBody, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Response_ErrorBody{Struct: p.Struct()}, err
}

func (s WebSession_Response_serverError) HasNonHtmlBody() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_Response_serverError) SetNonHtmlBody(v WebSession_Response_ErrorBody) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewNonHtmlBody sets the nonHtmlBody field to a newly
// allocated WebSession_Response_ErrorBody struct, preferring placement in s's segment.
func (s WebSession_Response_serverError) NewNonHtmlBody() (WebSession_Response_ErrorBody, error) {
	ss, err := NewWebSession_Response_ErrorBody(s.Struct.Segment())
	if err != nil {
		return WebSession_Response_ErrorBody{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_Response) AdditionalHeaders() (WebSession_Response_Header_List, error) {
	p, err := s.Struct.Ptr(8)
	return WebSession_Response_Header_List{List: p.List()}, err
}

func (s WebSession_Response) HasAdditionalHeaders() bool {
	return s.Struct.HasPtr(8)
}

func (s WebSession_Response) SetAdditionalHeaders(v WebSession_Response_Header_List) error {
	return s.Struct.SetPtr(8, v.List.ToPtr())
}

// NewAdditionalHeaders sets the additionalHeaders field to a newly
// allocated WebSession_Response_Header_List, preferring placement in s's segment.
func (s WebSession_Response) NewAdditionalHeaders(n int32) (WebSession_Response_Header_List, error) {
	l, err := NewWebSession_Response_Header_List(s.Struct.Segment(), n)
	if err != nil {
		return WebSession_Response_Header_List{}, err
	}
	err = s.Struct.SetPtr(8, l.List.ToPtr())
	return l, err
}

// WebSession_Response_List is a list of WebSession_Response.
type WebSession_Response_List struct{ capnp.List }

// NewWebSession_Response creates a new list of WebSession_Response.
func NewWebSession_Response_List(s *capnp.Segment, sz int32) (WebSession_Response_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 9}, sz)
	return WebSession_Response_List{l}, err
}

func (s WebSession_Response_List) At(i int) WebSession_Response {
	return WebSession_Response{s.List.Struct(i)}
}

func (s WebSession_Response_List) Set(i int, v WebSession_Response) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Response_List) String() string {
	str, _ := text.MarshalList(0x8193ac6cb5429c83, s.List)
	return str
}

// WebSession_Response_Future is a wrapper for a WebSession_Response promised by a client call.
type WebSession_Response_Future struct{ *capnp.Future }

func (p WebSession_Response_Future) Struct() (WebSession_Response, error) {
	s, err := p.Future.Struct()
	return WebSession_Response{s}, err
}

func (p WebSession_Response_Future) CachePolicy() WebSession_CachePolicy_Future {
	return WebSession_CachePolicy_Future{Future: p.Future.Field(6, nil)}
}

func (p WebSession_Response_Future) Content() WebSession_Response_content_Future {
	return WebSession_Response_content_Future{p.Future}
}

// WebSession_Response_content_Future is a wrapper for a WebSession_Response_content promised by a client call.
type WebSession_Response_content_Future struct{ *capnp.Future }

func (p WebSession_Response_content_Future) Struct() (WebSession_Response_content, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_content{s}, err
}

func (p WebSession_Response_content_Future) ETag() WebSession_ETag_Future {
	return WebSession_ETag_Future{Future: p.Future.Field(7, nil)}
}

func (p WebSession_Response_content_Future) Body() WebSession_Response_content_body_Future {
	return WebSession_Response_content_body_Future{p.Future}
}

// WebSession_Response_content_body_Future is a wrapper for a WebSession_Response_content_body promised by a client call.
type WebSession_Response_content_body_Future struct{ *capnp.Future }

func (p WebSession_Response_content_body_Future) Struct() (WebSession_Response_content_body, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_content_body{s}, err
}

func (p WebSession_Response_content_body_Future) Stream() util.Handle {
	return util.Handle{Client: p.Future.Field(4, nil).Client()}
}

func (p WebSession_Response_content_Future) Disposition() WebSession_Response_content_disposition_Future {
	return WebSession_Response_content_disposition_Future{p.Future}
}

// WebSession_Response_content_disposition_Future is a wrapper for a WebSession_Response_content_disposition promised by a client call.
type WebSession_Response_content_disposition_Future struct{ *capnp.Future }

func (p WebSession_Response_content_disposition_Future) Struct() (WebSession_Response_content_disposition, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_content_disposition{s}, err
}

func (p WebSession_Response_Future) NoContent() WebSession_Response_noContent_Future {
	return WebSession_Response_noContent_Future{p.Future}
}

// WebSession_Response_noContent_Future is a wrapper for a WebSession_Response_noContent promised by a client call.
type WebSession_Response_noContent_Future struct{ *capnp.Future }

func (p WebSession_Response_noContent_Future) Struct() (WebSession_Response_noContent, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_noContent{s}, err
}

func (p WebSession_Response_noContent_Future) ETag() WebSession_ETag_Future {
	return WebSession_ETag_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_Response_Future) PreconditionFailed() WebSession_Response_preconditionFailed_Future {
	return WebSession_Response_preconditionFailed_Future{p.Future}
}

// WebSession_Response_preconditionFailed_Future is a wrapper for a WebSession_Response_preconditionFailed promised by a client call.
type WebSession_Response_preconditionFailed_Future struct{ *capnp.Future }

func (p WebSession_Response_preconditionFailed_Future) Struct() (WebSession_Response_preconditionFailed, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_preconditionFailed{s}, err
}

func (p WebSession_Response_preconditionFailed_Future) MatchingETag() WebSession_ETag_Future {
	return WebSession_ETag_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_Response_Future) Redirect() WebSession_Response_redirect_Future {
	return WebSession_Response_redirect_Future{p.Future}
}

// WebSession_Response_redirect_Future is a wrapper for a WebSession_Response_redirect promised by a client call.
type WebSession_Response_redirect_Future struct{ *capnp.Future }

func (p WebSession_Response_redirect_Future) Struct() (WebSession_Response_redirect, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_redirect{s}, err
}

func (p WebSession_Response_Future) ClientError() WebSession_Response_clientError_Future {
	return WebSession_Response_clientError_Future{p.Future}
}

// WebSession_Response_clientError_Future is a wrapper for a WebSession_Response_clientError promised by a client call.
type WebSession_Response_clientError_Future struct{ *capnp.Future }

func (p WebSession_Response_clientError_Future) Struct() (WebSession_Response_clientError, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_clientError{s}, err
}

func (p WebSession_Response_clientError_Future) NonHtmlBody() WebSession_Response_ErrorBody_Future {
	return WebSession_Response_ErrorBody_Future{Future: p.Future.Field(2, nil)}
}

func (p WebSession_Response_Future) ServerError() WebSession_Response_serverError_Future {
	return WebSession_Response_serverError_Future{p.Future}
}

// WebSession_Response_serverError_Future is a wrapper for a WebSession_Response_serverError promised by a client call.
type WebSession_Response_serverError_Future struct{ *capnp.Future }

func (p WebSession_Response_serverError_Future) Struct() (WebSession_Response_serverError, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_serverError{s}, err
}

func (p WebSession_Response_serverError_Future) NonHtmlBody() WebSession_Response_ErrorBody_Future {
	return WebSession_Response_ErrorBody_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_Response_SuccessCode uint16

// WebSession_Response_SuccessCode_TypeID is the unique identifier for the type WebSession_Response_SuccessCode.
const WebSession_Response_SuccessCode_TypeID = 0x82130007ccd2888f

// Values of WebSession_Response_SuccessCode.
const (
	WebSession_Response_SuccessCode_ok             WebSession_Response_SuccessCode = 0
	WebSession_Response_SuccessCode_created        WebSession_Response_SuccessCode = 1
	WebSession_Response_SuccessCode_accepted       WebSession_Response_SuccessCode = 2
	WebSession_Response_SuccessCode_noContent      WebSession_Response_SuccessCode = 3
	WebSession_Response_SuccessCode_partialContent WebSession_Response_SuccessCode = 4
	WebSession_Response_SuccessCode_multiStatus    WebSession_Response_SuccessCode = 5
	WebSession_Response_SuccessCode_notModified    WebSession_Response_SuccessCode = 6
)

// String returns the enum's constant name.
func (c WebSession_Response_SuccessCode) String() string {
	switch c {
	case WebSession_Response_SuccessCode_ok:
		return "ok"
	case WebSession_Response_SuccessCode_created:
		return "created"
	case WebSession_Response_SuccessCode_accepted:
		return "accepted"
	case WebSession_Response_SuccessCode_noContent:
		return "noContent"
	case WebSession_Response_SuccessCode_partialContent:
		return "partialContent"
	case WebSession_Response_SuccessCode_multiStatus:
		return "multiStatus"
	case WebSession_Response_SuccessCode_notModified:
		return "notModified"

	default:
		return ""
	}
}

// WebSession_Response_SuccessCodeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func WebSession_Response_SuccessCodeFromString(c string) WebSession_Response_SuccessCode {
	switch c {
	case "ok":
		return WebSession_Response_SuccessCode_ok
	case "created":
		return WebSession_Response_SuccessCode_created
	case "accepted":
		return WebSession_Response_SuccessCode_accepted
	case "noContent":
		return WebSession_Response_SuccessCode_noContent
	case "partialContent":
		return WebSession_Response_SuccessCode_partialContent
	case "multiStatus":
		return WebSession_Response_SuccessCode_multiStatus
	case "notModified":
		return WebSession_Response_SuccessCode_notModified

	default:
		return 0
	}
}

type WebSession_Response_SuccessCode_List struct{ capnp.List }

func NewWebSession_Response_SuccessCode_List(s *capnp.Segment, sz int32) (WebSession_Response_SuccessCode_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return WebSession_Response_SuccessCode_List{l.List}, err
}

func (l WebSession_Response_SuccessCode_List) At(i int) WebSession_Response_SuccessCode {
	ul := capnp.UInt16List{List: l.List}
	return WebSession_Response_SuccessCode(ul.At(i))
}

func (l WebSession_Response_SuccessCode_List) Set(i int, v WebSession_Response_SuccessCode) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type WebSession_Response_ClientErrorCode uint16

// WebSession_Response_ClientErrorCode_TypeID is the unique identifier for the type WebSession_Response_ClientErrorCode.
const WebSession_Response_ClientErrorCode_TypeID = 0x8ea31bdb4c044f01

// Values of WebSession_Response_ClientErrorCode.
const (
	WebSession_Response_ClientErrorCode_badRequest            WebSession_Response_ClientErrorCode = 0
	WebSession_Response_ClientErrorCode_forbidden             WebSession_Response_ClientErrorCode = 1
	WebSession_Response_ClientErrorCode_notFound              WebSession_Response_ClientErrorCode = 2
	WebSession_Response_ClientErrorCode_methodNotAllowed      WebSession_Response_ClientErrorCode = 3
	WebSession_Response_ClientErrorCode_notAcceptable         WebSession_Response_ClientErrorCode = 4
	WebSession_Response_ClientErrorCode_conflict              WebSession_Response_ClientErrorCode = 5
	WebSession_Response_ClientErrorCode_gone                  WebSession_Response_ClientErrorCode = 6
	WebSession_Response_ClientErrorCode_preconditionFailed    WebSession_Response_ClientErrorCode = 11
	WebSession_Response_ClientErrorCode_requestEntityTooLarge WebSession_Response_ClientErrorCode = 7
	WebSession_Response_ClientErrorCode_requestUriTooLong     WebSession_Response_ClientErrorCode = 8
	WebSession_Response_ClientErrorCode_unsupportedMediaType  WebSession_Response_ClientErrorCode = 9
	WebSession_Response_ClientErrorCode_imATeapot             WebSession_Response_ClientErrorCode = 10
	WebSession_Response_ClientErrorCode_unprocessableEntity   WebSession_Response_ClientErrorCode = 12
)

// String returns the enum's constant name.
func (c WebSession_Response_ClientErrorCode) String() string {
	switch c {
	case WebSession_Response_ClientErrorCode_badRequest:
		return "badRequest"
	case WebSession_Response_ClientErrorCode_forbidden:
		return "forbidden"
	case WebSession_Response_ClientErrorCode_notFound:
		return "notFound"
	case WebSession_Response_ClientErrorCode_methodNotAllowed:
		return "methodNotAllowed"
	case WebSession_Response_ClientErrorCode_notAcceptable:
		return "notAcceptable"
	case WebSession_Response_ClientErrorCode_conflict:
		return "conflict"
	case WebSession_Response_ClientErrorCode_gone:
		return "gone"
	case WebSession_Response_ClientErrorCode_preconditionFailed:
		return "preconditionFailed"
	case WebSession_Response_ClientErrorCode_requestEntityTooLarge:
		return "requestEntityTooLarge"
	case WebSession_Response_ClientErrorCode_requestUriTooLong:
		return "requestUriTooLong"
	case WebSession_Response_ClientErrorCode_unsupportedMediaType:
		return "unsupportedMediaType"
	case WebSession_Response_ClientErrorCode_imATeapot:
		return "imATeapot"
	case WebSession_Response_ClientErrorCode_unprocessableEntity:
		return "unprocessableEntity"

	default:
		return ""
	}
}

// WebSession_Response_ClientErrorCodeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func WebSession_Response_ClientErrorCodeFromString(c string) WebSession_Response_ClientErrorCode {
	switch c {
	case "badRequest":
		return WebSession_Response_ClientErrorCode_badRequest
	case "forbidden":
		return WebSession_Response_ClientErrorCode_forbidden
	case "notFound":
		return WebSession_Response_ClientErrorCode_notFound
	case "methodNotAllowed":
		return WebSession_Response_ClientErrorCode_methodNotAllowed
	case "notAcceptable":
		return WebSession_Response_ClientErrorCode_notAcceptable
	case "conflict":
		return WebSession_Response_ClientErrorCode_conflict
	case "gone":
		return WebSession_Response_ClientErrorCode_gone
	case "preconditionFailed":
		return WebSession_Response_ClientErrorCode_preconditionFailed
	case "requestEntityTooLarge":
		return WebSession_Response_ClientErrorCode_requestEntityTooLarge
	case "requestUriTooLong":
		return WebSession_Response_ClientErrorCode_requestUriTooLong
	case "unsupportedMediaType":
		return WebSession_Response_ClientErrorCode_unsupportedMediaType
	case "imATeapot":
		return WebSession_Response_ClientErrorCode_imATeapot
	case "unprocessableEntity":
		return WebSession_Response_ClientErrorCode_unprocessableEntity

	default:
		return 0
	}
}

type WebSession_Response_ClientErrorCode_List struct{ capnp.List }

func NewWebSession_Response_ClientErrorCode_List(s *capnp.Segment, sz int32) (WebSession_Response_ClientErrorCode_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return WebSession_Response_ClientErrorCode_List{l.List}, err
}

func (l WebSession_Response_ClientErrorCode_List) At(i int) WebSession_Response_ClientErrorCode {
	ul := capnp.UInt16List{List: l.List}
	return WebSession_Response_ClientErrorCode(ul.At(i))
}

func (l WebSession_Response_ClientErrorCode_List) Set(i int, v WebSession_Response_ClientErrorCode) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type WebSession_Response_Header struct{ capnp.Struct }

// WebSession_Response_Header_TypeID is the unique identifier for the type WebSession_Response_Header.
const WebSession_Response_Header_TypeID = 0xb4b873147ab5ce5e

func NewWebSession_Response_Header(s *capnp.Segment) (WebSession_Response_Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_Response_Header{st}, err
}

func NewRootWebSession_Response_Header(s *capnp.Segment) (WebSession_Response_Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_Response_Header{st}, err
}

func ReadRootWebSession_Response_Header(msg *capnp.Message) (WebSession_Response_Header, error) {
	root, err := msg.Root()
	return WebSession_Response_Header{root.Struct()}, err
}

func (s WebSession_Response_Header) String() string {
	str, _ := text.Marshal(0xb4b873147ab5ce5e, s.Struct)
	return str
}

func (s WebSession_Response_Header) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_Response_Header) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Response_Header) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_Response_Header) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_Response_Header) Value() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_Header) HasValue() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_Header) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_Header) SetValue(v string) error {
	return s.Struct.SetText(1, v)
}

// WebSession_Response_Header_List is a list of WebSession_Response_Header.
type WebSession_Response_Header_List struct{ capnp.List }

// NewWebSession_Response_Header creates a new list of WebSession_Response_Header.
func NewWebSession_Response_Header_List(s *capnp.Segment, sz int32) (WebSession_Response_Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return WebSession_Response_Header_List{l}, err
}

func (s WebSession_Response_Header_List) At(i int) WebSession_Response_Header {
	return WebSession_Response_Header{s.List.Struct(i)}
}

func (s WebSession_Response_Header_List) Set(i int, v WebSession_Response_Header) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Response_Header_List) String() string {
	str, _ := text.MarshalList(0xb4b873147ab5ce5e, s.List)
	return str
}

// WebSession_Response_Header_Future is a wrapper for a WebSession_Response_Header promised by a client call.
type WebSession_Response_Header_Future struct{ *capnp.Future }

func (p WebSession_Response_Header_Future) Struct() (WebSession_Response_Header, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_Header{s}, err
}

type WebSession_Response_ErrorBody struct{ capnp.Struct }

// WebSession_Response_ErrorBody_TypeID is the unique identifier for the type WebSession_Response_ErrorBody.
const WebSession_Response_ErrorBody_TypeID = 0x9497e63b399a2c01

func NewWebSession_Response_ErrorBody(s *capnp.Segment) (WebSession_Response_ErrorBody, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_Response_ErrorBody{st}, err
}

func NewRootWebSession_Response_ErrorBody(s *capnp.Segment) (WebSession_Response_ErrorBody, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_Response_ErrorBody{st}, err
}

func ReadRootWebSession_Response_ErrorBody(msg *capnp.Message) (WebSession_Response_ErrorBody, error) {
	root, err := msg.Root()
	return WebSession_Response_ErrorBody{root.Struct()}, err
}

func (s WebSession_Response_ErrorBody) String() string {
	str, _ := text.Marshal(0x9497e63b399a2c01, s.Struct)
	return str
}

func (s WebSession_Response_ErrorBody) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s WebSession_Response_ErrorBody) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Response_ErrorBody) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s WebSession_Response_ErrorBody) Encoding() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_Response_ErrorBody) HasEncoding() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_Response_ErrorBody) EncodingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_Response_ErrorBody) SetEncoding(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_Response_ErrorBody) Language() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s WebSession_Response_ErrorBody) HasLanguage() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_Response_ErrorBody) LanguageBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s WebSession_Response_ErrorBody) SetLanguage(v string) error {
	return s.Struct.SetText(2, v)
}

func (s WebSession_Response_ErrorBody) MimeType() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s WebSession_Response_ErrorBody) HasMimeType() bool {
	return s.Struct.HasPtr(3)
}

func (s WebSession_Response_ErrorBody) MimeTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s WebSession_Response_ErrorBody) SetMimeType(v string) error {
	return s.Struct.SetText(3, v)
}

// WebSession_Response_ErrorBody_List is a list of WebSession_Response_ErrorBody.
type WebSession_Response_ErrorBody_List struct{ capnp.List }

// NewWebSession_Response_ErrorBody creates a new list of WebSession_Response_ErrorBody.
func NewWebSession_Response_ErrorBody_List(s *capnp.Segment, sz int32) (WebSession_Response_ErrorBody_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return WebSession_Response_ErrorBody_List{l}, err
}

func (s WebSession_Response_ErrorBody_List) At(i int) WebSession_Response_ErrorBody {
	return WebSession_Response_ErrorBody{s.List.Struct(i)}
}

func (s WebSession_Response_ErrorBody_List) Set(i int, v WebSession_Response_ErrorBody) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Response_ErrorBody_List) String() string {
	str, _ := text.MarshalList(0x9497e63b399a2c01, s.List)
	return str
}

// WebSession_Response_ErrorBody_Future is a wrapper for a WebSession_Response_ErrorBody promised by a client call.
type WebSession_Response_ErrorBody_Future struct{ *capnp.Future }

func (p WebSession_Response_ErrorBody_Future) Struct() (WebSession_Response_ErrorBody, error) {
	s, err := p.Future.Struct()
	return WebSession_Response_ErrorBody{s}, err
}

type WebSession_RequestStream struct{ Client *capnp.Client }

// WebSession_RequestStream_TypeID is the unique identifier for the type WebSession_RequestStream.
const WebSession_RequestStream_TypeID = 0x99ffc2f3f69a6a9f

func (c WebSession_RequestStream) GetResponse(ctx context.Context, params func(WebSession_RequestStream_getResponse_Params) error) (WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x99ffc2f3f69a6a9f,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession.RequestStream",
			MethodName:    "getResponse",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_RequestStream_getResponse_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_Response_Future{Future: ans.Future()}, release
}
func (c WebSession_RequestStream) Write(ctx context.Context, params func(util.ByteStream_write_Params) error) (util.ByteStream_write_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      0,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(util.ByteStream_write_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return util.ByteStream_write_Results_Future{Future: ans.Future()}, release
}
func (c WebSession_RequestStream) Done(ctx context.Context, params func(util.ByteStream_done_Params) error) (util.ByteStream_done_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      1,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "done",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(util.ByteStream_done_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return util.ByteStream_done_Results_Future{Future: ans.Future()}, release
}
func (c WebSession_RequestStream) ExpectSize(ctx context.Context, params func(util.ByteStream_expectSize_Params) error) (util.ByteStream_expectSize_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      2,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "expectSize",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(util.ByteStream_expectSize_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return util.ByteStream_expectSize_Results_Future{Future: ans.Future()}, release
}

// A WebSession_RequestStream_Server is a WebSession_RequestStream with a local implementation.
type WebSession_RequestStream_Server interface {
	GetResponse(context.Context, WebSession_RequestStream_getResponse) error

	Write(context.Context, util.ByteStream_write) error

	Done(context.Context, util.ByteStream_done) error

	ExpectSize(context.Context, util.ByteStream_expectSize) error
}

// WebSession_RequestStream_NewServer creates a new Server from an implementation of WebSession_RequestStream_Server.
func WebSession_RequestStream_NewServer(s WebSession_RequestStream_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WebSession_RequestStream_Methods(nil, s), s, c, policy)
}

// WebSession_RequestStream_ServerToClient creates a new Client from an implementation of WebSession_RequestStream_Server.
// The caller is responsible for calling Release on the returned Client.
func WebSession_RequestStream_ServerToClient(s WebSession_RequestStream_Server, policy *server.Policy) WebSession_RequestStream {
	return WebSession_RequestStream{Client: capnp.NewClient(WebSession_RequestStream_NewServer(s, policy))}
}

// WebSession_RequestStream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WebSession_RequestStream_Methods(methods []server.Method, s WebSession_RequestStream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x99ffc2f3f69a6a9f,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession.RequestStream",
			MethodName:    "getResponse",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetResponse(ctx, WebSession_RequestStream_getResponse{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      0,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, util.ByteStream_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      1,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "done",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Done(ctx, util.ByteStream_done{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd57387729cfe35f,
			MethodID:      2,
			InterfaceName: "util.capnp:ByteStream",
			MethodName:    "expectSize",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ExpectSize(ctx, util.ByteStream_expectSize{call})
		},
	})

	return methods
}

// WebSession_RequestStream_getResponse holds the state for a server call to WebSession_RequestStream.getResponse.
// See server.Call for documentation.
type WebSession_RequestStream_getResponse struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_RequestStream_getResponse) Args() WebSession_RequestStream_getResponse_Params {
	return WebSession_RequestStream_getResponse_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_RequestStream_getResponse) AllocResults() (WebSession_Response, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return WebSession_Response{Struct: r}, err
}

type WebSession_RequestStream_getResponse_Params struct{ capnp.Struct }

// WebSession_RequestStream_getResponse_Params_TypeID is the unique identifier for the type WebSession_RequestStream_getResponse_Params.
const WebSession_RequestStream_getResponse_Params_TypeID = 0xe9a02a3219bdbd70

func NewWebSession_RequestStream_getResponse_Params(s *capnp.Segment) (WebSession_RequestStream_getResponse_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebSession_RequestStream_getResponse_Params{st}, err
}

func NewRootWebSession_RequestStream_getResponse_Params(s *capnp.Segment) (WebSession_RequestStream_getResponse_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebSession_RequestStream_getResponse_Params{st}, err
}

func ReadRootWebSession_RequestStream_getResponse_Params(msg *capnp.Message) (WebSession_RequestStream_getResponse_Params, error) {
	root, err := msg.Root()
	return WebSession_RequestStream_getResponse_Params{root.Struct()}, err
}

func (s WebSession_RequestStream_getResponse_Params) String() string {
	str, _ := text.Marshal(0xe9a02a3219bdbd70, s.Struct)
	return str
}

// WebSession_RequestStream_getResponse_Params_List is a list of WebSession_RequestStream_getResponse_Params.
type WebSession_RequestStream_getResponse_Params_List struct{ capnp.List }

// NewWebSession_RequestStream_getResponse_Params creates a new list of WebSession_RequestStream_getResponse_Params.
func NewWebSession_RequestStream_getResponse_Params_List(s *capnp.Segment, sz int32) (WebSession_RequestStream_getResponse_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return WebSession_RequestStream_getResponse_Params_List{l}, err
}

func (s WebSession_RequestStream_getResponse_Params_List) At(i int) WebSession_RequestStream_getResponse_Params {
	return WebSession_RequestStream_getResponse_Params{s.List.Struct(i)}
}

func (s WebSession_RequestStream_getResponse_Params_List) Set(i int, v WebSession_RequestStream_getResponse_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_RequestStream_getResponse_Params_List) String() string {
	str, _ := text.MarshalList(0xe9a02a3219bdbd70, s.List)
	return str
}

// WebSession_RequestStream_getResponse_Params_Future is a wrapper for a WebSession_RequestStream_getResponse_Params promised by a client call.
type WebSession_RequestStream_getResponse_Params_Future struct{ *capnp.Future }

func (p WebSession_RequestStream_getResponse_Params_Future) Struct() (WebSession_RequestStream_getResponse_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_RequestStream_getResponse_Params{s}, err
}

type WebSession_WebSocketStream struct{ Client *capnp.Client }

// WebSession_WebSocketStream_TypeID is the unique identifier for the type WebSession_WebSocketStream.
const WebSession_WebSocketStream_TypeID = 0xf001fc1d5e574a07

func (c WebSession_WebSocketStream) SendBytes(ctx context.Context, params func(WebSession_WebSocketStream_sendBytes_Params) error) (WebSession_WebSocketStream_sendBytes_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf001fc1d5e574a07,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession.WebSocketStream",
			MethodName:    "sendBytes",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebSession_WebSocketStream_sendBytes_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return WebSession_WebSocketStream_sendBytes_Results_Future{Future: ans.Future()}, release
}

// A WebSession_WebSocketStream_Server is a WebSession_WebSocketStream with a local implementation.
type WebSession_WebSocketStream_Server interface {
	SendBytes(context.Context, WebSession_WebSocketStream_sendBytes) error
}

// WebSession_WebSocketStream_NewServer creates a new Server from an implementation of WebSession_WebSocketStream_Server.
func WebSession_WebSocketStream_NewServer(s WebSession_WebSocketStream_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WebSession_WebSocketStream_Methods(nil, s), s, c, policy)
}

// WebSession_WebSocketStream_ServerToClient creates a new Client from an implementation of WebSession_WebSocketStream_Server.
// The caller is responsible for calling Release on the returned Client.
func WebSession_WebSocketStream_ServerToClient(s WebSession_WebSocketStream_Server, policy *server.Policy) WebSession_WebSocketStream {
	return WebSession_WebSocketStream{Client: capnp.NewClient(WebSession_WebSocketStream_NewServer(s, policy))}
}

// WebSession_WebSocketStream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WebSession_WebSocketStream_Methods(methods []server.Method, s WebSession_WebSocketStream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf001fc1d5e574a07,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession.WebSocketStream",
			MethodName:    "sendBytes",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SendBytes(ctx, WebSession_WebSocketStream_sendBytes{call})
		},
	})

	return methods
}

// WebSession_WebSocketStream_sendBytes holds the state for a server call to WebSession_WebSocketStream.sendBytes.
// See server.Call for documentation.
type WebSession_WebSocketStream_sendBytes struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebSession_WebSocketStream_sendBytes) Args() WebSession_WebSocketStream_sendBytes_Params {
	return WebSession_WebSocketStream_sendBytes_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c WebSession_WebSocketStream_sendBytes) AllocResults() (WebSession_WebSocketStream_sendBytes_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebSession_WebSocketStream_sendBytes_Results{Struct: r}, err
}

type WebSession_WebSocketStream_sendBytes_Params struct{ capnp.Struct }

// WebSession_WebSocketStream_sendBytes_Params_TypeID is the unique identifier for the type WebSession_WebSocketStream_sendBytes_Params.
const WebSession_WebSocketStream_sendBytes_Params_TypeID = 0x9a712ce3fcad8cd8

func NewWebSession_WebSocketStream_sendBytes_Params(s *capnp.Segment) (WebSession_WebSocketStream_sendBytes_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_WebSocketStream_sendBytes_Params{st}, err
}

func NewRootWebSession_WebSocketStream_sendBytes_Params(s *capnp.Segment) (WebSession_WebSocketStream_sendBytes_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_WebSocketStream_sendBytes_Params{st}, err
}

func ReadRootWebSession_WebSocketStream_sendBytes_Params(msg *capnp.Message) (WebSession_WebSocketStream_sendBytes_Params, error) {
	root, err := msg.Root()
	return WebSession_WebSocketStream_sendBytes_Params{root.Struct()}, err
}

func (s WebSession_WebSocketStream_sendBytes_Params) String() string {
	str, _ := text.Marshal(0x9a712ce3fcad8cd8, s.Struct)
	return str
}

func (s WebSession_WebSocketStream_sendBytes_Params) Message() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s WebSession_WebSocketStream_sendBytes_Params) HasMessage() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_WebSocketStream_sendBytes_Params) SetMessage(v []byte) error {
	return s.Struct.SetData(0, v)
}

// WebSession_WebSocketStream_sendBytes_Params_List is a list of WebSession_WebSocketStream_sendBytes_Params.
type WebSession_WebSocketStream_sendBytes_Params_List struct{ capnp.List }

// NewWebSession_WebSocketStream_sendBytes_Params creates a new list of WebSession_WebSocketStream_sendBytes_Params.
func NewWebSession_WebSocketStream_sendBytes_Params_List(s *capnp.Segment, sz int32) (WebSession_WebSocketStream_sendBytes_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return WebSession_WebSocketStream_sendBytes_Params_List{l}, err
}

func (s WebSession_WebSocketStream_sendBytes_Params_List) At(i int) WebSession_WebSocketStream_sendBytes_Params {
	return WebSession_WebSocketStream_sendBytes_Params{s.List.Struct(i)}
}

func (s WebSession_WebSocketStream_sendBytes_Params_List) Set(i int, v WebSession_WebSocketStream_sendBytes_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_WebSocketStream_sendBytes_Params_List) String() string {
	str, _ := text.MarshalList(0x9a712ce3fcad8cd8, s.List)
	return str
}

// WebSession_WebSocketStream_sendBytes_Params_Future is a wrapper for a WebSession_WebSocketStream_sendBytes_Params promised by a client call.
type WebSession_WebSocketStream_sendBytes_Params_Future struct{ *capnp.Future }

func (p WebSession_WebSocketStream_sendBytes_Params_Future) Struct() (WebSession_WebSocketStream_sendBytes_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_WebSocketStream_sendBytes_Params{s}, err
}

type WebSession_WebSocketStream_sendBytes_Results struct{ capnp.Struct }

// WebSession_WebSocketStream_sendBytes_Results_TypeID is the unique identifier for the type WebSession_WebSocketStream_sendBytes_Results.
const WebSession_WebSocketStream_sendBytes_Results_TypeID = 0x82a3ee23aa0ae3a3

func NewWebSession_WebSocketStream_sendBytes_Results(s *capnp.Segment) (WebSession_WebSocketStream_sendBytes_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebSession_WebSocketStream_sendBytes_Results{st}, err
}

func NewRootWebSession_WebSocketStream_sendBytes_Results(s *capnp.Segment) (WebSession_WebSocketStream_sendBytes_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebSession_WebSocketStream_sendBytes_Results{st}, err
}

func ReadRootWebSession_WebSocketStream_sendBytes_Results(msg *capnp.Message) (WebSession_WebSocketStream_sendBytes_Results, error) {
	root, err := msg.Root()
	return WebSession_WebSocketStream_sendBytes_Results{root.Struct()}, err
}

func (s WebSession_WebSocketStream_sendBytes_Results) String() string {
	str, _ := text.Marshal(0x82a3ee23aa0ae3a3, s.Struct)
	return str
}

// WebSession_WebSocketStream_sendBytes_Results_List is a list of WebSession_WebSocketStream_sendBytes_Results.
type WebSession_WebSocketStream_sendBytes_Results_List struct{ capnp.List }

// NewWebSession_WebSocketStream_sendBytes_Results creates a new list of WebSession_WebSocketStream_sendBytes_Results.
func NewWebSession_WebSocketStream_sendBytes_Results_List(s *capnp.Segment, sz int32) (WebSession_WebSocketStream_sendBytes_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return WebSession_WebSocketStream_sendBytes_Results_List{l}, err
}

func (s WebSession_WebSocketStream_sendBytes_Results_List) At(i int) WebSession_WebSocketStream_sendBytes_Results {
	return WebSession_WebSocketStream_sendBytes_Results{s.List.Struct(i)}
}

func (s WebSession_WebSocketStream_sendBytes_Results_List) Set(i int, v WebSession_WebSocketStream_sendBytes_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_WebSocketStream_sendBytes_Results_List) String() string {
	str, _ := text.MarshalList(0x82a3ee23aa0ae3a3, s.List)
	return str
}

// WebSession_WebSocketStream_sendBytes_Results_Future is a wrapper for a WebSession_WebSocketStream_sendBytes_Results promised by a client call.
type WebSession_WebSocketStream_sendBytes_Results_Future struct{ *capnp.Future }

func (p WebSession_WebSocketStream_sendBytes_Results_Future) Struct() (WebSession_WebSocketStream_sendBytes_Results, error) {
	s, err := p.Future.Struct()
	return WebSession_WebSocketStream_sendBytes_Results{s}, err
}

type WebSession_CachePolicy struct{ capnp.Struct }

// WebSession_CachePolicy_TypeID is the unique identifier for the type WebSession_CachePolicy.
const WebSession_CachePolicy_TypeID = 0xb37b21e300864885

func NewWebSession_CachePolicy(s *capnp.Segment) (WebSession_CachePolicy, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebSession_CachePolicy{st}, err
}

func NewRootWebSession_CachePolicy(s *capnp.Segment) (WebSession_CachePolicy, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebSession_CachePolicy{st}, err
}

func ReadRootWebSession_CachePolicy(msg *capnp.Message) (WebSession_CachePolicy, error) {
	root, err := msg.Root()
	return WebSession_CachePolicy{root.Struct()}, err
}

func (s WebSession_CachePolicy) String() string {
	str, _ := text.Marshal(0xb37b21e300864885, s.Struct)
	return str
}

func (s WebSession_CachePolicy) WithCheck() WebSession_CachePolicy_Scope {
	return WebSession_CachePolicy_Scope(s.Struct.Uint16(0))
}

func (s WebSession_CachePolicy) SetWithCheck(v WebSession_CachePolicy_Scope) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s WebSession_CachePolicy) Permanent() WebSession_CachePolicy_Scope {
	return WebSession_CachePolicy_Scope(s.Struct.Uint16(2))
}

func (s WebSession_CachePolicy) SetPermanent(v WebSession_CachePolicy_Scope) {
	s.Struct.SetUint16(2, uint16(v))
}

func (s WebSession_CachePolicy) VariesOnCookie() bool {
	return s.Struct.Bit(32)
}

func (s WebSession_CachePolicy) SetVariesOnCookie(v bool) {
	s.Struct.SetBit(32, v)
}

func (s WebSession_CachePolicy) VariesOnAccept() bool {
	return s.Struct.Bit(33)
}

func (s WebSession_CachePolicy) SetVariesOnAccept(v bool) {
	s.Struct.SetBit(33, v)
}

// WebSession_CachePolicy_List is a list of WebSession_CachePolicy.
type WebSession_CachePolicy_List struct{ capnp.List }

// NewWebSession_CachePolicy creates a new list of WebSession_CachePolicy.
func NewWebSession_CachePolicy_List(s *capnp.Segment, sz int32) (WebSession_CachePolicy_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return WebSession_CachePolicy_List{l}, err
}

func (s WebSession_CachePolicy_List) At(i int) WebSession_CachePolicy {
	return WebSession_CachePolicy{s.List.Struct(i)}
}

func (s WebSession_CachePolicy_List) Set(i int, v WebSession_CachePolicy) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_CachePolicy_List) String() string {
	str, _ := text.MarshalList(0xb37b21e300864885, s.List)
	return str
}

// WebSession_CachePolicy_Future is a wrapper for a WebSession_CachePolicy promised by a client call.
type WebSession_CachePolicy_Future struct{ *capnp.Future }

func (p WebSession_CachePolicy_Future) Struct() (WebSession_CachePolicy, error) {
	s, err := p.Future.Struct()
	return WebSession_CachePolicy{s}, err
}

type WebSession_CachePolicy_Scope uint16

// WebSession_CachePolicy_Scope_TypeID is the unique identifier for the type WebSession_CachePolicy_Scope.
const WebSession_CachePolicy_Scope_TypeID = 0x81535505f60de028

// Values of WebSession_CachePolicy_Scope.
const (
	WebSession_CachePolicy_Scope_none          WebSession_CachePolicy_Scope = 0
	WebSession_CachePolicy_Scope_perSession    WebSession_CachePolicy_Scope = 1
	WebSession_CachePolicy_Scope_perUser       WebSession_CachePolicy_Scope = 2
	WebSession_CachePolicy_Scope_perAppVersion WebSession_CachePolicy_Scope = 3
	WebSession_CachePolicy_Scope_universal     WebSession_CachePolicy_Scope = 4
)

// String returns the enum's constant name.
func (c WebSession_CachePolicy_Scope) String() string {
	switch c {
	case WebSession_CachePolicy_Scope_none:
		return "none"
	case WebSession_CachePolicy_Scope_perSession:
		return "perSession"
	case WebSession_CachePolicy_Scope_perUser:
		return "perUser"
	case WebSession_CachePolicy_Scope_perAppVersion:
		return "perAppVersion"
	case WebSession_CachePolicy_Scope_universal:
		return "universal"

	default:
		return ""
	}
}

// WebSession_CachePolicy_ScopeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func WebSession_CachePolicy_ScopeFromString(c string) WebSession_CachePolicy_Scope {
	switch c {
	case "none":
		return WebSession_CachePolicy_Scope_none
	case "perSession":
		return WebSession_CachePolicy_Scope_perSession
	case "perUser":
		return WebSession_CachePolicy_Scope_perUser
	case "perAppVersion":
		return WebSession_CachePolicy_Scope_perAppVersion
	case "universal":
		return WebSession_CachePolicy_Scope_universal

	default:
		return 0
	}
}

type WebSession_CachePolicy_Scope_List struct{ capnp.List }

func NewWebSession_CachePolicy_Scope_List(s *capnp.Segment, sz int32) (WebSession_CachePolicy_Scope_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return WebSession_CachePolicy_Scope_List{l.List}, err
}

func (l WebSession_CachePolicy_Scope_List) At(i int) WebSession_CachePolicy_Scope {
	ul := capnp.UInt16List{List: l.List}
	return WebSession_CachePolicy_Scope(ul.At(i))
}

func (l WebSession_CachePolicy_Scope_List) Set(i int, v WebSession_CachePolicy_Scope) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type WebSession_Options struct{ capnp.Struct }

// WebSession_Options_TypeID is the unique identifier for the type WebSession_Options.
const WebSession_Options_TypeID = 0xe9ff06beec4e73d6

func NewWebSession_Options(s *capnp.Segment) (WebSession_Options, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_Options{st}, err
}

func NewRootWebSession_Options(s *capnp.Segment) (WebSession_Options, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession_Options{st}, err
}

func ReadRootWebSession_Options(msg *capnp.Message) (WebSession_Options, error) {
	root, err := msg.Root()
	return WebSession_Options{root.Struct()}, err
}

func (s WebSession_Options) String() string {
	str, _ := text.Marshal(0xe9ff06beec4e73d6, s.Struct)
	return str
}

func (s WebSession_Options) DavClass1() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_Options) SetDavClass1(v bool) {
	s.Struct.SetBit(0, v)
}

func (s WebSession_Options) DavClass2() bool {
	return s.Struct.Bit(1)
}

func (s WebSession_Options) SetDavClass2(v bool) {
	s.Struct.SetBit(1, v)
}

func (s WebSession_Options) DavClass3() bool {
	return s.Struct.Bit(2)
}

func (s WebSession_Options) SetDavClass3(v bool) {
	s.Struct.SetBit(2, v)
}

func (s WebSession_Options) DavExtensions() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s WebSession_Options) HasDavExtensions() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_Options) SetDavExtensions(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewDavExtensions sets the davExtensions field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s WebSession_Options) NewDavExtensions(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// WebSession_Options_List is a list of WebSession_Options.
type WebSession_Options_List struct{ capnp.List }

// NewWebSession_Options creates a new list of WebSession_Options.
func NewWebSession_Options_List(s *capnp.Segment, sz int32) (WebSession_Options_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return WebSession_Options_List{l}, err
}

func (s WebSession_Options_List) At(i int) WebSession_Options {
	return WebSession_Options{s.List.Struct(i)}
}

func (s WebSession_Options_List) Set(i int, v WebSession_Options) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_Options_List) String() string {
	str, _ := text.MarshalList(0xe9ff06beec4e73d6, s.List)
	return str
}

// WebSession_Options_Future is a wrapper for a WebSession_Options promised by a client call.
type WebSession_Options_Future struct{ *capnp.Future }

func (p WebSession_Options_Future) Struct() (WebSession_Options, error) {
	s, err := p.Future.Struct()
	return WebSession_Options{s}, err
}

type WebSession_PropfindDepth uint16

// WebSession_PropfindDepth_TypeID is the unique identifier for the type WebSession_PropfindDepth.
const WebSession_PropfindDepth_TypeID = 0xb39cc44599b3a41b

// Values of WebSession_PropfindDepth.
const (
	WebSession_PropfindDepth_infinity WebSession_PropfindDepth = 0
	WebSession_PropfindDepth_zero     WebSession_PropfindDepth = 1
	WebSession_PropfindDepth_one      WebSession_PropfindDepth = 2
)

// String returns the enum's constant name.
func (c WebSession_PropfindDepth) String() string {
	switch c {
	case WebSession_PropfindDepth_infinity:
		return "infinity"
	case WebSession_PropfindDepth_zero:
		return "zero"
	case WebSession_PropfindDepth_one:
		return "one"

	default:
		return ""
	}
}

// WebSession_PropfindDepthFromString returns the enum value with a name,
// or the zero value if there's no such value.
func WebSession_PropfindDepthFromString(c string) WebSession_PropfindDepth {
	switch c {
	case "infinity":
		return WebSession_PropfindDepth_infinity
	case "zero":
		return WebSession_PropfindDepth_zero
	case "one":
		return WebSession_PropfindDepth_one

	default:
		return 0
	}
}

type WebSession_PropfindDepth_List struct{ capnp.List }

func NewWebSession_PropfindDepth_List(s *capnp.Segment, sz int32) (WebSession_PropfindDepth_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return WebSession_PropfindDepth_List{l.List}, err
}

func (l WebSession_PropfindDepth_List) At(i int) WebSession_PropfindDepth {
	ul := capnp.UInt16List{List: l.List}
	return WebSession_PropfindDepth(ul.At(i))
}

func (l WebSession_PropfindDepth_List) Set(i int, v WebSession_PropfindDepth) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type WebSession_get_Params struct{ capnp.Struct }

// WebSession_get_Params_TypeID is the unique identifier for the type WebSession_get_Params.
const WebSession_get_Params_TypeID = 0xcd94acddf4778328

func NewWebSession_get_Params(s *capnp.Segment) (WebSession_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return WebSession_get_Params{st}, err
}

func NewRootWebSession_get_Params(s *capnp.Segment) (WebSession_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return WebSession_get_Params{st}, err
}

func ReadRootWebSession_get_Params(msg *capnp.Message) (WebSession_get_Params, error) {
	root, err := msg.Root()
	return WebSession_get_Params{root.Struct()}, err
}

func (s WebSession_get_Params) String() string {
	str, _ := text.Marshal(0xcd94acddf4778328, s.Struct)
	return str
}

func (s WebSession_get_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_get_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_get_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_get_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_get_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_get_Params) HasContext() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_get_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_get_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_get_Params) IgnoreBody() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_get_Params) SetIgnoreBody(v bool) {
	s.Struct.SetBit(0, v)
}

// WebSession_get_Params_List is a list of WebSession_get_Params.
type WebSession_get_Params_List struct{ capnp.List }

// NewWebSession_get_Params creates a new list of WebSession_get_Params.
func NewWebSession_get_Params_List(s *capnp.Segment, sz int32) (WebSession_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return WebSession_get_Params_List{l}, err
}

func (s WebSession_get_Params_List) At(i int) WebSession_get_Params {
	return WebSession_get_Params{s.List.Struct(i)}
}

func (s WebSession_get_Params_List) Set(i int, v WebSession_get_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_get_Params_List) String() string {
	str, _ := text.MarshalList(0xcd94acddf4778328, s.List)
	return str
}

// WebSession_get_Params_Future is a wrapper for a WebSession_get_Params promised by a client call.
type WebSession_get_Params_Future struct{ *capnp.Future }

func (p WebSession_get_Params_Future) Struct() (WebSession_get_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_get_Params{s}, err
}

func (p WebSession_get_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(1, nil)}
}

type WebSession_post_Params struct{ capnp.Struct }

// WebSession_post_Params_TypeID is the unique identifier for the type WebSession_post_Params.
const WebSession_post_Params_TypeID = 0xaa6ef20a62c1cafd

func NewWebSession_post_Params(s *capnp.Segment) (WebSession_post_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_post_Params{st}, err
}

func NewRootWebSession_post_Params(s *capnp.Segment) (WebSession_post_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_post_Params{st}, err
}

func ReadRootWebSession_post_Params(msg *capnp.Message) (WebSession_post_Params, error) {
	root, err := msg.Root()
	return WebSession_post_Params{root.Struct()}, err
}

func (s WebSession_post_Params) String() string {
	str, _ := text.Marshal(0xaa6ef20a62c1cafd, s.Struct)
	return str
}

func (s WebSession_post_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_post_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_post_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_post_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_post_Params) Content() (WebSession_PostContent, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_PostContent{Struct: p.Struct()}, err
}

func (s WebSession_post_Params) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_post_Params) SetContent(v WebSession_PostContent) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContent sets the content field to a newly
// allocated WebSession_PostContent struct, preferring placement in s's segment.
func (s WebSession_post_Params) NewContent() (WebSession_PostContent, error) {
	ss, err := NewWebSession_PostContent(s.Struct.Segment())
	if err != nil {
		return WebSession_PostContent{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_post_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_post_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_post_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_post_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_post_Params_List is a list of WebSession_post_Params.
type WebSession_post_Params_List struct{ capnp.List }

// NewWebSession_post_Params creates a new list of WebSession_post_Params.
func NewWebSession_post_Params_List(s *capnp.Segment, sz int32) (WebSession_post_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_post_Params_List{l}, err
}

func (s WebSession_post_Params_List) At(i int) WebSession_post_Params {
	return WebSession_post_Params{s.List.Struct(i)}
}

func (s WebSession_post_Params_List) Set(i int, v WebSession_post_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_post_Params_List) String() string {
	str, _ := text.MarshalList(0xaa6ef20a62c1cafd, s.List)
	return str
}

// WebSession_post_Params_Future is a wrapper for a WebSession_post_Params promised by a client call.
type WebSession_post_Params_Future struct{ *capnp.Future }

func (p WebSession_post_Params_Future) Struct() (WebSession_post_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_post_Params{s}, err
}

func (p WebSession_post_Params_Future) Content() WebSession_PostContent_Future {
	return WebSession_PostContent_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_post_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_openWebSocket_Params struct{ capnp.Struct }

// WebSession_openWebSocket_Params_TypeID is the unique identifier for the type WebSession_openWebSocket_Params.
const WebSession_openWebSocket_Params_TypeID = 0xc7c9c9b19d935e79

func NewWebSession_openWebSocket_Params(s *capnp.Segment) (WebSession_openWebSocket_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_openWebSocket_Params{st}, err
}

func NewRootWebSession_openWebSocket_Params(s *capnp.Segment) (WebSession_openWebSocket_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_openWebSocket_Params{st}, err
}

func ReadRootWebSession_openWebSocket_Params(msg *capnp.Message) (WebSession_openWebSocket_Params, error) {
	root, err := msg.Root()
	return WebSession_openWebSocket_Params{root.Struct()}, err
}

func (s WebSession_openWebSocket_Params) String() string {
	str, _ := text.Marshal(0xc7c9c9b19d935e79, s.Struct)
	return str
}

func (s WebSession_openWebSocket_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_openWebSocket_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_openWebSocket_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_openWebSocket_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_openWebSocket_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_openWebSocket_Params) HasContext() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_openWebSocket_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_openWebSocket_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_openWebSocket_Params) Protocol() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s WebSession_openWebSocket_Params) HasProtocol() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_openWebSocket_Params) SetProtocol(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewProtocol sets the protocol field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s WebSession_openWebSocket_Params) NewProtocol(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s WebSession_openWebSocket_Params) ClientStream() WebSession_WebSocketStream {
	p, _ := s.Struct.Ptr(3)
	return WebSession_WebSocketStream{Client: p.Interface().Client()}
}

func (s WebSession_openWebSocket_Params) HasClientStream() bool {
	return s.Struct.HasPtr(3)
}

func (s WebSession_openWebSocket_Params) SetClientStream(v WebSession_WebSocketStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(3, in.ToPtr())
}

// WebSession_openWebSocket_Params_List is a list of WebSession_openWebSocket_Params.
type WebSession_openWebSocket_Params_List struct{ capnp.List }

// NewWebSession_openWebSocket_Params creates a new list of WebSession_openWebSocket_Params.
func NewWebSession_openWebSocket_Params_List(s *capnp.Segment, sz int32) (WebSession_openWebSocket_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return WebSession_openWebSocket_Params_List{l}, err
}

func (s WebSession_openWebSocket_Params_List) At(i int) WebSession_openWebSocket_Params {
	return WebSession_openWebSocket_Params{s.List.Struct(i)}
}

func (s WebSession_openWebSocket_Params_List) Set(i int, v WebSession_openWebSocket_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_openWebSocket_Params_List) String() string {
	str, _ := text.MarshalList(0xc7c9c9b19d935e79, s.List)
	return str
}

// WebSession_openWebSocket_Params_Future is a wrapper for a WebSession_openWebSocket_Params promised by a client call.
type WebSession_openWebSocket_Params_Future struct{ *capnp.Future }

func (p WebSession_openWebSocket_Params_Future) Struct() (WebSession_openWebSocket_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_openWebSocket_Params{s}, err
}

func (p WebSession_openWebSocket_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_openWebSocket_Params_Future) ClientStream() WebSession_WebSocketStream {
	return WebSession_WebSocketStream{Client: p.Future.Field(3, nil).Client()}
}

type WebSession_openWebSocket_Results struct{ capnp.Struct }

// WebSession_openWebSocket_Results_TypeID is the unique identifier for the type WebSession_openWebSocket_Results.
const WebSession_openWebSocket_Results_TypeID = 0xcc561276d31b392b

func NewWebSession_openWebSocket_Results(s *capnp.Segment) (WebSession_openWebSocket_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_openWebSocket_Results{st}, err
}

func NewRootWebSession_openWebSocket_Results(s *capnp.Segment) (WebSession_openWebSocket_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_openWebSocket_Results{st}, err
}

func ReadRootWebSession_openWebSocket_Results(msg *capnp.Message) (WebSession_openWebSocket_Results, error) {
	root, err := msg.Root()
	return WebSession_openWebSocket_Results{root.Struct()}, err
}

func (s WebSession_openWebSocket_Results) String() string {
	str, _ := text.Marshal(0xcc561276d31b392b, s.Struct)
	return str
}

func (s WebSession_openWebSocket_Results) Protocol() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s WebSession_openWebSocket_Results) HasProtocol() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_openWebSocket_Results) SetProtocol(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewProtocol sets the protocol field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s WebSession_openWebSocket_Results) NewProtocol(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s WebSession_openWebSocket_Results) ServerStream() WebSession_WebSocketStream {
	p, _ := s.Struct.Ptr(1)
	return WebSession_WebSocketStream{Client: p.Interface().Client()}
}

func (s WebSession_openWebSocket_Results) HasServerStream() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_openWebSocket_Results) SetServerStream(v WebSession_WebSocketStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// WebSession_openWebSocket_Results_List is a list of WebSession_openWebSocket_Results.
type WebSession_openWebSocket_Results_List struct{ capnp.List }

// NewWebSession_openWebSocket_Results creates a new list of WebSession_openWebSocket_Results.
func NewWebSession_openWebSocket_Results_List(s *capnp.Segment, sz int32) (WebSession_openWebSocket_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return WebSession_openWebSocket_Results_List{l}, err
}

func (s WebSession_openWebSocket_Results_List) At(i int) WebSession_openWebSocket_Results {
	return WebSession_openWebSocket_Results{s.List.Struct(i)}
}

func (s WebSession_openWebSocket_Results_List) Set(i int, v WebSession_openWebSocket_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_openWebSocket_Results_List) String() string {
	str, _ := text.MarshalList(0xcc561276d31b392b, s.List)
	return str
}

// WebSession_openWebSocket_Results_Future is a wrapper for a WebSession_openWebSocket_Results promised by a client call.
type WebSession_openWebSocket_Results_Future struct{ *capnp.Future }

func (p WebSession_openWebSocket_Results_Future) Struct() (WebSession_openWebSocket_Results, error) {
	s, err := p.Future.Struct()
	return WebSession_openWebSocket_Results{s}, err
}

func (p WebSession_openWebSocket_Results_Future) ServerStream() WebSession_WebSocketStream {
	return WebSession_WebSocketStream{Client: p.Future.Field(1, nil).Client()}
}

type WebSession_put_Params struct{ capnp.Struct }

// WebSession_put_Params_TypeID is the unique identifier for the type WebSession_put_Params.
const WebSession_put_Params_TypeID = 0xf1c587295608596e

func NewWebSession_put_Params(s *capnp.Segment) (WebSession_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_put_Params{st}, err
}

func NewRootWebSession_put_Params(s *capnp.Segment) (WebSession_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_put_Params{st}, err
}

func ReadRootWebSession_put_Params(msg *capnp.Message) (WebSession_put_Params, error) {
	root, err := msg.Root()
	return WebSession_put_Params{root.Struct()}, err
}

func (s WebSession_put_Params) String() string {
	str, _ := text.Marshal(0xf1c587295608596e, s.Struct)
	return str
}

func (s WebSession_put_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_put_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_put_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_put_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_put_Params) Content() (WebSession_PutContent, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_PutContent{Struct: p.Struct()}, err
}

func (s WebSession_put_Params) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_put_Params) SetContent(v WebSession_PutContent) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContent sets the content field to a newly
// allocated WebSession_PutContent struct, preferring placement in s's segment.
func (s WebSession_put_Params) NewContent() (WebSession_PutContent, error) {
	ss, err := NewWebSession_PutContent(s.Struct.Segment())
	if err != nil {
		return WebSession_PutContent{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_put_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_put_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_put_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_put_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_put_Params_List is a list of WebSession_put_Params.
type WebSession_put_Params_List struct{ capnp.List }

// NewWebSession_put_Params creates a new list of WebSession_put_Params.
func NewWebSession_put_Params_List(s *capnp.Segment, sz int32) (WebSession_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_put_Params_List{l}, err
}

func (s WebSession_put_Params_List) At(i int) WebSession_put_Params {
	return WebSession_put_Params{s.List.Struct(i)}
}

func (s WebSession_put_Params_List) Set(i int, v WebSession_put_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_put_Params_List) String() string {
	str, _ := text.MarshalList(0xf1c587295608596e, s.List)
	return str
}

// WebSession_put_Params_Future is a wrapper for a WebSession_put_Params promised by a client call.
type WebSession_put_Params_Future struct{ *capnp.Future }

func (p WebSession_put_Params_Future) Struct() (WebSession_put_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_put_Params{s}, err
}

func (p WebSession_put_Params_Future) Content() WebSession_PutContent_Future {
	return WebSession_PutContent_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_put_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_delete_Params struct{ capnp.Struct }

// WebSession_delete_Params_TypeID is the unique identifier for the type WebSession_delete_Params.
const WebSession_delete_Params_TypeID = 0xeba76bffb27b1975

func NewWebSession_delete_Params(s *capnp.Segment) (WebSession_delete_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_delete_Params{st}, err
}

func NewRootWebSession_delete_Params(s *capnp.Segment) (WebSession_delete_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_delete_Params{st}, err
}

func ReadRootWebSession_delete_Params(msg *capnp.Message) (WebSession_delete_Params, error) {
	root, err := msg.Root()
	return WebSession_delete_Params{root.Struct()}, err
}

func (s WebSession_delete_Params) String() string {
	str, _ := text.Marshal(0xeba76bffb27b1975, s.Struct)
	return str
}

func (s WebSession_delete_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_delete_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_delete_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_delete_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_delete_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_delete_Params) HasContext() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_delete_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_delete_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_delete_Params_List is a list of WebSession_delete_Params.
type WebSession_delete_Params_List struct{ capnp.List }

// NewWebSession_delete_Params creates a new list of WebSession_delete_Params.
func NewWebSession_delete_Params_List(s *capnp.Segment, sz int32) (WebSession_delete_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return WebSession_delete_Params_List{l}, err
}

func (s WebSession_delete_Params_List) At(i int) WebSession_delete_Params {
	return WebSession_delete_Params{s.List.Struct(i)}
}

func (s WebSession_delete_Params_List) Set(i int, v WebSession_delete_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_delete_Params_List) String() string {
	str, _ := text.MarshalList(0xeba76bffb27b1975, s.List)
	return str
}

// WebSession_delete_Params_Future is a wrapper for a WebSession_delete_Params promised by a client call.
type WebSession_delete_Params_Future struct{ *capnp.Future }

func (p WebSession_delete_Params_Future) Struct() (WebSession_delete_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_delete_Params{s}, err
}

func (p WebSession_delete_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(1, nil)}
}

type WebSession_postStreaming_Params struct{ capnp.Struct }

// WebSession_postStreaming_Params_TypeID is the unique identifier for the type WebSession_postStreaming_Params.
const WebSession_postStreaming_Params_TypeID = 0xd26a7affce43b1c0

func NewWebSession_postStreaming_Params(s *capnp.Segment) (WebSession_postStreaming_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_postStreaming_Params{st}, err
}

func NewRootWebSession_postStreaming_Params(s *capnp.Segment) (WebSession_postStreaming_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_postStreaming_Params{st}, err
}

func ReadRootWebSession_postStreaming_Params(msg *capnp.Message) (WebSession_postStreaming_Params, error) {
	root, err := msg.Root()
	return WebSession_postStreaming_Params{root.Struct()}, err
}

func (s WebSession_postStreaming_Params) String() string {
	str, _ := text.Marshal(0xd26a7affce43b1c0, s.Struct)
	return str
}

func (s WebSession_postStreaming_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_postStreaming_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_postStreaming_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_postStreaming_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_postStreaming_Params) MimeType() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_postStreaming_Params) HasMimeType() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_postStreaming_Params) MimeTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_postStreaming_Params) SetMimeType(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_postStreaming_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_postStreaming_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_postStreaming_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_postStreaming_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_postStreaming_Params) Encoding() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s WebSession_postStreaming_Params) HasEncoding() bool {
	return s.Struct.HasPtr(3)
}

func (s WebSession_postStreaming_Params) EncodingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s WebSession_postStreaming_Params) SetEncoding(v string) error {
	return s.Struct.SetText(3, v)
}

// WebSession_postStreaming_Params_List is a list of WebSession_postStreaming_Params.
type WebSession_postStreaming_Params_List struct{ capnp.List }

// NewWebSession_postStreaming_Params creates a new list of WebSession_postStreaming_Params.
func NewWebSession_postStreaming_Params_List(s *capnp.Segment, sz int32) (WebSession_postStreaming_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return WebSession_postStreaming_Params_List{l}, err
}

func (s WebSession_postStreaming_Params_List) At(i int) WebSession_postStreaming_Params {
	return WebSession_postStreaming_Params{s.List.Struct(i)}
}

func (s WebSession_postStreaming_Params_List) Set(i int, v WebSession_postStreaming_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_postStreaming_Params_List) String() string {
	str, _ := text.MarshalList(0xd26a7affce43b1c0, s.List)
	return str
}

// WebSession_postStreaming_Params_Future is a wrapper for a WebSession_postStreaming_Params promised by a client call.
type WebSession_postStreaming_Params_Future struct{ *capnp.Future }

func (p WebSession_postStreaming_Params_Future) Struct() (WebSession_postStreaming_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_postStreaming_Params{s}, err
}

func (p WebSession_postStreaming_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_postStreaming_Results struct{ capnp.Struct }

// WebSession_postStreaming_Results_TypeID is the unique identifier for the type WebSession_postStreaming_Results.
const WebSession_postStreaming_Results_TypeID = 0xbf0e0653dc266205

func NewWebSession_postStreaming_Results(s *capnp.Segment) (WebSession_postStreaming_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_postStreaming_Results{st}, err
}

func NewRootWebSession_postStreaming_Results(s *capnp.Segment) (WebSession_postStreaming_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_postStreaming_Results{st}, err
}

func ReadRootWebSession_postStreaming_Results(msg *capnp.Message) (WebSession_postStreaming_Results, error) {
	root, err := msg.Root()
	return WebSession_postStreaming_Results{root.Struct()}, err
}

func (s WebSession_postStreaming_Results) String() string {
	str, _ := text.Marshal(0xbf0e0653dc266205, s.Struct)
	return str
}

func (s WebSession_postStreaming_Results) Stream() WebSession_RequestStream {
	p, _ := s.Struct.Ptr(0)
	return WebSession_RequestStream{Client: p.Interface().Client()}
}

func (s WebSession_postStreaming_Results) HasStream() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_postStreaming_Results) SetStream(v WebSession_RequestStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// WebSession_postStreaming_Results_List is a list of WebSession_postStreaming_Results.
type WebSession_postStreaming_Results_List struct{ capnp.List }

// NewWebSession_postStreaming_Results creates a new list of WebSession_postStreaming_Results.
func NewWebSession_postStreaming_Results_List(s *capnp.Segment, sz int32) (WebSession_postStreaming_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return WebSession_postStreaming_Results_List{l}, err
}

func (s WebSession_postStreaming_Results_List) At(i int) WebSession_postStreaming_Results {
	return WebSession_postStreaming_Results{s.List.Struct(i)}
}

func (s WebSession_postStreaming_Results_List) Set(i int, v WebSession_postStreaming_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_postStreaming_Results_List) String() string {
	str, _ := text.MarshalList(0xbf0e0653dc266205, s.List)
	return str
}

// WebSession_postStreaming_Results_Future is a wrapper for a WebSession_postStreaming_Results promised by a client call.
type WebSession_postStreaming_Results_Future struct{ *capnp.Future }

func (p WebSession_postStreaming_Results_Future) Struct() (WebSession_postStreaming_Results, error) {
	s, err := p.Future.Struct()
	return WebSession_postStreaming_Results{s}, err
}

func (p WebSession_postStreaming_Results_Future) Stream() WebSession_RequestStream {
	return WebSession_RequestStream{Client: p.Future.Field(0, nil).Client()}
}

type WebSession_putStreaming_Params struct{ capnp.Struct }

// WebSession_putStreaming_Params_TypeID is the unique identifier for the type WebSession_putStreaming_Params.
const WebSession_putStreaming_Params_TypeID = 0xa1ece076a7105939

func NewWebSession_putStreaming_Params(s *capnp.Segment) (WebSession_putStreaming_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_putStreaming_Params{st}, err
}

func NewRootWebSession_putStreaming_Params(s *capnp.Segment) (WebSession_putStreaming_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return WebSession_putStreaming_Params{st}, err
}

func ReadRootWebSession_putStreaming_Params(msg *capnp.Message) (WebSession_putStreaming_Params, error) {
	root, err := msg.Root()
	return WebSession_putStreaming_Params{root.Struct()}, err
}

func (s WebSession_putStreaming_Params) String() string {
	str, _ := text.Marshal(0xa1ece076a7105939, s.Struct)
	return str
}

func (s WebSession_putStreaming_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_putStreaming_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_putStreaming_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_putStreaming_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_putStreaming_Params) MimeType() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_putStreaming_Params) HasMimeType() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_putStreaming_Params) MimeTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_putStreaming_Params) SetMimeType(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_putStreaming_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_putStreaming_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_putStreaming_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_putStreaming_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_putStreaming_Params) Encoding() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s WebSession_putStreaming_Params) HasEncoding() bool {
	return s.Struct.HasPtr(3)
}

func (s WebSession_putStreaming_Params) EncodingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s WebSession_putStreaming_Params) SetEncoding(v string) error {
	return s.Struct.SetText(3, v)
}

// WebSession_putStreaming_Params_List is a list of WebSession_putStreaming_Params.
type WebSession_putStreaming_Params_List struct{ capnp.List }

// NewWebSession_putStreaming_Params creates a new list of WebSession_putStreaming_Params.
func NewWebSession_putStreaming_Params_List(s *capnp.Segment, sz int32) (WebSession_putStreaming_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return WebSession_putStreaming_Params_List{l}, err
}

func (s WebSession_putStreaming_Params_List) At(i int) WebSession_putStreaming_Params {
	return WebSession_putStreaming_Params{s.List.Struct(i)}
}

func (s WebSession_putStreaming_Params_List) Set(i int, v WebSession_putStreaming_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_putStreaming_Params_List) String() string {
	str, _ := text.MarshalList(0xa1ece076a7105939, s.List)
	return str
}

// WebSession_putStreaming_Params_Future is a wrapper for a WebSession_putStreaming_Params promised by a client call.
type WebSession_putStreaming_Params_Future struct{ *capnp.Future }

func (p WebSession_putStreaming_Params_Future) Struct() (WebSession_putStreaming_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_putStreaming_Params{s}, err
}

func (p WebSession_putStreaming_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_putStreaming_Results struct{ capnp.Struct }

// WebSession_putStreaming_Results_TypeID is the unique identifier for the type WebSession_putStreaming_Results.
const WebSession_putStreaming_Results_TypeID = 0xc60d14bf989d4454

func NewWebSession_putStreaming_Results(s *capnp.Segment) (WebSession_putStreaming_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_putStreaming_Results{st}, err
}

func NewRootWebSession_putStreaming_Results(s *capnp.Segment) (WebSession_putStreaming_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebSession_putStreaming_Results{st}, err
}

func ReadRootWebSession_putStreaming_Results(msg *capnp.Message) (WebSession_putStreaming_Results, error) {
	root, err := msg.Root()
	return WebSession_putStreaming_Results{root.Struct()}, err
}

func (s WebSession_putStreaming_Results) String() string {
	str, _ := text.Marshal(0xc60d14bf989d4454, s.Struct)
	return str
}

func (s WebSession_putStreaming_Results) Stream() WebSession_RequestStream {
	p, _ := s.Struct.Ptr(0)
	return WebSession_RequestStream{Client: p.Interface().Client()}
}

func (s WebSession_putStreaming_Results) HasStream() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_putStreaming_Results) SetStream(v WebSession_RequestStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// WebSession_putStreaming_Results_List is a list of WebSession_putStreaming_Results.
type WebSession_putStreaming_Results_List struct{ capnp.List }

// NewWebSession_putStreaming_Results creates a new list of WebSession_putStreaming_Results.
func NewWebSession_putStreaming_Results_List(s *capnp.Segment, sz int32) (WebSession_putStreaming_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return WebSession_putStreaming_Results_List{l}, err
}

func (s WebSession_putStreaming_Results_List) At(i int) WebSession_putStreaming_Results {
	return WebSession_putStreaming_Results{s.List.Struct(i)}
}

func (s WebSession_putStreaming_Results_List) Set(i int, v WebSession_putStreaming_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_putStreaming_Results_List) String() string {
	str, _ := text.MarshalList(0xc60d14bf989d4454, s.List)
	return str
}

// WebSession_putStreaming_Results_Future is a wrapper for a WebSession_putStreaming_Results promised by a client call.
type WebSession_putStreaming_Results_Future struct{ *capnp.Future }

func (p WebSession_putStreaming_Results_Future) Struct() (WebSession_putStreaming_Results, error) {
	s, err := p.Future.Struct()
	return WebSession_putStreaming_Results{s}, err
}

func (p WebSession_putStreaming_Results_Future) Stream() WebSession_RequestStream {
	return WebSession_RequestStream{Client: p.Future.Field(0, nil).Client()}
}

type WebSession_propfind_Params struct{ capnp.Struct }

// WebSession_propfind_Params_TypeID is the unique identifier for the type WebSession_propfind_Params.
const WebSession_propfind_Params_TypeID = 0xca2d58de88f0b32e

func NewWebSession_propfind_Params(s *capnp.Segment) (WebSession_propfind_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_propfind_Params{st}, err
}

func NewRootWebSession_propfind_Params(s *capnp.Segment) (WebSession_propfind_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_propfind_Params{st}, err
}

func ReadRootWebSession_propfind_Params(msg *capnp.Message) (WebSession_propfind_Params, error) {
	root, err := msg.Root()
	return WebSession_propfind_Params{root.Struct()}, err
}

func (s WebSession_propfind_Params) String() string {
	str, _ := text.Marshal(0xca2d58de88f0b32e, s.Struct)
	return str
}

func (s WebSession_propfind_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_propfind_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_propfind_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_propfind_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_propfind_Params) XmlContent() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_propfind_Params) HasXmlContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_propfind_Params) XmlContentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_propfind_Params) SetXmlContent(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_propfind_Params) Depth() WebSession_PropfindDepth {
	return WebSession_PropfindDepth(s.Struct.Uint16(0))
}

func (s WebSession_propfind_Params) SetDepth(v WebSession_PropfindDepth) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s WebSession_propfind_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_propfind_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_propfind_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_propfind_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_propfind_Params_List is a list of WebSession_propfind_Params.
type WebSession_propfind_Params_List struct{ capnp.List }

// NewWebSession_propfind_Params creates a new list of WebSession_propfind_Params.
func NewWebSession_propfind_Params_List(s *capnp.Segment, sz int32) (WebSession_propfind_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return WebSession_propfind_Params_List{l}, err
}

func (s WebSession_propfind_Params_List) At(i int) WebSession_propfind_Params {
	return WebSession_propfind_Params{s.List.Struct(i)}
}

func (s WebSession_propfind_Params_List) Set(i int, v WebSession_propfind_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_propfind_Params_List) String() string {
	str, _ := text.MarshalList(0xca2d58de88f0b32e, s.List)
	return str
}

// WebSession_propfind_Params_Future is a wrapper for a WebSession_propfind_Params promised by a client call.
type WebSession_propfind_Params_Future struct{ *capnp.Future }

func (p WebSession_propfind_Params_Future) Struct() (WebSession_propfind_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_propfind_Params{s}, err
}

func (p WebSession_propfind_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_proppatch_Params struct{ capnp.Struct }

// WebSession_proppatch_Params_TypeID is the unique identifier for the type WebSession_proppatch_Params.
const WebSession_proppatch_Params_TypeID = 0x9e582e7e054088ae

func NewWebSession_proppatch_Params(s *capnp.Segment) (WebSession_proppatch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_proppatch_Params{st}, err
}

func NewRootWebSession_proppatch_Params(s *capnp.Segment) (WebSession_proppatch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_proppatch_Params{st}, err
}

func ReadRootWebSession_proppatch_Params(msg *capnp.Message) (WebSession_proppatch_Params, error) {
	root, err := msg.Root()
	return WebSession_proppatch_Params{root.Struct()}, err
}

func (s WebSession_proppatch_Params) String() string {
	str, _ := text.Marshal(0x9e582e7e054088ae, s.Struct)
	return str
}

func (s WebSession_proppatch_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_proppatch_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_proppatch_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_proppatch_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_proppatch_Params) XmlContent() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_proppatch_Params) HasXmlContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_proppatch_Params) XmlContentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_proppatch_Params) SetXmlContent(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_proppatch_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_proppatch_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_proppatch_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_proppatch_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_proppatch_Params_List is a list of WebSession_proppatch_Params.
type WebSession_proppatch_Params_List struct{ capnp.List }

// NewWebSession_proppatch_Params creates a new list of WebSession_proppatch_Params.
func NewWebSession_proppatch_Params_List(s *capnp.Segment, sz int32) (WebSession_proppatch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_proppatch_Params_List{l}, err
}

func (s WebSession_proppatch_Params_List) At(i int) WebSession_proppatch_Params {
	return WebSession_proppatch_Params{s.List.Struct(i)}
}

func (s WebSession_proppatch_Params_List) Set(i int, v WebSession_proppatch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_proppatch_Params_List) String() string {
	str, _ := text.MarshalList(0x9e582e7e054088ae, s.List)
	return str
}

// WebSession_proppatch_Params_Future is a wrapper for a WebSession_proppatch_Params promised by a client call.
type WebSession_proppatch_Params_Future struct{ *capnp.Future }

func (p WebSession_proppatch_Params_Future) Struct() (WebSession_proppatch_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_proppatch_Params{s}, err
}

func (p WebSession_proppatch_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_mkcol_Params struct{ capnp.Struct }

// WebSession_mkcol_Params_TypeID is the unique identifier for the type WebSession_mkcol_Params.
const WebSession_mkcol_Params_TypeID = 0xf64da2416445f8b6

func NewWebSession_mkcol_Params(s *capnp.Segment) (WebSession_mkcol_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_mkcol_Params{st}, err
}

func NewRootWebSession_mkcol_Params(s *capnp.Segment) (WebSession_mkcol_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_mkcol_Params{st}, err
}

func ReadRootWebSession_mkcol_Params(msg *capnp.Message) (WebSession_mkcol_Params, error) {
	root, err := msg.Root()
	return WebSession_mkcol_Params{root.Struct()}, err
}

func (s WebSession_mkcol_Params) String() string {
	str, _ := text.Marshal(0xf64da2416445f8b6, s.Struct)
	return str
}

func (s WebSession_mkcol_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_mkcol_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_mkcol_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_mkcol_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_mkcol_Params) Content() (WebSession_PostContent, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_PostContent{Struct: p.Struct()}, err
}

func (s WebSession_mkcol_Params) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_mkcol_Params) SetContent(v WebSession_PostContent) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContent sets the content field to a newly
// allocated WebSession_PostContent struct, preferring placement in s's segment.
func (s WebSession_mkcol_Params) NewContent() (WebSession_PostContent, error) {
	ss, err := NewWebSession_PostContent(s.Struct.Segment())
	if err != nil {
		return WebSession_PostContent{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_mkcol_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_mkcol_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_mkcol_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_mkcol_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_mkcol_Params_List is a list of WebSession_mkcol_Params.
type WebSession_mkcol_Params_List struct{ capnp.List }

// NewWebSession_mkcol_Params creates a new list of WebSession_mkcol_Params.
func NewWebSession_mkcol_Params_List(s *capnp.Segment, sz int32) (WebSession_mkcol_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_mkcol_Params_List{l}, err
}

func (s WebSession_mkcol_Params_List) At(i int) WebSession_mkcol_Params {
	return WebSession_mkcol_Params{s.List.Struct(i)}
}

func (s WebSession_mkcol_Params_List) Set(i int, v WebSession_mkcol_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_mkcol_Params_List) String() string {
	str, _ := text.MarshalList(0xf64da2416445f8b6, s.List)
	return str
}

// WebSession_mkcol_Params_Future is a wrapper for a WebSession_mkcol_Params promised by a client call.
type WebSession_mkcol_Params_Future struct{ *capnp.Future }

func (p WebSession_mkcol_Params_Future) Struct() (WebSession_mkcol_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_mkcol_Params{s}, err
}

func (p WebSession_mkcol_Params_Future) Content() WebSession_PostContent_Future {
	return WebSession_PostContent_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_mkcol_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_copy_Params struct{ capnp.Struct }

// WebSession_copy_Params_TypeID is the unique identifier for the type WebSession_copy_Params.
const WebSession_copy_Params_TypeID = 0x8139673a82bfe07d

func NewWebSession_copy_Params(s *capnp.Segment) (WebSession_copy_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_copy_Params{st}, err
}

func NewRootWebSession_copy_Params(s *capnp.Segment) (WebSession_copy_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_copy_Params{st}, err
}

func ReadRootWebSession_copy_Params(msg *capnp.Message) (WebSession_copy_Params, error) {
	root, err := msg.Root()
	return WebSession_copy_Params{root.Struct()}, err
}

func (s WebSession_copy_Params) String() string {
	str, _ := text.Marshal(0x8139673a82bfe07d, s.Struct)
	return str
}

func (s WebSession_copy_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_copy_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_copy_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_copy_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_copy_Params) Destination() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_copy_Params) HasDestination() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_copy_Params) DestinationBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_copy_Params) SetDestination(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_copy_Params) NoOverwrite() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_copy_Params) SetNoOverwrite(v bool) {
	s.Struct.SetBit(0, v)
}

func (s WebSession_copy_Params) Shallow() bool {
	return s.Struct.Bit(1)
}

func (s WebSession_copy_Params) SetShallow(v bool) {
	s.Struct.SetBit(1, v)
}

func (s WebSession_copy_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_copy_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_copy_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_copy_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_copy_Params_List is a list of WebSession_copy_Params.
type WebSession_copy_Params_List struct{ capnp.List }

// NewWebSession_copy_Params creates a new list of WebSession_copy_Params.
func NewWebSession_copy_Params_List(s *capnp.Segment, sz int32) (WebSession_copy_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return WebSession_copy_Params_List{l}, err
}

func (s WebSession_copy_Params_List) At(i int) WebSession_copy_Params {
	return WebSession_copy_Params{s.List.Struct(i)}
}

func (s WebSession_copy_Params_List) Set(i int, v WebSession_copy_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_copy_Params_List) String() string {
	str, _ := text.MarshalList(0x8139673a82bfe07d, s.List)
	return str
}

// WebSession_copy_Params_Future is a wrapper for a WebSession_copy_Params promised by a client call.
type WebSession_copy_Params_Future struct{ *capnp.Future }

func (p WebSession_copy_Params_Future) Struct() (WebSession_copy_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_copy_Params{s}, err
}

func (p WebSession_copy_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_move_Params struct{ capnp.Struct }

// WebSession_move_Params_TypeID is the unique identifier for the type WebSession_move_Params.
const WebSession_move_Params_TypeID = 0x81f5066b5576a609

func NewWebSession_move_Params(s *capnp.Segment) (WebSession_move_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_move_Params{st}, err
}

func NewRootWebSession_move_Params(s *capnp.Segment) (WebSession_move_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_move_Params{st}, err
}

func ReadRootWebSession_move_Params(msg *capnp.Message) (WebSession_move_Params, error) {
	root, err := msg.Root()
	return WebSession_move_Params{root.Struct()}, err
}

func (s WebSession_move_Params) String() string {
	str, _ := text.Marshal(0x81f5066b5576a609, s.Struct)
	return str
}

func (s WebSession_move_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_move_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_move_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_move_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_move_Params) Destination() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_move_Params) HasDestination() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_move_Params) DestinationBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_move_Params) SetDestination(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_move_Params) NoOverwrite() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_move_Params) SetNoOverwrite(v bool) {
	s.Struct.SetBit(0, v)
}

func (s WebSession_move_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_move_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_move_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_move_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_move_Params_List is a list of WebSession_move_Params.
type WebSession_move_Params_List struct{ capnp.List }

// NewWebSession_move_Params creates a new list of WebSession_move_Params.
func NewWebSession_move_Params_List(s *capnp.Segment, sz int32) (WebSession_move_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return WebSession_move_Params_List{l}, err
}

func (s WebSession_move_Params_List) At(i int) WebSession_move_Params {
	return WebSession_move_Params{s.List.Struct(i)}
}

func (s WebSession_move_Params_List) Set(i int, v WebSession_move_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_move_Params_List) String() string {
	str, _ := text.MarshalList(0x81f5066b5576a609, s.List)
	return str
}

// WebSession_move_Params_Future is a wrapper for a WebSession_move_Params promised by a client call.
type WebSession_move_Params_Future struct{ *capnp.Future }

func (p WebSession_move_Params_Future) Struct() (WebSession_move_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_move_Params{s}, err
}

func (p WebSession_move_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_lock_Params struct{ capnp.Struct }

// WebSession_lock_Params_TypeID is the unique identifier for the type WebSession_lock_Params.
const WebSession_lock_Params_TypeID = 0x9398280f1359570a

func NewWebSession_lock_Params(s *capnp.Segment) (WebSession_lock_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_lock_Params{st}, err
}

func NewRootWebSession_lock_Params(s *capnp.Segment) (WebSession_lock_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return WebSession_lock_Params{st}, err
}

func ReadRootWebSession_lock_Params(msg *capnp.Message) (WebSession_lock_Params, error) {
	root, err := msg.Root()
	return WebSession_lock_Params{root.Struct()}, err
}

func (s WebSession_lock_Params) String() string {
	str, _ := text.Marshal(0x9398280f1359570a, s.Struct)
	return str
}

func (s WebSession_lock_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_lock_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_lock_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_lock_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_lock_Params) XmlContent() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_lock_Params) HasXmlContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_lock_Params) XmlContentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_lock_Params) SetXmlContent(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_lock_Params) Shallow() bool {
	return s.Struct.Bit(0)
}

func (s WebSession_lock_Params) SetShallow(v bool) {
	s.Struct.SetBit(0, v)
}

func (s WebSession_lock_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_lock_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_lock_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_lock_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_lock_Params_List is a list of WebSession_lock_Params.
type WebSession_lock_Params_List struct{ capnp.List }

// NewWebSession_lock_Params creates a new list of WebSession_lock_Params.
func NewWebSession_lock_Params_List(s *capnp.Segment, sz int32) (WebSession_lock_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return WebSession_lock_Params_List{l}, err
}

func (s WebSession_lock_Params_List) At(i int) WebSession_lock_Params {
	return WebSession_lock_Params{s.List.Struct(i)}
}

func (s WebSession_lock_Params_List) Set(i int, v WebSession_lock_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_lock_Params_List) String() string {
	str, _ := text.MarshalList(0x9398280f1359570a, s.List)
	return str
}

// WebSession_lock_Params_Future is a wrapper for a WebSession_lock_Params promised by a client call.
type WebSession_lock_Params_Future struct{ *capnp.Future }

func (p WebSession_lock_Params_Future) Struct() (WebSession_lock_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_lock_Params{s}, err
}

func (p WebSession_lock_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_unlock_Params struct{ capnp.Struct }

// WebSession_unlock_Params_TypeID is the unique identifier for the type WebSession_unlock_Params.
const WebSession_unlock_Params_TypeID = 0xd684c6a791b97dbc

func NewWebSession_unlock_Params(s *capnp.Segment) (WebSession_unlock_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_unlock_Params{st}, err
}

func NewRootWebSession_unlock_Params(s *capnp.Segment) (WebSession_unlock_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_unlock_Params{st}, err
}

func ReadRootWebSession_unlock_Params(msg *capnp.Message) (WebSession_unlock_Params, error) {
	root, err := msg.Root()
	return WebSession_unlock_Params{root.Struct()}, err
}

func (s WebSession_unlock_Params) String() string {
	str, _ := text.Marshal(0xd684c6a791b97dbc, s.Struct)
	return str
}

func (s WebSession_unlock_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_unlock_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_unlock_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_unlock_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_unlock_Params) LockToken() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_unlock_Params) HasLockToken() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_unlock_Params) LockTokenBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_unlock_Params) SetLockToken(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_unlock_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_unlock_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_unlock_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_unlock_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_unlock_Params_List is a list of WebSession_unlock_Params.
type WebSession_unlock_Params_List struct{ capnp.List }

// NewWebSession_unlock_Params creates a new list of WebSession_unlock_Params.
func NewWebSession_unlock_Params_List(s *capnp.Segment, sz int32) (WebSession_unlock_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_unlock_Params_List{l}, err
}

func (s WebSession_unlock_Params_List) At(i int) WebSession_unlock_Params {
	return WebSession_unlock_Params{s.List.Struct(i)}
}

func (s WebSession_unlock_Params_List) Set(i int, v WebSession_unlock_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_unlock_Params_List) String() string {
	str, _ := text.MarshalList(0xd684c6a791b97dbc, s.List)
	return str
}

// WebSession_unlock_Params_Future is a wrapper for a WebSession_unlock_Params promised by a client call.
type WebSession_unlock_Params_Future struct{ *capnp.Future }

func (p WebSession_unlock_Params_Future) Struct() (WebSession_unlock_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_unlock_Params{s}, err
}

func (p WebSession_unlock_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_acl_Params struct{ capnp.Struct }

// WebSession_acl_Params_TypeID is the unique identifier for the type WebSession_acl_Params.
const WebSession_acl_Params_TypeID = 0x9f79c33e20119e8d

func NewWebSession_acl_Params(s *capnp.Segment) (WebSession_acl_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_acl_Params{st}, err
}

func NewRootWebSession_acl_Params(s *capnp.Segment) (WebSession_acl_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_acl_Params{st}, err
}

func ReadRootWebSession_acl_Params(msg *capnp.Message) (WebSession_acl_Params, error) {
	root, err := msg.Root()
	return WebSession_acl_Params{root.Struct()}, err
}

func (s WebSession_acl_Params) String() string {
	str, _ := text.Marshal(0x9f79c33e20119e8d, s.Struct)
	return str
}

func (s WebSession_acl_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_acl_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_acl_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_acl_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_acl_Params) XmlContent() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WebSession_acl_Params) HasXmlContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_acl_Params) XmlContentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WebSession_acl_Params) SetXmlContent(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WebSession_acl_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_acl_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_acl_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_acl_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_acl_Params_List is a list of WebSession_acl_Params.
type WebSession_acl_Params_List struct{ capnp.List }

// NewWebSession_acl_Params creates a new list of WebSession_acl_Params.
func NewWebSession_acl_Params_List(s *capnp.Segment, sz int32) (WebSession_acl_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_acl_Params_List{l}, err
}

func (s WebSession_acl_Params_List) At(i int) WebSession_acl_Params {
	return WebSession_acl_Params{s.List.Struct(i)}
}

func (s WebSession_acl_Params_List) Set(i int, v WebSession_acl_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_acl_Params_List) String() string {
	str, _ := text.MarshalList(0x9f79c33e20119e8d, s.List)
	return str
}

// WebSession_acl_Params_Future is a wrapper for a WebSession_acl_Params promised by a client call.
type WebSession_acl_Params_Future struct{ *capnp.Future }

func (p WebSession_acl_Params_Future) Struct() (WebSession_acl_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_acl_Params{s}, err
}

func (p WebSession_acl_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_report_Params struct{ capnp.Struct }

// WebSession_report_Params_TypeID is the unique identifier for the type WebSession_report_Params.
const WebSession_report_Params_TypeID = 0xc0643ea68efc60ae

func NewWebSession_report_Params(s *capnp.Segment) (WebSession_report_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_report_Params{st}, err
}

func NewRootWebSession_report_Params(s *capnp.Segment) (WebSession_report_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_report_Params{st}, err
}

func ReadRootWebSession_report_Params(msg *capnp.Message) (WebSession_report_Params, error) {
	root, err := msg.Root()
	return WebSession_report_Params{root.Struct()}, err
}

func (s WebSession_report_Params) String() string {
	str, _ := text.Marshal(0xc0643ea68efc60ae, s.Struct)
	return str
}

func (s WebSession_report_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_report_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_report_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_report_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_report_Params) Content() (WebSession_PostContent, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_PostContent{Struct: p.Struct()}, err
}

func (s WebSession_report_Params) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_report_Params) SetContent(v WebSession_PostContent) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContent sets the content field to a newly
// allocated WebSession_PostContent struct, preferring placement in s's segment.
func (s WebSession_report_Params) NewContent() (WebSession_PostContent, error) {
	ss, err := NewWebSession_PostContent(s.Struct.Segment())
	if err != nil {
		return WebSession_PostContent{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_report_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_report_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_report_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_report_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_report_Params_List is a list of WebSession_report_Params.
type WebSession_report_Params_List struct{ capnp.List }

// NewWebSession_report_Params creates a new list of WebSession_report_Params.
func NewWebSession_report_Params_List(s *capnp.Segment, sz int32) (WebSession_report_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_report_Params_List{l}, err
}

func (s WebSession_report_Params_List) At(i int) WebSession_report_Params {
	return WebSession_report_Params{s.List.Struct(i)}
}

func (s WebSession_report_Params_List) Set(i int, v WebSession_report_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_report_Params_List) String() string {
	str, _ := text.MarshalList(0xc0643ea68efc60ae, s.List)
	return str
}

// WebSession_report_Params_Future is a wrapper for a WebSession_report_Params promised by a client call.
type WebSession_report_Params_Future struct{ *capnp.Future }

func (p WebSession_report_Params_Future) Struct() (WebSession_report_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_report_Params{s}, err
}

func (p WebSession_report_Params_Future) Content() WebSession_PostContent_Future {
	return WebSession_PostContent_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_report_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

type WebSession_options_Params struct{ capnp.Struct }

// WebSession_options_Params_TypeID is the unique identifier for the type WebSession_options_Params.
const WebSession_options_Params_TypeID = 0xd2e47e8eac54ea7e

func NewWebSession_options_Params(s *capnp.Segment) (WebSession_options_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_options_Params{st}, err
}

func NewRootWebSession_options_Params(s *capnp.Segment) (WebSession_options_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebSession_options_Params{st}, err
}

func ReadRootWebSession_options_Params(msg *capnp.Message) (WebSession_options_Params, error) {
	root, err := msg.Root()
	return WebSession_options_Params{root.Struct()}, err
}

func (s WebSession_options_Params) String() string {
	str, _ := text.Marshal(0xd2e47e8eac54ea7e, s.Struct)
	return str
}

func (s WebSession_options_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_options_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_options_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_options_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_options_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_options_Params) HasContext() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_options_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_options_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_options_Params_List is a list of WebSession_options_Params.
type WebSession_options_Params_List struct{ capnp.List }

// NewWebSession_options_Params creates a new list of WebSession_options_Params.
func NewWebSession_options_Params_List(s *capnp.Segment, sz int32) (WebSession_options_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return WebSession_options_Params_List{l}, err
}

func (s WebSession_options_Params_List) At(i int) WebSession_options_Params {
	return WebSession_options_Params{s.List.Struct(i)}
}

func (s WebSession_options_Params_List) Set(i int, v WebSession_options_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_options_Params_List) String() string {
	str, _ := text.MarshalList(0xd2e47e8eac54ea7e, s.List)
	return str
}

// WebSession_options_Params_Future is a wrapper for a WebSession_options_Params promised by a client call.
type WebSession_options_Params_Future struct{ *capnp.Future }

func (p WebSession_options_Params_Future) Struct() (WebSession_options_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_options_Params{s}, err
}

func (p WebSession_options_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(1, nil)}
}

type WebSession_patch_Params struct{ capnp.Struct }

// WebSession_patch_Params_TypeID is the unique identifier for the type WebSession_patch_Params.
const WebSession_patch_Params_TypeID = 0xadef95edc22ca880

func NewWebSession_patch_Params(s *capnp.Segment) (WebSession_patch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_patch_Params{st}, err
}

func NewRootWebSession_patch_Params(s *capnp.Segment) (WebSession_patch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebSession_patch_Params{st}, err
}

func ReadRootWebSession_patch_Params(msg *capnp.Message) (WebSession_patch_Params, error) {
	root, err := msg.Root()
	return WebSession_patch_Params{root.Struct()}, err
}

func (s WebSession_patch_Params) String() string {
	str, _ := text.Marshal(0xadef95edc22ca880, s.Struct)
	return str
}

func (s WebSession_patch_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WebSession_patch_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s WebSession_patch_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession_patch_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WebSession_patch_Params) Content() (WebSession_PostContent, error) {
	p, err := s.Struct.Ptr(1)
	return WebSession_PostContent{Struct: p.Struct()}, err
}

func (s WebSession_patch_Params) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s WebSession_patch_Params) SetContent(v WebSession_PostContent) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContent sets the content field to a newly
// allocated WebSession_PostContent struct, preferring placement in s's segment.
func (s WebSession_patch_Params) NewContent() (WebSession_PostContent, error) {
	ss, err := NewWebSession_PostContent(s.Struct.Segment())
	if err != nil {
		return WebSession_PostContent{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s WebSession_patch_Params) Context() (WebSession_Context, error) {
	p, err := s.Struct.Ptr(2)
	return WebSession_Context{Struct: p.Struct()}, err
}

func (s WebSession_patch_Params) HasContext() bool {
	return s.Struct.HasPtr(2)
}

func (s WebSession_patch_Params) SetContext(v WebSession_Context) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewContext sets the context field to a newly
// allocated WebSession_Context struct, preferring placement in s's segment.
func (s WebSession_patch_Params) NewContext() (WebSession_Context, error) {
	ss, err := NewWebSession_Context(s.Struct.Segment())
	if err != nil {
		return WebSession_Context{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// WebSession_patch_Params_List is a list of WebSession_patch_Params.
type WebSession_patch_Params_List struct{ capnp.List }

// NewWebSession_patch_Params creates a new list of WebSession_patch_Params.
func NewWebSession_patch_Params_List(s *capnp.Segment, sz int32) (WebSession_patch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return WebSession_patch_Params_List{l}, err
}

func (s WebSession_patch_Params_List) At(i int) WebSession_patch_Params {
	return WebSession_patch_Params{s.List.Struct(i)}
}

func (s WebSession_patch_Params_List) Set(i int, v WebSession_patch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s WebSession_patch_Params_List) String() string {
	str, _ := text.MarshalList(0xadef95edc22ca880, s.List)
	return str
}

// WebSession_patch_Params_Future is a wrapper for a WebSession_patch_Params promised by a client call.
type WebSession_patch_Params_Future struct{ *capnp.Future }

func (p WebSession_patch_Params_Future) Struct() (WebSession_patch_Params, error) {
	s, err := p.Future.Struct()
	return WebSession_patch_Params{s}, err
}

func (p WebSession_patch_Params_Future) Content() WebSession_PostContent_Future {
	return WebSession_PostContent_Future{Future: p.Future.Field(1, nil)}
}

func (p WebSession_patch_Params_Future) Context() WebSession_Context_Future {
	return WebSession_Context_Future{Future: p.Future.Field(2, nil)}
}

const schema_a8cb0f2f1a756b32 = "x\xda\xcc{}x\\U\x99\xf8\xfb\xde;\x93\xdb\x96" +
	"\xa6\x93\xc3\x1d\x91\x92\x86I\xa0)M\xe8\x84&!<" +
	"4?!_\x04\xda\xfcZ\x9a\x9b\x0fJ\xf3\x13\xe5f" +
	"\xe64\xb9\xcd\xcc\xbd\xd3{o\xdaL\x05\x0b\x01~\x02" +
	"\x0aJi\x15\xfa\x00\x0aXA(+\x05\xca\x8aK\xc5" +
	"\xba\xa2\x16\x01\xb7\xac_\xec\xae.>\xd8U\x14\x94\xb2" +
	"\x80\xa2\xc0\xdd\xe7\x9c;\xf7#a:\x09ew\x1f\xfe" +
	"\xcb\x9c\xfb\x9e\xf7\xbc\xe7\xfd\xfe8Y.\x90v\xa11" +
	"zF%@\xff\xc70Z\xe6\\\xfe\xc2\x13\x93\xad#" +
	"+\xae\x04\xa5\x0a\x11 *J\x00\xcd\x97\x97\xf7 `" +
	"\xf3u\xe5\x09\x04t\x96\xbeP\xfeft\xb0\xffJ " +
	"u\xc2\x9f\xafY\xf9\xff_\xac\xf9\xd4\xc3\x80\xcdw." +
	"\xd8\x8a\xf2\xbe\x05\x12\x80\xbcw\xc16@\xe7\xaa\xdb:" +
	"\xf7e\xf6\xdc\xec\xa2r\x9e\xbd\xb7e\xcd\x9dD\xda\x0d" +
	"\xdds\xa52\xc4\xe6#\x0b\x9aP\xc6\xd8:\x80\xe6U" +
	"1\x87\xe1\x9d\xfb\xb5\xcd\x83ceoL=\xfa\xa5\x0a" +
	"v\xb4\xfcF\xc5o\x01\xff\xfd\xf3\xd7>\xf7\xb4$O" +
	"\x92%B\x80\x1c\xb0\xf9\x10\xd9\x8e\xf2K\x84\x9d|\x98" +
	"|\x03\xd0\xb9\xfb\xc5y\xf7\x9d\xfa\xc7\xbb'\x81$\x11" +
	" \xc2\xf0\xec\x94\xff\x8a\x10q~\xbc\xe3/\xc2\xa6G" +
	"\xed\xab@Y\x82!\x0a?2WB\x80\xe6\xeb\xe4I" +
	"v\xd8Ny\x0b\xa0\xd3}\xf2\xdb\xff\xf2\xd9\x9f\xbc\xfc" +
	"\xd9\xe2\xa0o\xc8[\x19(\xc6\xd9y\xb86\xb2\xfa_" +
	"+\xef\xbe\x11\xa6S\xb6;\xfe\x10\xca\xfb\xe3\x8c\x80\xc7" +
	"\xe2m\xec\x92\xf3\xd6\xad\x97cKo\xb9y\xca%\xcf" +
	"9\x91_r\xd5\x89\xbfe\xc8\x96\xedZ\xf1\x7f\xfe\xe3" +
	"K;\x80,\x09\x1d\x1b\xe5\xb7\xa8Y8\x89r\xcbB" +
	"v\xd3\xc6\x85\x0c\xf8\xdc\xf8qK~~\xcf\xda/\x81" +
	"R\x8b\xe8\x8c\xfc\xe0\xfe\x97O?\xfc\xd4\x1b0X&" +
	"a\x14\xa0\x99\x9c\xf4\x10\x13\\\xcdI\\p_\xde\xb8" +
	"\xeb\xcd\xff\xfc\xaes+\x90*1\x90\x07`\xf3%\x95" +
	"C(o\xaadh\xb3\x95\x17\xc8\xb7V~\x14\xc0\xf9" +
	"\xc5\xe7\x1ex\xfb\xc5e\x9bv\xb9L\x8c\";\xff\xba" +
	"\xca\xd7\x18\xa1\xb7W\xb6\x01:\x7fwm{\xf4\xd3\x0d" +
	"\x17\xdf\x01\xa4\xca\xbf\xc9\xfeJ\x93\x01\x1c\xacdl)" +
	";\xe1\xc0\xf6\xde%\xf7\xdc\x01\xe4\xf8\x88\xd346~" +
	"\xd2\x19\xb1\x1f\xdd\xcb\xce\xa3\x8bzP\xce/\x92\x00\xfa" +
	"\xedE\"\xf6_\xb1H@\x00\xe7\x86;H\xf5\xb9\xff" +
	"\x98\xffr\x18\xe1\xa6E\x9d\x0ca~\x11C\xb8b}" +
	"\xc5=\x9b_x\xf9\xce\x02\x00g\xc9G\xaa\xaeg\x00" +
	"\xb5U\x8c\x1d\xfe\xa5\xc8\xf1b\xf8D\x19O\xfe\xbd\\" +
	"~\xf2o\x01\x9a\x9f?\xf93\x11y\x7f\x0d\xbba\x97" +
	"\xf0\xe8\xf3\xdf\xa6\x97\xdf\xcbd!\x04{\xdd\x83\x1f\xa8" +
	"9\x05\xe5\xfd5\\t5\x9c}\xef<u`x\xde" +
	"k\xfa}a\xf2\xf6\x9e\xc2%\xb7\xff\x14F\xde[\x07" +
	".\x1b\xae\x14\xde\xbao\x9a\xc2\xbb\xac\x1b<\xb5\x0fe" +
	"\xedT\xc6cz*\xd3\xaf{\xff\x96\x7f\xe7\xc1\x8f\x7f" +
	"\xef\xfe\xe2\xfa\xf5\xe4\xa9\x8c\x91\xcd\x87N\xfd<;\xfa" +
	"\x8a{\x97}\xf7\x95\x9d\x7fz |tKm\x1f;" +
	"\xba\xa3\x96\x1d\xfd\x99k\xef\xcf\xcc\x9f\xb7\xf2\x1b\xa0\x1c" +
	"\x1f\x9d3\xe5\xe6\xcf\xd7\xfe^>\\\xcbX\xfdB\xad" +
	"\x88\x80\x9e\xc5N\xa5\x91\xb3\xf2Pm\x0f\xca\x87k?" +
	"\x0a \xbfR\xcb\xd8Y\xf9\xd5\x87o\xed\xfe\xdem\x0f" +
	"\x03\xa9\x12\xa6(\xcc\xa1%C(\x1f^\xc2.\xf3\xeb" +
	"%k\x01\x9dO<\xbbok\xdc\xfa\xe6#\xd3\x94V" +
	"\xe0J{\xdaF\x94[N\xe3J{\x1a\xbby\xdd\xd5" +
	"\xf6\x8f\x9e~\xfd\xf0#@jC:\xeb\x02\xdfp\xda" +
	"0\xcawr\xe0\xdb9\xf0\xb9\x8fn\xec\xd8\xd3\xf0\x8b" +
	"\xbfgW\x9f.\xa3\xb7N\xebA\xb9|)\x03\x9e\xbb" +
	"\x94\xb1\xe1\x0f\xa9\xf3\x07r\xbf\xdb\xf3- \xb5\x91\x00" +
	"3`\xf3\xd7\x97\xde\x87\xf2\x01\x06\xd9\xff\xf8R\x11\xfb" +
	"\x7f\xb1\x94k\xdc\xafN\xb2\xee\xbe\xaa\xa5\xe5qP\x8e" +
	"G\x0c\xd8\xe6J\xec\x9c\xbaV\x94\xd7\xd41\xec\xab\xea" +
	"\x18)[VN\xdc\xf6\xe8\xff\x1b\xdb\x0f\xcab\x14\x02" +
	"\xed\x19\x14%\x14\x01\x9aw\xd7\x0d3\x81\xec\xadc\x94" +
	"\xfc\xee\x07U\xef>q\xcd\xee\xfdEuA\xa97Q" +
	"\xa6\xf5\x0c\xb3Z\xcf0G\x87\x97\xfc[\x7f\xd9\x82'" +
	"\x0a\xf2\xe5@\x07\xeaw1t\x87\xea\xb9\xad]\xfa\xf6" +
	"\x8d_;7\xfd\x9d\xb0\x02\x1c\xa9\x1fb\x00\xef\xd4\xb3" +
	"\xf3\x06\xce\xbb\xfd\x96'\xe2\xe5\xdf\x0fc\xd8y\xfav" +
	"\x06\xb0\xfbt\x86!\xff\x89\x9bo\xdf{\xf0\xe0\x0f\xc2" +
	"\xb6\xf3\xa4\x0b\xf0\xd3\xd3\x99\xb0\x1b\x1e~\xf5\xda_]" +
	"\x9c|j\x8ag:\xb0l#\x83xf\x19\x838}" +
	"E\xe5?o>\xfe\xa2\xa7\x0b(\xb8\xbcv'9\x95" +
	"\xfb\x92\xec\x1aK\xaf\xda\xf2\xfa/\xf7\xecx\xc6C\xc1" +
	"!\xea\x1a\xb8\x057602/\xa6\x07\x1e;|\xdc" +
	"\xb2\xe7\x8a\xb2\xe5\x99\x86\xe3Q\xfee\x03c\xcb\xf3\x0d" +
	"\x0c\xdfw\xf6v=\xebl\xdd\xf8\\\x98\xe6\x9638" +
	"\xcd\xddg0\x8a>\xfd\xfb\x81=7~\xfa7\xcf\x85" +
	")\xaaY\xce\xc5\x90\\\xce0<~\xf9c7\xdd\xf3" +
	"\xfd\xab\x7f\x16\xe6\xdbu\xcb9\xdfv.g\x04}\xf1" +
	"\xc17\xd7}\xa92\xfa\xf3b\xea\xd5\xd8x\x0a\xca\x1d" +
	"\x8d\x8c\x9es\x1a\x19p\xd3Mt\xc5\xbbG\xbeQ\x14" +
	"\xf8\x8d\xc6N\x94\xa3M\x0c\x18\x9b\x18\xf0y\xdf\xbc\xe2" +
	"\xb2\xf4\x83\xdb\x9e/n\xdfw6\xf1k\xec\xe5\xa0\xb9" +
	"\xfd\xfb\x176\xd5\x7f\xe5% \xa7{\xf1j\xb0\xf95" +
	"\x16\xaf~f]\xf8\xf2\xb7\xcb\x9c\x97\x8a\xf2kUs" +
	"=\xca\xeb\x9b\xd9\x91\x83\xcd\x8c\x1d\xe3\x0b?\xf5\x903" +
	"v\xcf\x1f\xc2\xecXu&\xbf\xed\xe0\x99\x8c\x1d\xdf\xbd" +
	"\xee6\xf9\xa5y\xd7\xbf\x02J\x03\x86<\xd0\xe0\\\x09" +
	"\x05\xe6\xcd\xce\xe4\xc2<\xc0a'\xf7,{\xb4\xa3\xfb" +
	"\xa3\x7f\x02\xb2$2%\xa8U\xb5<\x84rK\x0b\xb3" +
	"\xa5\xe5-\"\xf6\xafn\xe1\xb6$\xf5\xac\xfbD\xd5\xdb" +
	"\xf8\xea{\xa2\xcb\xfa\x96\x8d(g\x19\xbc\xac\xb5\\ " +
	"\xefd\x7f9\x07\x9f\xd95\x17\x95\x0b^-\xce\x9d\xcb" +
	"[8wnha\x84\xe8\xeb\xe7\\T\xf7\x99'\x8f" +
	"L\xd1\xfd\x16\xaeTo\xb50\xf6\xc5b\x97\xde\xb8\xe8" +
	"O\xd1\xd7\x8b\xe3\xba\xe9\xac\xa7\xb8\x15\x9c\xc5\xac\xc0\xf7" +
	"\x09\xd3\xf8Y\xc6\x90\x1e<\xab\x1e\xe5\xe7\xcf:\x8d\xe1" +
	"?k\x1d\xf3\xbb\x8f\xfe\xa5;\xddq\xd7\x9a7\xc3G" +
	"\xe7\xcf\xe6~\xf7\x9a\xb3\xd9\xd1\xeb\xff\xe1\xe4s\xdej" +
	"N\xfe\xb9\x18CQl\xaeZ\xf1\x1c\xd7\xfd\x15[\xe0" +
	"9g\x0b\x1dNZ\xd4\xb2\"\x9a\xa17\xa4\xd4\x9c\x9e" +
	"k]G\x87\xfb\xa9e\xf1\x05#\x97_\xdc\xab\x9aj" +
	"\xd6\x02P\xe2b\x04 \x82\x00\xe4\xf2z\x00eBD" +
	"\xe5j\x01\x09b\x9c\x19\x16\xb9r\x18@\xb9BD\xe5" +
	"s\x02\xa2\x10g\xc2#\xd7\xb1\xb5kETv\x08H" +
	"D\x8c3\x9fDn\xea\x04P>'\xa2r\x8b\x80$" +
	"\"\xc41\x02@v\xb2\xc5/\x88\xa8\xdc&`,\xa7" +
	"\xda\xa38\x1f\x04\x9c\x0f\xe8\xa4\xa9ek\xbaj\x83\xa4" +
	"\x19\xba\xbf\xaa\x1bk7Ss\x8b\x09\x92fSD\x10" +
	"\x10\x01\xb7Y\xa3j&cl\xf1\x7f\xa7\x0c\xdd\xa6\x13" +
	"6V\x84\x1d/V0\xbfY\xf2\xe2]jj\x94\xf6" +
	"\x1a\x19-\x95ok\xe8O\x199\xda\x8b\xa8\xb8wj" +
	"\xa9g8Hr\x08\x00\x05R\xd7\x09\x80\"\xa91\x01" +
	"0B\xaa\xfa\x00b\xba\xa1S'GM\x8e\x0cDC" +
	"\xdf\x96\xa3\xe6\xa0EM\xb6\xd8\x91\xcb]D!a\xb2" +
	"c\x9cq]\xdbLMK\x05\xcc\xf8\x04\x89E\x09\xea" +
	"\xa3V\"g\xe8\x16U\xe2\x18\xe4\x9c5\xc3\xa14\xaf" +
	"f2\x14\xf1jZC9[U_\xc8p\xaa&\x9d" +
	"\xfe\xf1T\x8aZV\x17HF\x9a:]\x19\x8d\xeav" +
	"\xb7\x89\xa6av\x19i\x0am+\xa9\x9a\xa6\xa6\xd3m" +
	"\x9a\x86\xd9i\xa4\x01\xf3\xce(_Z7\x8a\x9aM3" +
	"\x9ae\x83\xb2\xd8\xd7\x86W\x86\x00\x94\x97E\xec\x9f\x83" +
	"\x02\x96G\x1d\x07C\x89\xaa\x1c\xc5\x1e\x10\xca\x85w\x9d" +
	"\xb0.\x92#\x9d \x94\x97\xbd\xc3\x16}\x9fD\x9e\x1f" +
	"\x06\xa1\\z\x9b-\xfa\xa6H\x9ed\x8b\xe2\xdf\xd8\xa2" +
	"\x9f(\x93\xbd} \x10,\x8bc\x05\x00\xb9\x9d)\xd9" +
	"m\"*\xf7\x0aX\x1e\xf9+\x83\xf4\xad\x8f\xec\xde\x05" +
	"\x02\x993'\x8eq\xa6d\xdb\x01\x94[DT\x1e\x11" +
	"\xd0\xb1\xa8\xdde\x18c\x1a\x88\xd4\xc2\x05\x80\xbd\"b" +
	"E\x10A\x01\xd9\xa2c\xd2\xb4f\xd2\x94\x0d\x00\xae6" +
	"\xe9\xb6\x93*p\x0c$\xd30\x1d\x8b\x9a\x9b\xa9\xe9\xfd" +
	"\xd2\x8d.\x0e\x05h;\xa9\x82\x16\x81\xa4\xa5\xf2X\x11" +
	"\xd4%\\\x03s&M\x19zZC[3\xf4\xf3U" +
	"-#\xd2\xb4\xa3\xa6\xd3\x1a\xfb\x8dj\xc6\x95\x02\x86h" +
	"\xf3\xc5[\xa0\xad\xb4\x0eg\x8d\xcd40\xde\x0a_\\" +
	"*3\xde\x8f\x8b\xa8\x8c\x86\x8c\x972\x1e\xa6ETr" +
	"\x81\xf1f\xd9ZFDe\x82\x19\xaf\xe0\x1a\xef8\xb3" +
	"\xd3\x9c\x88\xcae\x1f\xc4Ng\xb6\xcb\xe8\xd1\xcc\x80[" +
	"A\x83\xa7\xc2F\x1a\xb9i.\xe2\x14\xaf9\x89\xacI" +
	" \x92M\x9ddS\x02\x05\xb2\xb3\x87\xdc\x9a@\x91\x1c" +
	"\xe8#O&0B^\xd9J\x8e$0*/\xc4a" +
	"\xb9\x0a\x13X&w\xe3\xb0\xbc\x0a\x13\xa21\xa6DP" +
	"\x08\xa5\xac\x11\x01;Nd$A/\"\xfe\x90\xe0I" +
	"\xe2\xda\xff\xcbt\xc0\xa4\xaaM\xd3%\xa1\x0f\x12\xec\xdc" +
	"\xd6\xe5\x02\x028j*Es\xfcO(\xb2m\x91\xbf" +
	"\xed)\x82=N\x87\x0f\x8ca]*\xb9\xf1i\x82C" +
	"\xce\x85F5\x87\x06Q\xb7\x01\x9c\x9cj\xda\x9a\x9a\xe9" +
	"\x826WiK\"x\x96\xe0\xa4\xd3\xeb\xee\xa8F\xf7" +
	"P\xa6\xf1Nv<ck\xfd\xb6\x0a\x92=n\x95D" +
	"\xf1c\x82\x1b\x9d5\x0c<\xd9oCL\xb5\xc7-\x00" +
	"G7\xec5FZ\xdb\x00\x92V\x94g\xfe~q9" +
	"2\x04\x17\x1av5\xdb\x00\xb1\x0d\x1a\xe7\x9d\xa7\x0ee" +
	"E\xd5\x81\xfdi\xa4\xc6\xa8\xddo\x9bT\xcd6XT" +
	"Ow\xe6mj-\xeek\xa3\xd6x\xc6\xb6f\xabO" +
	"\x1e\xabmP\xe60K\x89c\x0c\x80\xd4M\x02(K" +
	"ET\xce,\x98\x8a\x0c@\x1a\x99\xfd,\x13Q9\x9b" +
	"9\x91Qc<\x93\xee\xa3hQ\xfb|\xc3\xcc\x82\xa7" +
	"\xe21:\xa0\x8e`E\x90\\\xce*\xee\xf8\xf4\x98\xb4" +
	"\xcd\xf5;\xca|\x97\x1cf\xa4\xdd\xcc \xcf\x13Q\xe9" +
	"\x15\x90\x08\x18\xc7\xe3\x98\xce\xf7\x00(\xabET.." +
	"\xd08\x1f\x80\x0c2\xc8\x01\x11\x95K\x05t4\xab\x97" +
	"\x9aYU\x07\x89\xea\xb6G\x9f\x931R*\xf34\x00" +
	"\xe0\x1b\xab\xb5E\xb3S\xa3\x03\x06H\x17\xd0\x00r\x96" +
	",\xf4\xe2\x88i$x\x1cafy&7\xcb\x9dC" +
	"\xcc\x0c\xb1`\x86\x02y\xa5\x87\x99\xa1(/\xc4\xeb\xe5" +
	"\x1aL`D^\x83\xa6\xac 3\xcd<\xf6\xc8\x97s" +
	"\xd3\xdc\x8d\xf5\xf2nL\xe0\x1c\xf9 >$\x1f\xc2\x04" +
	"\xce\x95Q\xd8.\xcf\x15\x128On\x11\xee\x93\xcf\x11" +
	"\x12x\x9c\xac\x09}rVH\xa0$\xef\x14v\xc9\xb7" +
	"\x0b\x09\x9c/\x1f\x14\xee\x92\x0f\x09\x09gXM\xf7\xd1" +
	"M\xe3\x14D\xab\xa4\x05\x88_@\x82\xc3N\xa7\x9a\xae" +
	"f\xf0 Q\x8b\x19\xd1\x06\xc3\x1c\xd6\xd2i\x0a\xa8\x97" +
	"\xdc}3\x12\xecs\xce\x0f\xa0]\xd5?\xdf\x18\xd7g" +
	"\xb2zq\x07\xdf\xcb\x14\x9f\x81\x032\xad\xcfR{\xd4" +
	"H_h\xa0\xdd\xc1\xd2\x19f\x09EpT\xfb8v" +
	"\"\xc1]\xce\x1a\xbe\xab\xfaB4\xecj\xbeO\xe4&" +
	"\xa4\x1b6w*\x90\xb0\xd5\xe1\x0c-I\xcc\x17\x91\xe0" +
	"VN\x0c\xdb\x02m9\xbe\x05\xc0I\x19\xfa\x86\x8c\xc6" +
	"\xc3`I\x04\xb7\"sb]>4\xc6F\x0c\x9d\x96" +
	"\xf2\x96\xe2.$X\x1f\xbb\xc0\xd0\xd99&\x93\x96e" +
	"w\xa3nkv~\xc00\x12\xabUs\xa4\x18\x82\xc5" +
	">\x82\xdb\x91\xe0SN\x9f\xbb\xb3Z\xe8\xe6[\xab\x07" +
	"\x0c\xa3\x9a\xef\xe5A\x9c\x7f\x1bDS\x1b0\x8c\xd5\x86" +
	"\x8e#%\xf9y\x07\x12\xbc\xcf\xc3\x98\xc4\xc1\xbeU\x1c" +
	"]l\xb5\xa1\x8f\x008\xe3\xba5\x9e\xcb\x19&\xda4" +
	"\xbd\x86\xa6556\x90\xcf\xd1\x92\x18\xbf\x8c\x04\xbf\xe5" +
	"\x0c\x866V\xb3\x9dmj5\xdb\x0a\xe0h\xd9\x8e\x01" +
	"\xaa\xe6\x8c\x19|\xbdx\x17\xf7\x93\xabN\xcbV\xab\xd5" +
	"6\x85\x98\x9a3\xb8\xbb/\x92L\x94$\xe86$x" +
	"\x97\xd3\x1b\xdeV}\xbe\xaaI\x19\xae3\xe3z\xce4" +
	"R\xd4B\x8b\xc9\xbf[\xb7%\xcd\xce\x97\xc4\xf75\xce" +
	"\xb2\xc1)\xfb\xaa\xbb\xf5\x18\x93E\xc8\x8f\x17w{\x19" +
	"#56\xfbTe\xa8H\xaa\xc2\xb2\x92Q\x11\x15;" +
	"\x94\xaal\xea\x0c\xf2\x97\xa9\xa9\xcaD6\xe3\xc7Jo" +
	"\xf1\x18j\x87\x19\x1c\xa2\x97?\xe7\x19\x83f\xbcUO" +
	"p+\"x\xd7\xea\x09g`b!\x03c\x8b\xb6\x88" +
	"\xca\x15\x02\xc6\xd2\xaa\xadb9\x08X\x0e\xe8P=e" +
	"\xa45\xa6\xa2\x81K\xcf\xa8\xfa\xc8\xb8:B\xc3kY" +
	"-K]\xb5\x0b\xd6J\xdf\xa9\xcb\xe5E\x03\x0bj\x05" +
	"\x9dI\xf0<\x95\x15\x85\xf3\x1d\xc7\xad\xe1\xc2ea9" +
	"\xbe\xeb\xc41\xca\xea\xc2V\x00\xe52\x11\x95k\x05\xac" +
	"\x12\xdfq\"q,\x03 \xd7l\x04P\xae\x16Q\xf9" +
	"\x8a\x80U\x91\xb7\xd9\xb2\xc4\x92y\xb3\x90\xcc\x7fS\xc0" +
	"r\xe1oN\x1c\xe7\x00\x90},\x9e=\"\xa2\xf2\x1d" +
	"\x01y}\x05emtB\xb3l\x0b\xca\x9c\xacj\xa7" +
	"F\xa9\xb5\x16b:]\xbb!H\x97\xc3\xa1\x97\xa5\xcb" +
	"\x05\xb8\x0b!a\x94\x06L\x1b\xd4\xd2\xed\xee\x09\x90X" +
	"\xa5S6c\xcc\xe6n\x82\xa5 \xa2\x9ae\xa2\x8e\x88" +
	"Qf\x92\x85\x06\x0az\xc5?!\xc3 \x90\xb9\x923" +
	"Bm\xae$ \xe9\x16mG%\x82\xe8|\xf2\xc5\x1f" +
	"\xd7m9{\xdd3\xf0\x01\x92\x9e\xde\x047!%\xe2" +
	"\xabZ93\x819\"*q\x01\xb7e\xa9e\xa9#" +
	"\xd4W\x97\xd2\xd7\xca\x99F.\xc78\xe6\xa3\x9d\xef\xa3" +
	"\xedf\x82n\x17QY\x1d\xd2\xe0U\xcc.W\x8a\xa8" +
	"\x0c\x844X\xe9\x0c\xb2\x93Y\xd8\xe0\xfb\xaa\xd7Gm" +
	";\xd7o\xb3L\xb3C\xd7\x0d\x9bg3\xab\xd2n:" +
	":\x17\x04\x9c\x1b8\xab\x19=\x90\x9a\xcax\x0e\xe8\xc3" +
	"q\xcf\xe2v\x98\x1b/H]\xd3Gf\xef0\x8b\xba" +
	"\x96)\x1e\xb3\xe0Z6\xf5\x1c\xad\xb8+\xe22J\\" +
	"\xa2\x98#\xf2.&L\xbfX\x8c\xddL9\x1b\xc3}" +
	"O\xad5\xc0Ihg\xa8\xe1\xae\x0e\x87:\x9e\xeaP" +
	"`\xbbD\xad\x0f\x8awrIk0\xf9 \xeb7\x06" +
	"\xado\xb2\xfe\xfa\xa0\x1bG.\xe9\x09\x0d\xa0.1C" +
	"\xfd\xc2K&\xbdr\x9d\\2\x1c\xb4<\xc9%\x9d\xa1" +
	"\x09\xc4z\xb3\xcd\x15\xc2\xb6\x82\x83tz\x0d\xcbf\x7f" +
	"\xf3\\\xdb\xe9\x1d\xb7}\xd9\xc7\xba\x07\xd4\x916\xdeq" +
	"\xa0A\x95\xc73\x07\xff'v\xfb\x8cs\xbc0\x02\xfc" +
	"o\xd7\xc5@\x82\x0b\xdf\xf1\\\x80P\xd0\x06\xf0\xfaU" +
	"\x92\x96\xcao[\x9bc\x96`9\xbd\xa6\x91\xdb\xa0\xe9" +
	"iH\x9cGs\xf6\xa8\xb2\x92\xbb%\xaf\x1f\xee\xbb%" +
	"\xb9Q8\x05\x04\xb9V\x900\x98'\x05_\x17\x0a\xf5" +
	" \xc8\xe5\x82\x84\x92\xdf\xafG\xaf\xeb.\xa3`\x82 " +
	"\xbf\x85\x12\x0a~O4\xd8\xfb\x0a2\xcc\xbfF\x09E" +
	"\xbf\x0f\x1c|\xfd)\xb6\x82 \x1fD\x09\xa3~W\x1d" +
	"\xbd\xa9\x83\xbc\x1f\x19\xe6}(a\x99?cCo\xa2" +
	" \x7f\x1d7\x82 \xdf\x89\x12\xce\xf1\x87\x04\x01\xe6\x9d" +
	"\xd8\x03\x82|\x03J8\xd7\x9f\x08\x06_\xaf\xc4>\x10" +
	"\xe4<J8\xcfo\xa6\x06_\xb3\xd8\x04\x82\xac\xa2\x84" +
	"\xc7\xf9\x83\xe7\xe0\xeb 2n\xacB\x09\xe7\xfb\xb3\xe1" +
	"\xe0\xeb9\xfck#JX\xee\x0fU\x83\xaf\xb5\xfc\xeb" +
	"B\x94p\x81?\x03\x08\xbe\x96sn J\x18\xf3\x87" +
	"\x8eA\xe8x\xe3\x14\x10\xc8K\x12V\xf8S\x97\xe0\xdb" +
	"/[A \x87$$\xfe\xe8\x01=}%Ov\x82" +
	"@\x1e\x930\xe2\x8f\xeb\x82}\x0f4\x81@\xee\x94\xa4" +
	"\x11j\xb7c,gXv;:F\x8e\xeaL\xbd " +
	"\xc1cL;J\xb9q\xbb\x1d\xdb\xd24Cm\xda\x8e" +
	"\x0e\x83cZ\x07\x09\xee\x85\xd8J\xc1)A\xcc[\xf0" +
	"\x14\x0f\xa0\xf0\x8b\x05\x12\xc0\xd1vLd\xc7RF\xa6" +
	"\x1dc)#\x97o\xc7X\xd6\xd8L\xdb1\xc6\x12\xc0" +
	"vl\x1b\xd7\xdd?$5\x95i\xc76\x93\xe6\x0c\xd3" +
	"n\xc7m\x86\xab\xd1\xed\x98\xe0\x11\xa9\x102\x8d\x13\xf6" +
	"]\xfc\xc7\x8e\xa67\xc3\xde]<J\xfabHc\x9a" +
	"\xdb\xc3\x9d\xa1\x89\xdd\x14$+(`h\xbeF\xaea" +
	"\xac\x14+\xdc\xa4fJf\x16\x11\xdc\x94f\xbc>\xe4" +
	">u5K=\xe7\x97\xd8\xacf\xc6\xfd_\xdb\xe8D" +
	"N3\xa9\xe5\xb0\x00\xb6V\xcf\xe4\x99\x9b\xf4\xda\x06S" +
	"\xbc\xee\x0c\x11\xda\xb0\xec \x08\xcc\x14\xb5:\xc3\xbd\x83" +
	"B\x10X\xd3\x19\x84\xb2)'{\xadN\xac\x08\\\xaf" +
	"\xeb\xdb\x8f\xb9\xa5\xee\xf9\xb8\x81|\xcem\xd9\xcd\xf1\x09" +
	"\xae\xeb\x09\xda,\x9c^D\xd2\xd8\x1a\xea\xb2\x14\x89>" +
	"m\x9b.\xe2<\x9d\x07\xc2\x81yW\xb4\xcd\xbe\xb3\x92" +
	"2\x12nCl\x91\x18\xe1\xdca\x8c\xd8\xd7\x13\xe4\x97" +
	"\x9c;,\x1a\xeeg\x8b\x8f\x8b\xa8\xfc\xb0\x10\"Y\x8e" +
	"\xfb$[\xfc\x9e\x88\xca?\x09\x88Q\x0c\x8d\xaf\xc83" +
	"\xf5 T\x08q\x9c\xc7\x10\x0e\x05\x08\xb1\x0cCC\x19" +
	"\xb2\x9fe\x81\x11)\x8e\x04\x80|\x9d\xc9\xea\xab\"*" +
	"\x0f\x0a\x1f(\x7f\x8f\x0d\x1b\xe9\xbcc\xf1l\xa8\xcb\x00" +
	"1M1\xe6\x8d\x09\x001\xc6\xb2Z\xcd\xca\x19\x96\xe6" +
	"\xf6g\x8f\xad=U\xc8\x07\x99\xca\xa1\xf5!\xd28a" +
	"zR\xc8\xfb\x8f,\x0f\xac\x08\xc6\xe9\xefg\xe8\xc3\xbb" +
	"\x1c\xe1WE\xd8\x94\xe0c\xa0p\xae\xd5\x07\xa0\\*" +
	"\xa2\x92\x09]Z\xeb\x0b\xa5UB\xb5{\xe9M[\x03" +
	"\xbf@\xc4\x1aW\xbb\xf2[\x03\xf7\xe3l\xd1\xec\xd1\xae" +
	"Q\x9a\x02\x1c\xc3XplAr9\xde\xbe\xe3}\xe0" +
	"\"_7\xab\xa6F\xad\xb5:\x14\x92\x0b\xbfo\x17|" +
	"pm\xef=\x0d\xbd\xe2l\xf0\xd2\x86\xf3hN\xb4G" +
	"\x99\xa5\xce\xe7\xb7\xa8\xea!5\x09D\xd2Q\xcf\x07_" +
	"+N\x01p4}\x83\xa6\xf3\x0a\xdfm\x0b={\xd3" +
	"\x91w\xf3\xf7\xa4_s\xbb\x03q\xe4\xcdH\xec\x0b\xe0" +
	"\xf0\x93\x00\xb1\xad\xd44$C\xa7\xb35\xd9\x954\xa6" +
	"\xa6\xa99\xcdi0\x9d[,\xa2\xb2<\xc4\xfedS" +
	"\xe0IJx\xe0\x99\x14\xa1P\xed\xae\xa4\xaa\xf4\xbfy" +
	"\xae\x97<\xf2\xe6;g|`a=!c\xf2N\x0d" +
	"\x1bSP\x890\xc8^\x11\x95\x8f\x0b%\xd2v\xdd." +
	"\xd95\x98]7\xc0\x1b\x0aj6\x8de4\xcbf\x06" +
	"W(\xaa\x19\xa2\x05L\xf6\x17\x92\x9a\xed\xa4n\x92$" +
	"M\xd28DZ\xfa\xc8\x8a!rN\x1f\xe9\x98$\xdd" +
	"\xd7;\x13IK\xd5\xd3\x96\x8d\x86\x99M\xaa\xb9\\\x12" +
	"\xeb\x1d#\x95\xb4\x0d[\xcd\x08\xc9\x0c\xd5G\xecQ0" +
	"R\xc9\xd4\xe8\xb8>\x96HZ\xdaV\xeaL$\x8dT" +
	"2kk f)\x03\xde\xa0e\xa8\x06\x98v<8" +
	"\x10i\xda\x99H\x8e\x8e\xa8\xe6H\x12\xb0\xde\x99H\xe6" +
	"F\xd5aS\x13S\xaam\x98\xc9z\x98H\x16\x1a\x82" +
	"4\x9dd\x96W<\x7fX\xe9\x97\x97\xe7Q+\xd5f" +
	"j9\xdb\x98\xae\x0b'\x05\xbaPL\x15D-\x8d\x12" +
	"\x08(\x01&l\xcd\xce\xcc^\x01\x99!7\xb0<A" +
	"2)\xf7\xb4\xbc\xc9\"L\xf3\xb5U\xf8\xaeS\x18\xaa" +
	"\xaf\xea\x09t\xa1Jx\x87-G\xa6iC\xa1q\xe2" +
	"\xa8\xc3\x96\x91\x19\xb7\xb9RDA\xc0(\xef\x90fT" +
	"[\xdb\xcc\xd7x\xed<\xebx\xde\xad\xa7\x12\\\x7f\xa6" +
	"\xb1\xc6\x9c!\xa6\x17\xd4\xb0\x0b\xdc\xdd3\xc7\xf5\xe8Q" +
	"\x93\xa0\xa0$\xee\xa3\xd6xF\xb4\xa7\xb4@Z\x83\x16" +
	"H\x9b\xc5!\x91\x04U\x1f \x92\x19\xef\xea&\xa2<" +
	"\xf0\x89\xd9\x0fS\xe0\x9bE\x97\x80\xb3\xc4\xc6cgI" +
	"\xf13\xbc:\x81W\x09~J0S'\xa23\x142" +
	"=\xceh=\x85\x90yu\xa8\x13q\xe5\xc6\xe01I" +
	"\x11v\x15eJ\xce4l#ed\x98\x0eOqC" +
	"X\x98\xd8\xf7\xdb\x10+\\\xd6/\xf4g%\x7f\xaf\xa0" +
	"Y\xdc\xab\xc6x+\xecXZ\xd4M\x1f\xb8E\x9dH" +
	"\xb3:\x1ecA\x07\xc2M\x01\x8eYQ\xa6\x0a\xd17" +
	"\x9e\"\x99\xf9y\xa1\xdbul\x0c\x94\xbe\x14\xd3\xdd\x87" +
	"\x11\xc7\xcc\xf4\x11j\xcf\xba%\x17\xb28\x8f\xdfk\x86" +
	"\x8e\xd2\x91+\xc1-mD7L\xda\xc9\xf2\xe7\xfc{" +
	"\xb2\xa5\xe2\xa5e\xf7\x80\x8a\xd3]_S\x91\xa8P\x1f" +
	"\xb8\xc3\xa99Al\x0bU\xc7f9k\x9d\xea\xecf" +
	"kt\x1f\xaa\xf6_\xe4(\x8a\xc8\x0b|v%\x89\xd9" +
	"\xd7L\xe9Vg(\xdd\x9a\xa5lK\x13\xe0v\x1ef" +
	"\xed\xe1\xfb\xdeW\x0b\x98\xa1\x1e0\xc6(\xa0\xfe>\x08" +
	"-\xaeo\x05\x0e\xcd&;\xec\x0b=\x0c\xf0\x88\x1c\xbc" +
	"\x0b@\xb9\xd8\x95\xbb3\xacZ\xb4We\xf9O \xa7" +
	"q\x8b\x9a\x1d#n\xad\xe1\xad\xb9\x0fX\xd4a\xcc\xd0" +
	"\xd5\xbc\x1c\x95F\x82'S\x9e\xb5\xcf\x90\xda\x8e\xfb\x99" +
	"\xed\x878\xb1\x0d\x9a\x04\xfe[\x064\xbd\x17\x18\x12\xa3" +
	"vh\x1a\xb5s\x18\xb5\x93\xd3\x18\xfd\x91\xe9/0\xa6" +
	"\xd6\xe5\xc1\x9b=\xaf2\xa7V\x8a\xa5\x97\xa8\x19\xfaJ" +
	";\x9b\x81\xd0\xeb)\xbe\xd0\x09\x92\x91\xcecE\xf0\xa6" +
	"o\x9a\xae\x94\xcd4\x99R\xb3\x0d\xde\xd4I\xb7\xa87" +
	"\xd2\x99A\xd7\xd6\xe6\xec\x183\xcb\xd0\xf8\x12\xb1H\xdd" +
	"\x8b8\xad\xeee\x12C$\x9b\xfa\x02\x7f\x82\x05\x1f\x93" +
	"7\x0be\xef\x0e\x01\x9d\xb4\xba\xb9+\xa3Z\x16`\xa3" +
	"\xef\x01\x83\xb5\xa6\"k\xcd\xe1\xb5\xee\x09\x9b\xea\x90`" +
	"\xb4\xbeOut\xbb\x99\xbe\xb9\xff\x0f\xba\x9b\x99\x14\xcd" +
	"\xd5\xd9\x86aCL\xe7\x19\x1d\x8b\x1c'\xe2\xb6\x18\xc3" +
	"a\x84%\xfa\x85\xb9i\xb25\x14I\x86\xf36\xb5<" +
	"\x85\x0fR\xb9\x17:/\xbdt\xcf\xe2\xd7o\x99]*" +
	"\xe7\x13\x13\xd4s\x09z\xb4z\xee\x04\x12\xddN\xca\x87" +
	"\x8a\x96nSJ\xb3\xd2\x02\x08\x0d1yv\x10\x8cM" +
	"\xbd\x7f\xf1A\xef\x1f\xa6\x08\xe9s\xc7\xa6\xde\xa0\x13\xd0" +
	"j\xc7^\x9c\xf5\xb5\xbc\x07\x9a\xdc\x98\xe7\x88\x91\x0a\x8c" +
	"\xe3\xdc\xf7\xbc\xee\x12\xe2x\x02\x00idv\xbb\\D" +
	"\xe5c\xc2\x7f\x87aF\x8e\x96\xa0\x1fKj\xf3\xbe\x8a" +
	"\x09\x7fJ6\xebb\xa2\xac4\x1b\xbd'&\xde\x0b\x13" +
	"\xf7U\x92\xcb\xce\xe3YU\xb1\x91w\xa1Q9Q(" +
	"\xcc\xda\x99\xef\xe5c\xaf\x12\x8d\xc6\xa35\xec\xf5\x18\xa3" +
	"V\x99\x83\xe1\x7f\xcd\x99\xdb\x1a\xfao\x9a\xe8\xa4\xf7P" +
	"\xf9\xbd\x8f\x93O\xf4\x99z+c\xd5\x0e\xb7\xc1\xea3" +
	"\xf5\x81\xad\x00\xca\x1e\xf7\x91\x81\xcf\xd4}\xcc\xb0\x1e\x14" +
	"QyZ@\x12-\xb8\xab\x83\xdb\x01\x94\xa7ET~" +
	"' F0\xf4\xcfm\xe4\xf0\xf5 \x101\xea\xea\xd2" +
	"O\x19\xc6\x9f\x88\xa8\xbc*0V\xb3\xf2=\xf4pw" +
	"\xf1\x99{\xef\xff\xcd\x95_\xd9\x11<*.\xcc\xf6\xda" +
	"\xfa=\x93\x0d\xe6\xff\xdcd\xdb\xdc\x98\x1b\xa0\xf0\xa7\x99" +
	"\x05\x14%\x1f\x0a\xfb\x1c+\x00{\xcf6\xd0\x93\x9f\xff" +
	"*\xb5[\x8767J\x06\xbb\xfdY\xe9\xec\x9e\x19\x8f" +
	"\xa5\x8c\xcc\x87\xb0'\\6;\xc7\xebu\xc55\x03u" +
	"\xe6\x1cx\x9f\xa5\x9cy\x87\xd6\xa9\xee7\x1a\xe7\x0e0" +
	"\xd9\x13\xf40\xdat\xc3\xcc\xaa\x19(s\xd2\xc6\x16=" +
	"c\xa8\xe9P\xaa\xf1_\x01\x00\x00\xff\xff\xd6\x19@\xe5"

func init() {
	schemas.Register(schema_a8cb0f2f1a756b32,
		0x8139673a82bfe07d,
		0x81535505f60de028,
		0x8193ac6cb5429c83,
		0x81f5066b5576a609,
		0x82130007ccd2888f,
		0x82a3ee23aa0ae3a3,
		0x8374b67102f894cf,
		0x8becd48bdafc1e45,
		0x8ea31bdb4c044f01,
		0x9398280f1359570a,
		0x9497e63b399a2c01,
		0x974fa7d7260b143e,
		0x99ffc2f3f69a6a9f,
		0x9a712ce3fcad8cd8,
		0x9e582e7e054088ae,
		0x9ea7265092c11606,
		0x9f79c33e20119e8d,
		0xa1ece076a7105939,
		0xa50711a14d35a8ce,
		0xa87d65bed9b60243,
		0xaa6ef20a62c1cafd,
		0xaaf9021b627cc1f9,
		0xabc45cb0fd79fba8,
		0xadef95edc22ca880,
		0xaf480a0c6cab8887,
		0xb37b21e300864885,
		0xb39cc44599b3a41b,
		0xb4b873147ab5ce5e,
		0xb4e5f4cccb748429,
		0xb7d82eac416ab63e,
		0xbaace870544663eb,
		0xbc353583a3731ade,
		0xbd6b5bb69c784877,
		0xbda585bffe1dc7e8,
		0xbf0e0653dc266205,
		0xc0643ea68efc60ae,
		0xc60d14bf989d4454,
		0xc7c9c9b19d935e79,
		0xca2d58de88f0b32e,
		0xcc561276d31b392b,
		0xcd94acddf4778328,
		0xd22c0be5b9c16558,
		0xd26a7affce43b1c0,
		0xd2e47e8eac54ea7e,
		0xd684c6a791b97dbc,
		0xd7051b9757f6b096,
		0xd7aff1fe39659132,
		0xd97fb0647c80b844,
		0xe9a02a3219bdbd70,
		0xe9ff06beec4e73d6,
		0xeba76bffb27b1975,
		0xed8a0ae9139c89c2,
		0xef174541b62cac82,
		0xf001fc1d5e574a07,
		0xf0475101099acdc9,
		0xf1c587295608596e,
		0xf405ef1c8e600f0f,
		0xf5cae52becabc767,
		0xf64da2416445f8b6,
		0xf72d33f93d1ebb59)
}

var x_a8cb0f2f1a756b32 = []byte{
	0, 0, 0, 0, 30, 0, 0, 0,
	1, 0, 0, 0, 78, 0, 0, 0,
	33, 0, 0, 0, 146, 0, 0, 0,
	41, 0, 0, 0, 130, 0, 0, 0,
	45, 0, 0, 0, 114, 0, 0, 0,
	49, 0, 0, 0, 90, 0, 0, 0,
	53, 0, 0, 0, 82, 0, 0, 0,
	57, 0, 0, 0, 90, 0, 0, 0,
	61, 0, 0, 0, 82, 0, 0, 0,
	65, 0, 0, 0, 130, 0, 0, 0,
	69, 0, 0, 0, 138, 0, 0, 0,
	120, 45, 115, 97, 110, 100, 115, 116,
	111, 114, 109, 45, 97, 112, 112, 45,
	42, 0, 0, 0, 0, 0, 0, 0,
	111, 99, 45, 116, 111, 116, 97, 108,
	45, 108, 101, 110, 103, 116, 104, 0,
	111, 99, 45, 99, 104, 117, 110, 107,
	45, 115, 105, 122, 101, 0, 0, 0,
	120, 45, 111, 99, 45, 109, 116, 105,
	109, 101, 0, 0, 0, 0, 0, 0,
	111, 99, 45, 102, 105, 108, 101, 105,
	100, 0, 0, 0, 0, 0, 0, 0,
	111, 99, 45, 99, 104, 117, 110, 107,
	101, 100, 0, 0, 0, 0, 0, 0,
	120, 45, 104, 103, 97, 114, 103, 45,
	42, 0, 0, 0, 0, 0, 0, 0,
	120, 45, 112, 104, 97, 98, 114, 105,
	99, 97, 116, 111, 114, 45, 42, 0,
	120, 45, 114, 101, 113, 117, 101, 115,
	116, 101, 100, 45, 119, 105, 116, 104,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	1, 0, 0, 0, 22, 0, 0, 0,
	5, 0, 0, 0, 146, 0, 0, 0,
	13, 0, 0, 0, 90, 0, 0, 0,
	120, 45, 115, 97, 110, 100, 115, 116,
	111, 114, 109, 45, 97, 112, 112, 45,
	42, 0, 0, 0, 0, 0, 0, 0,
	120, 45, 111, 99, 45, 109, 116, 105,
	109, 101, 0, 0, 0, 0, 0, 0,
}
