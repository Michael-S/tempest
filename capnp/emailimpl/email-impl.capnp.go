// Code generated by capnpc-go. DO NOT EDIT.

package emailimpl

import (
	capnp "capnproto.org/go/capnp/v3"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	persistent "capnproto.org/go/capnp/v3/std/capnp/persistent"
	context "context"
	email "zenhack.net/go/sandstorm/capnp/email"
	supervisor "zenhack.net/go/sandstorm/capnp/supervisor"
)

type PersistentEmailVerifier capnp.Client

// PersistentEmailVerifier_TypeID is the unique identifier for the type PersistentEmailVerifier.
const PersistentEmailVerifier_TypeID = 0xd76bb6182f0aece3

func (c PersistentEmailVerifier) GetId(ctx context.Context, params func(email.EmailVerifier_getId_Params) error) (email.EmailVerifier_getId_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd458f7ca9d1ba9ff,
			MethodID:      0,
			InterfaceName: "email.capnp:EmailVerifier",
			MethodName:    "getId",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(email.EmailVerifier_getId_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return email.EmailVerifier_getId_Results_Future{Future: ans.Future()}, release
}
func (c PersistentEmailVerifier) VerifyEmail(ctx context.Context, params func(email.EmailVerifier_verifyEmail_Params) error) (email.EmailVerifier_verifyEmail_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd458f7ca9d1ba9ff,
			MethodID:      1,
			InterfaceName: "email.capnp:EmailVerifier",
			MethodName:    "verifyEmail",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(email.EmailVerifier_verifyEmail_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return email.EmailVerifier_verifyEmail_Results_Future{Future: ans.Future()}, release
}
func (c PersistentEmailVerifier) AddRequirements(ctx context.Context, params func(supervisor.SystemPersistent_addRequirements_Params) error) (supervisor.SystemPersistent_addRequirements_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(supervisor.SystemPersistent_addRequirements_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return supervisor.SystemPersistent_addRequirements_Results_Future{Future: ans.Future()}, release
}
func (c PersistentEmailVerifier) Save(ctx context.Context, params func(persistent.Persistent_SaveParams) error) (persistent.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistent.Persistent_SaveParams(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistent.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c PersistentEmailVerifier) AddRef() PersistentEmailVerifier {
	return PersistentEmailVerifier(capnp.Client(c).AddRef())
}

func (c PersistentEmailVerifier) Release() {
	capnp.Client(c).Release()
}

func (c PersistentEmailVerifier) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (PersistentEmailVerifier) DecodeFromPtr(p capnp.Ptr) PersistentEmailVerifier {
	return PersistentEmailVerifier(capnp.Client{}.DecodeFromPtr(p))
}

func (c PersistentEmailVerifier) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A PersistentEmailVerifier_Server is a PersistentEmailVerifier with a local implementation.
type PersistentEmailVerifier_Server interface {
	GetId(context.Context, email.EmailVerifier_getId) error

	VerifyEmail(context.Context, email.EmailVerifier_verifyEmail) error

	AddRequirements(context.Context, supervisor.SystemPersistent_addRequirements) error

	Save(context.Context, persistent.Persistent_save) error
}

// PersistentEmailVerifier_NewServer creates a new Server from an implementation of PersistentEmailVerifier_Server.
func PersistentEmailVerifier_NewServer(s PersistentEmailVerifier_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PersistentEmailVerifier_Methods(nil, s), s, c)
}

// PersistentEmailVerifier_ServerToClient creates a new Client from an implementation of PersistentEmailVerifier_Server.
// The caller is responsible for calling Release on the returned Client.
func PersistentEmailVerifier_ServerToClient(s PersistentEmailVerifier_Server) PersistentEmailVerifier {
	return PersistentEmailVerifier(capnp.NewClient(PersistentEmailVerifier_NewServer(s)))
}

// PersistentEmailVerifier_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PersistentEmailVerifier_Methods(methods []server.Method, s PersistentEmailVerifier_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd458f7ca9d1ba9ff,
			MethodID:      0,
			InterfaceName: "email.capnp:EmailVerifier",
			MethodName:    "getId",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetId(ctx, email.EmailVerifier_getId{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd458f7ca9d1ba9ff,
			MethodID:      1,
			InterfaceName: "email.capnp:EmailVerifier",
			MethodName:    "verifyEmail",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.VerifyEmail(ctx, email.EmailVerifier_verifyEmail{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddRequirements(ctx, supervisor.SystemPersistent_addRequirements{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistent.Persistent_save{call})
		},
	})

	return methods
}

// PersistentEmailVerifier_List is a list of PersistentEmailVerifier.
type PersistentEmailVerifier_List = capnp.CapList[PersistentEmailVerifier]

// NewPersistentEmailVerifier creates a new list of PersistentEmailVerifier.
func NewPersistentEmailVerifier_List(s *capnp.Segment, sz int32) (PersistentEmailVerifier_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[PersistentEmailVerifier](l), err
}

type PersistentVerifiedEmail capnp.Client

// PersistentVerifiedEmail_TypeID is the unique identifier for the type PersistentVerifiedEmail.
const PersistentVerifiedEmail_TypeID = 0xe536db3eed324f9b

func (c PersistentVerifiedEmail) AddRequirements(ctx context.Context, params func(supervisor.SystemPersistent_addRequirements_Params) error) (supervisor.SystemPersistent_addRequirements_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(supervisor.SystemPersistent_addRequirements_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return supervisor.SystemPersistent_addRequirements_Results_Future{Future: ans.Future()}, release
}
func (c PersistentVerifiedEmail) Save(ctx context.Context, params func(persistent.Persistent_SaveParams) error) (persistent.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistent.Persistent_SaveParams(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistent.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c PersistentVerifiedEmail) AddRef() PersistentVerifiedEmail {
	return PersistentVerifiedEmail(capnp.Client(c).AddRef())
}

func (c PersistentVerifiedEmail) Release() {
	capnp.Client(c).Release()
}

func (c PersistentVerifiedEmail) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (PersistentVerifiedEmail) DecodeFromPtr(p capnp.Ptr) PersistentVerifiedEmail {
	return PersistentVerifiedEmail(capnp.Client{}.DecodeFromPtr(p))
}

func (c PersistentVerifiedEmail) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A PersistentVerifiedEmail_Server is a PersistentVerifiedEmail with a local implementation.
type PersistentVerifiedEmail_Server interface {
	AddRequirements(context.Context, supervisor.SystemPersistent_addRequirements) error

	Save(context.Context, persistent.Persistent_save) error
}

// PersistentVerifiedEmail_NewServer creates a new Server from an implementation of PersistentVerifiedEmail_Server.
func PersistentVerifiedEmail_NewServer(s PersistentVerifiedEmail_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PersistentVerifiedEmail_Methods(nil, s), s, c)
}

// PersistentVerifiedEmail_ServerToClient creates a new Client from an implementation of PersistentVerifiedEmail_Server.
// The caller is responsible for calling Release on the returned Client.
func PersistentVerifiedEmail_ServerToClient(s PersistentVerifiedEmail_Server) PersistentVerifiedEmail {
	return PersistentVerifiedEmail(capnp.NewClient(PersistentVerifiedEmail_NewServer(s)))
}

// PersistentVerifiedEmail_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PersistentVerifiedEmail_Methods(methods []server.Method, s PersistentVerifiedEmail_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddRequirements(ctx, supervisor.SystemPersistent_addRequirements{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistent.Persistent_save{call})
		},
	})

	return methods
}

// PersistentVerifiedEmail_List is a list of PersistentVerifiedEmail.
type PersistentVerifiedEmail_List = capnp.CapList[PersistentVerifiedEmail]

// NewPersistentVerifiedEmail creates a new list of PersistentVerifiedEmail.
func NewPersistentVerifiedEmail_List(s *capnp.Segment, sz int32) (PersistentVerifiedEmail_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[PersistentVerifiedEmail](l), err
}

const schema_92829022d203a580 = "x\xda2x\xcc\xe8\xc0b\xc8+\xcf\xc7\xc0\x14\xb8\x84" +
	"\x95\xed\xff\xe37\\\xfa\x12\xdb\xb2\xaf3\x08\x0a2\xff" +
	"oX\xca|IiB\xd3$\x06\x06F\xe3\xafl^" +
	"\x8c\xc2\x9c\xec\xec\x0c\x0c\xc2\xac\xec\xec\xc2\xac\xec\xea\x0c" +
	"\x0c\xffg\xfb\x1b\xbd\xb5\xbbm\xf6\x14C\xf5_\x90j" +
	"A\xb0j^vva^vu\x86\xff\x0ck\xff\xa7" +
	"\xe6&f\xe6\xe8f\xe6\xb2\x14\xe4\xe8%'\x16\xe4\x15" +
	"X\x05\xa4\x16\x15g\x16\x97\xa4\xe6\x95\xb8\x82\xe4\xc2R" +
	"\x8b2\xd32S\x8b\x18\x18\x02\x18\x19\x03\x98Y\x039" +
	"\x18\x19\xff\xff_)=\xf7\xd4\xf7\x88+\x0c\x0c\x0c\xff" +
	"\xb7\\\xddWs\xfdm\xcfa\x10\x1b\x9fiP\x83R" +
	"\xc0\xa6\xa2\x98\x16\xf5\xcb\xd7\x8d\xe9c\xf7\x0f4\xd3\x00" +
	"\x01\x00\x00\xff\xff\xae\x80Y\x8d"

func init() {
	schemas.Register(schema_92829022d203a580,
		0xd76bb6182f0aece3,
		0xe536db3eed324f9b)
}
