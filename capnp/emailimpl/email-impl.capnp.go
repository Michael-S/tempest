// Code generated by capnpc-go. DO NOT EDIT.

package emailimpl

import (
	context "context"
	email "zenhack.net/go/sandstorm/capnp/email"
	supervisor "zenhack.net/go/sandstorm/capnp/supervisor"
	capnp "zombiezen.com/go/capnproto2"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
	persistent "zombiezen.com/go/capnproto2/std/capnp/persistent"
)

type PersistentEmailVerifier struct{ Client *capnp.Client }

// PersistentEmailVerifier_TypeID is the unique identifier for the type PersistentEmailVerifier.
const PersistentEmailVerifier_TypeID = 0xd76bb6182f0aece3

func (c PersistentEmailVerifier) GetId(ctx context.Context, params func(email.EmailVerifier_getId_Params) error) (email.EmailVerifier_getId_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd458f7ca9d1ba9ff,
			MethodID:      0,
			InterfaceName: "email.capnp:EmailVerifier",
			MethodName:    "getId",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(email.EmailVerifier_getId_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return email.EmailVerifier_getId_Results_Future{Future: ans.Future()}, release
}
func (c PersistentEmailVerifier) VerifyEmail(ctx context.Context, params func(email.EmailVerifier_verifyEmail_Params) error) (email.EmailVerifier_verifyEmail_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd458f7ca9d1ba9ff,
			MethodID:      1,
			InterfaceName: "email.capnp:EmailVerifier",
			MethodName:    "verifyEmail",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(email.EmailVerifier_verifyEmail_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return email.EmailVerifier_verifyEmail_Results_Future{Future: ans.Future()}, release
}
func (c PersistentEmailVerifier) AddRequirements(ctx context.Context, params func(supervisor.SystemPersistent_addRequirements_Params) error) (supervisor.SystemPersistent_addRequirements_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error {
			return params(supervisor.SystemPersistent_addRequirements_Params{Struct: s})
		}
	}
	ans, release := c.Client.SendCall(ctx, s)
	return supervisor.SystemPersistent_addRequirements_Results_Future{Future: ans.Future()}, release
}
func (c PersistentEmailVerifier) Save(ctx context.Context, params func(persistent.Persistent_SaveParams) error) (persistent.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistent.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistent.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

// A PersistentEmailVerifier_Server is a PersistentEmailVerifier with a local implementation.
type PersistentEmailVerifier_Server interface {
	GetId(context.Context, email.EmailVerifier_getId) error

	VerifyEmail(context.Context, email.EmailVerifier_verifyEmail) error

	AddRequirements(context.Context, supervisor.SystemPersistent_addRequirements) error

	Save(context.Context, persistent.Persistent_save) error
}

// PersistentEmailVerifier_NewServer creates a new Server from an implementation of PersistentEmailVerifier_Server.
func PersistentEmailVerifier_NewServer(s PersistentEmailVerifier_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PersistentEmailVerifier_Methods(nil, s), s, c, policy)
}

// PersistentEmailVerifier_ServerToClient creates a new Client from an implementation of PersistentEmailVerifier_Server.
// The caller is responsible for calling Release on the returned Client.
func PersistentEmailVerifier_ServerToClient(s PersistentEmailVerifier_Server, policy *server.Policy) PersistentEmailVerifier {
	return PersistentEmailVerifier{Client: capnp.NewClient(PersistentEmailVerifier_NewServer(s, policy))}
}

// PersistentEmailVerifier_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PersistentEmailVerifier_Methods(methods []server.Method, s PersistentEmailVerifier_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd458f7ca9d1ba9ff,
			MethodID:      0,
			InterfaceName: "email.capnp:EmailVerifier",
			MethodName:    "getId",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetId(ctx, email.EmailVerifier_getId{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd458f7ca9d1ba9ff,
			MethodID:      1,
			InterfaceName: "email.capnp:EmailVerifier",
			MethodName:    "verifyEmail",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.VerifyEmail(ctx, email.EmailVerifier_verifyEmail{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddRequirements(ctx, supervisor.SystemPersistent_addRequirements{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistent.Persistent_save{call})
		},
	})

	return methods
}

type PersistentVerifiedEmail struct{ Client *capnp.Client }

// PersistentVerifiedEmail_TypeID is the unique identifier for the type PersistentVerifiedEmail.
const PersistentVerifiedEmail_TypeID = 0xe536db3eed324f9b

func (c PersistentVerifiedEmail) AddRequirements(ctx context.Context, params func(supervisor.SystemPersistent_addRequirements_Params) error) (supervisor.SystemPersistent_addRequirements_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error {
			return params(supervisor.SystemPersistent_addRequirements_Params{Struct: s})
		}
	}
	ans, release := c.Client.SendCall(ctx, s)
	return supervisor.SystemPersistent_addRequirements_Results_Future{Future: ans.Future()}, release
}
func (c PersistentVerifiedEmail) Save(ctx context.Context, params func(persistent.Persistent_SaveParams) error) (persistent.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistent.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistent.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

// A PersistentVerifiedEmail_Server is a PersistentVerifiedEmail with a local implementation.
type PersistentVerifiedEmail_Server interface {
	AddRequirements(context.Context, supervisor.SystemPersistent_addRequirements) error

	Save(context.Context, persistent.Persistent_save) error
}

// PersistentVerifiedEmail_NewServer creates a new Server from an implementation of PersistentVerifiedEmail_Server.
func PersistentVerifiedEmail_NewServer(s PersistentVerifiedEmail_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PersistentVerifiedEmail_Methods(nil, s), s, c, policy)
}

// PersistentVerifiedEmail_ServerToClient creates a new Client from an implementation of PersistentVerifiedEmail_Server.
// The caller is responsible for calling Release on the returned Client.
func PersistentVerifiedEmail_ServerToClient(s PersistentVerifiedEmail_Server, policy *server.Policy) PersistentVerifiedEmail {
	return PersistentVerifiedEmail{Client: capnp.NewClient(PersistentVerifiedEmail_NewServer(s, policy))}
}

// PersistentVerifiedEmail_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PersistentVerifiedEmail_Methods(methods []server.Method, s PersistentVerifiedEmail_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddRequirements(ctx, supervisor.SystemPersistent_addRequirements{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistent.Persistent_save{call})
		},
	})

	return methods
}

const schema_92829022d203a580 = "x\xda28\xcd\xe8\xc0d\xc8\x9a\xcf\xcb\xc0\x108\x87" +
	"\x95\xed\xff\xe37\\\xfa\x12\xdb\xb2\xaf3\x08\x0a2\xff" +
	"oX\xca|IiB\xd3$\x06\x06F\xe3\xb9l^" +
	"\x8c\xc2\x1b\xd9\xd8\x19\x18\x84\xd7\xb2\xb1\x0b\xafeSg" +
	"`\xf8?\xdb\xdf\xe8\xad\xddm\xb3\xa7\x18\xaa\x97\x82T" +
	"\xef\x04\xab\xde\xca\xc6.\xbc\x95M\x9d\xe1?\xc3\xf4\xff" +
	"\xa9\xb9\x89\x999\xba\x99\xb9,\x059z\xc9\x89\x05y" +
	"\x05V\x01\xa9E\xc5\x99\xc5%\xa9y%\xae \xb9\xb0" +
	"\xd4\xa2\xcc\xb4\xcc\xd4\"\x06\x86\x00F\xc6\x00f\xd6@" +
	"\x0eF\xc6\xff\xffWJ\xcf=\xf5=\xe2\x0a\x03\x03\xc3" +
	"\xff-W\xf7\xd5\\\x7f\xdbs\x18\xc4\xc6g\x1a\xd4\xa0" +
	"\x14\xb0\xa9(\xa6E\xfd\xf2uc\xfa\xd8\xfd\x03\xcd4" +
	"@\x00\x00\x00\xff\xff$$\\\xd4"

func init() {
	schemas.Register(schema_92829022d203a580,
		0xd76bb6182f0aece3,
		0xe536db3eed324f9b)
}
