// Code generated by capnpc-go. DO NOT EDIT.

package spk

import (
	strconv "strconv"
	apisession "zenhack.net/go/sandstorm/capnp/apisession"
	grain "zenhack.net/go/sandstorm/capnp/grain"
	powerbox "zenhack.net/go/sandstorm/capnp/powerbox"
	util "zenhack.net/go/sandstorm/capnp/util"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

const OsiInfo = uint64(0x9476412d0315d869)
const CategoryInfoAnnotation = uint64(0x8d51dd236606d205)

// Constants defined in package.capnp.
const (
	Manifest_sizeLimitInWords = uint64(1048576)
)

// Constants defined in package.capnp.
var (
	MagicNumber = []byte{143, 198, 205, 239, 69, 26, 234, 150}
)

type PackageDefinition struct{ capnp.Struct }

// PackageDefinition_TypeID is the unique identifier for the type PackageDefinition.
const PackageDefinition_TypeID = 0x9f149fa71489be0b

func NewPackageDefinition(s *capnp.Segment) (PackageDefinition, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return PackageDefinition{st}, err
}

func NewRootPackageDefinition(s *capnp.Segment) (PackageDefinition, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return PackageDefinition{st}, err
}

func ReadRootPackageDefinition(msg *capnp.Message) (PackageDefinition, error) {
	root, err := msg.RootPtr()
	return PackageDefinition{root.Struct()}, err
}

func (s PackageDefinition) String() string {
	str, _ := text.Marshal(0x9f149fa71489be0b, s.Struct)
	return str
}

func (s PackageDefinition) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PackageDefinition) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PackageDefinition) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PackageDefinition) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PackageDefinition) Manifest() (Manifest, error) {
	p, err := s.Struct.Ptr(1)
	return Manifest{Struct: p.Struct()}, err
}

func (s PackageDefinition) HasManifest() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PackageDefinition) SetManifest(v Manifest) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewManifest sets the manifest field to a newly
// allocated Manifest struct, preferring placement in s's segment.
func (s PackageDefinition) NewManifest() (Manifest, error) {
	ss, err := NewManifest(s.Struct.Segment())
	if err != nil {
		return Manifest{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s PackageDefinition) SourceMap() (SourceMap, error) {
	p, err := s.Struct.Ptr(2)
	return SourceMap{Struct: p.Struct()}, err
}

func (s PackageDefinition) HasSourceMap() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s PackageDefinition) SetSourceMap(v SourceMap) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewSourceMap sets the sourceMap field to a newly
// allocated SourceMap struct, preferring placement in s's segment.
func (s PackageDefinition) NewSourceMap() (SourceMap, error) {
	ss, err := NewSourceMap(s.Struct.Segment())
	if err != nil {
		return SourceMap{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s PackageDefinition) FileList() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s PackageDefinition) HasFileList() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s PackageDefinition) FileListBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s PackageDefinition) SetFileList(v string) error {
	return s.Struct.SetText(3, v)
}

func (s PackageDefinition) AlwaysInclude() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.TextList{List: p.List()}, err
}

func (s PackageDefinition) HasAlwaysInclude() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s PackageDefinition) SetAlwaysInclude(v capnp.TextList) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewAlwaysInclude sets the alwaysInclude field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s PackageDefinition) NewAlwaysInclude(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s PackageDefinition) BridgeConfig() (BridgeConfig, error) {
	p, err := s.Struct.Ptr(5)
	return BridgeConfig{Struct: p.Struct()}, err
}

func (s PackageDefinition) HasBridgeConfig() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s PackageDefinition) SetBridgeConfig(v BridgeConfig) error {
	return s.Struct.SetPtr(5, v.Struct.ToPtr())
}

// NewBridgeConfig sets the bridgeConfig field to a newly
// allocated BridgeConfig struct, preferring placement in s's segment.
func (s PackageDefinition) NewBridgeConfig() (BridgeConfig, error) {
	ss, err := NewBridgeConfig(s.Struct.Segment())
	if err != nil {
		return BridgeConfig{}, err
	}
	err = s.Struct.SetPtr(5, ss.Struct.ToPtr())
	return ss, err
}

// PackageDefinition_List is a list of PackageDefinition.
type PackageDefinition_List struct{ capnp.List }

// NewPackageDefinition creates a new list of PackageDefinition.
func NewPackageDefinition_List(s *capnp.Segment, sz int32) (PackageDefinition_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6}, sz)
	return PackageDefinition_List{l}, err
}

func (s PackageDefinition_List) At(i int) PackageDefinition {
	return PackageDefinition{s.List.Struct(i)}
}

func (s PackageDefinition_List) Set(i int, v PackageDefinition) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PackageDefinition_List) String() string {
	str, _ := text.MarshalList(0x9f149fa71489be0b, s.List)
	return str
}

// PackageDefinition_Promise is a wrapper for a PackageDefinition promised by a client call.
type PackageDefinition_Promise struct{ *capnp.Pipeline }

func (p PackageDefinition_Promise) Struct() (PackageDefinition, error) {
	s, err := p.Pipeline.Struct()
	return PackageDefinition{s}, err
}

func (p PackageDefinition_Promise) Manifest() Manifest_Promise {
	return Manifest_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p PackageDefinition_Promise) SourceMap() SourceMap_Promise {
	return SourceMap_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

func (p PackageDefinition_Promise) BridgeConfig() BridgeConfig_Promise {
	return BridgeConfig_Promise{Pipeline: p.Pipeline.GetPipeline(5)}
}

type Manifest struct{ capnp.Struct }

// Manifest_TypeID is the unique identifier for the type Manifest.
const Manifest_TypeID = 0x855f296a69e6e1ca

func NewManifest(s *capnp.Segment) (Manifest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return Manifest{st}, err
}

func NewRootManifest(s *capnp.Segment) (Manifest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return Manifest{st}, err
}

func ReadRootManifest(msg *capnp.Message) (Manifest, error) {
	root, err := msg.RootPtr()
	return Manifest{root.Struct()}, err
}

func (s Manifest) String() string {
	str, _ := text.Marshal(0x855f296a69e6e1ca, s.Struct)
	return str
}

func (s Manifest) AppTitle() (util.LocalizedText, error) {
	p, err := s.Struct.Ptr(3)
	return util.LocalizedText{Struct: p.Struct()}, err
}

func (s Manifest) HasAppTitle() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Manifest) SetAppTitle(v util.LocalizedText) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewAppTitle sets the appTitle field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s Manifest) NewAppTitle() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(s.Struct.Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

func (s Manifest) AppVersion() uint32 {
	return s.Struct.Uint32(8)
}

func (s Manifest) SetAppVersion(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s Manifest) MinUpgradableAppVersion() uint32 {
	return s.Struct.Uint32(12)
}

func (s Manifest) SetMinUpgradableAppVersion(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s Manifest) AppMarketingVersion() (util.LocalizedText, error) {
	p, err := s.Struct.Ptr(2)
	return util.LocalizedText{Struct: p.Struct()}, err
}

func (s Manifest) HasAppMarketingVersion() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Manifest) SetAppMarketingVersion(v util.LocalizedText) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewAppMarketingVersion sets the appMarketingVersion field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s Manifest) NewAppMarketingVersion() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(s.Struct.Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Manifest) MinApiVersion() uint32 {
	return s.Struct.Uint32(0)
}

func (s Manifest) SetMinApiVersion(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Manifest) MaxApiVersion() uint32 {
	return s.Struct.Uint32(4)
}

func (s Manifest) SetMaxApiVersion(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s Manifest) Metadata() (Metadata, error) {
	p, err := s.Struct.Ptr(4)
	return Metadata{Struct: p.Struct()}, err
}

func (s Manifest) HasMetadata() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Manifest) SetMetadata(v Metadata) error {
	return s.Struct.SetPtr(4, v.Struct.ToPtr())
}

// NewMetadata sets the metadata field to a newly
// allocated Metadata struct, preferring placement in s's segment.
func (s Manifest) NewMetadata() (Metadata, error) {
	ss, err := NewMetadata(s.Struct.Segment())
	if err != nil {
		return Metadata{}, err
	}
	err = s.Struct.SetPtr(4, ss.Struct.ToPtr())
	return ss, err
}

func (s Manifest) Actions() (Manifest_Action_List, error) {
	p, err := s.Struct.Ptr(0)
	return Manifest_Action_List{List: p.List()}, err
}

func (s Manifest) HasActions() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Manifest) SetActions(v Manifest_Action_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewActions sets the actions field to a newly
// allocated Manifest_Action_List, preferring placement in s's segment.
func (s Manifest) NewActions(n int32) (Manifest_Action_List, error) {
	l, err := NewManifest_Action_List(s.Struct.Segment(), n)
	if err != nil {
		return Manifest_Action_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Manifest) ContinueCommand() (Manifest_Command, error) {
	p, err := s.Struct.Ptr(1)
	return Manifest_Command{Struct: p.Struct()}, err
}

func (s Manifest) HasContinueCommand() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Manifest) SetContinueCommand(v Manifest_Command) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewContinueCommand sets the continueCommand field to a newly
// allocated Manifest_Command struct, preferring placement in s's segment.
func (s Manifest) NewContinueCommand() (Manifest_Command, error) {
	ss, err := NewManifest_Command(s.Struct.Segment())
	if err != nil {
		return Manifest_Command{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Manifest_List is a list of Manifest.
type Manifest_List struct{ capnp.List }

// NewManifest creates a new list of Manifest.
func NewManifest_List(s *capnp.Segment, sz int32) (Manifest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return Manifest_List{l}, err
}

func (s Manifest_List) At(i int) Manifest { return Manifest{s.List.Struct(i)} }

func (s Manifest_List) Set(i int, v Manifest) error { return s.List.SetStruct(i, v.Struct) }

func (s Manifest_List) String() string {
	str, _ := text.MarshalList(0x855f296a69e6e1ca, s.List)
	return str
}

// Manifest_Promise is a wrapper for a Manifest promised by a client call.
type Manifest_Promise struct{ *capnp.Pipeline }

func (p Manifest_Promise) Struct() (Manifest, error) {
	s, err := p.Pipeline.Struct()
	return Manifest{s}, err
}

func (p Manifest_Promise) AppTitle() util.LocalizedText_Promise {
	return util.LocalizedText_Promise{Pipeline: p.Pipeline.GetPipeline(3)}
}

func (p Manifest_Promise) AppMarketingVersion() util.LocalizedText_Promise {
	return util.LocalizedText_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

func (p Manifest_Promise) Metadata() Metadata_Promise {
	return Metadata_Promise{Pipeline: p.Pipeline.GetPipeline(4)}
}

func (p Manifest_Promise) ContinueCommand() Manifest_Command_Promise {
	return Manifest_Command_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Manifest_Command struct{ capnp.Struct }

// Manifest_Command_TypeID is the unique identifier for the type Manifest_Command.
const Manifest_Command_TypeID = 0xc64951b2a02886cf

func NewManifest_Command(s *capnp.Segment) (Manifest_Command, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Manifest_Command{st}, err
}

func NewRootManifest_Command(s *capnp.Segment) (Manifest_Command, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Manifest_Command{st}, err
}

func ReadRootManifest_Command(msg *capnp.Message) (Manifest_Command, error) {
	root, err := msg.RootPtr()
	return Manifest_Command{root.Struct()}, err
}

func (s Manifest_Command) String() string {
	str, _ := text.Marshal(0xc64951b2a02886cf, s.Struct)
	return str
}

func (s Manifest_Command) Argv() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s Manifest_Command) HasArgv() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Manifest_Command) SetArgv(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewArgv sets the argv field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Manifest_Command) NewArgv(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Manifest_Command) Environ() (util.KeyValue_List, error) {
	p, err := s.Struct.Ptr(2)
	return util.KeyValue_List{List: p.List()}, err
}

func (s Manifest_Command) HasEnviron() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Manifest_Command) SetEnviron(v util.KeyValue_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewEnviron sets the environ field to a newly
// allocated util.KeyValue_List, preferring placement in s's segment.
func (s Manifest_Command) NewEnviron(n int32) (util.KeyValue_List, error) {
	l, err := util.NewKeyValue_List(s.Struct.Segment(), n)
	if err != nil {
		return util.KeyValue_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Manifest_Command) DeprecatedExecutablePath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Manifest_Command) HasDeprecatedExecutablePath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Manifest_Command) DeprecatedExecutablePathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Manifest_Command) SetDeprecatedExecutablePath(v string) error {
	return s.Struct.SetText(0, v)
}

// Manifest_Command_List is a list of Manifest_Command.
type Manifest_Command_List struct{ capnp.List }

// NewManifest_Command creates a new list of Manifest_Command.
func NewManifest_Command_List(s *capnp.Segment, sz int32) (Manifest_Command_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Manifest_Command_List{l}, err
}

func (s Manifest_Command_List) At(i int) Manifest_Command { return Manifest_Command{s.List.Struct(i)} }

func (s Manifest_Command_List) Set(i int, v Manifest_Command) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Manifest_Command_List) String() string {
	str, _ := text.MarshalList(0xc64951b2a02886cf, s.List)
	return str
}

// Manifest_Command_Promise is a wrapper for a Manifest_Command promised by a client call.
type Manifest_Command_Promise struct{ *capnp.Pipeline }

func (p Manifest_Command_Promise) Struct() (Manifest_Command, error) {
	s, err := p.Pipeline.Struct()
	return Manifest_Command{s}, err
}

type Manifest_Action struct{ capnp.Struct }
type Manifest_Action_input Manifest_Action
type Manifest_Action_input_Which uint16

const (
	Manifest_Action_input_Which_none       Manifest_Action_input_Which = 0
	Manifest_Action_input_Which_capability Manifest_Action_input_Which = 1
)

func (w Manifest_Action_input_Which) String() string {
	const s = "nonecapability"
	switch w {
	case Manifest_Action_input_Which_none:
		return s[0:4]
	case Manifest_Action_input_Which_capability:
		return s[4:14]

	}
	return "Manifest_Action_input_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Manifest_Action_TypeID is the unique identifier for the type Manifest_Action.
const Manifest_Action_TypeID = 0xe5c59b9296375a00

func NewManifest_Action(s *capnp.Segment) (Manifest_Action, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Manifest_Action{st}, err
}

func NewRootManifest_Action(s *capnp.Segment) (Manifest_Action, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Manifest_Action{st}, err
}

func ReadRootManifest_Action(msg *capnp.Message) (Manifest_Action, error) {
	root, err := msg.RootPtr()
	return Manifest_Action{root.Struct()}, err
}

func (s Manifest_Action) String() string {
	str, _ := text.Marshal(0xe5c59b9296375a00, s.Struct)
	return str
}

func (s Manifest_Action) Input() Manifest_Action_input { return Manifest_Action_input(s) }

func (s Manifest_Action_input) Which() Manifest_Action_input_Which {
	return Manifest_Action_input_Which(s.Struct.Uint16(0))
}
func (s Manifest_Action_input) SetNone() {
	s.Struct.SetUint16(0, 0)

}

func (s Manifest_Action_input) Capability() (powerbox.PowerboxDescriptor_List, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != capability")
	}
	p, err := s.Struct.Ptr(0)
	return powerbox.PowerboxDescriptor_List{List: p.List()}, err
}

func (s Manifest_Action_input) HasCapability() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Manifest_Action_input) SetCapability(v powerbox.PowerboxDescriptor_List) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCapability sets the capability field to a newly
// allocated powerbox.PowerboxDescriptor_List, preferring placement in s's segment.
func (s Manifest_Action_input) NewCapability(n int32) (powerbox.PowerboxDescriptor_List, error) {
	s.Struct.SetUint16(0, 1)
	l, err := powerbox.NewPowerboxDescriptor_List(s.Struct.Segment(), n)
	if err != nil {
		return powerbox.PowerboxDescriptor_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Manifest_Action) Command() (Manifest_Command, error) {
	p, err := s.Struct.Ptr(1)
	return Manifest_Command{Struct: p.Struct()}, err
}

func (s Manifest_Action) HasCommand() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Manifest_Action) SetCommand(v Manifest_Command) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewCommand sets the command field to a newly
// allocated Manifest_Command struct, preferring placement in s's segment.
func (s Manifest_Action) NewCommand() (Manifest_Command, error) {
	ss, err := NewManifest_Command(s.Struct.Segment())
	if err != nil {
		return Manifest_Command{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Manifest_Action) Title() (util.LocalizedText, error) {
	p, err := s.Struct.Ptr(2)
	return util.LocalizedText{Struct: p.Struct()}, err
}

func (s Manifest_Action) HasTitle() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Manifest_Action) SetTitle(v util.LocalizedText) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewTitle sets the title field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s Manifest_Action) NewTitle() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(s.Struct.Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Manifest_Action) NounPhrase() (util.LocalizedText, error) {
	p, err := s.Struct.Ptr(4)
	return util.LocalizedText{Struct: p.Struct()}, err
}

func (s Manifest_Action) HasNounPhrase() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Manifest_Action) SetNounPhrase(v util.LocalizedText) error {
	return s.Struct.SetPtr(4, v.Struct.ToPtr())
}

// NewNounPhrase sets the nounPhrase field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s Manifest_Action) NewNounPhrase() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(s.Struct.Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = s.Struct.SetPtr(4, ss.Struct.ToPtr())
	return ss, err
}

func (s Manifest_Action) Description() (util.LocalizedText, error) {
	p, err := s.Struct.Ptr(3)
	return util.LocalizedText{Struct: p.Struct()}, err
}

func (s Manifest_Action) HasDescription() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Manifest_Action) SetDescription(v util.LocalizedText) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewDescription sets the description field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s Manifest_Action) NewDescription() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(s.Struct.Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

// Manifest_Action_List is a list of Manifest_Action.
type Manifest_Action_List struct{ capnp.List }

// NewManifest_Action creates a new list of Manifest_Action.
func NewManifest_Action_List(s *capnp.Segment, sz int32) (Manifest_Action_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return Manifest_Action_List{l}, err
}

func (s Manifest_Action_List) At(i int) Manifest_Action { return Manifest_Action{s.List.Struct(i)} }

func (s Manifest_Action_List) Set(i int, v Manifest_Action) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Manifest_Action_List) String() string {
	str, _ := text.MarshalList(0xe5c59b9296375a00, s.List)
	return str
}

// Manifest_Action_Promise is a wrapper for a Manifest_Action promised by a client call.
type Manifest_Action_Promise struct{ *capnp.Pipeline }

func (p Manifest_Action_Promise) Struct() (Manifest_Action, error) {
	s, err := p.Pipeline.Struct()
	return Manifest_Action{s}, err
}

func (p Manifest_Action_Promise) Input() Manifest_Action_input_Promise {
	return Manifest_Action_input_Promise{p.Pipeline}
}

// Manifest_Action_input_Promise is a wrapper for a Manifest_Action_input promised by a client call.
type Manifest_Action_input_Promise struct{ *capnp.Pipeline }

func (p Manifest_Action_input_Promise) Struct() (Manifest_Action_input, error) {
	s, err := p.Pipeline.Struct()
	return Manifest_Action_input{s}, err
}

func (p Manifest_Action_Promise) Command() Manifest_Command_Promise {
	return Manifest_Command_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Manifest_Action_Promise) Title() util.LocalizedText_Promise {
	return util.LocalizedText_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

func (p Manifest_Action_Promise) NounPhrase() util.LocalizedText_Promise {
	return util.LocalizedText_Promise{Pipeline: p.Pipeline.GetPipeline(4)}
}

func (p Manifest_Action_Promise) Description() util.LocalizedText_Promise {
	return util.LocalizedText_Promise{Pipeline: p.Pipeline.GetPipeline(3)}
}

type SourceMap struct{ capnp.Struct }

// SourceMap_TypeID is the unique identifier for the type SourceMap.
const SourceMap_TypeID = 0xe3d7ba482b2e470b

func NewSourceMap(s *capnp.Segment) (SourceMap, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SourceMap{st}, err
}

func NewRootSourceMap(s *capnp.Segment) (SourceMap, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SourceMap{st}, err
}

func ReadRootSourceMap(msg *capnp.Message) (SourceMap, error) {
	root, err := msg.RootPtr()
	return SourceMap{root.Struct()}, err
}

func (s SourceMap) String() string {
	str, _ := text.Marshal(0xe3d7ba482b2e470b, s.Struct)
	return str
}

func (s SourceMap) SearchPath() (SourceMap_Mapping_List, error) {
	p, err := s.Struct.Ptr(0)
	return SourceMap_Mapping_List{List: p.List()}, err
}

func (s SourceMap) HasSearchPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SourceMap) SetSearchPath(v SourceMap_Mapping_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSearchPath sets the searchPath field to a newly
// allocated SourceMap_Mapping_List, preferring placement in s's segment.
func (s SourceMap) NewSearchPath(n int32) (SourceMap_Mapping_List, error) {
	l, err := NewSourceMap_Mapping_List(s.Struct.Segment(), n)
	if err != nil {
		return SourceMap_Mapping_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// SourceMap_List is a list of SourceMap.
type SourceMap_List struct{ capnp.List }

// NewSourceMap creates a new list of SourceMap.
func NewSourceMap_List(s *capnp.Segment, sz int32) (SourceMap_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SourceMap_List{l}, err
}

func (s SourceMap_List) At(i int) SourceMap { return SourceMap{s.List.Struct(i)} }

func (s SourceMap_List) Set(i int, v SourceMap) error { return s.List.SetStruct(i, v.Struct) }

func (s SourceMap_List) String() string {
	str, _ := text.MarshalList(0xe3d7ba482b2e470b, s.List)
	return str
}

// SourceMap_Promise is a wrapper for a SourceMap promised by a client call.
type SourceMap_Promise struct{ *capnp.Pipeline }

func (p SourceMap_Promise) Struct() (SourceMap, error) {
	s, err := p.Pipeline.Struct()
	return SourceMap{s}, err
}

type SourceMap_Mapping struct{ capnp.Struct }

// SourceMap_Mapping_TypeID is the unique identifier for the type SourceMap_Mapping.
const SourceMap_Mapping_TypeID = 0x87dcf1b1edcb3eaf

func NewSourceMap_Mapping(s *capnp.Segment) (SourceMap_Mapping, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return SourceMap_Mapping{st}, err
}

func NewRootSourceMap_Mapping(s *capnp.Segment) (SourceMap_Mapping, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return SourceMap_Mapping{st}, err
}

func ReadRootSourceMap_Mapping(msg *capnp.Message) (SourceMap_Mapping, error) {
	root, err := msg.RootPtr()
	return SourceMap_Mapping{root.Struct()}, err
}

func (s SourceMap_Mapping) String() string {
	str, _ := text.Marshal(0x87dcf1b1edcb3eaf, s.Struct)
	return str
}

func (s SourceMap_Mapping) PackagePath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SourceMap_Mapping) HasPackagePath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SourceMap_Mapping) PackagePathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SourceMap_Mapping) SetPackagePath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s SourceMap_Mapping) SourcePath() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s SourceMap_Mapping) HasSourcePath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SourceMap_Mapping) SourcePathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s SourceMap_Mapping) SetSourcePath(v string) error {
	return s.Struct.SetText(1, v)
}

func (s SourceMap_Mapping) HidePaths() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s SourceMap_Mapping) HasHidePaths() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s SourceMap_Mapping) SetHidePaths(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewHidePaths sets the hidePaths field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s SourceMap_Mapping) NewHidePaths(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// SourceMap_Mapping_List is a list of SourceMap_Mapping.
type SourceMap_Mapping_List struct{ capnp.List }

// NewSourceMap_Mapping creates a new list of SourceMap_Mapping.
func NewSourceMap_Mapping_List(s *capnp.Segment, sz int32) (SourceMap_Mapping_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return SourceMap_Mapping_List{l}, err
}

func (s SourceMap_Mapping_List) At(i int) SourceMap_Mapping {
	return SourceMap_Mapping{s.List.Struct(i)}
}

func (s SourceMap_Mapping_List) Set(i int, v SourceMap_Mapping) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SourceMap_Mapping_List) String() string {
	str, _ := text.MarshalList(0x87dcf1b1edcb3eaf, s.List)
	return str
}

// SourceMap_Mapping_Promise is a wrapper for a SourceMap_Mapping promised by a client call.
type SourceMap_Mapping_Promise struct{ *capnp.Pipeline }

func (p SourceMap_Mapping_Promise) Struct() (SourceMap_Mapping, error) {
	s, err := p.Pipeline.Struct()
	return SourceMap_Mapping{s}, err
}

type BridgeConfig struct{ capnp.Struct }

// BridgeConfig_TypeID is the unique identifier for the type BridgeConfig.
const BridgeConfig_TypeID = 0xdd8c82383168c096

func NewBridgeConfig(s *capnp.Segment) (BridgeConfig, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return BridgeConfig{st}, err
}

func NewRootBridgeConfig(s *capnp.Segment) (BridgeConfig, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return BridgeConfig{st}, err
}

func ReadRootBridgeConfig(msg *capnp.Message) (BridgeConfig, error) {
	root, err := msg.RootPtr()
	return BridgeConfig{root.Struct()}, err
}

func (s BridgeConfig) String() string {
	str, _ := text.Marshal(0xdd8c82383168c096, s.Struct)
	return str
}

func (s BridgeConfig) ViewInfo() (grain.UiView_ViewInfo, error) {
	p, err := s.Struct.Ptr(0)
	return grain.UiView_ViewInfo{Struct: p.Struct()}, err
}

func (s BridgeConfig) HasViewInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BridgeConfig) SetViewInfo(v grain.UiView_ViewInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewViewInfo sets the viewInfo field to a newly
// allocated grain.UiView_ViewInfo struct, preferring placement in s's segment.
func (s BridgeConfig) NewViewInfo() (grain.UiView_ViewInfo, error) {
	ss, err := grain.NewUiView_ViewInfo(s.Struct.Segment())
	if err != nil {
		return grain.UiView_ViewInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s BridgeConfig) ApiPath() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s BridgeConfig) HasApiPath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s BridgeConfig) ApiPathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s BridgeConfig) SetApiPath(v string) error {
	return s.Struct.SetText(1, v)
}

func (s BridgeConfig) SaveIdentityCaps() bool {
	return s.Struct.Bit(0)
}

func (s BridgeConfig) SetSaveIdentityCaps(v bool) {
	s.Struct.SetBit(0, v)
}

func (s BridgeConfig) PowerboxApis() (BridgeConfig_PowerboxApi_List, error) {
	p, err := s.Struct.Ptr(2)
	return BridgeConfig_PowerboxApi_List{List: p.List()}, err
}

func (s BridgeConfig) HasPowerboxApis() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s BridgeConfig) SetPowerboxApis(v BridgeConfig_PowerboxApi_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewPowerboxApis sets the powerboxApis field to a newly
// allocated BridgeConfig_PowerboxApi_List, preferring placement in s's segment.
func (s BridgeConfig) NewPowerboxApis(n int32) (BridgeConfig_PowerboxApi_List, error) {
	l, err := NewBridgeConfig_PowerboxApi_List(s.Struct.Segment(), n)
	if err != nil {
		return BridgeConfig_PowerboxApi_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// BridgeConfig_List is a list of BridgeConfig.
type BridgeConfig_List struct{ capnp.List }

// NewBridgeConfig creates a new list of BridgeConfig.
func NewBridgeConfig_List(s *capnp.Segment, sz int32) (BridgeConfig_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return BridgeConfig_List{l}, err
}

func (s BridgeConfig_List) At(i int) BridgeConfig { return BridgeConfig{s.List.Struct(i)} }

func (s BridgeConfig_List) Set(i int, v BridgeConfig) error { return s.List.SetStruct(i, v.Struct) }

func (s BridgeConfig_List) String() string {
	str, _ := text.MarshalList(0xdd8c82383168c096, s.List)
	return str
}

// BridgeConfig_Promise is a wrapper for a BridgeConfig promised by a client call.
type BridgeConfig_Promise struct{ *capnp.Pipeline }

func (p BridgeConfig_Promise) Struct() (BridgeConfig, error) {
	s, err := p.Pipeline.Struct()
	return BridgeConfig{s}, err
}

func (p BridgeConfig_Promise) ViewInfo() grain.UiView_ViewInfo_Promise {
	return grain.UiView_ViewInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type BridgeConfig_PowerboxApi struct{ capnp.Struct }

// BridgeConfig_PowerboxApi_TypeID is the unique identifier for the type BridgeConfig_PowerboxApi.
const BridgeConfig_PowerboxApi_TypeID = 0xc9702c7dbfc6d7e4

func NewBridgeConfig_PowerboxApi(s *capnp.Segment) (BridgeConfig_PowerboxApi, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return BridgeConfig_PowerboxApi{st}, err
}

func NewRootBridgeConfig_PowerboxApi(s *capnp.Segment) (BridgeConfig_PowerboxApi, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return BridgeConfig_PowerboxApi{st}, err
}

func ReadRootBridgeConfig_PowerboxApi(msg *capnp.Message) (BridgeConfig_PowerboxApi, error) {
	root, err := msg.RootPtr()
	return BridgeConfig_PowerboxApi{root.Struct()}, err
}

func (s BridgeConfig_PowerboxApi) String() string {
	str, _ := text.Marshal(0xc9702c7dbfc6d7e4, s.Struct)
	return str
}

func (s BridgeConfig_PowerboxApi) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s BridgeConfig_PowerboxApi) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BridgeConfig_PowerboxApi) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s BridgeConfig_PowerboxApi) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s BridgeConfig_PowerboxApi) DisplayInfo() (powerbox.PowerboxDisplayInfo, error) {
	p, err := s.Struct.Ptr(1)
	return powerbox.PowerboxDisplayInfo{Struct: p.Struct()}, err
}

func (s BridgeConfig_PowerboxApi) HasDisplayInfo() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s BridgeConfig_PowerboxApi) SetDisplayInfo(v powerbox.PowerboxDisplayInfo) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewDisplayInfo sets the displayInfo field to a newly
// allocated powerbox.PowerboxDisplayInfo struct, preferring placement in s's segment.
func (s BridgeConfig_PowerboxApi) NewDisplayInfo() (powerbox.PowerboxDisplayInfo, error) {
	ss, err := powerbox.NewPowerboxDisplayInfo(s.Struct.Segment())
	if err != nil {
		return powerbox.PowerboxDisplayInfo{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s BridgeConfig_PowerboxApi) Path() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s BridgeConfig_PowerboxApi) HasPath() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s BridgeConfig_PowerboxApi) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s BridgeConfig_PowerboxApi) SetPath(v string) error {
	return s.Struct.SetText(2, v)
}

func (s BridgeConfig_PowerboxApi) Tag() (apisession.ApiSession_PowerboxTag, error) {
	p, err := s.Struct.Ptr(3)
	return apisession.ApiSession_PowerboxTag{Struct: p.Struct()}, err
}

func (s BridgeConfig_PowerboxApi) HasTag() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s BridgeConfig_PowerboxApi) SetTag(v apisession.ApiSession_PowerboxTag) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewTag sets the tag field to a newly
// allocated apisession.ApiSession_PowerboxTag struct, preferring placement in s's segment.
func (s BridgeConfig_PowerboxApi) NewTag() (apisession.ApiSession_PowerboxTag, error) {
	ss, err := apisession.NewApiSession_PowerboxTag(s.Struct.Segment())
	if err != nil {
		return apisession.ApiSession_PowerboxTag{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

func (s BridgeConfig_PowerboxApi) Permissions() (capnp.BitList, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.BitList{List: p.List()}, err
}

func (s BridgeConfig_PowerboxApi) HasPermissions() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s BridgeConfig_PowerboxApi) SetPermissions(v capnp.BitList) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewPermissions sets the permissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s BridgeConfig_PowerboxApi) NewPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

// BridgeConfig_PowerboxApi_List is a list of BridgeConfig_PowerboxApi.
type BridgeConfig_PowerboxApi_List struct{ capnp.List }

// NewBridgeConfig_PowerboxApi creates a new list of BridgeConfig_PowerboxApi.
func NewBridgeConfig_PowerboxApi_List(s *capnp.Segment, sz int32) (BridgeConfig_PowerboxApi_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return BridgeConfig_PowerboxApi_List{l}, err
}

func (s BridgeConfig_PowerboxApi_List) At(i int) BridgeConfig_PowerboxApi {
	return BridgeConfig_PowerboxApi{s.List.Struct(i)}
}

func (s BridgeConfig_PowerboxApi_List) Set(i int, v BridgeConfig_PowerboxApi) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s BridgeConfig_PowerboxApi_List) String() string {
	str, _ := text.MarshalList(0xc9702c7dbfc6d7e4, s.List)
	return str
}

// BridgeConfig_PowerboxApi_Promise is a wrapper for a BridgeConfig_PowerboxApi promised by a client call.
type BridgeConfig_PowerboxApi_Promise struct{ *capnp.Pipeline }

func (p BridgeConfig_PowerboxApi_Promise) Struct() (BridgeConfig_PowerboxApi, error) {
	s, err := p.Pipeline.Struct()
	return BridgeConfig_PowerboxApi{s}, err
}

func (p BridgeConfig_PowerboxApi_Promise) DisplayInfo() powerbox.PowerboxDisplayInfo_Promise {
	return powerbox.PowerboxDisplayInfo_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p BridgeConfig_PowerboxApi_Promise) Tag() apisession.ApiSession_PowerboxTag_Promise {
	return apisession.ApiSession_PowerboxTag_Promise{Pipeline: p.Pipeline.GetPipeline(3)}
}

type Metadata struct{ capnp.Struct }
type Metadata_icons Metadata
type Metadata_license Metadata
type Metadata_author Metadata
type Metadata_license_Which uint16

const (
	Metadata_license_Which_none         Metadata_license_Which = 0
	Metadata_license_Which_openSource   Metadata_license_Which = 1
	Metadata_license_Which_proprietary  Metadata_license_Which = 2
	Metadata_license_Which_publicDomain Metadata_license_Which = 3
)

func (w Metadata_license_Which) String() string {
	const s = "noneopenSourceproprietarypublicDomain"
	switch w {
	case Metadata_license_Which_none:
		return s[0:4]
	case Metadata_license_Which_openSource:
		return s[4:14]
	case Metadata_license_Which_proprietary:
		return s[14:25]
	case Metadata_license_Which_publicDomain:
		return s[25:37]

	}
	return "Metadata_license_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Metadata_TypeID is the unique identifier for the type Metadata.
const Metadata_TypeID = 0xe0c5892a5448f4ee

func NewMetadata(s *capnp.Segment) (Metadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 17})
	return Metadata{st}, err
}

func NewRootMetadata(s *capnp.Segment) (Metadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 17})
	return Metadata{st}, err
}

func ReadRootMetadata(msg *capnp.Message) (Metadata, error) {
	root, err := msg.RootPtr()
	return Metadata{root.Struct()}, err
}

func (s Metadata) String() string {
	str, _ := text.Marshal(0xe0c5892a5448f4ee, s.Struct)
	return str
}

func (s Metadata) Icons() Metadata_icons { return Metadata_icons(s) }

func (s Metadata_icons) AppGrid() (Metadata_Icon, error) {
	p, err := s.Struct.Ptr(0)
	return Metadata_Icon{Struct: p.Struct()}, err
}

func (s Metadata_icons) HasAppGrid() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Metadata_icons) SetAppGrid(v Metadata_Icon) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAppGrid sets the appGrid field to a newly
// allocated Metadata_Icon struct, preferring placement in s's segment.
func (s Metadata_icons) NewAppGrid() (Metadata_Icon, error) {
	ss, err := NewMetadata_Icon(s.Struct.Segment())
	if err != nil {
		return Metadata_Icon{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Metadata_icons) Grain() (Metadata_Icon, error) {
	p, err := s.Struct.Ptr(1)
	return Metadata_Icon{Struct: p.Struct()}, err
}

func (s Metadata_icons) HasGrain() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Metadata_icons) SetGrain(v Metadata_Icon) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewGrain sets the grain field to a newly
// allocated Metadata_Icon struct, preferring placement in s's segment.
func (s Metadata_icons) NewGrain() (Metadata_Icon, error) {
	ss, err := NewMetadata_Icon(s.Struct.Segment())
	if err != nil {
		return Metadata_Icon{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Metadata_icons) Market() (Metadata_Icon, error) {
	p, err := s.Struct.Ptr(2)
	return Metadata_Icon{Struct: p.Struct()}, err
}

func (s Metadata_icons) HasMarket() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Metadata_icons) SetMarket(v Metadata_Icon) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewMarket sets the market field to a newly
// allocated Metadata_Icon struct, preferring placement in s's segment.
func (s Metadata_icons) NewMarket() (Metadata_Icon, error) {
	ss, err := NewMetadata_Icon(s.Struct.Segment())
	if err != nil {
		return Metadata_Icon{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Metadata_icons) MarketBig() (Metadata_Icon, error) {
	p, err := s.Struct.Ptr(15)
	return Metadata_Icon{Struct: p.Struct()}, err
}

func (s Metadata_icons) HasMarketBig() bool {
	p, err := s.Struct.Ptr(15)
	return p.IsValid() || err != nil
}

func (s Metadata_icons) SetMarketBig(v Metadata_Icon) error {
	return s.Struct.SetPtr(15, v.Struct.ToPtr())
}

// NewMarketBig sets the marketBig field to a newly
// allocated Metadata_Icon struct, preferring placement in s's segment.
func (s Metadata_icons) NewMarketBig() (Metadata_Icon, error) {
	ss, err := NewMetadata_Icon(s.Struct.Segment())
	if err != nil {
		return Metadata_Icon{}, err
	}
	err = s.Struct.SetPtr(15, ss.Struct.ToPtr())
	return ss, err
}

func (s Metadata) Website() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Metadata) HasWebsite() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Metadata) WebsiteBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Metadata) SetWebsite(v string) error {
	return s.Struct.SetText(3, v)
}

func (s Metadata) CodeUrl() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s Metadata) HasCodeUrl() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Metadata) CodeUrlBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s Metadata) SetCodeUrl(v string) error {
	return s.Struct.SetText(4, v)
}

func (s Metadata) License() Metadata_license { return Metadata_license(s) }

func (s Metadata_license) Which() Metadata_license_Which {
	return Metadata_license_Which(s.Struct.Uint16(0))
}
func (s Metadata_license) SetNone() {
	s.Struct.SetUint16(0, 0)

}

func (s Metadata_license) OpenSource() OpenSourceLicense {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != openSource")
	}
	return OpenSourceLicense(s.Struct.Uint16(2))
}

func (s Metadata_license) SetOpenSource(v OpenSourceLicense) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetUint16(2, uint16(v))
}

func (s Metadata_license) Proprietary() (util.LocalizedText, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != proprietary")
	}
	p, err := s.Struct.Ptr(5)
	return util.LocalizedText{Struct: p.Struct()}, err
}

func (s Metadata_license) HasProprietary() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Metadata_license) SetProprietary(v util.LocalizedText) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(5, v.Struct.ToPtr())
}

// NewProprietary sets the proprietary field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s Metadata_license) NewProprietary() (util.LocalizedText, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := util.NewLocalizedText(s.Struct.Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = s.Struct.SetPtr(5, ss.Struct.ToPtr())
	return ss, err
}

func (s Metadata_license) PublicDomain() (util.LocalizedText, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != publicDomain")
	}
	p, err := s.Struct.Ptr(5)
	return util.LocalizedText{Struct: p.Struct()}, err
}

func (s Metadata_license) HasPublicDomain() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Metadata_license) SetPublicDomain(v util.LocalizedText) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(5, v.Struct.ToPtr())
}

// NewPublicDomain sets the publicDomain field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s Metadata_license) NewPublicDomain() (util.LocalizedText, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := util.NewLocalizedText(s.Struct.Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = s.Struct.SetPtr(5, ss.Struct.ToPtr())
	return ss, err
}

func (s Metadata_license) Notices() (util.LocalizedText, error) {
	p, err := s.Struct.Ptr(6)
	return util.LocalizedText{Struct: p.Struct()}, err
}

func (s Metadata_license) HasNotices() bool {
	p, err := s.Struct.Ptr(6)
	return p.IsValid() || err != nil
}

func (s Metadata_license) SetNotices(v util.LocalizedText) error {
	return s.Struct.SetPtr(6, v.Struct.ToPtr())
}

// NewNotices sets the notices field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s Metadata_license) NewNotices() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(s.Struct.Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = s.Struct.SetPtr(6, ss.Struct.ToPtr())
	return ss, err
}

func (s Metadata) Categories() (Category_List, error) {
	p, err := s.Struct.Ptr(7)
	return Category_List{List: p.List()}, err
}

func (s Metadata) HasCategories() bool {
	p, err := s.Struct.Ptr(7)
	return p.IsValid() || err != nil
}

func (s Metadata) SetCategories(v Category_List) error {
	return s.Struct.SetPtr(7, v.List.ToPtr())
}

// NewCategories sets the categories field to a newly
// allocated Category_List, preferring placement in s's segment.
func (s Metadata) NewCategories(n int32) (Category_List, error) {
	l, err := NewCategory_List(s.Struct.Segment(), n)
	if err != nil {
		return Category_List{}, err
	}
	err = s.Struct.SetPtr(7, l.List.ToPtr())
	return l, err
}

func (s Metadata) Author() Metadata_author { return Metadata_author(s) }

func (s Metadata_author) UpstreamAuthor() (string, error) {
	p, err := s.Struct.Ptr(16)
	return p.Text(), err
}

func (s Metadata_author) HasUpstreamAuthor() bool {
	p, err := s.Struct.Ptr(16)
	return p.IsValid() || err != nil
}

func (s Metadata_author) UpstreamAuthorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(16)
	return p.TextBytes(), err
}

func (s Metadata_author) SetUpstreamAuthor(v string) error {
	return s.Struct.SetText(16, v)
}

func (s Metadata_author) ContactEmail() (string, error) {
	p, err := s.Struct.Ptr(8)
	return p.Text(), err
}

func (s Metadata_author) HasContactEmail() bool {
	p, err := s.Struct.Ptr(8)
	return p.IsValid() || err != nil
}

func (s Metadata_author) ContactEmailBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(8)
	return p.TextBytes(), err
}

func (s Metadata_author) SetContactEmail(v string) error {
	return s.Struct.SetText(8, v)
}

func (s Metadata_author) PgpSignature() ([]byte, error) {
	p, err := s.Struct.Ptr(9)
	return []byte(p.Data()), err
}

func (s Metadata_author) HasPgpSignature() bool {
	p, err := s.Struct.Ptr(9)
	return p.IsValid() || err != nil
}

func (s Metadata_author) SetPgpSignature(v []byte) error {
	return s.Struct.SetData(9, v)
}

func (s Metadata) PgpKeyring() ([]byte, error) {
	p, err := s.Struct.Ptr(10)
	return []byte(p.Data()), err
}

func (s Metadata) HasPgpKeyring() bool {
	p, err := s.Struct.Ptr(10)
	return p.IsValid() || err != nil
}

func (s Metadata) SetPgpKeyring(v []byte) error {
	return s.Struct.SetData(10, v)
}

func (s Metadata) Description() (util.LocalizedText, error) {
	p, err := s.Struct.Ptr(11)
	return util.LocalizedText{Struct: p.Struct()}, err
}

func (s Metadata) HasDescription() bool {
	p, err := s.Struct.Ptr(11)
	return p.IsValid() || err != nil
}

func (s Metadata) SetDescription(v util.LocalizedText) error {
	return s.Struct.SetPtr(11, v.Struct.ToPtr())
}

// NewDescription sets the description field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s Metadata) NewDescription() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(s.Struct.Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = s.Struct.SetPtr(11, ss.Struct.ToPtr())
	return ss, err
}

func (s Metadata) ShortDescription() (util.LocalizedText, error) {
	p, err := s.Struct.Ptr(12)
	return util.LocalizedText{Struct: p.Struct()}, err
}

func (s Metadata) HasShortDescription() bool {
	p, err := s.Struct.Ptr(12)
	return p.IsValid() || err != nil
}

func (s Metadata) SetShortDescription(v util.LocalizedText) error {
	return s.Struct.SetPtr(12, v.Struct.ToPtr())
}

// NewShortDescription sets the shortDescription field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s Metadata) NewShortDescription() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(s.Struct.Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = s.Struct.SetPtr(12, ss.Struct.ToPtr())
	return ss, err
}

func (s Metadata) Screenshots() (Metadata_Screenshot_List, error) {
	p, err := s.Struct.Ptr(13)
	return Metadata_Screenshot_List{List: p.List()}, err
}

func (s Metadata) HasScreenshots() bool {
	p, err := s.Struct.Ptr(13)
	return p.IsValid() || err != nil
}

func (s Metadata) SetScreenshots(v Metadata_Screenshot_List) error {
	return s.Struct.SetPtr(13, v.List.ToPtr())
}

// NewScreenshots sets the screenshots field to a newly
// allocated Metadata_Screenshot_List, preferring placement in s's segment.
func (s Metadata) NewScreenshots(n int32) (Metadata_Screenshot_List, error) {
	l, err := NewMetadata_Screenshot_List(s.Struct.Segment(), n)
	if err != nil {
		return Metadata_Screenshot_List{}, err
	}
	err = s.Struct.SetPtr(13, l.List.ToPtr())
	return l, err
}

func (s Metadata) ChangeLog() (util.LocalizedText, error) {
	p, err := s.Struct.Ptr(14)
	return util.LocalizedText{Struct: p.Struct()}, err
}

func (s Metadata) HasChangeLog() bool {
	p, err := s.Struct.Ptr(14)
	return p.IsValid() || err != nil
}

func (s Metadata) SetChangeLog(v util.LocalizedText) error {
	return s.Struct.SetPtr(14, v.Struct.ToPtr())
}

// NewChangeLog sets the changeLog field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s Metadata) NewChangeLog() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(s.Struct.Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = s.Struct.SetPtr(14, ss.Struct.ToPtr())
	return ss, err
}

// Metadata_List is a list of Metadata.
type Metadata_List struct{ capnp.List }

// NewMetadata creates a new list of Metadata.
func NewMetadata_List(s *capnp.Segment, sz int32) (Metadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 17}, sz)
	return Metadata_List{l}, err
}

func (s Metadata_List) At(i int) Metadata { return Metadata{s.List.Struct(i)} }

func (s Metadata_List) Set(i int, v Metadata) error { return s.List.SetStruct(i, v.Struct) }

func (s Metadata_List) String() string {
	str, _ := text.MarshalList(0xe0c5892a5448f4ee, s.List)
	return str
}

// Metadata_Promise is a wrapper for a Metadata promised by a client call.
type Metadata_Promise struct{ *capnp.Pipeline }

func (p Metadata_Promise) Struct() (Metadata, error) {
	s, err := p.Pipeline.Struct()
	return Metadata{s}, err
}

func (p Metadata_Promise) Icons() Metadata_icons_Promise { return Metadata_icons_Promise{p.Pipeline} }

// Metadata_icons_Promise is a wrapper for a Metadata_icons promised by a client call.
type Metadata_icons_Promise struct{ *capnp.Pipeline }

func (p Metadata_icons_Promise) Struct() (Metadata_icons, error) {
	s, err := p.Pipeline.Struct()
	return Metadata_icons{s}, err
}

func (p Metadata_icons_Promise) AppGrid() Metadata_Icon_Promise {
	return Metadata_Icon_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Metadata_icons_Promise) Grain() Metadata_Icon_Promise {
	return Metadata_Icon_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Metadata_icons_Promise) Market() Metadata_Icon_Promise {
	return Metadata_Icon_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

func (p Metadata_icons_Promise) MarketBig() Metadata_Icon_Promise {
	return Metadata_Icon_Promise{Pipeline: p.Pipeline.GetPipeline(15)}
}

func (p Metadata_Promise) License() Metadata_license_Promise {
	return Metadata_license_Promise{p.Pipeline}
}

// Metadata_license_Promise is a wrapper for a Metadata_license promised by a client call.
type Metadata_license_Promise struct{ *capnp.Pipeline }

func (p Metadata_license_Promise) Struct() (Metadata_license, error) {
	s, err := p.Pipeline.Struct()
	return Metadata_license{s}, err
}

func (p Metadata_license_Promise) Proprietary() util.LocalizedText_Promise {
	return util.LocalizedText_Promise{Pipeline: p.Pipeline.GetPipeline(5)}
}

func (p Metadata_license_Promise) PublicDomain() util.LocalizedText_Promise {
	return util.LocalizedText_Promise{Pipeline: p.Pipeline.GetPipeline(5)}
}

func (p Metadata_license_Promise) Notices() util.LocalizedText_Promise {
	return util.LocalizedText_Promise{Pipeline: p.Pipeline.GetPipeline(6)}
}

func (p Metadata_Promise) Author() Metadata_author_Promise { return Metadata_author_Promise{p.Pipeline} }

// Metadata_author_Promise is a wrapper for a Metadata_author promised by a client call.
type Metadata_author_Promise struct{ *capnp.Pipeline }

func (p Metadata_author_Promise) Struct() (Metadata_author, error) {
	s, err := p.Pipeline.Struct()
	return Metadata_author{s}, err
}

func (p Metadata_Promise) Description() util.LocalizedText_Promise {
	return util.LocalizedText_Promise{Pipeline: p.Pipeline.GetPipeline(11)}
}

func (p Metadata_Promise) ShortDescription() util.LocalizedText_Promise {
	return util.LocalizedText_Promise{Pipeline: p.Pipeline.GetPipeline(12)}
}

func (p Metadata_Promise) ChangeLog() util.LocalizedText_Promise {
	return util.LocalizedText_Promise{Pipeline: p.Pipeline.GetPipeline(14)}
}

type Metadata_Icon struct{ capnp.Struct }
type Metadata_Icon_png Metadata_Icon
type Metadata_Icon_Which uint16

const (
	Metadata_Icon_Which_unknown Metadata_Icon_Which = 0
	Metadata_Icon_Which_svg     Metadata_Icon_Which = 1
	Metadata_Icon_Which_png     Metadata_Icon_Which = 2
)

func (w Metadata_Icon_Which) String() string {
	const s = "unknownsvgpng"
	switch w {
	case Metadata_Icon_Which_unknown:
		return s[0:7]
	case Metadata_Icon_Which_svg:
		return s[7:10]
	case Metadata_Icon_Which_png:
		return s[10:13]

	}
	return "Metadata_Icon_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Metadata_Icon_TypeID is the unique identifier for the type Metadata_Icon.
const Metadata_Icon_TypeID = 0xe492a2981208ad0b

func NewMetadata_Icon(s *capnp.Segment) (Metadata_Icon, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Metadata_Icon{st}, err
}

func NewRootMetadata_Icon(s *capnp.Segment) (Metadata_Icon, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Metadata_Icon{st}, err
}

func ReadRootMetadata_Icon(msg *capnp.Message) (Metadata_Icon, error) {
	root, err := msg.RootPtr()
	return Metadata_Icon{root.Struct()}, err
}

func (s Metadata_Icon) String() string {
	str, _ := text.Marshal(0xe492a2981208ad0b, s.Struct)
	return str
}

func (s Metadata_Icon) Which() Metadata_Icon_Which {
	return Metadata_Icon_Which(s.Struct.Uint16(0))
}
func (s Metadata_Icon) SetUnknown() {
	s.Struct.SetUint16(0, 0)

}

func (s Metadata_Icon) Svg() (string, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != svg")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Metadata_Icon) HasSvg() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Metadata_Icon) SvgBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Metadata_Icon) SetSvg(v string) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetText(0, v)
}

func (s Metadata_Icon) Png() Metadata_Icon_png { return Metadata_Icon_png(s) }

func (s Metadata_Icon) SetPng() {
	s.Struct.SetUint16(0, 2)
}

func (s Metadata_Icon_png) Dpi1x() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Metadata_Icon_png) HasDpi1x() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Metadata_Icon_png) SetDpi1x(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Metadata_Icon_png) Dpi2x() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Metadata_Icon_png) HasDpi2x() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Metadata_Icon_png) SetDpi2x(v []byte) error {
	return s.Struct.SetData(1, v)
}

// Metadata_Icon_List is a list of Metadata_Icon.
type Metadata_Icon_List struct{ capnp.List }

// NewMetadata_Icon creates a new list of Metadata_Icon.
func NewMetadata_Icon_List(s *capnp.Segment, sz int32) (Metadata_Icon_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Metadata_Icon_List{l}, err
}

func (s Metadata_Icon_List) At(i int) Metadata_Icon { return Metadata_Icon{s.List.Struct(i)} }

func (s Metadata_Icon_List) Set(i int, v Metadata_Icon) error { return s.List.SetStruct(i, v.Struct) }

func (s Metadata_Icon_List) String() string {
	str, _ := text.MarshalList(0xe492a2981208ad0b, s.List)
	return str
}

// Metadata_Icon_Promise is a wrapper for a Metadata_Icon promised by a client call.
type Metadata_Icon_Promise struct{ *capnp.Pipeline }

func (p Metadata_Icon_Promise) Struct() (Metadata_Icon, error) {
	s, err := p.Pipeline.Struct()
	return Metadata_Icon{s}, err
}

func (p Metadata_Icon_Promise) Png() Metadata_Icon_png_Promise {
	return Metadata_Icon_png_Promise{p.Pipeline}
}

// Metadata_Icon_png_Promise is a wrapper for a Metadata_Icon_png promised by a client call.
type Metadata_Icon_png_Promise struct{ *capnp.Pipeline }

func (p Metadata_Icon_png_Promise) Struct() (Metadata_Icon_png, error) {
	s, err := p.Pipeline.Struct()
	return Metadata_Icon_png{s}, err
}

type Metadata_Screenshot struct{ capnp.Struct }
type Metadata_Screenshot_Which uint16

const (
	Metadata_Screenshot_Which_unknown Metadata_Screenshot_Which = 0
	Metadata_Screenshot_Which_png     Metadata_Screenshot_Which = 1
	Metadata_Screenshot_Which_jpeg    Metadata_Screenshot_Which = 2
)

func (w Metadata_Screenshot_Which) String() string {
	const s = "unknownpngjpeg"
	switch w {
	case Metadata_Screenshot_Which_unknown:
		return s[0:7]
	case Metadata_Screenshot_Which_png:
		return s[7:10]
	case Metadata_Screenshot_Which_jpeg:
		return s[10:14]

	}
	return "Metadata_Screenshot_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Metadata_Screenshot_TypeID is the unique identifier for the type Metadata_Screenshot.
const Metadata_Screenshot_TypeID = 0x8bc9f4365959348e

func NewMetadata_Screenshot(s *capnp.Segment) (Metadata_Screenshot, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Metadata_Screenshot{st}, err
}

func NewRootMetadata_Screenshot(s *capnp.Segment) (Metadata_Screenshot, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Metadata_Screenshot{st}, err
}

func ReadRootMetadata_Screenshot(msg *capnp.Message) (Metadata_Screenshot, error) {
	root, err := msg.RootPtr()
	return Metadata_Screenshot{root.Struct()}, err
}

func (s Metadata_Screenshot) String() string {
	str, _ := text.Marshal(0x8bc9f4365959348e, s.Struct)
	return str
}

func (s Metadata_Screenshot) Which() Metadata_Screenshot_Which {
	return Metadata_Screenshot_Which(s.Struct.Uint16(8))
}
func (s Metadata_Screenshot) Width() uint32 {
	return s.Struct.Uint32(0)
}

func (s Metadata_Screenshot) SetWidth(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Metadata_Screenshot) Height() uint32 {
	return s.Struct.Uint32(4)
}

func (s Metadata_Screenshot) SetHeight(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s Metadata_Screenshot) SetUnknown() {
	s.Struct.SetUint16(8, 0)

}

func (s Metadata_Screenshot) Png() ([]byte, error) {
	if s.Struct.Uint16(8) != 1 {
		panic("Which() != png")
	}
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Metadata_Screenshot) HasPng() bool {
	if s.Struct.Uint16(8) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Metadata_Screenshot) SetPng(v []byte) error {
	s.Struct.SetUint16(8, 1)
	return s.Struct.SetData(0, v)
}

func (s Metadata_Screenshot) Jpeg() ([]byte, error) {
	if s.Struct.Uint16(8) != 2 {
		panic("Which() != jpeg")
	}
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Metadata_Screenshot) HasJpeg() bool {
	if s.Struct.Uint16(8) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Metadata_Screenshot) SetJpeg(v []byte) error {
	s.Struct.SetUint16(8, 2)
	return s.Struct.SetData(0, v)
}

// Metadata_Screenshot_List is a list of Metadata_Screenshot.
type Metadata_Screenshot_List struct{ capnp.List }

// NewMetadata_Screenshot creates a new list of Metadata_Screenshot.
func NewMetadata_Screenshot_List(s *capnp.Segment, sz int32) (Metadata_Screenshot_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return Metadata_Screenshot_List{l}, err
}

func (s Metadata_Screenshot_List) At(i int) Metadata_Screenshot {
	return Metadata_Screenshot{s.List.Struct(i)}
}

func (s Metadata_Screenshot_List) Set(i int, v Metadata_Screenshot) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Metadata_Screenshot_List) String() string {
	str, _ := text.MarshalList(0x8bc9f4365959348e, s.List)
	return str
}

// Metadata_Screenshot_Promise is a wrapper for a Metadata_Screenshot promised by a client call.
type Metadata_Screenshot_Promise struct{ *capnp.Pipeline }

func (p Metadata_Screenshot_Promise) Struct() (Metadata_Screenshot, error) {
	s, err := p.Pipeline.Struct()
	return Metadata_Screenshot{s}, err
}

type OsiLicenseInfo struct{ capnp.Struct }

// OsiLicenseInfo_TypeID is the unique identifier for the type OsiLicenseInfo.
const OsiLicenseInfo_TypeID = 0xb755d258845a4a8f

func NewOsiLicenseInfo(s *capnp.Segment) (OsiLicenseInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return OsiLicenseInfo{st}, err
}

func NewRootOsiLicenseInfo(s *capnp.Segment) (OsiLicenseInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return OsiLicenseInfo{st}, err
}

func ReadRootOsiLicenseInfo(msg *capnp.Message) (OsiLicenseInfo, error) {
	root, err := msg.RootPtr()
	return OsiLicenseInfo{root.Struct()}, err
}

func (s OsiLicenseInfo) String() string {
	str, _ := text.Marshal(0xb755d258845a4a8f, s.Struct)
	return str
}

func (s OsiLicenseInfo) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s OsiLicenseInfo) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s OsiLicenseInfo) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s OsiLicenseInfo) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s OsiLicenseInfo) Title() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s OsiLicenseInfo) HasTitle() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s OsiLicenseInfo) TitleBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s OsiLicenseInfo) SetTitle(v string) error {
	return s.Struct.SetText(1, v)
}

func (s OsiLicenseInfo) RequireSource() bool {
	return s.Struct.Bit(0)
}

func (s OsiLicenseInfo) SetRequireSource(v bool) {
	s.Struct.SetBit(0, v)
}

// OsiLicenseInfo_List is a list of OsiLicenseInfo.
type OsiLicenseInfo_List struct{ capnp.List }

// NewOsiLicenseInfo creates a new list of OsiLicenseInfo.
func NewOsiLicenseInfo_List(s *capnp.Segment, sz int32) (OsiLicenseInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return OsiLicenseInfo_List{l}, err
}

func (s OsiLicenseInfo_List) At(i int) OsiLicenseInfo { return OsiLicenseInfo{s.List.Struct(i)} }

func (s OsiLicenseInfo_List) Set(i int, v OsiLicenseInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s OsiLicenseInfo_List) String() string {
	str, _ := text.MarshalList(0xb755d258845a4a8f, s.List)
	return str
}

// OsiLicenseInfo_Promise is a wrapper for a OsiLicenseInfo promised by a client call.
type OsiLicenseInfo_Promise struct{ *capnp.Pipeline }

func (p OsiLicenseInfo_Promise) Struct() (OsiLicenseInfo, error) {
	s, err := p.Pipeline.Struct()
	return OsiLicenseInfo{s}, err
}

type OpenSourceLicense uint16

// OpenSourceLicense_TypeID is the unique identifier for the type OpenSourceLicense.
const OpenSourceLicense_TypeID = 0xd86e43f42c8b0f74

// Values of OpenSourceLicense.
const (
	OpenSourceLicense_invalid    OpenSourceLicense = 0
	OpenSourceLicense_mit        OpenSourceLicense = 1
	OpenSourceLicense_apache2    OpenSourceLicense = 2
	OpenSourceLicense_gpl3       OpenSourceLicense = 3
	OpenSourceLicense_agpl3      OpenSourceLicense = 4
	OpenSourceLicense_bsd3Clause OpenSourceLicense = 5
	OpenSourceLicense_bsd2Clause OpenSourceLicense = 6
	OpenSourceLicense_gpl2       OpenSourceLicense = 7
	OpenSourceLicense_lgpl2      OpenSourceLicense = 8
	OpenSourceLicense_lgpl3      OpenSourceLicense = 9
	OpenSourceLicense_isc        OpenSourceLicense = 10
	OpenSourceLicense_artistic2  OpenSourceLicense = 11
	OpenSourceLicense_python2    OpenSourceLicense = 12
	OpenSourceLicense_php3       OpenSourceLicense = 13
	OpenSourceLicense_mpl2       OpenSourceLicense = 14
	OpenSourceLicense_cddl       OpenSourceLicense = 15
	OpenSourceLicense_epl        OpenSourceLicense = 16
	OpenSourceLicense_cpal       OpenSourceLicense = 17
	OpenSourceLicense_zlib       OpenSourceLicense = 18
)

// String returns the enum's constant name.
func (c OpenSourceLicense) String() string {
	switch c {
	case OpenSourceLicense_invalid:
		return "invalid"
	case OpenSourceLicense_mit:
		return "mit"
	case OpenSourceLicense_apache2:
		return "apache2"
	case OpenSourceLicense_gpl3:
		return "gpl3"
	case OpenSourceLicense_agpl3:
		return "agpl3"
	case OpenSourceLicense_bsd3Clause:
		return "bsd3Clause"
	case OpenSourceLicense_bsd2Clause:
		return "bsd2Clause"
	case OpenSourceLicense_gpl2:
		return "gpl2"
	case OpenSourceLicense_lgpl2:
		return "lgpl2"
	case OpenSourceLicense_lgpl3:
		return "lgpl3"
	case OpenSourceLicense_isc:
		return "isc"
	case OpenSourceLicense_artistic2:
		return "artistic2"
	case OpenSourceLicense_python2:
		return "python2"
	case OpenSourceLicense_php3:
		return "php3"
	case OpenSourceLicense_mpl2:
		return "mpl2"
	case OpenSourceLicense_cddl:
		return "cddl"
	case OpenSourceLicense_epl:
		return "epl"
	case OpenSourceLicense_cpal:
		return "cpal"
	case OpenSourceLicense_zlib:
		return "zlib"

	default:
		return ""
	}
}

// OpenSourceLicenseFromString returns the enum value with a name,
// or the zero value if there's no such value.
func OpenSourceLicenseFromString(c string) OpenSourceLicense {
	switch c {
	case "invalid":
		return OpenSourceLicense_invalid
	case "mit":
		return OpenSourceLicense_mit
	case "apache2":
		return OpenSourceLicense_apache2
	case "gpl3":
		return OpenSourceLicense_gpl3
	case "agpl3":
		return OpenSourceLicense_agpl3
	case "bsd3Clause":
		return OpenSourceLicense_bsd3Clause
	case "bsd2Clause":
		return OpenSourceLicense_bsd2Clause
	case "gpl2":
		return OpenSourceLicense_gpl2
	case "lgpl2":
		return OpenSourceLicense_lgpl2
	case "lgpl3":
		return OpenSourceLicense_lgpl3
	case "isc":
		return OpenSourceLicense_isc
	case "artistic2":
		return OpenSourceLicense_artistic2
	case "python2":
		return OpenSourceLicense_python2
	case "php3":
		return OpenSourceLicense_php3
	case "mpl2":
		return OpenSourceLicense_mpl2
	case "cddl":
		return OpenSourceLicense_cddl
	case "epl":
		return OpenSourceLicense_epl
	case "cpal":
		return OpenSourceLicense_cpal
	case "zlib":
		return OpenSourceLicense_zlib

	default:
		return 0
	}
}

type OpenSourceLicense_List struct{ capnp.List }

func NewOpenSourceLicense_List(s *capnp.Segment, sz int32) (OpenSourceLicense_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return OpenSourceLicense_List{l.List}, err
}

func (l OpenSourceLicense_List) At(i int) OpenSourceLicense {
	ul := capnp.UInt16List{List: l.List}
	return OpenSourceLicense(ul.At(i))
}

func (l OpenSourceLicense_List) Set(i int, v OpenSourceLicense) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type AppId struct{ capnp.Struct }

// AppId_TypeID is the unique identifier for the type AppId.
const AppId_TypeID = 0x880c6c7782a33310

func NewAppId(s *capnp.Segment) (AppId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return AppId{st}, err
}

func NewRootAppId(s *capnp.Segment) (AppId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return AppId{st}, err
}

func ReadRootAppId(msg *capnp.Message) (AppId, error) {
	root, err := msg.RootPtr()
	return AppId{root.Struct()}, err
}

func (s AppId) String() string {
	str, _ := text.Marshal(0x880c6c7782a33310, s.Struct)
	return str
}

func (s AppId) Id0() uint64 {
	return s.Struct.Uint64(0)
}

func (s AppId) SetId0(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s AppId) Id1() uint64 {
	return s.Struct.Uint64(8)
}

func (s AppId) SetId1(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s AppId) Id2() uint64 {
	return s.Struct.Uint64(16)
}

func (s AppId) SetId2(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s AppId) Id3() uint64 {
	return s.Struct.Uint64(24)
}

func (s AppId) SetId3(v uint64) {
	s.Struct.SetUint64(24, v)
}

// AppId_List is a list of AppId.
type AppId_List struct{ capnp.List }

// NewAppId creates a new list of AppId.
func NewAppId_List(s *capnp.Segment, sz int32) (AppId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return AppId_List{l}, err
}

func (s AppId_List) At(i int) AppId { return AppId{s.List.Struct(i)} }

func (s AppId_List) Set(i int, v AppId) error { return s.List.SetStruct(i, v.Struct) }

func (s AppId_List) String() string {
	str, _ := text.MarshalList(0x880c6c7782a33310, s.List)
	return str
}

// AppId_Promise is a wrapper for a AppId promised by a client call.
type AppId_Promise struct{ *capnp.Pipeline }

func (p AppId_Promise) Struct() (AppId, error) {
	s, err := p.Pipeline.Struct()
	return AppId{s}, err
}

type PackageId struct{ capnp.Struct }

// PackageId_TypeID is the unique identifier for the type PackageId.
const PackageId_TypeID = 0xe2e344d346ffda6b

func NewPackageId(s *capnp.Segment) (PackageId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PackageId{st}, err
}

func NewRootPackageId(s *capnp.Segment) (PackageId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PackageId{st}, err
}

func ReadRootPackageId(msg *capnp.Message) (PackageId, error) {
	root, err := msg.RootPtr()
	return PackageId{root.Struct()}, err
}

func (s PackageId) String() string {
	str, _ := text.Marshal(0xe2e344d346ffda6b, s.Struct)
	return str
}

func (s PackageId) Id0() uint64 {
	return s.Struct.Uint64(0)
}

func (s PackageId) SetId0(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s PackageId) Id1() uint64 {
	return s.Struct.Uint64(8)
}

func (s PackageId) SetId1(v uint64) {
	s.Struct.SetUint64(8, v)
}

// PackageId_List is a list of PackageId.
type PackageId_List struct{ capnp.List }

// NewPackageId creates a new list of PackageId.
func NewPackageId_List(s *capnp.Segment, sz int32) (PackageId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return PackageId_List{l}, err
}

func (s PackageId_List) At(i int) PackageId { return PackageId{s.List.Struct(i)} }

func (s PackageId_List) Set(i int, v PackageId) error { return s.List.SetStruct(i, v.Struct) }

func (s PackageId_List) String() string {
	str, _ := text.MarshalList(0xe2e344d346ffda6b, s.List)
	return str
}

// PackageId_Promise is a wrapper for a PackageId promised by a client call.
type PackageId_Promise struct{ *capnp.Pipeline }

func (p PackageId_Promise) Struct() (PackageId, error) {
	s, err := p.Pipeline.Struct()
	return PackageId{s}, err
}

type VerifiedInfo struct{ capnp.Struct }

// VerifiedInfo_TypeID is the unique identifier for the type VerifiedInfo.
const VerifiedInfo_TypeID = 0x987ef3040a0342a9

func NewVerifiedInfo(s *capnp.Segment) (VerifiedInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return VerifiedInfo{st}, err
}

func NewRootVerifiedInfo(s *capnp.Segment) (VerifiedInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return VerifiedInfo{st}, err
}

func ReadRootVerifiedInfo(msg *capnp.Message) (VerifiedInfo, error) {
	root, err := msg.RootPtr()
	return VerifiedInfo{root.Struct()}, err
}

func (s VerifiedInfo) String() string {
	str, _ := text.Marshal(0x987ef3040a0342a9, s.Struct)
	return str
}

func (s VerifiedInfo) AppId() (AppId, error) {
	p, err := s.Struct.Ptr(0)
	return AppId{Struct: p.Struct()}, err
}

func (s VerifiedInfo) HasAppId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VerifiedInfo) SetAppId(v AppId) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAppId sets the appId field to a newly
// allocated AppId struct, preferring placement in s's segment.
func (s VerifiedInfo) NewAppId() (AppId, error) {
	ss, err := NewAppId(s.Struct.Segment())
	if err != nil {
		return AppId{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s VerifiedInfo) PackageId() (PackageId, error) {
	p, err := s.Struct.Ptr(1)
	return PackageId{Struct: p.Struct()}, err
}

func (s VerifiedInfo) HasPackageId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s VerifiedInfo) SetPackageId(v PackageId) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewPackageId sets the packageId field to a newly
// allocated PackageId struct, preferring placement in s's segment.
func (s VerifiedInfo) NewPackageId() (PackageId, error) {
	ss, err := NewPackageId(s.Struct.Segment())
	if err != nil {
		return PackageId{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s VerifiedInfo) Title() (util.LocalizedText, error) {
	p, err := s.Struct.Ptr(2)
	return util.LocalizedText{Struct: p.Struct()}, err
}

func (s VerifiedInfo) HasTitle() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s VerifiedInfo) SetTitle(v util.LocalizedText) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewTitle sets the title field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s VerifiedInfo) NewTitle() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(s.Struct.Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s VerifiedInfo) Version() uint32 {
	return s.Struct.Uint32(0)
}

func (s VerifiedInfo) SetVersion(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s VerifiedInfo) MarketingVersion() (util.LocalizedText, error) {
	p, err := s.Struct.Ptr(3)
	return util.LocalizedText{Struct: p.Struct()}, err
}

func (s VerifiedInfo) HasMarketingVersion() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s VerifiedInfo) SetMarketingVersion(v util.LocalizedText) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewMarketingVersion sets the marketingVersion field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s VerifiedInfo) NewMarketingVersion() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(s.Struct.Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

func (s VerifiedInfo) AuthorPgpKeyFingerprint() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s VerifiedInfo) HasAuthorPgpKeyFingerprint() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s VerifiedInfo) AuthorPgpKeyFingerprintBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s VerifiedInfo) SetAuthorPgpKeyFingerprint(v string) error {
	return s.Struct.SetText(4, v)
}

func (s VerifiedInfo) Metadata() (Metadata, error) {
	p, err := s.Struct.Ptr(5)
	return Metadata{Struct: p.Struct()}, err
}

func (s VerifiedInfo) HasMetadata() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s VerifiedInfo) SetMetadata(v Metadata) error {
	return s.Struct.SetPtr(5, v.Struct.ToPtr())
}

// NewMetadata sets the metadata field to a newly
// allocated Metadata struct, preferring placement in s's segment.
func (s VerifiedInfo) NewMetadata() (Metadata, error) {
	ss, err := NewMetadata(s.Struct.Segment())
	if err != nil {
		return Metadata{}, err
	}
	err = s.Struct.SetPtr(5, ss.Struct.ToPtr())
	return ss, err
}

// VerifiedInfo_List is a list of VerifiedInfo.
type VerifiedInfo_List struct{ capnp.List }

// NewVerifiedInfo creates a new list of VerifiedInfo.
func NewVerifiedInfo_List(s *capnp.Segment, sz int32) (VerifiedInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6}, sz)
	return VerifiedInfo_List{l}, err
}

func (s VerifiedInfo_List) At(i int) VerifiedInfo { return VerifiedInfo{s.List.Struct(i)} }

func (s VerifiedInfo_List) Set(i int, v VerifiedInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s VerifiedInfo_List) String() string {
	str, _ := text.MarshalList(0x987ef3040a0342a9, s.List)
	return str
}

// VerifiedInfo_Promise is a wrapper for a VerifiedInfo promised by a client call.
type VerifiedInfo_Promise struct{ *capnp.Pipeline }

func (p VerifiedInfo_Promise) Struct() (VerifiedInfo, error) {
	s, err := p.Pipeline.Struct()
	return VerifiedInfo{s}, err
}

func (p VerifiedInfo_Promise) AppId() AppId_Promise {
	return AppId_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p VerifiedInfo_Promise) PackageId() PackageId_Promise {
	return PackageId_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p VerifiedInfo_Promise) Title() util.LocalizedText_Promise {
	return util.LocalizedText_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

func (p VerifiedInfo_Promise) MarketingVersion() util.LocalizedText_Promise {
	return util.LocalizedText_Promise{Pipeline: p.Pipeline.GetPipeline(3)}
}

func (p VerifiedInfo_Promise) Metadata() Metadata_Promise {
	return Metadata_Promise{Pipeline: p.Pipeline.GetPipeline(5)}
}

type CategoryInfo struct{ capnp.Struct }

// CategoryInfo_TypeID is the unique identifier for the type CategoryInfo.
const CategoryInfo_TypeID = 0xb9d2951d34ca391c

func NewCategoryInfo(s *capnp.Segment) (CategoryInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CategoryInfo{st}, err
}

func NewRootCategoryInfo(s *capnp.Segment) (CategoryInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CategoryInfo{st}, err
}

func ReadRootCategoryInfo(msg *capnp.Message) (CategoryInfo, error) {
	root, err := msg.RootPtr()
	return CategoryInfo{root.Struct()}, err
}

func (s CategoryInfo) String() string {
	str, _ := text.Marshal(0xb9d2951d34ca391c, s.Struct)
	return str
}

func (s CategoryInfo) Title() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s CategoryInfo) HasTitle() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CategoryInfo) TitleBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s CategoryInfo) SetTitle(v string) error {
	return s.Struct.SetText(0, v)
}

// CategoryInfo_List is a list of CategoryInfo.
type CategoryInfo_List struct{ capnp.List }

// NewCategoryInfo creates a new list of CategoryInfo.
func NewCategoryInfo_List(s *capnp.Segment, sz int32) (CategoryInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return CategoryInfo_List{l}, err
}

func (s CategoryInfo_List) At(i int) CategoryInfo { return CategoryInfo{s.List.Struct(i)} }

func (s CategoryInfo_List) Set(i int, v CategoryInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s CategoryInfo_List) String() string {
	str, _ := text.MarshalList(0xb9d2951d34ca391c, s.List)
	return str
}

// CategoryInfo_Promise is a wrapper for a CategoryInfo promised by a client call.
type CategoryInfo_Promise struct{ *capnp.Pipeline }

func (p CategoryInfo_Promise) Struct() (CategoryInfo, error) {
	s, err := p.Pipeline.Struct()
	return CategoryInfo{s}, err
}

type Category uint16

// Category_TypeID is the unique identifier for the type Category.
const Category_TypeID = 0x938e7e53b106e1c0

// Values of Category.
const (
	Category_productivity   Category = 1
	Category_communications Category = 2
	Category_social         Category = 3
	Category_webPublishing  Category = 4
	Category_office         Category = 5
	Category_developerTools Category = 6
	Category_science        Category = 7
	Category_graphics       Category = 10
	Category_media          Category = 8
	Category_games          Category = 9
	Category_other          Category = 0
)

// String returns the enum's constant name.
func (c Category) String() string {
	switch c {
	case Category_productivity:
		return "productivity"
	case Category_communications:
		return "communications"
	case Category_social:
		return "social"
	case Category_webPublishing:
		return "webPublishing"
	case Category_office:
		return "office"
	case Category_developerTools:
		return "developerTools"
	case Category_science:
		return "science"
	case Category_graphics:
		return "graphics"
	case Category_media:
		return "media"
	case Category_games:
		return "games"
	case Category_other:
		return "other"

	default:
		return ""
	}
}

// CategoryFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CategoryFromString(c string) Category {
	switch c {
	case "productivity":
		return Category_productivity
	case "communications":
		return Category_communications
	case "social":
		return Category_social
	case "webPublishing":
		return Category_webPublishing
	case "office":
		return Category_office
	case "developerTools":
		return Category_developerTools
	case "science":
		return Category_science
	case "graphics":
		return Category_graphics
	case "media":
		return Category_media
	case "games":
		return Category_games
	case "other":
		return Category_other

	default:
		return 0
	}
}

type Category_List struct{ capnp.List }

func NewCategory_List(s *capnp.Segment, sz int32) (Category_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Category_List{l.List}, err
}

func (l Category_List) At(i int) Category {
	ul := capnp.UInt16List{List: l.List}
	return Category(ul.At(i))
}

func (l Category_List) Set(i int, v Category) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type KeyFile struct{ capnp.Struct }

// KeyFile_TypeID is the unique identifier for the type KeyFile.
const KeyFile_TypeID = 0xe47ce2b3aab90f74

func NewKeyFile(s *capnp.Segment) (KeyFile, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return KeyFile{st}, err
}

func NewRootKeyFile(s *capnp.Segment) (KeyFile, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return KeyFile{st}, err
}

func ReadRootKeyFile(msg *capnp.Message) (KeyFile, error) {
	root, err := msg.RootPtr()
	return KeyFile{root.Struct()}, err
}

func (s KeyFile) String() string {
	str, _ := text.Marshal(0xe47ce2b3aab90f74, s.Struct)
	return str
}

func (s KeyFile) PublicKey() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s KeyFile) HasPublicKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s KeyFile) SetPublicKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s KeyFile) PrivateKey() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s KeyFile) HasPrivateKey() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s KeyFile) SetPrivateKey(v []byte) error {
	return s.Struct.SetData(1, v)
}

// KeyFile_List is a list of KeyFile.
type KeyFile_List struct{ capnp.List }

// NewKeyFile creates a new list of KeyFile.
func NewKeyFile_List(s *capnp.Segment, sz int32) (KeyFile_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return KeyFile_List{l}, err
}

func (s KeyFile_List) At(i int) KeyFile { return KeyFile{s.List.Struct(i)} }

func (s KeyFile_List) Set(i int, v KeyFile) error { return s.List.SetStruct(i, v.Struct) }

func (s KeyFile_List) String() string {
	str, _ := text.MarshalList(0xe47ce2b3aab90f74, s.List)
	return str
}

// KeyFile_Promise is a wrapper for a KeyFile promised by a client call.
type KeyFile_Promise struct{ *capnp.Pipeline }

func (p KeyFile_Promise) Struct() (KeyFile, error) {
	s, err := p.Pipeline.Struct()
	return KeyFile{s}, err
}

type Signature struct{ capnp.Struct }

// Signature_TypeID is the unique identifier for the type Signature.
const Signature_TypeID = 0xeca8b9277cb36488

func NewSignature(s *capnp.Segment) (Signature, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Signature{st}, err
}

func NewRootSignature(s *capnp.Segment) (Signature, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Signature{st}, err
}

func ReadRootSignature(msg *capnp.Message) (Signature, error) {
	root, err := msg.RootPtr()
	return Signature{root.Struct()}, err
}

func (s Signature) String() string {
	str, _ := text.Marshal(0xeca8b9277cb36488, s.Struct)
	return str
}

func (s Signature) PublicKey() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Signature) HasPublicKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Signature) SetPublicKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Signature) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Signature) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Signature) SetSignature(v []byte) error {
	return s.Struct.SetData(1, v)
}

// Signature_List is a list of Signature.
type Signature_List struct{ capnp.List }

// NewSignature creates a new list of Signature.
func NewSignature_List(s *capnp.Segment, sz int32) (Signature_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Signature_List{l}, err
}

func (s Signature_List) At(i int) Signature { return Signature{s.List.Struct(i)} }

func (s Signature_List) Set(i int, v Signature) error { return s.List.SetStruct(i, v.Struct) }

func (s Signature_List) String() string {
	str, _ := text.MarshalList(0xeca8b9277cb36488, s.List)
	return str
}

// Signature_Promise is a wrapper for a Signature promised by a client call.
type Signature_Promise struct{ *capnp.Pipeline }

func (p Signature_Promise) Struct() (Signature, error) {
	s, err := p.Pipeline.Struct()
	return Signature{s}, err
}

type Archive struct{ capnp.Struct }

// Archive_TypeID is the unique identifier for the type Archive.
const Archive_TypeID = 0xf153ba7dee1c9118

func NewArchive(s *capnp.Segment) (Archive, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Archive{st}, err
}

func NewRootArchive(s *capnp.Segment) (Archive, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Archive{st}, err
}

func ReadRootArchive(msg *capnp.Message) (Archive, error) {
	root, err := msg.RootPtr()
	return Archive{root.Struct()}, err
}

func (s Archive) String() string {
	str, _ := text.Marshal(0xf153ba7dee1c9118, s.Struct)
	return str
}

func (s Archive) Files() (Archive_File_List, error) {
	p, err := s.Struct.Ptr(0)
	return Archive_File_List{List: p.List()}, err
}

func (s Archive) HasFiles() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Archive) SetFiles(v Archive_File_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewFiles sets the files field to a newly
// allocated Archive_File_List, preferring placement in s's segment.
func (s Archive) NewFiles(n int32) (Archive_File_List, error) {
	l, err := NewArchive_File_List(s.Struct.Segment(), n)
	if err != nil {
		return Archive_File_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Archive_List is a list of Archive.
type Archive_List struct{ capnp.List }

// NewArchive creates a new list of Archive.
func NewArchive_List(s *capnp.Segment, sz int32) (Archive_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Archive_List{l}, err
}

func (s Archive_List) At(i int) Archive { return Archive{s.List.Struct(i)} }

func (s Archive_List) Set(i int, v Archive) error { return s.List.SetStruct(i, v.Struct) }

func (s Archive_List) String() string {
	str, _ := text.MarshalList(0xf153ba7dee1c9118, s.List)
	return str
}

// Archive_Promise is a wrapper for a Archive promised by a client call.
type Archive_Promise struct{ *capnp.Pipeline }

func (p Archive_Promise) Struct() (Archive, error) {
	s, err := p.Pipeline.Struct()
	return Archive{s}, err
}

type Archive_File struct{ capnp.Struct }
type Archive_File_Which uint16

const (
	Archive_File_Which_regular    Archive_File_Which = 0
	Archive_File_Which_executable Archive_File_Which = 1
	Archive_File_Which_symlink    Archive_File_Which = 2
	Archive_File_Which_directory  Archive_File_Which = 3
)

func (w Archive_File_Which) String() string {
	const s = "regularexecutablesymlinkdirectory"
	switch w {
	case Archive_File_Which_regular:
		return s[0:7]
	case Archive_File_Which_executable:
		return s[7:17]
	case Archive_File_Which_symlink:
		return s[17:24]
	case Archive_File_Which_directory:
		return s[24:33]

	}
	return "Archive_File_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Archive_File_TypeID is the unique identifier for the type Archive_File.
const Archive_File_TypeID = 0xd92313d72a1ab4d0

func NewArchive_File(s *capnp.Segment) (Archive_File, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Archive_File{st}, err
}

func NewRootArchive_File(s *capnp.Segment) (Archive_File, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Archive_File{st}, err
}

func ReadRootArchive_File(msg *capnp.Message) (Archive_File, error) {
	root, err := msg.RootPtr()
	return Archive_File{root.Struct()}, err
}

func (s Archive_File) String() string {
	str, _ := text.Marshal(0xd92313d72a1ab4d0, s.Struct)
	return str
}

func (s Archive_File) Which() Archive_File_Which {
	return Archive_File_Which(s.Struct.Uint16(0))
}
func (s Archive_File) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Archive_File) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Archive_File) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Archive_File) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Archive_File) LastModificationTimeNs() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Archive_File) SetLastModificationTimeNs(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s Archive_File) Regular() ([]byte, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != regular")
	}
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Archive_File) HasRegular() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Archive_File) SetRegular(v []byte) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetData(1, v)
}

func (s Archive_File) Executable() ([]byte, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != executable")
	}
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Archive_File) HasExecutable() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Archive_File) SetExecutable(v []byte) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetData(1, v)
}

func (s Archive_File) Symlink() (string, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != symlink")
	}
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Archive_File) HasSymlink() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Archive_File) SymlinkBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Archive_File) SetSymlink(v string) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetText(1, v)
}

func (s Archive_File) Directory() (Archive_File_List, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != directory")
	}
	p, err := s.Struct.Ptr(1)
	return Archive_File_List{List: p.List()}, err
}

func (s Archive_File) HasDirectory() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Archive_File) SetDirectory(v Archive_File_List) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewDirectory sets the directory field to a newly
// allocated Archive_File_List, preferring placement in s's segment.
func (s Archive_File) NewDirectory(n int32) (Archive_File_List, error) {
	s.Struct.SetUint16(0, 3)
	l, err := NewArchive_File_List(s.Struct.Segment(), n)
	if err != nil {
		return Archive_File_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Archive_File_List is a list of Archive_File.
type Archive_File_List struct{ capnp.List }

// NewArchive_File creates a new list of Archive_File.
func NewArchive_File_List(s *capnp.Segment, sz int32) (Archive_File_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return Archive_File_List{l}, err
}

func (s Archive_File_List) At(i int) Archive_File { return Archive_File{s.List.Struct(i)} }

func (s Archive_File_List) Set(i int, v Archive_File) error { return s.List.SetStruct(i, v.Struct) }

func (s Archive_File_List) String() string {
	str, _ := text.MarshalList(0xd92313d72a1ab4d0, s.List)
	return str
}

// Archive_File_Promise is a wrapper for a Archive_File promised by a client call.
type Archive_File_Promise struct{ *capnp.Pipeline }

func (p Archive_File_Promise) Struct() (Archive_File, error) {
	s, err := p.Pipeline.Struct()
	return Archive_File{s}, err
}

const schema_df9bc20172856a3a = "x\xda\x94Z\x0fp\x1c\xd5y\xff\xbe\xdd;\x9dd," +
	"\x9f\xd6\xef\\Ljw\x85P\x01\x0bK\xd8'\xff\x89" +
	"\x85\x1dq'\x1b#[\x82[\x9f\x0d\xd8SZ\xf6\xee" +
	"\x9e\xee\x9e|\xb7\xbb\xde\xdb\x93,\x17\xa1\xc0@\x8a!" +
	"\x84\x98\x00!\x0d\x0c\xe0\x84\x09\xb4\xa1\x04\x08\x13\xf0@" +
	"B=\x85\xf2'\x192\xb4\x14p\xebI\xcc\x9ft\xc2" +
	"`ZRh\xd3\x0cf;owowu\x92\x90;" +
	"\x9e\xf1\xec\xbe\xfb\xf6{\xdf\xff\xef\xf7\xbd\xa7U\xff\xda" +
	"v\xb1\xb0:\xfa\xed\xaf\x00d\xdf\x12\xa2M\xf6\xcb_" +
	"\xfbde\xeb\xbf<w\x03H\x8b\"v\xdf\xe8M&" +
	"\x1e\xfd\xee\xaf\x00\x90\xac\x96_'\x9b\xe4\x18@\xf6\xcb" +
	"\xb2\x88\xd9\xcd\xb2\x80\x00\xf6+'~\xc3FW\xfc\xc5" +
	"M\xa0,B!\xa0\x8fFc\x00d\x83|\x84\xa4\xe4" +
	"\xf5\x00\xbdL\xb6\x11\xd0~\xec+\xaf\x9e|\xfc\xe3\x7f" +
	"\xfb+\x90\x96\xa2}\xc6\xd6\x9e\x0b.=\xf2\xe6\xbb\x10" +
	"\x15c\x00\xbd\x0f\x9e- y\xf4l\xfe\xdd#g?" +
	"\x06h\xb7\xf5~\xef\x86\xf1\xf2\xc2\x9b9\xeb\x90(\x11" +
	"Nqu\xc7aB;\xf8\x93\xda\xf1\xef\x80\xf67\xd6" +
	"\xec\xde\xbd\xee\x93\x97o\x05\xe5L\x14\xec\x8f>\xb9t" +
	"g\xd7\xc1\x17~\x0d[0&b\xa4w\xed9\x8b\x91" +
	"l9\x87\xef\x92:G\xe6\x82D_o\x1a9\xe7\xb8" +
	"r\x1b(\x8b\xa2\xcd\xd3\xd4T:\x8f\x91\xab;c\xe4" +
	"\xeaN9{c\xa7\xc8\x89\x9f?\xd1\xf4x\xf6\xbao" +
	"|\x0b\xa4E\xc24\xdaZ\xe7\x112\xd9\xc9\xd9Nt" +
	"\xc69%{k\x89\xd8\x9d\x1a\xbbs&\xdb\x93\xe7>" +
	"A>=\x97[\xef?\xcfu\x98>\xbd\xef\xbf\x97=" +
	"\xfe\xea\x93ws\x891\x90x\x89\x14C\x00r\xe2\xdc" +
	"\xdf\x01\x92\xf7\xcf\xe5vx$-.\x88\xfc\xd7u\xf7" +
	"p;`\xc8\xc4M\\\xfd\x83\xe7\x1d#w\x9d\xc7E" +
	"8t\xde\xed\x9c\xefU\xaf\xbe\xd8\xde\xb4\xf7\xd4=\xb3" +
	"\xf3]\xbd\xe2\x03@\xb2v\x05\xb7\xd9\xb7_a\xdb\xc7" +
	".\x1f\xff\xeb\x06\xca]R\x0c#\x00\xa4\xb5\xeb\x0f\x80" +
	"\xbdR\x97c\xaf3~z0\xf1\x83\xfb\x13\xf7\x83\xb4" +
	"\xa8Q\x84\xde\xee\x0b\x04$\x1b.\xe0\x8fk/\xb8\x92" +
	"S\xdf\xbem\xcf\x8dW\xbd\xbe\xeb'\x8d\x12\x0b\\\xe2" +
	"\x87V~@\x1e_\xc9\x9f\x1e]\xc9\xd5[\xb6\xe1\x95" +
	"5\xcb\xefz\xfd\x99\x06\xd6\xc8)\x06\xbb\x8f\x91]\xdd" +
	"\xfcI\xe9\xee\x07\xb4_\xfb\xda\xf9\x0f<\xa1\x0c\xbe\x08" +
	"\xd2\x99\x18\x84\x9e\x13?d_\xf7\x1f\xc8\xa4C;\xd1" +
	"\xcd\xf9\xbe\xf7\xe6\x8b?\x9b\\i\xbc\x0c\xd2\x1f\xa3}" +
	"\xf7\xf3\xa5\xd5_\xbe\xe1\xeb\xc7\xdd\xc0\xec\xdd\xd4\xd3\x87" +
	"d\xb8\x87?\x0e\xf68\x0aZ\xf1[W~2\xa0\xbd" +
	"\xd5\xe8\xe3\xde}\x17\x0aH&/t\x9c|\xe1k\x9c" +
	"\xf4\x97?\xfeR\xd7\x9b\xe4\x9c\xb7A\xf9#\x14\xec\xa5" +
	"\x87\x96}4y$\xfb1l\x11b\xdclo\xac9" +
	"FN\xac\xe1\xe4\xc7\xd7\xb8\xc68t\xe4\xbe\xe7J\xcf" +
	"\xbd\x0d\xd2\x99\x91@f\xc0\xde\xc1ui$\xbb\xd7\xf1" +
	"\x98\xd8\xb9N\xc4\xec5\xeb\x9c\x8c\xf2Em0\x9e\xa3" +
	"\xa4\xb2\xee\x18\xb9z\xdd\x99\x00\x84\xad\xe3>\xf4\xbd\xd6" +
	"@,9I\xb2\xfe\x08\xa1\xeb\xcf\x03\xe8\x9d\\\xaf\x0b" +
	"\x80\xf6\xdec\xf6%\xff\xb4\xf9\xddw\x1a\x92\xd5\xc9\xa8" +
	"\xe3\x1b\x8e\x92\xf77\xf0\xa7\x13\x1b\xc6!\x94\x9d\xb3\xb8" +
	"eS\xdfQ\xb2\xa5\x8fK1\xdc\xd7\xef\x18\xef\x99\xbf" +
	"y\xf2\x9dk\xdfk\xa0u\xdc}}\xdf\x13\xe4`\x1f" +
	"\x7f\xba\xa9\xcf\xe1\xfbh\xf3\xe2{\x0e\xdf\xf1^C\xd4" +
	"m\x11b\"\x00\xf9m\xdf;\xe4S\x87\xfa\xe3\xbe\xc7" +
	"\x00?\xdf\xb3\xfe\xee;\xbe\xfb\xc2\xfb\x0em\xe0o\xa7" +
	"\xb8T.\xfa\x1d\x99\xb8\x88\x1b\xbav\x91\xe3\xc2\x9b\x0b" +
	"O^{\xde3\x0f\x7f8\x9b\x14\xfb6\x1e%\x13\x1b" +
	"\xf9Sm#\x97\xc2\xf7\xda,\xda\xbd\xbd\xf1\x09rb" +
	"#\xd7\xee\xb7\x1b\xb9v_\x8e\xe7\xfe\xee\x07\xcb\xee\xfd" +
	"_P\xfe\x04}\x89vEc(\x00\xf4\x9e\xb5\xa9\x03" +
	"\x01\xc9\xd9\x9b8\xd7\xfb/\xdb\xb4n\xdf\x81_\x9d\x02" +
	"e\x19\x864]\"\xf0\xdc\xeb=\xb4I\xe0\xa4wm" +
	"\x1a\x07;\xf4\xef:\xdbP\xf3{\xd5\"\xed\x11\xf2\xaa" +
	"\xa1\x19}\x15\xb5\xc8\xf2\x97\xd5*9\x8af\x06\x11[" +
	"A\xc0V\x00\x09\xd3\xf6\xed/\xfe\xe2?\xb6|\xe9\x83" +
	"\xbb\x85\xfa'\xee\x17\xc3j\xbf\xc6Fh\xd5R\x16b" +
	"8\xe0\xa4[B\x19\xb3$]\x97]\x92\xfa\xec*;" +
	"@\x87X\x85\xa15\xa8]\xa9\x9b\x85*\xc0\xd4\x80^" +
	"\xa9\xa8Z\xa1?\x95\xb7\x98\xae)\x9db\x04#\x11\x04" +
	"\x90N\x9a\x00\xca\x87\"*\xbf\x17P\x8ab\x02\xf9\xe2" +
	"\xa7|\xf1\x13\x11w\xa0\x80\x18KpkH\xa7\xd2\x00" +
	"\xca\xefE\xcc&P@\xa9\x19\x13\xc8\x9d*\xe1\x0d\x00" +
	"\xd96\x141\xbb\x8c\xaf\xa3\x90p*\xccY\xb8\x07 " +
	"\xbb\x94\xafw\xf2uAL`\x14\x80\x9c\x8dG\x01\xb2" +
	"\x9d|}\x15_\x17\x85\x046\x01\x90n<\x0c\x90]" +
	"\xc5\xd77\xa2\x80mb\xc2\xf1\xd7\x06\xdc\xc6\x9b\x12_" +
	"\xde\xcc\xc9\x9b\"\x09l\x06 )g\xfdb\xbe>\x84" +
	"\x02\xda\x15\xa6\xa5\x0cv\x05\x05\xd9\xac2]\xc3f\x10" +
	"\xb0\x19\xd0\xae\xa8\xfbg[\x9fR\x1d3Tq\x11`" +
	"FDl\xab\x9b\x0f\x90/\xd9y]\xb3\x98V\xa3\xe8" +
	"\x99\x0d\xb0-\xb06 \xb6\x01\xda\xaaa\\A\xcd*" +
	"\x031\xbc\x1f\xd3v\x19ES\x15\x0aj\xaeLS\x1e" +
	"\x89\xae\x81O\xa1\x1a\xc6\xb0j\xee\xa5h1\xad\xc8\x7f" +
	"\x8dq\xb9\xda\xec\xc1w\xfer\xbd\xf9\x93\xabo\x0d\xb1" +
	"\xdf\xc9\xac2\x05\x80Y~\xadPK-\xa8\x96\xea\xfe" +
	"\xeag\x9a\xf7k=\x82D7\x84\xb2z\xcd\xcc\xd3a" +
	"\xd5\xe8\x19V\x0d\x83iE\xc8 *\x0b\xc5\x08\x80\x13" +
	"\x02[r\x00\xcaf\x11\x95\x0cw\xa0\x17\x02\xc3{\x00" +
	"\x94!\x11\x95\xab\xb8\xf7\x047\x06v\xed\x00Pv\x8a" +
	"\xa8\x18\x82\xbfK\x06b\xaaU\xc2\x85 \xe0B@\xbb" +
	"\xeal\x96QA\x0c-\x96X\x81fT\xab\x04\xe8\x9b" +
	"\x9c\xff\xb4($+\xba\xb2\xa6\x8c\x981X\xe0\xf2\xb5" +
	"\xf9\xf2\xa9\x1d\x00\xca\x9f\x89\xa8\x94B\xf2Q\xbex\x8d" +
	"\x88J9$\x1f\xe3\x8b\x05W>I\x14\x9d\x10\x95*" +
	"|\xb1$\xa2b\x09\x18c\x85U\xd8\x02\x02\xb6\x00\x7f" +
	"^\x1dzN\x86\x9e{\xeb\xcf\x8d\xa6\x1c\xf6\xec\xde\x93" +
	"\xcd\x9b\x94j\xd5\x92\x8e\x16\x176\xe1\x0b;\x99\x04P" +
	"\xf6\x8b\xa8\xdc\x18\x12\xf6\xfa>\x00\xe5Z\x11\x95\x9b\x05" +
	"l\x15l\xdb\x95\xf6&\x9eQ_\x15Q\xf9\xba\x80\xad" +
	"\xe2\xe7\xb6+\xeeA.\xee\x8d\"*\xdf\x14\xb05r" +
	"\xcav\xf2I\xba\xad\x0b@\xb9YD\xe5N\x01\xe5q" +
	"V\xb0J\xf5\x88\xea/QV,Y~h\xd7\xb4\xbd" +
	"\x9a>\xaeAS\xcc\xd0\x8a^\x81\xc1\xf8\xa8A\xfd\x97" +
	"\xc6\xa2\x94W-Z\xd4\xcd\x89AM\x1c\xd1\xb96\x11" +
	"\x14\xec\x8fo\xbb\xf0\xcc\xc5\xd7<s\x14\x94\x88\x80\xa9" +
	"\xa5\xdca \xe1\x11{\xc0#\xc6AmDOi\x9a" +
	"\xdeo\xa9<\x97\x9c@\xf4\xfb\xfdL\xc7\x0e\xa8\xfd\xee" +
	"\x87|\x83\x95(\xe0\x02i2)M\xca\x00\xd2}\xa3" +
	"\xd2\x832\xa2\xf4\xc2\x01\xe9e\x19\x05\xe9d\x9ftR" +
	"F\x91\xb4\xa2I$\x941B\xd6b\x1fY\x8b2F" +
	"\xc9.<@v\xa3\x8cMd\x12\xd3d\x12el&" +
	"\xf7a\x92\xdc\x872\xb6\x90\xe70I\x9eC\x19c\xe4" +
	"8n#'P\x96u\xabDMG\xa1\x00\x16r\x85" +
	"\x12<S\xe0b\x940)_\xcei\x00l\xc3\xd4\x0b" +
	"\xb5\xbc\xc5 >\xc6\xac\x89Y>Z\xea\x7f4jg" +
	"\xa6\x11\x03\xd8y\xbdR\xa9i,\x0f\xfd\x8e=\xaa_" +
	"\xf8\xfd\x01{\xa0\x81\x1c\xa0\xbf\xaa\xe7\x99Z\xfeBa" +
	"\xfb\xfa\xb3\x0e\x11\x80=Ns\x99Z\xae\xcc@\xae\x96" +
	"\x98V\x9cg\xbb+i\xae\x9d\x93C?s\xc8\x01\xfa" +
	"\xf5\x91\x11\x96\xa7\xf3lw\xb9C\x04`\x17\xe8\x18-" +
	"\xeb\x06\x85~s\xa7\xae\x97\xbfX\xbdm\xf6f:\xe6" +
	"\x90\x01\xe0T5\xcf\xa86\xcfN\xe9\xa9\xacK\x05 " +
	"Wh\x81\xa9\xf3\xf8l\x98\xd3\x00\xc8E\xb5B\xab\xf3" +
	"\xd0n\xe54\x00v\xd1T\x8d\x12\xcbW\x01`\x1e\xe9" +
	"\xb7\xfa\x943\xe2X\xaf\xca\x8c\x87>\xef\xdem\x01\x1a" +
	"\x9e\x99U~\xa9P\xe5\x9aU\xd2M^p%lN" +
	"\xe0\x19\xbc\xe4\x8e\x86J\xae\xd0\x92p\xb2kx4(" +
	"\xb9mm\x09$\xbc\xe2\x1e\xf0*\xee5\x82\xdb\x96\xd4" +
	"\xbc\xb5\x05\xe2\x15\x95\x95\xfd\xeaj\x14\x8d,+j*" +
	"\xc4\xad\x9aI\xfd,\xaf\x19U\xcb\xa4j\x05\xfaS\x8e" +
	"\x00\x01\xfdtA\xaf\xa0&\x1ba\xb4\xe0\xa7\xff2\xbf" +
	"\x98=\xc5\x8b\xd9\x8fDT\x9e\x0d\x15\xb3gx\x13x" +
	"ZD\xe5\x1fB\x95\xf7\xef9\xe5\xb3\"*/\x09\x88" +
	"^\xe1}\x81\xd7\xb7\xe7ET~.\xa0\x14\x11\xddB" +
	"\xf6\xf2-\x00\xca\xcfET\xde\xe2x#\xe2\xa0\x02\xe9" +
	"\x8d\xa3\x00\xca[\"*\xef\xf1\x1e\x1fu \x81tb" +
	"\x1b\x80\xf2k\x11\x95\x0f\x05\x94U\xc3\x18,`[0" +
	"8Nou\x83\x80\xfcW\x1f\x04\xbb\xbf\xca\x16\xef\xa0" +
	"3\xdb\xe7\xd4\x18m\x84\x09\xe6^j1\x0d\x8b\xf5~" +
	"=[\xd3U\x1d3f\x8a\x82\xb1\x9dN\\\xc2\xb4\"" +
	"5\x0d\x93i\x16\xf8\x96=\xbd\xb6\xdc\x18 ,\x9e\xe7" +
	"\xf5\"\xd4\xf0\xd2\xb35\xbc\xe4l\x0d\xaf/\xdc\xf0\xe2" +
	"\x09\\\xcc\x1b\x1ewPYDe\xbf\x80S\xaaal" +
	"5\x197\x8e\x8fY=\xe3\x14M\x95i3\xd7\xfb]" +
	"c\xcc\xfc\xc1\xb3R\x9a\x01\x16g\xf9u.\xed\xca\xfd" +
	",O\xb5*\xe5=r!o}\xdc\xe1\x93]A\x97" +
	"\\\x8e\x9f\xdb\xe8\xba\xfc\xfa=AG\\.\x9c\xb2\xa3" +
	"\x0e\x0a\x94\x0e\xe6\x82\xe6\xb7\\\xfc\x8c/7\x03H\x87" +
	"x\xbe|SD\xe5^\x1e_M\x09l\x01\x90\xbe\xc3" +
	"mw\xa7\x88\xca\x03\x02\xc65]\xa3\xd0d\xeb\x06\xd5" +
	"8\x08\x021O1\x1e\xcc\x83\x80\x18\xe7\x92\x9b\xbaa" +
	"2jAL5'f\xf1\xbb\xc1\xcbl~\xb3\xee\xa4" +
	"\xdd,XmJ\xd3-\x96\xa7\xd5\xd9>\x9d\x0e\x1f2" +
	"\xee\xebf:\xc24\xe6tM\x9eoK}\xc7\x7f\xe7" +
	"K\x81\xf0\xbe\xe3\xef\xe3yp\xaf\x88\xca\xc3!\xc7?" +
	"\xc4}\xfc}\x11\x95\x1f\x85\x90\xce\xa3\x9c\xf2\x87\"*" +
	"Os\x83D\xdc\x84{\x8ac\xf9\x1f\x8b\xa8\xfc\x92'" +
	"\\\xd4\xb5\xff/F\x83,\x14Y!\x08`\xd5\x1d6" +
	"\xdc\x00\x0eM\xb4\x8e6U\x0fH\x02\x1a<\x00\xeaS" +
	"\xa4\xf7\xeb\x08+\xd3!\xe6~[\xe7\xa7\x96\xc7\xd5\x89" +
	"\xea\xa0\x06r\xbe\\+\xd0F\xf0\x973Y\xa1H\x07" +
	"t\x88k#\x8c\x07\x95? \xcf\x1eT\x97W\xd9\x90" +
	"\x1bMq\xaf\x06\x87a,7\xde\xc5\"*C!\xe3" +
	"\x0d&\x83B\xcbg\x13\x01Q\x1a6\x83:\x1bR\xde" +
	"\xab\x16u\xd1M\xba\xaf\xc6L\x9a\x05\xd9\xd1\x1a\x11\x04" +
	"\xc4\x99\"\x0d\xcc\x00O\xbe@\xad|\xeff\x11\x95\x84" +
	"\xd0\xc8\xbc1Y<\xb3\xf7\x0c\xf4\xbb\x03\x87\xa7\x19\x0a" +
	"\xaef\xaf\x84\x1a\x83\xa7\xd8.\x9eA\x19\xaf\x1c`\xbd" +
	"\x1c\xa4\xbdr\xf0U\x01\xed\x025L\x9aW-\x81\x16" +
	"\xb6\xec\xa7\xf9\x9a\xc5G\x12\x07\x85\xfb\xfe\x89\xabfq" +
	"\xac\xc1)ST\x1bc\xa6\xae\xf9\xb3\x91\xdd\xb9\xe6\xf1" +
	"\xbf}\xef\xfa\x07\xee\x04o:j\x08\xea\xb4\xe7D\xee" +
	"\xc2\x9e\x8c>N\xcd\xfe\x9c\xce\xc7\xae\x06`\xdc5\x1b" +
	"0\xce\x05\x09\xef\xc7\xf6\xc1\xae\x00\x01\xfb\xb1}[G" +
	"P\x03\xfc\xd8>\x94\xf3*\xc0\x0fy\xb2\xab\x95\xc0\xc0" +
	"\x05V5\xca\xea\xc4 \xc4\xb4\x11\x1d\xdb\xec\x0f/x" +
	"\xf7\xa7-\x87\xb3\x0fy\x81\x157B3K\xccRy" +
	"\xec%?\x9a\xbc\xe2\x95\xff9\xf1-?\xf6\xa8Ya" +
	"\xd5*\x83XhR\xc4\x86\xb1\xc5\xb3\xc1\xe5^\x85\xc9" +
	"S/>\x9d\xc4\x1er\xd49\x9e\xe6\x1c\xa57:\xa4" +
	"7d\x14H\x14\xd3$\x8a\x1c\xdfn\xc2.\xb2\xc9\xc1" +
	"\xb7\x15L\x92\x8a\x83o\x1f\xc4=\xe4!\x07\xdf\xbe\x8d" +
	"{\xc8q\x07\xcbJB\x17\x91\x04\x8etSB\x92\xa4" +
	"\x04\x8etkB\x92\xd4\x04\x19\x17\x90G\x84\x0e\xf2\x88" +
	" \xe3\x19\xe4ma\x079.\xc8\xb8\x90,\x11\xd3d" +
	"\x89(c+\x19\x16\xbb\xc8\xb0(\xe3\"2)v\x91" +
	"IQ\xc68yJ\xec\"O\x892\xb6\x91\xf7\xc5\x0e" +
	"\xf2\xbe(\xa3D\xce\x8at\x91\xb3\"2.&\xbb#" +
	"]dwD\x9eb\xda\x98Zf\x85X\x85Y\x0eZ" +
	"\x0a\xce?9Z\xeat\xd0R\xc6Q0\xda!Es" +
	"\xb1\xe1\xc1\x9d\xf6\xf0\xe0\xcevn\x00\x88q\x13\xc0\x94" +
	"j\xa8\xf9\x12M\xce\xf2\xfd\xca\xf0\xf7{\xa4\x96;\xec" +
	"\x94C\xdb\x9d\x04\xb1g\x95\xf7\xd2>\x84\xae5\xdb\xc7" +
	"0\x09\x10/\x1a\xe5\xde/\x92\x05Q\x8a\xa6\xa5\xe8\x9e" +
	"\xa9\xad\x99\xa1\xee\xde\x9eU\xf6\xd6\xcbv\xb5o\xcd\x0c" +
	"\xb5\x838\xd6\x0b \xabs08?\xcc`\x9b\xd4\x92" +
	"\xb3S\x1e\x07\x00p\x98\xf0w\x88\xb5s.v\xaeZ" +
	"\xe8\x1d(\xab5\x10\xab\xf4\x8b\x98q\xcdF\xa5\x96Q" +
	";\x9d\xdd\xdc\xdd\xdb=P\x86\xb8Z\xabR\xfe\xda\x1e" +
	"\xbc\xba\x0c\x93\xffo\x86\xc9\xe9\x0c\x93!\x86\xdcN\xc9" +
	"\xd3\xb6Sr\xba\x9d\x92\x00ry\x0e\x06\x8dv2\xed" +
	"!\x97\xc3\xea\xba\x9d\xf8;\xc8\xedc\xce\x92\xc3\xe7\xf4" +
	"\xec=\xd4`\xef\xa1\xc0\xde1V\xcd\x9fV\x00\x0ef" +
	"\x07\xec\xc1\xec@8\x00m\xd5\xb4X\xd5by\xc0y" +
	"\x83pTj9l\xa7\xea\xf4q\xc7.\xf5Wl\xf7" +
	"\xd2:\xd6\xce\x0d4eLX%];\xbd\xb8\xce8" +
	"\xb4^\\\xbb/\x8dqm\x94\x8c\xde\xf9TLK\xd1" +
	"\x03S\x99K3N\\g.\xcd\xb8j\xf6;Lz" +
	"\x01\xe2\x95\xd9]\xb6\xb2\xc1\xe7\xafO\x0d{>\x1f\xd6" +
	"\x0f\xb0rYm\x17\x9c)2_\xd7\xd0\x13)_(" +
	"\x94\xe7\x0b\xa1mRK\x97=\xb0y\xf3P\xf7j\xc7" +
	"sq\xfe\x0c\x10\xa3Fy>\xa7\xa7\xa5\xe8\x91\xa9-" +
	"\x19\xe7K{K\xbe\xcc\x8c*m\xc7\xba$\x1eb\xe4" +
	"b\x18\xeal\xbc\xd6L\x13cu\xcbb\xb4\x072\xa9" +
	"\xba\x1c\xcel\xadk\xed\x19\xd1\xe5\x97\xb2,\x93\xe5j" +
	"\x1coyZ\"\xe7}\xa0\xccr\xf3\xa5[\x97\x14=" +
	"\x1c\xdfSf9\x9b\xffwa\x99\xe5\xd0\xd0\x8a\x0e\x17" +
	"/\xc2\x1a:y\xca\xcc\x97\xd8\x18\xed\xb9\x84\x89e\xda" +
	"\x00\xee\xba\x02p\xb7\\\xb0\xed:\xbc\xe3=\xfb\x1e\x11" +
	"\x95\xefsp\xeb@a\xbe\xf5\x83\x1c\x0a?\xe0\xb6\xb6" +
	"\xe5\x91S\xb6{\xde*=\x92\x0ep\xdf\xf2\xe8g|" +
	"\x997\xc2Gwx\xc8\xef%\xaf\xb9r\x90\xf7\xc2\x11" +
	"\x00\xe5%\x11\x95\x7fn\xe8\x8eS&-\xd6\xca\xaa\xe9" +
	"\x8f\x8a\xd4\xc3\x07 \x96\xfd\xf9q\xaa:Q)3m" +
	"o\xa8\xa5\x9a4o\xe9&\xe0D\x80\x0d\xfc\x0b\x13\x0f" +
	"\x1b\x94\xd5\xaa5\xac\x17\x18\x8e\xb0\xbcs\xb0\xd1\xbf\x93" +
	"U\xe8eU\x8c\x82\x80\xd1P\xe3\x8c4 \x9f\xfa\xa1" +
	"\xb5\x7ff\xcd\x07l\xe7\x14.\xd26\xd3\xcc\x01\xe6\x10" +
	"YQ\x89`\xf8J\x08s\xb6\x83Br\xfa~\x88\xa5" +
	"\x0c\x16\x1e\xac\xb6\x85f\xa8:\x06\xf1A\x93\xe1AD" +
	">B\xf1)\xd5\x10Q\xb9\xd6;\xa3\xe6\xb6\x9f\x18\xf5" +
	"\x10\xcc\x9d\x02\xdac\x8c\x8es\x0c\xea\"e\xfa\x9b\x87" +
	"S[\xd7\xfe\xf9\xb3\xf5\x89@5Xf\xda\xa9\xa8:" +
	"F\x07\x0bTC\x8bY\x13\x03\xaaQ\xe5\x84u@Y" +
	"\x176\x9e2Xp$\x1dh\xd4\x00\xbb\xb0>`\xf5" +
	"\xbb\x13\x96\xd2\x1c\xbe\x90\xe09\xe9\xdf\x98J\xd1=\xf1" +
	"\xc1\xbc\xae\xd9\xf5\xe3J\x10uKY\xc9\xed\x81\xa1\xeb" +
	"D\xf2\xa7\x98\x04A\xf2\xe6v\xd2\x8ai\x80l3\xd6" +
	"\xcf\xfa\x05\x17m\x11\xc9Y_\xc8\xd7\x97\xf2\xd4\x131" +
	"t\xd1H\x96`\x1a\x04)\x12K\xe0\x02\x00\xe9\x14\x0f" +
	"\xdf\xcf\xea\x94Q\x0c]\x8a\x92%\xd8\x07\x82\xd4\xb4 " +
	"\xe1\\}\xf8\x94\xcd|\xaf\xd8\x19\x09\\\x04@\xa2\x98" +
	"\x03\xc8F\xf8^m\xce}\xc3\xc2\x04\xc6\x1d\xd9n\x99" +
	"v\xdf\xd0\xd2\x9a\xe0\xe9J\xcer\xe8\x9d\xfb\x865|" +
	"}\xc1\xa2\x04J\x00d5\xee\x08\xdf+\xc8\x8c\x8f\xda" +
	"S\xe34WeV\x90\x0fy\xbd@w\x99\xfe\x89\xca" +
	"T\xd9-@\xb6w2\xca@\xa4\xbec\xe2\xc1\x9d\xb1" +
	"\xeb\x98~\xf7\\\xc06\x8a\xc6v:\xc1\x89\x83sW" +
	"\xbb@\xaby\x93\x19\x16\xccq\xcc_-\xe9\xa6\xb5\x99" +
	"V\xd1\xa1\x9a\xeb\xe4\xa1Zw_L\xb7B\x11\xe2\xfb" +
	"\xb9~mQR\xb5\"\x1d\xd2\xdd\x01}\xaeYT\x98" +
	"6\x8b\x0e\x16\x1c\xa8\xda\xec\xe7\xc8\x0a\x0e\xb4;ET" +
	"V\x85r\xa4\x9b/\x9e/\xa2\xb2f\xee3\xf4\xc6\x0d" +
	"\xfck\x07p\x124\xf8\xfb\x00LOy\x17\x11\xe1a" +
	"\x89\x87\xc1B\x11\x95\xf3\x05\xb4\xabT5\xf3%\xef\x12" +
	"\xc1W\xd7\xe70{Bl\xa7\xf2\xc4%\xcc\xad\xba!" +
	"uv\x04\x92\xfb\xea\xac\xe6\x9b\xad\x12Q\xd9(\xd4\xc7" +
	"\xfb\xed\x94\xd75\xff\x84\xdcdc\xaaE\xb7\x83H'" +
	"\xe6:6\xf7O8\x06cy]\xf3&\xb6\x85\xb6\xed" +
	"\x8el\xe9`\x18m\xc5\xcfmo\x1a\xed\x08\xa6\xd1V" +
	"\xe1\x94\x8d\xa1{Ei\xb8\x03\x84\xd0\xe9}u\xac\xe8" +
	"\x0f(\x86V\x9csdL\xc9\xce]\x96?la\xe8" +
	"VS\x9at\xf2\xdak)4\xddp\x82\xc4\x8b\x1aK" +
	"\x86N\x90\xea\x87t\x95\\p\x82$\x89\xde!]\x8d" +
	"\x1b\xcdr\x87K\x99iF\xcd\x9a\xca\xbb\xd3\xea\xcc\xdb" +
	"\xb1\xb9N\xde\xe6\xcd\x07M\xafi\x99\x92\xa9r,<" +
	"\x7f\x0c;\xc7\x9eV\xcd\xa4p:N\xdf1\x8f\xd3\xab" +
	"\x1e7@:\xc3\xe7\xf5\xeb)Sv\xfa\xbb\x13\xd1~" +
	"\xef\x93\xb0+\xce#o\xb6\xd9\xbfS@y\x84\x95i" +
	"u\xee\x9e\xd9x\xc7\xe4{\xd6ql\x0f\xd3bF\xcd" +
	"\xe2\xda\xd5\x83kEW\x90\xa2Apus\xff\xac\x14" +
	"Q\xb948\xf9\xca\xab\x86\x9ace\x06\xa2\x15j\xda" +
	"W-\xfb\xc7\x9f}/\xfe\xda\xc9\xb9\x04\xf0\x03;\xaf" +
	"k=\x86V\x04\xd7\xb4n\x14\xadH6\xd4\x07\x1eE" +
	"\xdd\xc9\xc0\xe0r\xc1`\xab\xf7\xd7-\xc8\xdf\x92\xfe\xdb" +
	"\xff\x05\x00\x00\xff\xff\xeeI8,"

func init() {
	schemas.Register(schema_df9bc20172856a3a,
		0x82bdd60d2cf486c9,
		0x855f296a69e6e1ca,
		0x87dcf1b1edcb3eaf,
		0x880c6c7782a33310,
		0x8bc9f4365959348e,
		0x8d51dd236606d205,
		0x938e7e53b106e1c0,
		0x9476412d0315d869,
		0x96b3cbb11cf671b8,
		0x987ef3040a0342a9,
		0x98fd6b0620c6cb58,
		0x9a774f764b69ca97,
		0x9f149fa71489be0b,
		0xb755d258845a4a8f,
		0xb9d2951d34ca391c,
		0xc64951b2a02886cf,
		0xc9702c7dbfc6d7e4,
		0xd86e43f42c8b0f74,
		0xd92313d72a1ab4d0,
		0xd9bd68bd9dba918f,
		0xdd8c82383168c096,
		0xe0c5892a5448f4ee,
		0xe2e344d346ffda6b,
		0xe3d7ba482b2e470b,
		0xe47ce2b3aab90f74,
		0xe492a2981208ad0b,
		0xe5c59b9296375a00,
		0xeca8b9277cb36488,
		0xf153ba7dee1c9118,
		0xf99c1ca7ae620f38,
		0xfddf7a71363d4e9f)
}
