// Code generated by capnpc-go. DO NOT EDIT.

package ip

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	persistent "capnproto.org/go/capnp/v3/std/capnp/persistent"
	context "context"
	strconv "strconv"
	supervisor "zenhack.net/go/sandstorm/capnp/supervisor"
	util "zenhack.net/go/sandstorm/capnp/util"
)

type IpNetwork struct{ Client *capnp.Client }

// IpNetwork_TypeID is the unique identifier for the type IpNetwork.
const IpNetwork_TypeID = 0xa982576b7a2a2040

func (c IpNetwork) GetRemoteHost(ctx context.Context, params func(IpNetwork_getRemoteHost_Params) error) (IpNetwork_getRemoteHost_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHost",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpNetwork_getRemoteHost_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpNetwork_getRemoteHost_Results_Future{Future: ans.Future()}, release
}
func (c IpNetwork) GetRemoteHostByName(ctx context.Context, params func(IpNetwork_getRemoteHostByName_Params) error) (IpNetwork_getRemoteHostByName_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHostByName",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpNetwork_getRemoteHostByName_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpNetwork_getRemoteHostByName_Results_Future{Future: ans.Future()}, release
}

func (c IpNetwork) AddRef() IpNetwork {
	return IpNetwork{
		Client: c.Client.AddRef(),
	}
}

func (c IpNetwork) Release() {
	c.Client.Release()
}

// A IpNetwork_Server is a IpNetwork with a local implementation.
type IpNetwork_Server interface {
	GetRemoteHost(context.Context, IpNetwork_getRemoteHost) error

	GetRemoteHostByName(context.Context, IpNetwork_getRemoteHostByName) error
}

// IpNetwork_NewServer creates a new Server from an implementation of IpNetwork_Server.
func IpNetwork_NewServer(s IpNetwork_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(IpNetwork_Methods(nil, s), s, c, policy)
}

// IpNetwork_ServerToClient creates a new Client from an implementation of IpNetwork_Server.
// The caller is responsible for calling Release on the returned Client.
func IpNetwork_ServerToClient(s IpNetwork_Server, policy *server.Policy) IpNetwork {
	return IpNetwork{Client: capnp.NewClient(IpNetwork_NewServer(s, policy))}
}

// IpNetwork_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func IpNetwork_Methods(methods []server.Method, s IpNetwork_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHost",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetRemoteHost(ctx, IpNetwork_getRemoteHost{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHostByName",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetRemoteHostByName(ctx, IpNetwork_getRemoteHostByName{call})
		},
	})

	return methods
}

// IpNetwork_getRemoteHost holds the state for a server call to IpNetwork.getRemoteHost.
// See server.Call for documentation.
type IpNetwork_getRemoteHost struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpNetwork_getRemoteHost) Args() IpNetwork_getRemoteHost_Params {
	return IpNetwork_getRemoteHost_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IpNetwork_getRemoteHost) AllocResults() (IpNetwork_getRemoteHost_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHost_Results{Struct: r}, err
}

// IpNetwork_getRemoteHostByName holds the state for a server call to IpNetwork.getRemoteHostByName.
// See server.Call for documentation.
type IpNetwork_getRemoteHostByName struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpNetwork_getRemoteHostByName) Args() IpNetwork_getRemoteHostByName_Params {
	return IpNetwork_getRemoteHostByName_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IpNetwork_getRemoteHostByName) AllocResults() (IpNetwork_getRemoteHostByName_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHostByName_Results{Struct: r}, err
}

type IpNetwork_PowerboxTag struct{ capnp.Struct }

// IpNetwork_PowerboxTag_TypeID is the unique identifier for the type IpNetwork_PowerboxTag.
const IpNetwork_PowerboxTag_TypeID = 0xcf9e3f33950df819

func NewIpNetwork_PowerboxTag(s *capnp.Segment) (IpNetwork_PowerboxTag, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_PowerboxTag{st}, err
}

func NewRootIpNetwork_PowerboxTag(s *capnp.Segment) (IpNetwork_PowerboxTag, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_PowerboxTag{st}, err
}

func ReadRootIpNetwork_PowerboxTag(msg *capnp.Message) (IpNetwork_PowerboxTag, error) {
	root, err := msg.Root()
	return IpNetwork_PowerboxTag{root.Struct()}, err
}

func (s IpNetwork_PowerboxTag) String() string {
	str, _ := text.Marshal(0xcf9e3f33950df819, s.Struct)
	return str
}

func (s IpNetwork_PowerboxTag) Encryption() (IpNetwork_PowerboxTag_Encryption, error) {
	p, err := s.Struct.Ptr(0)
	return IpNetwork_PowerboxTag_Encryption{Struct: p.Struct()}, err
}

func (s IpNetwork_PowerboxTag) HasEncryption() bool {
	return s.Struct.HasPtr(0)
}

func (s IpNetwork_PowerboxTag) SetEncryption(v IpNetwork_PowerboxTag_Encryption) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEncryption sets the encryption field to a newly
// allocated IpNetwork_PowerboxTag_Encryption struct, preferring placement in s's segment.
func (s IpNetwork_PowerboxTag) NewEncryption() (IpNetwork_PowerboxTag_Encryption, error) {
	ss, err := NewIpNetwork_PowerboxTag_Encryption(s.Struct.Segment())
	if err != nil {
		return IpNetwork_PowerboxTag_Encryption{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// IpNetwork_PowerboxTag_List is a list of IpNetwork_PowerboxTag.
type IpNetwork_PowerboxTag_List struct{ capnp.List }

// NewIpNetwork_PowerboxTag creates a new list of IpNetwork_PowerboxTag.
func NewIpNetwork_PowerboxTag_List(s *capnp.Segment, sz int32) (IpNetwork_PowerboxTag_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpNetwork_PowerboxTag_List{l}, err
}

func (s IpNetwork_PowerboxTag_List) At(i int) IpNetwork_PowerboxTag {
	return IpNetwork_PowerboxTag{s.List.Struct(i)}
}

func (s IpNetwork_PowerboxTag_List) Set(i int, v IpNetwork_PowerboxTag) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpNetwork_PowerboxTag_List) String() string {
	str, _ := text.MarshalList(0xcf9e3f33950df819, s.List)
	return str
}

// IpNetwork_PowerboxTag_Future is a wrapper for a IpNetwork_PowerboxTag promised by a client call.
type IpNetwork_PowerboxTag_Future struct{ *capnp.Future }

func (p IpNetwork_PowerboxTag_Future) Struct() (IpNetwork_PowerboxTag, error) {
	s, err := p.Future.Struct()
	return IpNetwork_PowerboxTag{s}, err
}

func (p IpNetwork_PowerboxTag_Future) Encryption() IpNetwork_PowerboxTag_Encryption_Future {
	return IpNetwork_PowerboxTag_Encryption_Future{Future: p.Future.Field(0, nil)}
}

type IpNetwork_PowerboxTag_Encryption struct{ capnp.Struct }
type IpNetwork_PowerboxTag_Encryption_Which uint16

const (
	IpNetwork_PowerboxTag_Encryption_Which_none IpNetwork_PowerboxTag_Encryption_Which = 0
	IpNetwork_PowerboxTag_Encryption_Which_tls  IpNetwork_PowerboxTag_Encryption_Which = 1
)

func (w IpNetwork_PowerboxTag_Encryption_Which) String() string {
	const s = "nonetls"
	switch w {
	case IpNetwork_PowerboxTag_Encryption_Which_none:
		return s[0:4]
	case IpNetwork_PowerboxTag_Encryption_Which_tls:
		return s[4:7]

	}
	return "IpNetwork_PowerboxTag_Encryption_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// IpNetwork_PowerboxTag_Encryption_TypeID is the unique identifier for the type IpNetwork_PowerboxTag_Encryption.
const IpNetwork_PowerboxTag_Encryption_TypeID = 0xe2d94cf90fe4078d

func NewIpNetwork_PowerboxTag_Encryption(s *capnp.Segment) (IpNetwork_PowerboxTag_Encryption, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpNetwork_PowerboxTag_Encryption{st}, err
}

func NewRootIpNetwork_PowerboxTag_Encryption(s *capnp.Segment) (IpNetwork_PowerboxTag_Encryption, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpNetwork_PowerboxTag_Encryption{st}, err
}

func ReadRootIpNetwork_PowerboxTag_Encryption(msg *capnp.Message) (IpNetwork_PowerboxTag_Encryption, error) {
	root, err := msg.Root()
	return IpNetwork_PowerboxTag_Encryption{root.Struct()}, err
}

func (s IpNetwork_PowerboxTag_Encryption) String() string {
	str, _ := text.Marshal(0xe2d94cf90fe4078d, s.Struct)
	return str
}

func (s IpNetwork_PowerboxTag_Encryption) Which() IpNetwork_PowerboxTag_Encryption_Which {
	return IpNetwork_PowerboxTag_Encryption_Which(s.Struct.Uint16(0))
}
func (s IpNetwork_PowerboxTag_Encryption) SetNone() {
	s.Struct.SetUint16(0, 0)

}

func (s IpNetwork_PowerboxTag_Encryption) SetTls() {
	s.Struct.SetUint16(0, 1)

}

// IpNetwork_PowerboxTag_Encryption_List is a list of IpNetwork_PowerboxTag_Encryption.
type IpNetwork_PowerboxTag_Encryption_List struct{ capnp.List }

// NewIpNetwork_PowerboxTag_Encryption creates a new list of IpNetwork_PowerboxTag_Encryption.
func NewIpNetwork_PowerboxTag_Encryption_List(s *capnp.Segment, sz int32) (IpNetwork_PowerboxTag_Encryption_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return IpNetwork_PowerboxTag_Encryption_List{l}, err
}

func (s IpNetwork_PowerboxTag_Encryption_List) At(i int) IpNetwork_PowerboxTag_Encryption {
	return IpNetwork_PowerboxTag_Encryption{s.List.Struct(i)}
}

func (s IpNetwork_PowerboxTag_Encryption_List) Set(i int, v IpNetwork_PowerboxTag_Encryption) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpNetwork_PowerboxTag_Encryption_List) String() string {
	str, _ := text.MarshalList(0xe2d94cf90fe4078d, s.List)
	return str
}

// IpNetwork_PowerboxTag_Encryption_Future is a wrapper for a IpNetwork_PowerboxTag_Encryption promised by a client call.
type IpNetwork_PowerboxTag_Encryption_Future struct{ *capnp.Future }

func (p IpNetwork_PowerboxTag_Encryption_Future) Struct() (IpNetwork_PowerboxTag_Encryption, error) {
	s, err := p.Future.Struct()
	return IpNetwork_PowerboxTag_Encryption{s}, err
}

type IpNetwork_getRemoteHost_Params struct{ capnp.Struct }

// IpNetwork_getRemoteHost_Params_TypeID is the unique identifier for the type IpNetwork_getRemoteHost_Params.
const IpNetwork_getRemoteHost_Params_TypeID = 0xdd1700c1eb725eb4

func NewIpNetwork_getRemoteHost_Params(s *capnp.Segment) (IpNetwork_getRemoteHost_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHost_Params{st}, err
}

func NewRootIpNetwork_getRemoteHost_Params(s *capnp.Segment) (IpNetwork_getRemoteHost_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHost_Params{st}, err
}

func ReadRootIpNetwork_getRemoteHost_Params(msg *capnp.Message) (IpNetwork_getRemoteHost_Params, error) {
	root, err := msg.Root()
	return IpNetwork_getRemoteHost_Params{root.Struct()}, err
}

func (s IpNetwork_getRemoteHost_Params) String() string {
	str, _ := text.Marshal(0xdd1700c1eb725eb4, s.Struct)
	return str
}

func (s IpNetwork_getRemoteHost_Params) Address() (IpAddress, error) {
	p, err := s.Struct.Ptr(0)
	return IpAddress{Struct: p.Struct()}, err
}

func (s IpNetwork_getRemoteHost_Params) HasAddress() bool {
	return s.Struct.HasPtr(0)
}

func (s IpNetwork_getRemoteHost_Params) SetAddress(v IpAddress) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddress sets the address field to a newly
// allocated IpAddress struct, preferring placement in s's segment.
func (s IpNetwork_getRemoteHost_Params) NewAddress() (IpAddress, error) {
	ss, err := NewIpAddress(s.Struct.Segment())
	if err != nil {
		return IpAddress{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// IpNetwork_getRemoteHost_Params_List is a list of IpNetwork_getRemoteHost_Params.
type IpNetwork_getRemoteHost_Params_List struct{ capnp.List }

// NewIpNetwork_getRemoteHost_Params creates a new list of IpNetwork_getRemoteHost_Params.
func NewIpNetwork_getRemoteHost_Params_List(s *capnp.Segment, sz int32) (IpNetwork_getRemoteHost_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpNetwork_getRemoteHost_Params_List{l}, err
}

func (s IpNetwork_getRemoteHost_Params_List) At(i int) IpNetwork_getRemoteHost_Params {
	return IpNetwork_getRemoteHost_Params{s.List.Struct(i)}
}

func (s IpNetwork_getRemoteHost_Params_List) Set(i int, v IpNetwork_getRemoteHost_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpNetwork_getRemoteHost_Params_List) String() string {
	str, _ := text.MarshalList(0xdd1700c1eb725eb4, s.List)
	return str
}

// IpNetwork_getRemoteHost_Params_Future is a wrapper for a IpNetwork_getRemoteHost_Params promised by a client call.
type IpNetwork_getRemoteHost_Params_Future struct{ *capnp.Future }

func (p IpNetwork_getRemoteHost_Params_Future) Struct() (IpNetwork_getRemoteHost_Params, error) {
	s, err := p.Future.Struct()
	return IpNetwork_getRemoteHost_Params{s}, err
}

func (p IpNetwork_getRemoteHost_Params_Future) Address() IpAddress_Future {
	return IpAddress_Future{Future: p.Future.Field(0, nil)}
}

type IpNetwork_getRemoteHost_Results struct{ capnp.Struct }

// IpNetwork_getRemoteHost_Results_TypeID is the unique identifier for the type IpNetwork_getRemoteHost_Results.
const IpNetwork_getRemoteHost_Results_TypeID = 0xb57bd5aef30c4b61

func NewIpNetwork_getRemoteHost_Results(s *capnp.Segment) (IpNetwork_getRemoteHost_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHost_Results{st}, err
}

func NewRootIpNetwork_getRemoteHost_Results(s *capnp.Segment) (IpNetwork_getRemoteHost_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHost_Results{st}, err
}

func ReadRootIpNetwork_getRemoteHost_Results(msg *capnp.Message) (IpNetwork_getRemoteHost_Results, error) {
	root, err := msg.Root()
	return IpNetwork_getRemoteHost_Results{root.Struct()}, err
}

func (s IpNetwork_getRemoteHost_Results) String() string {
	str, _ := text.Marshal(0xb57bd5aef30c4b61, s.Struct)
	return str
}

func (s IpNetwork_getRemoteHost_Results) Host() IpRemoteHost {
	p, _ := s.Struct.Ptr(0)
	return IpRemoteHost{Client: p.Interface().Client()}
}

func (s IpNetwork_getRemoteHost_Results) HasHost() bool {
	return s.Struct.HasPtr(0)
}

func (s IpNetwork_getRemoteHost_Results) SetHost(v IpRemoteHost) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpNetwork_getRemoteHost_Results_List is a list of IpNetwork_getRemoteHost_Results.
type IpNetwork_getRemoteHost_Results_List struct{ capnp.List }

// NewIpNetwork_getRemoteHost_Results creates a new list of IpNetwork_getRemoteHost_Results.
func NewIpNetwork_getRemoteHost_Results_List(s *capnp.Segment, sz int32) (IpNetwork_getRemoteHost_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpNetwork_getRemoteHost_Results_List{l}, err
}

func (s IpNetwork_getRemoteHost_Results_List) At(i int) IpNetwork_getRemoteHost_Results {
	return IpNetwork_getRemoteHost_Results{s.List.Struct(i)}
}

func (s IpNetwork_getRemoteHost_Results_List) Set(i int, v IpNetwork_getRemoteHost_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpNetwork_getRemoteHost_Results_List) String() string {
	str, _ := text.MarshalList(0xb57bd5aef30c4b61, s.List)
	return str
}

// IpNetwork_getRemoteHost_Results_Future is a wrapper for a IpNetwork_getRemoteHost_Results promised by a client call.
type IpNetwork_getRemoteHost_Results_Future struct{ *capnp.Future }

func (p IpNetwork_getRemoteHost_Results_Future) Struct() (IpNetwork_getRemoteHost_Results, error) {
	s, err := p.Future.Struct()
	return IpNetwork_getRemoteHost_Results{s}, err
}

func (p IpNetwork_getRemoteHost_Results_Future) Host() IpRemoteHost {
	return IpRemoteHost{Client: p.Future.Field(0, nil).Client()}
}

type IpNetwork_getRemoteHostByName_Params struct{ capnp.Struct }

// IpNetwork_getRemoteHostByName_Params_TypeID is the unique identifier for the type IpNetwork_getRemoteHostByName_Params.
const IpNetwork_getRemoteHostByName_Params_TypeID = 0x9d5f1f6efcf7bbc4

func NewIpNetwork_getRemoteHostByName_Params(s *capnp.Segment) (IpNetwork_getRemoteHostByName_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHostByName_Params{st}, err
}

func NewRootIpNetwork_getRemoteHostByName_Params(s *capnp.Segment) (IpNetwork_getRemoteHostByName_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHostByName_Params{st}, err
}

func ReadRootIpNetwork_getRemoteHostByName_Params(msg *capnp.Message) (IpNetwork_getRemoteHostByName_Params, error) {
	root, err := msg.Root()
	return IpNetwork_getRemoteHostByName_Params{root.Struct()}, err
}

func (s IpNetwork_getRemoteHostByName_Params) String() string {
	str, _ := text.Marshal(0x9d5f1f6efcf7bbc4, s.Struct)
	return str
}

func (s IpNetwork_getRemoteHostByName_Params) Address() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s IpNetwork_getRemoteHostByName_Params) HasAddress() bool {
	return s.Struct.HasPtr(0)
}

func (s IpNetwork_getRemoteHostByName_Params) AddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s IpNetwork_getRemoteHostByName_Params) SetAddress(v string) error {
	return s.Struct.SetText(0, v)
}

// IpNetwork_getRemoteHostByName_Params_List is a list of IpNetwork_getRemoteHostByName_Params.
type IpNetwork_getRemoteHostByName_Params_List struct{ capnp.List }

// NewIpNetwork_getRemoteHostByName_Params creates a new list of IpNetwork_getRemoteHostByName_Params.
func NewIpNetwork_getRemoteHostByName_Params_List(s *capnp.Segment, sz int32) (IpNetwork_getRemoteHostByName_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpNetwork_getRemoteHostByName_Params_List{l}, err
}

func (s IpNetwork_getRemoteHostByName_Params_List) At(i int) IpNetwork_getRemoteHostByName_Params {
	return IpNetwork_getRemoteHostByName_Params{s.List.Struct(i)}
}

func (s IpNetwork_getRemoteHostByName_Params_List) Set(i int, v IpNetwork_getRemoteHostByName_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpNetwork_getRemoteHostByName_Params_List) String() string {
	str, _ := text.MarshalList(0x9d5f1f6efcf7bbc4, s.List)
	return str
}

// IpNetwork_getRemoteHostByName_Params_Future is a wrapper for a IpNetwork_getRemoteHostByName_Params promised by a client call.
type IpNetwork_getRemoteHostByName_Params_Future struct{ *capnp.Future }

func (p IpNetwork_getRemoteHostByName_Params_Future) Struct() (IpNetwork_getRemoteHostByName_Params, error) {
	s, err := p.Future.Struct()
	return IpNetwork_getRemoteHostByName_Params{s}, err
}

type IpNetwork_getRemoteHostByName_Results struct{ capnp.Struct }

// IpNetwork_getRemoteHostByName_Results_TypeID is the unique identifier for the type IpNetwork_getRemoteHostByName_Results.
const IpNetwork_getRemoteHostByName_Results_TypeID = 0xd14a2ec2bad45f69

func NewIpNetwork_getRemoteHostByName_Results(s *capnp.Segment) (IpNetwork_getRemoteHostByName_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHostByName_Results{st}, err
}

func NewRootIpNetwork_getRemoteHostByName_Results(s *capnp.Segment) (IpNetwork_getRemoteHostByName_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHostByName_Results{st}, err
}

func ReadRootIpNetwork_getRemoteHostByName_Results(msg *capnp.Message) (IpNetwork_getRemoteHostByName_Results, error) {
	root, err := msg.Root()
	return IpNetwork_getRemoteHostByName_Results{root.Struct()}, err
}

func (s IpNetwork_getRemoteHostByName_Results) String() string {
	str, _ := text.Marshal(0xd14a2ec2bad45f69, s.Struct)
	return str
}

func (s IpNetwork_getRemoteHostByName_Results) Host() IpRemoteHost {
	p, _ := s.Struct.Ptr(0)
	return IpRemoteHost{Client: p.Interface().Client()}
}

func (s IpNetwork_getRemoteHostByName_Results) HasHost() bool {
	return s.Struct.HasPtr(0)
}

func (s IpNetwork_getRemoteHostByName_Results) SetHost(v IpRemoteHost) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpNetwork_getRemoteHostByName_Results_List is a list of IpNetwork_getRemoteHostByName_Results.
type IpNetwork_getRemoteHostByName_Results_List struct{ capnp.List }

// NewIpNetwork_getRemoteHostByName_Results creates a new list of IpNetwork_getRemoteHostByName_Results.
func NewIpNetwork_getRemoteHostByName_Results_List(s *capnp.Segment, sz int32) (IpNetwork_getRemoteHostByName_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpNetwork_getRemoteHostByName_Results_List{l}, err
}

func (s IpNetwork_getRemoteHostByName_Results_List) At(i int) IpNetwork_getRemoteHostByName_Results {
	return IpNetwork_getRemoteHostByName_Results{s.List.Struct(i)}
}

func (s IpNetwork_getRemoteHostByName_Results_List) Set(i int, v IpNetwork_getRemoteHostByName_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpNetwork_getRemoteHostByName_Results_List) String() string {
	str, _ := text.MarshalList(0xd14a2ec2bad45f69, s.List)
	return str
}

// IpNetwork_getRemoteHostByName_Results_Future is a wrapper for a IpNetwork_getRemoteHostByName_Results promised by a client call.
type IpNetwork_getRemoteHostByName_Results_Future struct{ *capnp.Future }

func (p IpNetwork_getRemoteHostByName_Results_Future) Struct() (IpNetwork_getRemoteHostByName_Results, error) {
	s, err := p.Future.Struct()
	return IpNetwork_getRemoteHostByName_Results{s}, err
}

func (p IpNetwork_getRemoteHostByName_Results_Future) Host() IpRemoteHost {
	return IpRemoteHost{Client: p.Future.Field(0, nil).Client()}
}

type IpAddress struct{ capnp.Struct }

// IpAddress_TypeID is the unique identifier for the type IpAddress.
const IpAddress_TypeID = 0xeeb98f9937d32c0b

func NewIpAddress(s *capnp.Segment) (IpAddress, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return IpAddress{st}, err
}

func NewRootIpAddress(s *capnp.Segment) (IpAddress, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return IpAddress{st}, err
}

func ReadRootIpAddress(msg *capnp.Message) (IpAddress, error) {
	root, err := msg.Root()
	return IpAddress{root.Struct()}, err
}

func (s IpAddress) String() string {
	str, _ := text.Marshal(0xeeb98f9937d32c0b, s.Struct)
	return str
}

func (s IpAddress) Lower64() uint64 {
	return s.Struct.Uint64(0)
}

func (s IpAddress) SetLower64(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s IpAddress) Upper64() uint64 {
	return s.Struct.Uint64(8)
}

func (s IpAddress) SetUpper64(v uint64) {
	s.Struct.SetUint64(8, v)
}

// IpAddress_List is a list of IpAddress.
type IpAddress_List struct{ capnp.List }

// NewIpAddress creates a new list of IpAddress.
func NewIpAddress_List(s *capnp.Segment, sz int32) (IpAddress_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return IpAddress_List{l}, err
}

func (s IpAddress_List) At(i int) IpAddress { return IpAddress{s.List.Struct(i)} }

func (s IpAddress_List) Set(i int, v IpAddress) error { return s.List.SetStruct(i, v.Struct) }

func (s IpAddress_List) String() string {
	str, _ := text.MarshalList(0xeeb98f9937d32c0b, s.List)
	return str
}

// IpAddress_Future is a wrapper for a IpAddress promised by a client call.
type IpAddress_Future struct{ *capnp.Future }

func (p IpAddress_Future) Struct() (IpAddress, error) {
	s, err := p.Future.Struct()
	return IpAddress{s}, err
}

type IpInterface struct{ Client *capnp.Client }

// IpInterface_TypeID is the unique identifier for the type IpInterface.
const IpInterface_TypeID = 0xe32c506ee93ed6fa

func (c IpInterface) ListenTcp(ctx context.Context, params func(IpInterface_listenTcp_Params) error) (IpInterface_listenTcp_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenTcp",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpInterface_listenTcp_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpInterface_listenTcp_Results_Future{Future: ans.Future()}, release
}
func (c IpInterface) ListenUdp(ctx context.Context, params func(IpInterface_listenUdp_Params) error) (IpInterface_listenUdp_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenUdp",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpInterface_listenUdp_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpInterface_listenUdp_Results_Future{Future: ans.Future()}, release
}

func (c IpInterface) AddRef() IpInterface {
	return IpInterface{
		Client: c.Client.AddRef(),
	}
}

func (c IpInterface) Release() {
	c.Client.Release()
}

// A IpInterface_Server is a IpInterface with a local implementation.
type IpInterface_Server interface {
	ListenTcp(context.Context, IpInterface_listenTcp) error

	ListenUdp(context.Context, IpInterface_listenUdp) error
}

// IpInterface_NewServer creates a new Server from an implementation of IpInterface_Server.
func IpInterface_NewServer(s IpInterface_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(IpInterface_Methods(nil, s), s, c, policy)
}

// IpInterface_ServerToClient creates a new Client from an implementation of IpInterface_Server.
// The caller is responsible for calling Release on the returned Client.
func IpInterface_ServerToClient(s IpInterface_Server, policy *server.Policy) IpInterface {
	return IpInterface{Client: capnp.NewClient(IpInterface_NewServer(s, policy))}
}

// IpInterface_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func IpInterface_Methods(methods []server.Method, s IpInterface_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenTcp",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListenTcp(ctx, IpInterface_listenTcp{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenUdp",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListenUdp(ctx, IpInterface_listenUdp{call})
		},
	})

	return methods
}

// IpInterface_listenTcp holds the state for a server call to IpInterface.listenTcp.
// See server.Call for documentation.
type IpInterface_listenTcp struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpInterface_listenTcp) Args() IpInterface_listenTcp_Params {
	return IpInterface_listenTcp_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IpInterface_listenTcp) AllocResults() (IpInterface_listenTcp_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenTcp_Results{Struct: r}, err
}

// IpInterface_listenUdp holds the state for a server call to IpInterface.listenUdp.
// See server.Call for documentation.
type IpInterface_listenUdp struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpInterface_listenUdp) Args() IpInterface_listenUdp_Params {
	return IpInterface_listenUdp_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IpInterface_listenUdp) AllocResults() (IpInterface_listenUdp_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenUdp_Results{Struct: r}, err
}

type IpInterface_listenTcp_Params struct{ capnp.Struct }

// IpInterface_listenTcp_Params_TypeID is the unique identifier for the type IpInterface_listenTcp_Params.
const IpInterface_listenTcp_Params_TypeID = 0xfd226ae4c6bd2b1e

func NewIpInterface_listenTcp_Params(s *capnp.Segment) (IpInterface_listenTcp_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpInterface_listenTcp_Params{st}, err
}

func NewRootIpInterface_listenTcp_Params(s *capnp.Segment) (IpInterface_listenTcp_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpInterface_listenTcp_Params{st}, err
}

func ReadRootIpInterface_listenTcp_Params(msg *capnp.Message) (IpInterface_listenTcp_Params, error) {
	root, err := msg.Root()
	return IpInterface_listenTcp_Params{root.Struct()}, err
}

func (s IpInterface_listenTcp_Params) String() string {
	str, _ := text.Marshal(0xfd226ae4c6bd2b1e, s.Struct)
	return str
}

func (s IpInterface_listenTcp_Params) PortNum() uint16 {
	return s.Struct.Uint16(0)
}

func (s IpInterface_listenTcp_Params) SetPortNum(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s IpInterface_listenTcp_Params) Port() TcpPort {
	p, _ := s.Struct.Ptr(0)
	return TcpPort{Client: p.Interface().Client()}
}

func (s IpInterface_listenTcp_Params) HasPort() bool {
	return s.Struct.HasPtr(0)
}

func (s IpInterface_listenTcp_Params) SetPort(v TcpPort) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpInterface_listenTcp_Params_List is a list of IpInterface_listenTcp_Params.
type IpInterface_listenTcp_Params_List struct{ capnp.List }

// NewIpInterface_listenTcp_Params creates a new list of IpInterface_listenTcp_Params.
func NewIpInterface_listenTcp_Params_List(s *capnp.Segment, sz int32) (IpInterface_listenTcp_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return IpInterface_listenTcp_Params_List{l}, err
}

func (s IpInterface_listenTcp_Params_List) At(i int) IpInterface_listenTcp_Params {
	return IpInterface_listenTcp_Params{s.List.Struct(i)}
}

func (s IpInterface_listenTcp_Params_List) Set(i int, v IpInterface_listenTcp_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpInterface_listenTcp_Params_List) String() string {
	str, _ := text.MarshalList(0xfd226ae4c6bd2b1e, s.List)
	return str
}

// IpInterface_listenTcp_Params_Future is a wrapper for a IpInterface_listenTcp_Params promised by a client call.
type IpInterface_listenTcp_Params_Future struct{ *capnp.Future }

func (p IpInterface_listenTcp_Params_Future) Struct() (IpInterface_listenTcp_Params, error) {
	s, err := p.Future.Struct()
	return IpInterface_listenTcp_Params{s}, err
}

func (p IpInterface_listenTcp_Params_Future) Port() TcpPort {
	return TcpPort{Client: p.Future.Field(0, nil).Client()}
}

type IpInterface_listenTcp_Results struct{ capnp.Struct }

// IpInterface_listenTcp_Results_TypeID is the unique identifier for the type IpInterface_listenTcp_Results.
const IpInterface_listenTcp_Results_TypeID = 0x9381253786627ecf

func NewIpInterface_listenTcp_Results(s *capnp.Segment) (IpInterface_listenTcp_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenTcp_Results{st}, err
}

func NewRootIpInterface_listenTcp_Results(s *capnp.Segment) (IpInterface_listenTcp_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenTcp_Results{st}, err
}

func ReadRootIpInterface_listenTcp_Results(msg *capnp.Message) (IpInterface_listenTcp_Results, error) {
	root, err := msg.Root()
	return IpInterface_listenTcp_Results{root.Struct()}, err
}

func (s IpInterface_listenTcp_Results) String() string {
	str, _ := text.Marshal(0x9381253786627ecf, s.Struct)
	return str
}

func (s IpInterface_listenTcp_Results) Handle() util.Handle {
	p, _ := s.Struct.Ptr(0)
	return util.Handle{Client: p.Interface().Client()}
}

func (s IpInterface_listenTcp_Results) HasHandle() bool {
	return s.Struct.HasPtr(0)
}

func (s IpInterface_listenTcp_Results) SetHandle(v util.Handle) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpInterface_listenTcp_Results_List is a list of IpInterface_listenTcp_Results.
type IpInterface_listenTcp_Results_List struct{ capnp.List }

// NewIpInterface_listenTcp_Results creates a new list of IpInterface_listenTcp_Results.
func NewIpInterface_listenTcp_Results_List(s *capnp.Segment, sz int32) (IpInterface_listenTcp_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpInterface_listenTcp_Results_List{l}, err
}

func (s IpInterface_listenTcp_Results_List) At(i int) IpInterface_listenTcp_Results {
	return IpInterface_listenTcp_Results{s.List.Struct(i)}
}

func (s IpInterface_listenTcp_Results_List) Set(i int, v IpInterface_listenTcp_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpInterface_listenTcp_Results_List) String() string {
	str, _ := text.MarshalList(0x9381253786627ecf, s.List)
	return str
}

// IpInterface_listenTcp_Results_Future is a wrapper for a IpInterface_listenTcp_Results promised by a client call.
type IpInterface_listenTcp_Results_Future struct{ *capnp.Future }

func (p IpInterface_listenTcp_Results_Future) Struct() (IpInterface_listenTcp_Results, error) {
	s, err := p.Future.Struct()
	return IpInterface_listenTcp_Results{s}, err
}

func (p IpInterface_listenTcp_Results_Future) Handle() util.Handle {
	return util.Handle{Client: p.Future.Field(0, nil).Client()}
}

type IpInterface_listenUdp_Params struct{ capnp.Struct }

// IpInterface_listenUdp_Params_TypeID is the unique identifier for the type IpInterface_listenUdp_Params.
const IpInterface_listenUdp_Params_TypeID = 0xa1d8815a262abc49

func NewIpInterface_listenUdp_Params(s *capnp.Segment) (IpInterface_listenUdp_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpInterface_listenUdp_Params{st}, err
}

func NewRootIpInterface_listenUdp_Params(s *capnp.Segment) (IpInterface_listenUdp_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpInterface_listenUdp_Params{st}, err
}

func ReadRootIpInterface_listenUdp_Params(msg *capnp.Message) (IpInterface_listenUdp_Params, error) {
	root, err := msg.Root()
	return IpInterface_listenUdp_Params{root.Struct()}, err
}

func (s IpInterface_listenUdp_Params) String() string {
	str, _ := text.Marshal(0xa1d8815a262abc49, s.Struct)
	return str
}

func (s IpInterface_listenUdp_Params) PortNum() uint16 {
	return s.Struct.Uint16(0)
}

func (s IpInterface_listenUdp_Params) SetPortNum(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s IpInterface_listenUdp_Params) Port() UdpPort {
	p, _ := s.Struct.Ptr(0)
	return UdpPort{Client: p.Interface().Client()}
}

func (s IpInterface_listenUdp_Params) HasPort() bool {
	return s.Struct.HasPtr(0)
}

func (s IpInterface_listenUdp_Params) SetPort(v UdpPort) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpInterface_listenUdp_Params_List is a list of IpInterface_listenUdp_Params.
type IpInterface_listenUdp_Params_List struct{ capnp.List }

// NewIpInterface_listenUdp_Params creates a new list of IpInterface_listenUdp_Params.
func NewIpInterface_listenUdp_Params_List(s *capnp.Segment, sz int32) (IpInterface_listenUdp_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return IpInterface_listenUdp_Params_List{l}, err
}

func (s IpInterface_listenUdp_Params_List) At(i int) IpInterface_listenUdp_Params {
	return IpInterface_listenUdp_Params{s.List.Struct(i)}
}

func (s IpInterface_listenUdp_Params_List) Set(i int, v IpInterface_listenUdp_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpInterface_listenUdp_Params_List) String() string {
	str, _ := text.MarshalList(0xa1d8815a262abc49, s.List)
	return str
}

// IpInterface_listenUdp_Params_Future is a wrapper for a IpInterface_listenUdp_Params promised by a client call.
type IpInterface_listenUdp_Params_Future struct{ *capnp.Future }

func (p IpInterface_listenUdp_Params_Future) Struct() (IpInterface_listenUdp_Params, error) {
	s, err := p.Future.Struct()
	return IpInterface_listenUdp_Params{s}, err
}

func (p IpInterface_listenUdp_Params_Future) Port() UdpPort {
	return UdpPort{Client: p.Future.Field(0, nil).Client()}
}

type IpInterface_listenUdp_Results struct{ capnp.Struct }

// IpInterface_listenUdp_Results_TypeID is the unique identifier for the type IpInterface_listenUdp_Results.
const IpInterface_listenUdp_Results_TypeID = 0xcb83a480981bc290

func NewIpInterface_listenUdp_Results(s *capnp.Segment) (IpInterface_listenUdp_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenUdp_Results{st}, err
}

func NewRootIpInterface_listenUdp_Results(s *capnp.Segment) (IpInterface_listenUdp_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenUdp_Results{st}, err
}

func ReadRootIpInterface_listenUdp_Results(msg *capnp.Message) (IpInterface_listenUdp_Results, error) {
	root, err := msg.Root()
	return IpInterface_listenUdp_Results{root.Struct()}, err
}

func (s IpInterface_listenUdp_Results) String() string {
	str, _ := text.Marshal(0xcb83a480981bc290, s.Struct)
	return str
}

func (s IpInterface_listenUdp_Results) Handle() util.Handle {
	p, _ := s.Struct.Ptr(0)
	return util.Handle{Client: p.Interface().Client()}
}

func (s IpInterface_listenUdp_Results) HasHandle() bool {
	return s.Struct.HasPtr(0)
}

func (s IpInterface_listenUdp_Results) SetHandle(v util.Handle) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpInterface_listenUdp_Results_List is a list of IpInterface_listenUdp_Results.
type IpInterface_listenUdp_Results_List struct{ capnp.List }

// NewIpInterface_listenUdp_Results creates a new list of IpInterface_listenUdp_Results.
func NewIpInterface_listenUdp_Results_List(s *capnp.Segment, sz int32) (IpInterface_listenUdp_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpInterface_listenUdp_Results_List{l}, err
}

func (s IpInterface_listenUdp_Results_List) At(i int) IpInterface_listenUdp_Results {
	return IpInterface_listenUdp_Results{s.List.Struct(i)}
}

func (s IpInterface_listenUdp_Results_List) Set(i int, v IpInterface_listenUdp_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpInterface_listenUdp_Results_List) String() string {
	str, _ := text.MarshalList(0xcb83a480981bc290, s.List)
	return str
}

// IpInterface_listenUdp_Results_Future is a wrapper for a IpInterface_listenUdp_Results promised by a client call.
type IpInterface_listenUdp_Results_Future struct{ *capnp.Future }

func (p IpInterface_listenUdp_Results_Future) Struct() (IpInterface_listenUdp_Results, error) {
	s, err := p.Future.Struct()
	return IpInterface_listenUdp_Results{s}, err
}

func (p IpInterface_listenUdp_Results_Future) Handle() util.Handle {
	return util.Handle{Client: p.Future.Field(0, nil).Client()}
}

type IpRemoteHost struct{ Client *capnp.Client }

// IpRemoteHost_TypeID is the unique identifier for the type IpRemoteHost.
const IpRemoteHost_TypeID = 0x905dd76b298b3130

func (c IpRemoteHost) GetTcpPort(ctx context.Context, params func(IpRemoteHost_getTcpPort_Params) error) (IpRemoteHost_getTcpPort_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x905dd76b298b3130,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpRemoteHost",
			MethodName:    "getTcpPort",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpRemoteHost_getTcpPort_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpRemoteHost_getTcpPort_Results_Future{Future: ans.Future()}, release
}
func (c IpRemoteHost) GetUdpPort(ctx context.Context, params func(IpRemoteHost_getUdpPort_Params) error) (IpRemoteHost_getUdpPort_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x905dd76b298b3130,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpRemoteHost",
			MethodName:    "getUdpPort",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpRemoteHost_getUdpPort_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpRemoteHost_getUdpPort_Results_Future{Future: ans.Future()}, release
}

func (c IpRemoteHost) AddRef() IpRemoteHost {
	return IpRemoteHost{
		Client: c.Client.AddRef(),
	}
}

func (c IpRemoteHost) Release() {
	c.Client.Release()
}

// A IpRemoteHost_Server is a IpRemoteHost with a local implementation.
type IpRemoteHost_Server interface {
	GetTcpPort(context.Context, IpRemoteHost_getTcpPort) error

	GetUdpPort(context.Context, IpRemoteHost_getUdpPort) error
}

// IpRemoteHost_NewServer creates a new Server from an implementation of IpRemoteHost_Server.
func IpRemoteHost_NewServer(s IpRemoteHost_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(IpRemoteHost_Methods(nil, s), s, c, policy)
}

// IpRemoteHost_ServerToClient creates a new Client from an implementation of IpRemoteHost_Server.
// The caller is responsible for calling Release on the returned Client.
func IpRemoteHost_ServerToClient(s IpRemoteHost_Server, policy *server.Policy) IpRemoteHost {
	return IpRemoteHost{Client: capnp.NewClient(IpRemoteHost_NewServer(s, policy))}
}

// IpRemoteHost_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func IpRemoteHost_Methods(methods []server.Method, s IpRemoteHost_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x905dd76b298b3130,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpRemoteHost",
			MethodName:    "getTcpPort",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetTcpPort(ctx, IpRemoteHost_getTcpPort{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x905dd76b298b3130,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpRemoteHost",
			MethodName:    "getUdpPort",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetUdpPort(ctx, IpRemoteHost_getUdpPort{call})
		},
	})

	return methods
}

// IpRemoteHost_getTcpPort holds the state for a server call to IpRemoteHost.getTcpPort.
// See server.Call for documentation.
type IpRemoteHost_getTcpPort struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpRemoteHost_getTcpPort) Args() IpRemoteHost_getTcpPort_Params {
	return IpRemoteHost_getTcpPort_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IpRemoteHost_getTcpPort) AllocResults() (IpRemoteHost_getTcpPort_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getTcpPort_Results{Struct: r}, err
}

// IpRemoteHost_getUdpPort holds the state for a server call to IpRemoteHost.getUdpPort.
// See server.Call for documentation.
type IpRemoteHost_getUdpPort struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpRemoteHost_getUdpPort) Args() IpRemoteHost_getUdpPort_Params {
	return IpRemoteHost_getUdpPort_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IpRemoteHost_getUdpPort) AllocResults() (IpRemoteHost_getUdpPort_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getUdpPort_Results{Struct: r}, err
}

type IpRemoteHost_getTcpPort_Params struct{ capnp.Struct }

// IpRemoteHost_getTcpPort_Params_TypeID is the unique identifier for the type IpRemoteHost_getTcpPort_Params.
const IpRemoteHost_getTcpPort_Params_TypeID = 0xed10beb11e7383e9

func NewIpRemoteHost_getTcpPort_Params(s *capnp.Segment) (IpRemoteHost_getTcpPort_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpRemoteHost_getTcpPort_Params{st}, err
}

func NewRootIpRemoteHost_getTcpPort_Params(s *capnp.Segment) (IpRemoteHost_getTcpPort_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpRemoteHost_getTcpPort_Params{st}, err
}

func ReadRootIpRemoteHost_getTcpPort_Params(msg *capnp.Message) (IpRemoteHost_getTcpPort_Params, error) {
	root, err := msg.Root()
	return IpRemoteHost_getTcpPort_Params{root.Struct()}, err
}

func (s IpRemoteHost_getTcpPort_Params) String() string {
	str, _ := text.Marshal(0xed10beb11e7383e9, s.Struct)
	return str
}

func (s IpRemoteHost_getTcpPort_Params) PortNum() uint16 {
	return s.Struct.Uint16(0)
}

func (s IpRemoteHost_getTcpPort_Params) SetPortNum(v uint16) {
	s.Struct.SetUint16(0, v)
}

// IpRemoteHost_getTcpPort_Params_List is a list of IpRemoteHost_getTcpPort_Params.
type IpRemoteHost_getTcpPort_Params_List struct{ capnp.List }

// NewIpRemoteHost_getTcpPort_Params creates a new list of IpRemoteHost_getTcpPort_Params.
func NewIpRemoteHost_getTcpPort_Params_List(s *capnp.Segment, sz int32) (IpRemoteHost_getTcpPort_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return IpRemoteHost_getTcpPort_Params_List{l}, err
}

func (s IpRemoteHost_getTcpPort_Params_List) At(i int) IpRemoteHost_getTcpPort_Params {
	return IpRemoteHost_getTcpPort_Params{s.List.Struct(i)}
}

func (s IpRemoteHost_getTcpPort_Params_List) Set(i int, v IpRemoteHost_getTcpPort_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpRemoteHost_getTcpPort_Params_List) String() string {
	str, _ := text.MarshalList(0xed10beb11e7383e9, s.List)
	return str
}

// IpRemoteHost_getTcpPort_Params_Future is a wrapper for a IpRemoteHost_getTcpPort_Params promised by a client call.
type IpRemoteHost_getTcpPort_Params_Future struct{ *capnp.Future }

func (p IpRemoteHost_getTcpPort_Params_Future) Struct() (IpRemoteHost_getTcpPort_Params, error) {
	s, err := p.Future.Struct()
	return IpRemoteHost_getTcpPort_Params{s}, err
}

type IpRemoteHost_getTcpPort_Results struct{ capnp.Struct }

// IpRemoteHost_getTcpPort_Results_TypeID is the unique identifier for the type IpRemoteHost_getTcpPort_Results.
const IpRemoteHost_getTcpPort_Results_TypeID = 0xd77df9f44cfcde33

func NewIpRemoteHost_getTcpPort_Results(s *capnp.Segment) (IpRemoteHost_getTcpPort_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getTcpPort_Results{st}, err
}

func NewRootIpRemoteHost_getTcpPort_Results(s *capnp.Segment) (IpRemoteHost_getTcpPort_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getTcpPort_Results{st}, err
}

func ReadRootIpRemoteHost_getTcpPort_Results(msg *capnp.Message) (IpRemoteHost_getTcpPort_Results, error) {
	root, err := msg.Root()
	return IpRemoteHost_getTcpPort_Results{root.Struct()}, err
}

func (s IpRemoteHost_getTcpPort_Results) String() string {
	str, _ := text.Marshal(0xd77df9f44cfcde33, s.Struct)
	return str
}

func (s IpRemoteHost_getTcpPort_Results) Port() TcpPort {
	p, _ := s.Struct.Ptr(0)
	return TcpPort{Client: p.Interface().Client()}
}

func (s IpRemoteHost_getTcpPort_Results) HasPort() bool {
	return s.Struct.HasPtr(0)
}

func (s IpRemoteHost_getTcpPort_Results) SetPort(v TcpPort) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpRemoteHost_getTcpPort_Results_List is a list of IpRemoteHost_getTcpPort_Results.
type IpRemoteHost_getTcpPort_Results_List struct{ capnp.List }

// NewIpRemoteHost_getTcpPort_Results creates a new list of IpRemoteHost_getTcpPort_Results.
func NewIpRemoteHost_getTcpPort_Results_List(s *capnp.Segment, sz int32) (IpRemoteHost_getTcpPort_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpRemoteHost_getTcpPort_Results_List{l}, err
}

func (s IpRemoteHost_getTcpPort_Results_List) At(i int) IpRemoteHost_getTcpPort_Results {
	return IpRemoteHost_getTcpPort_Results{s.List.Struct(i)}
}

func (s IpRemoteHost_getTcpPort_Results_List) Set(i int, v IpRemoteHost_getTcpPort_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpRemoteHost_getTcpPort_Results_List) String() string {
	str, _ := text.MarshalList(0xd77df9f44cfcde33, s.List)
	return str
}

// IpRemoteHost_getTcpPort_Results_Future is a wrapper for a IpRemoteHost_getTcpPort_Results promised by a client call.
type IpRemoteHost_getTcpPort_Results_Future struct{ *capnp.Future }

func (p IpRemoteHost_getTcpPort_Results_Future) Struct() (IpRemoteHost_getTcpPort_Results, error) {
	s, err := p.Future.Struct()
	return IpRemoteHost_getTcpPort_Results{s}, err
}

func (p IpRemoteHost_getTcpPort_Results_Future) Port() TcpPort {
	return TcpPort{Client: p.Future.Field(0, nil).Client()}
}

type IpRemoteHost_getUdpPort_Params struct{ capnp.Struct }

// IpRemoteHost_getUdpPort_Params_TypeID is the unique identifier for the type IpRemoteHost_getUdpPort_Params.
const IpRemoteHost_getUdpPort_Params_TypeID = 0xb62b02486ebe26ed

func NewIpRemoteHost_getUdpPort_Params(s *capnp.Segment) (IpRemoteHost_getUdpPort_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpRemoteHost_getUdpPort_Params{st}, err
}

func NewRootIpRemoteHost_getUdpPort_Params(s *capnp.Segment) (IpRemoteHost_getUdpPort_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpRemoteHost_getUdpPort_Params{st}, err
}

func ReadRootIpRemoteHost_getUdpPort_Params(msg *capnp.Message) (IpRemoteHost_getUdpPort_Params, error) {
	root, err := msg.Root()
	return IpRemoteHost_getUdpPort_Params{root.Struct()}, err
}

func (s IpRemoteHost_getUdpPort_Params) String() string {
	str, _ := text.Marshal(0xb62b02486ebe26ed, s.Struct)
	return str
}

func (s IpRemoteHost_getUdpPort_Params) PortNum() uint16 {
	return s.Struct.Uint16(0)
}

func (s IpRemoteHost_getUdpPort_Params) SetPortNum(v uint16) {
	s.Struct.SetUint16(0, v)
}

// IpRemoteHost_getUdpPort_Params_List is a list of IpRemoteHost_getUdpPort_Params.
type IpRemoteHost_getUdpPort_Params_List struct{ capnp.List }

// NewIpRemoteHost_getUdpPort_Params creates a new list of IpRemoteHost_getUdpPort_Params.
func NewIpRemoteHost_getUdpPort_Params_List(s *capnp.Segment, sz int32) (IpRemoteHost_getUdpPort_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return IpRemoteHost_getUdpPort_Params_List{l}, err
}

func (s IpRemoteHost_getUdpPort_Params_List) At(i int) IpRemoteHost_getUdpPort_Params {
	return IpRemoteHost_getUdpPort_Params{s.List.Struct(i)}
}

func (s IpRemoteHost_getUdpPort_Params_List) Set(i int, v IpRemoteHost_getUdpPort_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpRemoteHost_getUdpPort_Params_List) String() string {
	str, _ := text.MarshalList(0xb62b02486ebe26ed, s.List)
	return str
}

// IpRemoteHost_getUdpPort_Params_Future is a wrapper for a IpRemoteHost_getUdpPort_Params promised by a client call.
type IpRemoteHost_getUdpPort_Params_Future struct{ *capnp.Future }

func (p IpRemoteHost_getUdpPort_Params_Future) Struct() (IpRemoteHost_getUdpPort_Params, error) {
	s, err := p.Future.Struct()
	return IpRemoteHost_getUdpPort_Params{s}, err
}

type IpRemoteHost_getUdpPort_Results struct{ capnp.Struct }

// IpRemoteHost_getUdpPort_Results_TypeID is the unique identifier for the type IpRemoteHost_getUdpPort_Results.
const IpRemoteHost_getUdpPort_Results_TypeID = 0xf53aa3a93e49003b

func NewIpRemoteHost_getUdpPort_Results(s *capnp.Segment) (IpRemoteHost_getUdpPort_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getUdpPort_Results{st}, err
}

func NewRootIpRemoteHost_getUdpPort_Results(s *capnp.Segment) (IpRemoteHost_getUdpPort_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getUdpPort_Results{st}, err
}

func ReadRootIpRemoteHost_getUdpPort_Results(msg *capnp.Message) (IpRemoteHost_getUdpPort_Results, error) {
	root, err := msg.Root()
	return IpRemoteHost_getUdpPort_Results{root.Struct()}, err
}

func (s IpRemoteHost_getUdpPort_Results) String() string {
	str, _ := text.Marshal(0xf53aa3a93e49003b, s.Struct)
	return str
}

func (s IpRemoteHost_getUdpPort_Results) Port() UdpPort {
	p, _ := s.Struct.Ptr(0)
	return UdpPort{Client: p.Interface().Client()}
}

func (s IpRemoteHost_getUdpPort_Results) HasPort() bool {
	return s.Struct.HasPtr(0)
}

func (s IpRemoteHost_getUdpPort_Results) SetPort(v UdpPort) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpRemoteHost_getUdpPort_Results_List is a list of IpRemoteHost_getUdpPort_Results.
type IpRemoteHost_getUdpPort_Results_List struct{ capnp.List }

// NewIpRemoteHost_getUdpPort_Results creates a new list of IpRemoteHost_getUdpPort_Results.
func NewIpRemoteHost_getUdpPort_Results_List(s *capnp.Segment, sz int32) (IpRemoteHost_getUdpPort_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpRemoteHost_getUdpPort_Results_List{l}, err
}

func (s IpRemoteHost_getUdpPort_Results_List) At(i int) IpRemoteHost_getUdpPort_Results {
	return IpRemoteHost_getUdpPort_Results{s.List.Struct(i)}
}

func (s IpRemoteHost_getUdpPort_Results_List) Set(i int, v IpRemoteHost_getUdpPort_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpRemoteHost_getUdpPort_Results_List) String() string {
	str, _ := text.MarshalList(0xf53aa3a93e49003b, s.List)
	return str
}

// IpRemoteHost_getUdpPort_Results_Future is a wrapper for a IpRemoteHost_getUdpPort_Results promised by a client call.
type IpRemoteHost_getUdpPort_Results_Future struct{ *capnp.Future }

func (p IpRemoteHost_getUdpPort_Results_Future) Struct() (IpRemoteHost_getUdpPort_Results, error) {
	s, err := p.Future.Struct()
	return IpRemoteHost_getUdpPort_Results{s}, err
}

func (p IpRemoteHost_getUdpPort_Results_Future) Port() UdpPort {
	return UdpPort{Client: p.Future.Field(0, nil).Client()}
}

type TcpPort struct{ Client *capnp.Client }

// TcpPort_TypeID is the unique identifier for the type TcpPort.
const TcpPort_TypeID = 0xeab20e1af07806b4

func (c TcpPort) Connect(ctx context.Context, params func(TcpPort_connect_Params) error) (TcpPort_connect_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xeab20e1af07806b4,
			MethodID:      0,
			InterfaceName: "ip.capnp:TcpPort",
			MethodName:    "connect",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TcpPort_connect_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TcpPort_connect_Results_Future{Future: ans.Future()}, release
}

func (c TcpPort) AddRef() TcpPort {
	return TcpPort{
		Client: c.Client.AddRef(),
	}
}

func (c TcpPort) Release() {
	c.Client.Release()
}

// A TcpPort_Server is a TcpPort with a local implementation.
type TcpPort_Server interface {
	Connect(context.Context, TcpPort_connect) error
}

// TcpPort_NewServer creates a new Server from an implementation of TcpPort_Server.
func TcpPort_NewServer(s TcpPort_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(TcpPort_Methods(nil, s), s, c, policy)
}

// TcpPort_ServerToClient creates a new Client from an implementation of TcpPort_Server.
// The caller is responsible for calling Release on the returned Client.
func TcpPort_ServerToClient(s TcpPort_Server, policy *server.Policy) TcpPort {
	return TcpPort{Client: capnp.NewClient(TcpPort_NewServer(s, policy))}
}

// TcpPort_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func TcpPort_Methods(methods []server.Method, s TcpPort_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xeab20e1af07806b4,
			MethodID:      0,
			InterfaceName: "ip.capnp:TcpPort",
			MethodName:    "connect",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Connect(ctx, TcpPort_connect{call})
		},
	})

	return methods
}

// TcpPort_connect holds the state for a server call to TcpPort.connect.
// See server.Call for documentation.
type TcpPort_connect struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TcpPort_connect) Args() TcpPort_connect_Params {
	return TcpPort_connect_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c TcpPort_connect) AllocResults() (TcpPort_connect_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TcpPort_connect_Results{Struct: r}, err
}

type TcpPort_connect_Params struct{ capnp.Struct }

// TcpPort_connect_Params_TypeID is the unique identifier for the type TcpPort_connect_Params.
const TcpPort_connect_Params_TypeID = 0x8a60e53250a32321

func NewTcpPort_connect_Params(s *capnp.Segment) (TcpPort_connect_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TcpPort_connect_Params{st}, err
}

func NewRootTcpPort_connect_Params(s *capnp.Segment) (TcpPort_connect_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TcpPort_connect_Params{st}, err
}

func ReadRootTcpPort_connect_Params(msg *capnp.Message) (TcpPort_connect_Params, error) {
	root, err := msg.Root()
	return TcpPort_connect_Params{root.Struct()}, err
}

func (s TcpPort_connect_Params) String() string {
	str, _ := text.Marshal(0x8a60e53250a32321, s.Struct)
	return str
}

func (s TcpPort_connect_Params) Downstream() util.ByteStream {
	p, _ := s.Struct.Ptr(0)
	return util.ByteStream{Client: p.Interface().Client()}
}

func (s TcpPort_connect_Params) HasDownstream() bool {
	return s.Struct.HasPtr(0)
}

func (s TcpPort_connect_Params) SetDownstream(v util.ByteStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// TcpPort_connect_Params_List is a list of TcpPort_connect_Params.
type TcpPort_connect_Params_List struct{ capnp.List }

// NewTcpPort_connect_Params creates a new list of TcpPort_connect_Params.
func NewTcpPort_connect_Params_List(s *capnp.Segment, sz int32) (TcpPort_connect_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return TcpPort_connect_Params_List{l}, err
}

func (s TcpPort_connect_Params_List) At(i int) TcpPort_connect_Params {
	return TcpPort_connect_Params{s.List.Struct(i)}
}

func (s TcpPort_connect_Params_List) Set(i int, v TcpPort_connect_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TcpPort_connect_Params_List) String() string {
	str, _ := text.MarshalList(0x8a60e53250a32321, s.List)
	return str
}

// TcpPort_connect_Params_Future is a wrapper for a TcpPort_connect_Params promised by a client call.
type TcpPort_connect_Params_Future struct{ *capnp.Future }

func (p TcpPort_connect_Params_Future) Struct() (TcpPort_connect_Params, error) {
	s, err := p.Future.Struct()
	return TcpPort_connect_Params{s}, err
}

func (p TcpPort_connect_Params_Future) Downstream() util.ByteStream {
	return util.ByteStream{Client: p.Future.Field(0, nil).Client()}
}

type TcpPort_connect_Results struct{ capnp.Struct }

// TcpPort_connect_Results_TypeID is the unique identifier for the type TcpPort_connect_Results.
const TcpPort_connect_Results_TypeID = 0xcdd1222d14073645

func NewTcpPort_connect_Results(s *capnp.Segment) (TcpPort_connect_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TcpPort_connect_Results{st}, err
}

func NewRootTcpPort_connect_Results(s *capnp.Segment) (TcpPort_connect_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TcpPort_connect_Results{st}, err
}

func ReadRootTcpPort_connect_Results(msg *capnp.Message) (TcpPort_connect_Results, error) {
	root, err := msg.Root()
	return TcpPort_connect_Results{root.Struct()}, err
}

func (s TcpPort_connect_Results) String() string {
	str, _ := text.Marshal(0xcdd1222d14073645, s.Struct)
	return str
}

func (s TcpPort_connect_Results) Upstream() util.ByteStream {
	p, _ := s.Struct.Ptr(0)
	return util.ByteStream{Client: p.Interface().Client()}
}

func (s TcpPort_connect_Results) HasUpstream() bool {
	return s.Struct.HasPtr(0)
}

func (s TcpPort_connect_Results) SetUpstream(v util.ByteStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// TcpPort_connect_Results_List is a list of TcpPort_connect_Results.
type TcpPort_connect_Results_List struct{ capnp.List }

// NewTcpPort_connect_Results creates a new list of TcpPort_connect_Results.
func NewTcpPort_connect_Results_List(s *capnp.Segment, sz int32) (TcpPort_connect_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return TcpPort_connect_Results_List{l}, err
}

func (s TcpPort_connect_Results_List) At(i int) TcpPort_connect_Results {
	return TcpPort_connect_Results{s.List.Struct(i)}
}

func (s TcpPort_connect_Results_List) Set(i int, v TcpPort_connect_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TcpPort_connect_Results_List) String() string {
	str, _ := text.MarshalList(0xcdd1222d14073645, s.List)
	return str
}

// TcpPort_connect_Results_Future is a wrapper for a TcpPort_connect_Results promised by a client call.
type TcpPort_connect_Results_Future struct{ *capnp.Future }

func (p TcpPort_connect_Results_Future) Struct() (TcpPort_connect_Results, error) {
	s, err := p.Future.Struct()
	return TcpPort_connect_Results{s}, err
}

func (p TcpPort_connect_Results_Future) Upstream() util.ByteStream {
	return util.ByteStream{Client: p.Future.Field(0, nil).Client()}
}

type UdpPort struct{ Client *capnp.Client }

// UdpPort_TypeID is the unique identifier for the type UdpPort.
const UdpPort_TypeID = 0xc6212e1217d001ce

func (c UdpPort) Send(ctx context.Context, params func(UdpPort_send_Params) error) (UdpPort_send_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc6212e1217d001ce,
			MethodID:      0,
			InterfaceName: "ip.capnp:UdpPort",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UdpPort_send_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return UdpPort_send_Results_Future{Future: ans.Future()}, release
}

func (c UdpPort) AddRef() UdpPort {
	return UdpPort{
		Client: c.Client.AddRef(),
	}
}

func (c UdpPort) Release() {
	c.Client.Release()
}

// A UdpPort_Server is a UdpPort with a local implementation.
type UdpPort_Server interface {
	Send(context.Context, UdpPort_send) error
}

// UdpPort_NewServer creates a new Server from an implementation of UdpPort_Server.
func UdpPort_NewServer(s UdpPort_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(UdpPort_Methods(nil, s), s, c, policy)
}

// UdpPort_ServerToClient creates a new Client from an implementation of UdpPort_Server.
// The caller is responsible for calling Release on the returned Client.
func UdpPort_ServerToClient(s UdpPort_Server, policy *server.Policy) UdpPort {
	return UdpPort{Client: capnp.NewClient(UdpPort_NewServer(s, policy))}
}

// UdpPort_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func UdpPort_Methods(methods []server.Method, s UdpPort_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc6212e1217d001ce,
			MethodID:      0,
			InterfaceName: "ip.capnp:UdpPort",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, UdpPort_send{call})
		},
	})

	return methods
}

// UdpPort_send holds the state for a server call to UdpPort.send.
// See server.Call for documentation.
type UdpPort_send struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UdpPort_send) Args() UdpPort_send_Params {
	return UdpPort_send_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c UdpPort_send) AllocResults() (UdpPort_send_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UdpPort_send_Results{Struct: r}, err
}

type UdpPort_send_Params struct{ capnp.Struct }

// UdpPort_send_Params_TypeID is the unique identifier for the type UdpPort_send_Params.
const UdpPort_send_Params_TypeID = 0xc6ca13f7c8dbd102

func NewUdpPort_send_Params(s *capnp.Segment) (UdpPort_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UdpPort_send_Params{st}, err
}

func NewRootUdpPort_send_Params(s *capnp.Segment) (UdpPort_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UdpPort_send_Params{st}, err
}

func ReadRootUdpPort_send_Params(msg *capnp.Message) (UdpPort_send_Params, error) {
	root, err := msg.Root()
	return UdpPort_send_Params{root.Struct()}, err
}

func (s UdpPort_send_Params) String() string {
	str, _ := text.Marshal(0xc6ca13f7c8dbd102, s.Struct)
	return str
}

func (s UdpPort_send_Params) Message() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s UdpPort_send_Params) HasMessage() bool {
	return s.Struct.HasPtr(0)
}

func (s UdpPort_send_Params) SetMessage(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s UdpPort_send_Params) ReturnPort() UdpPort {
	p, _ := s.Struct.Ptr(1)
	return UdpPort{Client: p.Interface().Client()}
}

func (s UdpPort_send_Params) HasReturnPort() bool {
	return s.Struct.HasPtr(1)
}

func (s UdpPort_send_Params) SetReturnPort(v UdpPort) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// UdpPort_send_Params_List is a list of UdpPort_send_Params.
type UdpPort_send_Params_List struct{ capnp.List }

// NewUdpPort_send_Params creates a new list of UdpPort_send_Params.
func NewUdpPort_send_Params_List(s *capnp.Segment, sz int32) (UdpPort_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return UdpPort_send_Params_List{l}, err
}

func (s UdpPort_send_Params_List) At(i int) UdpPort_send_Params {
	return UdpPort_send_Params{s.List.Struct(i)}
}

func (s UdpPort_send_Params_List) Set(i int, v UdpPort_send_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s UdpPort_send_Params_List) String() string {
	str, _ := text.MarshalList(0xc6ca13f7c8dbd102, s.List)
	return str
}

// UdpPort_send_Params_Future is a wrapper for a UdpPort_send_Params promised by a client call.
type UdpPort_send_Params_Future struct{ *capnp.Future }

func (p UdpPort_send_Params_Future) Struct() (UdpPort_send_Params, error) {
	s, err := p.Future.Struct()
	return UdpPort_send_Params{s}, err
}

func (p UdpPort_send_Params_Future) ReturnPort() UdpPort {
	return UdpPort{Client: p.Future.Field(1, nil).Client()}
}

type UdpPort_send_Results struct{ capnp.Struct }

// UdpPort_send_Results_TypeID is the unique identifier for the type UdpPort_send_Results.
const UdpPort_send_Results_TypeID = 0x8e43fd8e213b1811

func NewUdpPort_send_Results(s *capnp.Segment) (UdpPort_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UdpPort_send_Results{st}, err
}

func NewRootUdpPort_send_Results(s *capnp.Segment) (UdpPort_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UdpPort_send_Results{st}, err
}

func ReadRootUdpPort_send_Results(msg *capnp.Message) (UdpPort_send_Results, error) {
	root, err := msg.Root()
	return UdpPort_send_Results{root.Struct()}, err
}

func (s UdpPort_send_Results) String() string {
	str, _ := text.Marshal(0x8e43fd8e213b1811, s.Struct)
	return str
}

// UdpPort_send_Results_List is a list of UdpPort_send_Results.
type UdpPort_send_Results_List struct{ capnp.List }

// NewUdpPort_send_Results creates a new list of UdpPort_send_Results.
func NewUdpPort_send_Results_List(s *capnp.Segment, sz int32) (UdpPort_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return UdpPort_send_Results_List{l}, err
}

func (s UdpPort_send_Results_List) At(i int) UdpPort_send_Results {
	return UdpPort_send_Results{s.List.Struct(i)}
}

func (s UdpPort_send_Results_List) Set(i int, v UdpPort_send_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s UdpPort_send_Results_List) String() string {
	str, _ := text.MarshalList(0x8e43fd8e213b1811, s.List)
	return str
}

// UdpPort_send_Results_Future is a wrapper for a UdpPort_send_Results promised by a client call.
type UdpPort_send_Results_Future struct{ *capnp.Future }

func (p UdpPort_send_Results_Future) Struct() (UdpPort_send_Results, error) {
	s, err := p.Future.Struct()
	return UdpPort_send_Results{s}, err
}

type IpPortPowerboxMetadata struct{ capnp.Struct }

// IpPortPowerboxMetadata_TypeID is the unique identifier for the type IpPortPowerboxMetadata.
const IpPortPowerboxMetadata_TypeID = 0x856e71a6a4f22bba

func NewIpPortPowerboxMetadata(s *capnp.Segment) (IpPortPowerboxMetadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpPortPowerboxMetadata{st}, err
}

func NewRootIpPortPowerboxMetadata(s *capnp.Segment) (IpPortPowerboxMetadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpPortPowerboxMetadata{st}, err
}

func ReadRootIpPortPowerboxMetadata(msg *capnp.Message) (IpPortPowerboxMetadata, error) {
	root, err := msg.Root()
	return IpPortPowerboxMetadata{root.Struct()}, err
}

func (s IpPortPowerboxMetadata) String() string {
	str, _ := text.Marshal(0x856e71a6a4f22bba, s.Struct)
	return str
}

func (s IpPortPowerboxMetadata) PreferredPortNum() uint16 {
	return s.Struct.Uint16(0)
}

func (s IpPortPowerboxMetadata) SetPreferredPortNum(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s IpPortPowerboxMetadata) PreferredHost() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s IpPortPowerboxMetadata) HasPreferredHost() bool {
	return s.Struct.HasPtr(0)
}

func (s IpPortPowerboxMetadata) PreferredHostBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s IpPortPowerboxMetadata) SetPreferredHost(v string) error {
	return s.Struct.SetText(0, v)
}

// IpPortPowerboxMetadata_List is a list of IpPortPowerboxMetadata.
type IpPortPowerboxMetadata_List struct{ capnp.List }

// NewIpPortPowerboxMetadata creates a new list of IpPortPowerboxMetadata.
func NewIpPortPowerboxMetadata_List(s *capnp.Segment, sz int32) (IpPortPowerboxMetadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return IpPortPowerboxMetadata_List{l}, err
}

func (s IpPortPowerboxMetadata_List) At(i int) IpPortPowerboxMetadata {
	return IpPortPowerboxMetadata{s.List.Struct(i)}
}

func (s IpPortPowerboxMetadata_List) Set(i int, v IpPortPowerboxMetadata) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpPortPowerboxMetadata_List) String() string {
	str, _ := text.MarshalList(0x856e71a6a4f22bba, s.List)
	return str
}

// IpPortPowerboxMetadata_Future is a wrapper for a IpPortPowerboxMetadata promised by a client call.
type IpPortPowerboxMetadata_Future struct{ *capnp.Future }

func (p IpPortPowerboxMetadata_Future) Struct() (IpPortPowerboxMetadata, error) {
	s, err := p.Future.Struct()
	return IpPortPowerboxMetadata{s}, err
}

type PersistentIpNetwork struct{ Client *capnp.Client }

// PersistentIpNetwork_TypeID is the unique identifier for the type PersistentIpNetwork.
const PersistentIpNetwork_TypeID = 0xa5b3215660e038f2

func (c PersistentIpNetwork) GetRemoteHost(ctx context.Context, params func(IpNetwork_getRemoteHost_Params) error) (IpNetwork_getRemoteHost_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHost",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpNetwork_getRemoteHost_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpNetwork_getRemoteHost_Results_Future{Future: ans.Future()}, release
}
func (c PersistentIpNetwork) GetRemoteHostByName(ctx context.Context, params func(IpNetwork_getRemoteHostByName_Params) error) (IpNetwork_getRemoteHostByName_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHostByName",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpNetwork_getRemoteHostByName_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpNetwork_getRemoteHostByName_Results_Future{Future: ans.Future()}, release
}
func (c PersistentIpNetwork) AddRequirements(ctx context.Context, params func(supervisor.SystemPersistent_addRequirements_Params) error) (supervisor.SystemPersistent_addRequirements_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error {
			return params(supervisor.SystemPersistent_addRequirements_Params{Struct: s})
		}
	}
	ans, release := c.Client.SendCall(ctx, s)
	return supervisor.SystemPersistent_addRequirements_Results_Future{Future: ans.Future()}, release
}
func (c PersistentIpNetwork) Save(ctx context.Context, params func(persistent.Persistent_SaveParams) error) (persistent.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistent.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistent.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c PersistentIpNetwork) AddRef() PersistentIpNetwork {
	return PersistentIpNetwork{
		Client: c.Client.AddRef(),
	}
}

func (c PersistentIpNetwork) Release() {
	c.Client.Release()
}

// A PersistentIpNetwork_Server is a PersistentIpNetwork with a local implementation.
type PersistentIpNetwork_Server interface {
	GetRemoteHost(context.Context, IpNetwork_getRemoteHost) error

	GetRemoteHostByName(context.Context, IpNetwork_getRemoteHostByName) error

	AddRequirements(context.Context, supervisor.SystemPersistent_addRequirements) error

	Save(context.Context, persistent.Persistent_save) error
}

// PersistentIpNetwork_NewServer creates a new Server from an implementation of PersistentIpNetwork_Server.
func PersistentIpNetwork_NewServer(s PersistentIpNetwork_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PersistentIpNetwork_Methods(nil, s), s, c, policy)
}

// PersistentIpNetwork_ServerToClient creates a new Client from an implementation of PersistentIpNetwork_Server.
// The caller is responsible for calling Release on the returned Client.
func PersistentIpNetwork_ServerToClient(s PersistentIpNetwork_Server, policy *server.Policy) PersistentIpNetwork {
	return PersistentIpNetwork{Client: capnp.NewClient(PersistentIpNetwork_NewServer(s, policy))}
}

// PersistentIpNetwork_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PersistentIpNetwork_Methods(methods []server.Method, s PersistentIpNetwork_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHost",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetRemoteHost(ctx, IpNetwork_getRemoteHost{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHostByName",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetRemoteHostByName(ctx, IpNetwork_getRemoteHostByName{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddRequirements(ctx, supervisor.SystemPersistent_addRequirements{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistent.Persistent_save{call})
		},
	})

	return methods
}

type PersistentIpInterface struct{ Client *capnp.Client }

// PersistentIpInterface_TypeID is the unique identifier for the type PersistentIpInterface.
const PersistentIpInterface_TypeID = 0xcf43ebe6a5a6f1b4

func (c PersistentIpInterface) ListenTcp(ctx context.Context, params func(IpInterface_listenTcp_Params) error) (IpInterface_listenTcp_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenTcp",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpInterface_listenTcp_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpInterface_listenTcp_Results_Future{Future: ans.Future()}, release
}
func (c PersistentIpInterface) ListenUdp(ctx context.Context, params func(IpInterface_listenUdp_Params) error) (IpInterface_listenUdp_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenUdp",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpInterface_listenUdp_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpInterface_listenUdp_Results_Future{Future: ans.Future()}, release
}
func (c PersistentIpInterface) AddRequirements(ctx context.Context, params func(supervisor.SystemPersistent_addRequirements_Params) error) (supervisor.SystemPersistent_addRequirements_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error {
			return params(supervisor.SystemPersistent_addRequirements_Params{Struct: s})
		}
	}
	ans, release := c.Client.SendCall(ctx, s)
	return supervisor.SystemPersistent_addRequirements_Results_Future{Future: ans.Future()}, release
}
func (c PersistentIpInterface) Save(ctx context.Context, params func(persistent.Persistent_SaveParams) error) (persistent.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistent.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistent.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c PersistentIpInterface) AddRef() PersistentIpInterface {
	return PersistentIpInterface{
		Client: c.Client.AddRef(),
	}
}

func (c PersistentIpInterface) Release() {
	c.Client.Release()
}

// A PersistentIpInterface_Server is a PersistentIpInterface with a local implementation.
type PersistentIpInterface_Server interface {
	ListenTcp(context.Context, IpInterface_listenTcp) error

	ListenUdp(context.Context, IpInterface_listenUdp) error

	AddRequirements(context.Context, supervisor.SystemPersistent_addRequirements) error

	Save(context.Context, persistent.Persistent_save) error
}

// PersistentIpInterface_NewServer creates a new Server from an implementation of PersistentIpInterface_Server.
func PersistentIpInterface_NewServer(s PersistentIpInterface_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PersistentIpInterface_Methods(nil, s), s, c, policy)
}

// PersistentIpInterface_ServerToClient creates a new Client from an implementation of PersistentIpInterface_Server.
// The caller is responsible for calling Release on the returned Client.
func PersistentIpInterface_ServerToClient(s PersistentIpInterface_Server, policy *server.Policy) PersistentIpInterface {
	return PersistentIpInterface{Client: capnp.NewClient(PersistentIpInterface_NewServer(s, policy))}
}

// PersistentIpInterface_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PersistentIpInterface_Methods(methods []server.Method, s PersistentIpInterface_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenTcp",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListenTcp(ctx, IpInterface_listenTcp{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenUdp",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListenUdp(ctx, IpInterface_listenUdp{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddRequirements(ctx, supervisor.SystemPersistent_addRequirements{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistent.Persistent_save{call})
		},
	})

	return methods
}

const schema_f44732d435305f86 = "x\xda\xacW}l\x14e\x1a\x7f\x9e\xd9\xdd\x0e\xbd\x9d" +
	"\xdd\xd9\xb9\x01\x0aw\x81^\xb9\x1ew-t\xd3R\xbe" +
	"\xae\xe4h\xaf\x1c\x81\xe58\xb2\xd3k\x8f\xa4\x09\xd7N" +
	"\xbbC\xa9\xed\xce\x0e3\xd3\x14\xf0\xa3\"\x01B\x15\x84" +
	"\x18\x12J\xa2\x89BI0\xc6DD\x13PHD%" +
	"~\x04k#\x88\xc6\xa0 `\x02\xa4\xc6\"\x04K\xc0" +
	"1\xef\xbb;;\xd3\xee\xb6\x80\xf8\xdf\xbc;\xcf<\x9f" +
	"\xbf\xdf\xefy\xb7T\xf3U1e>>\x0f\xe0\xbf\x1c" +
	"\xfar\xac\xa33\xae\xef?\xb0V\xdd\x0cR.\xa2\xb5" +
	"\xa5\xa1t\xce\xe9YKn\x80\x0fY\x80\xf2\xb8\x9fA" +
	"q\xbd\x9f\x05\x10;\xfc\x9d\x80V\xc1\x9f\xf7Eg]" +
	"n\xec\x06A@H\x19\x9d\xf33\x08(^\xf0W\x02" +
	"Z\xc2\xa4\x05\x05;\xee.\xda\x914\xf0\x92/}\xdc" +
	"u\xf0Z\xa5eO\x17\xb5\x9d]\xb5\x13\x84\\\x8f\x13" +
	"\x06P\xbc\xe2?$\x0e\xd2\x10\x03\xfe\xad\xe2b\x8e\x05" +
	"\xb0\xfa\x9eh\xda2\xef/\x1b\x9f\x03aB:L\x09" +
	"WA\xc2\xcc\xe1H\x98\xf7\xde\xbauG\xcdox\x1e" +
	"\x041mP\xc7\xe9\xc4@\xa6\x06\x91\xb7\x8b\xa7\xd7o" +
	"\xfc\xe2E\x90&`\xdab#7\x8bXl\xe3H)" +
	"\xd7\xe7\x9fo\xfc_\xc1\xeb\xbd\x19\x09]\xe6\xae\x8a\x83" +
	"\x1cM\x88c\xc5\x01\xee\xaf\x00V\xd5\x9f\x8a7\xb4\xad" +
	"|\xea`\x16\xe3\xbd\xe2\x00\x97\x07 \x0eq[\xc5\xba" +
	"\x00\xc9^\xfe7\xf7\xe3\xabg\x1e}\xc3\x9d\xdc?\x02" +
	"\xcbH\xe8H\x80$70\xfd\xb8\xba\x94\x99\xf1&H" +
	"\x131\xd5\xa5\xf2\xd6@51XK\x0d>\xc1O\xf3" +
	"~\x1f.8\x99\x11nW\xa0[\xec!A\xc4\xdd\x81" +
	"%\xe21\x1a\x8e\xe9\xff\xea\x83[\xe2G'S3a" +
	"\xc8\xdb\xde\xc0U@\xf1`\x80\x14\xba\xf3\xc4\x1f\xf7<" +
	"\xb9\x7f\xd3\xc7\xeef\xe6\x06i3\x85 \x89\xb6x." +
	";\xbedZ\xff)\xf7P\xcb\x82\xbf#\x06\x7f\xa7\x06" +
	"\x87\x07\x0f\xf4~wmQ_F:\xab\x82\xb7\xc5\xd6" +
	" \x09\xa8\x04YQ\x09\x92VM\xfe)\xb0\xbb\xbc\xf2" +
	"\x85>R\xbd\xd37\xea5eO\xba\xd5A\x1d\xb76" +
	"\x9c>z\"\xbc\xac\xdf\xdd\xa9\x9e\xe0\x06\x12\xb9\x97\x1a" +
	"\x94\x7f}g\xf9\x8d\xa1\xc7\xcf\x8201m\xf0~\x90" +
	"\xb6\xb2\x9f\x18|s\xf8\xff\xfa\xb5w\xf2\xce\xb9\xbe\x1f" +
	"\x0c\xd2F\x0e\xd1\xef\xb7\xb3\x97\xf8\xa1\xe5_~\x0bR" +
	">\xa2\x93\xda\xbfX\x06\xa0|2_\x83b\x09O\x12" +
	"+\xe2I\xa7n\x7f\xbe\xf0\x8a\x1a\x9dy1\xa3\xce\xcd" +
	"\xfc\xcb\xe2vj\xb8\x8d\xdf*^ O\xd6\xe1\x9cu" +
	"?\xfc!x\xe8j\x86\xf1\x87|\xb7\xd8O\x8dO\xf1" +
	"K\xc4\x9b\xd4\xf8\xca&c\xeak\xc7C\x03\xee\x89\x9f" +
	"\xe3i\xa2\x97y\x92\xa8\x7f\xe6g\xf3z\x9e=\xf2=" +
	"\xa1!\xe3\xb8K\x12(\xb4W\x0c\x84\xc8Sn\xa8\x13" +
	"\xf0\xee\x82\xc8\xc2\x83\xfb*n\xbaZ\xa2\x84hK\xd6" +
	"\x86\x88\xab\xa93\x8e\x9d\xbc\xf4\xc8\xb4\xbb\xc3\xa0\xbf+" +
	"D\xa1\xdf\x13\xea\x04\x0b\x8eX\xadZ\xb8Y\xd6T\xcd" +
	"S\x11\xd1\xa2\x09\xdd\x8c&:\x15\xbd)\xb1\xee?\x8a" +
	")\xc7dS\x86(\xa24\xce\xe3\x05\xf0\"\x80P\xd4" +
	"\x0d \xcd\xf4\xa04\x9fA\xc4\xf1\xc4\xad0G\x07\x90" +
	"f{P\xaab\xd0\xd2te\xb5\xa2\xeb\x0a\xc6\x88\xb7" +
	"\x15\x1dq\x00d\x81A\x16\x9cw\x90\x1f[\x9a0L" +
	"\xe4\x80A\x8e\x0c?\x9dCm3M\"\xdc\x9cPU" +
	"\xa5\xd9,\x8c\xca\xba\x1c7@\xf2\xa6\x13\x08\xd4\x03H" +
	"\x9c\x07\xa5I\x0cZ\xb1D\xa7j\x98\xba\x02\x1e9\x8e" +
	"\x82\xd5p\xb1\xaf\xa8s\xfe\xcaS\x00\x88\x82\xcb/S" +
	"Q\x17K\xfa5\x145VX\xa3\xe4\x1b\x1d\xed\xa6\x91" +
	"~\x8f\x15\x11\xadF\x89'\xcc|\x85\xe4\x95\xac\xd8\xe7" +
	"\x1a\x16\xda\xe8\x13\xca\xea\x81\x11\x8aXt\xa8\x8b\x0b " +
	"5\x85)\xe4\xdd\x04\xd6jQLZ\x07xt\xb3\x0a" +
	"\xc9\x91\x86O\x1e\xa3\x88\xc3z\x1eQME_-7" +
	"+\xe1\xf6V\xc3T\xd4\xdaf\xad\xb0\xa6R\xa1\x09\xba" +
	"\xcb\xae\x00\x90\xc6yP\x1a\xcf`\xe5\x1aY\x8d\xb5+" +
	"(X\xe7\xab\x1b\x1b_)\xbc\xb1gd\xc1\xde\x8a\x88" +
	"\xb6B1;\x13z[\xb8E1im\xb4\xb4\xea\xf5" +
	"+\xe4\xb8R\x18\xcd\xa7}u\xfb\xafv\xfcw\xc9\xb1" +
	"\x98\xae\x18F\x96\xf9d\xe6[\x17\xd3\xd2\xee\\0!" +
	"\xee\x0a=(\x95:0))\x06\x90\xfe\xe6Ai6" +
	"\x83]Z\x12\x1c64xrF\xc1\x91\xbb\x8c\x09F" +
	"\x15\xdd\xa0\x01MZ\x1aOj\x8b\"F=>i\x1c" +
	"\xba\xe4\x85\xf0\xf1\xcc\xf1\xc7\xce\x0e<\xf3.yv\x8f" +
	"\x98v\xc4\xa3\xb7I^\xb7\x02\x08\xd8d\xd9\xa0\x07\xb6" +
	"VnI\xce\xde\xd6\x13\x97\x86\x97\xe9\xf6\xec\xed\xa5\x83" +
	"\xb6l\x09S^\x02F\x98LgO\xbb\x0dI(%" +
	"\xc7O\x7fA{\x00\xac\x1cW\x86\xe3`\xd4q\x15\xd6" +
	"$\x81\x00\xc3\x18P\xec\x8c\x8a_Cx$8;5" +
	"\x0b\x10\x1cwa\x1b\x8azVf\xb9!0b>\xae" +
	">\xa6\x1c\x00\x15\x06/\xa5\x89\xbdw\xd0\xde\xf9\x82P" +
	"\x0c\x8c\xe0cy\xc2\xb7\xe1\xb5\x8e\xe0bT\xe6\xc7\x80" +
	"\x8e\x90\xc6N\xbd#;]q\xc50\xe4\x16\x05\x03\xc0" +
	"`\x00\xd0\xd2\x15\xb3CW\x93\x04\x1b\x03C\xa3\xa1\xf7" +
	"\xa1\xd9\x96)[Y\xc7\xb6\xcc%\\\x1d\x1a\x91-9" +
	"\x0e\x00c\xea\x96\x1b\xf5\x11\xd5\xacL&\xef\xc2}z" +
	"Q\x8d\x82{\xc6\x05-\x8a\xf2\xca\xa6\xc4:\x02r\xc2" +
	"\x81\xf4N\x14\xb0\xdeZ\xac6\xeb\xeb5\xb3\x15<\x09" +
	"u4\xbdU\\6\x18r\xbe\x07\xc4\xd0\x03\xc8O\xb6" +
	"\x8e?\x14\xa8S\xfd\xbf7]R2\x93\xde\xd8\xf7\xab" +
	"\x9b\xf7\xa2\x8b\xad\x98!g}\x8f\xd1\x13[nj\xe5" +
	"\x96\xb0\xdd\xf6\x04\xaa\xa9M\xcbYV\x92\x08\xc5\x0e\x11" +
	"\x02\xf8\xb3\x95b\xc24GEy5\xa1*\x90\xc3\x9a" +
	"\xed\x06\xe4\x0c\x93:\x8as>\x85\x95\xd42\xb3o\x03" +
	"h\xdf\xa9\x85\xb2\x1a[\xd0\xecK2\xdaWDaJ" +
	"Mr\x99\xd9[\x09P\xabB\xcbf\x0d=\xb9i\x8d" +
	"6\x07\xdc\xba`\xffG@\xfb^)\x08\xd5T\x17\xba" +
	"RD\xc9\x94\xc1\xecs\xfd\xd5b\x15\xd1\xfeI&\xe3" +
	"1\x8c\x11\xd7\x98\xac\"S\xedZP\xeddFsg" +
	"c.0\x98\x0b\xd8\xd5\xa1i\xee\xf3}(\xec\xfd\x82" +
	"\xf1A\xf4\x8a\xdc\x0e~\xbbm;\x82\x06\xbf\x04\x00\x00" +
	"\xff\xff\xc1\x93\xe3g"

func init() {
	schemas.Register(schema_f44732d435305f86,
		0x856e71a6a4f22bba,
		0x8a60e53250a32321,
		0x8e43fd8e213b1811,
		0x905dd76b298b3130,
		0x9381253786627ecf,
		0x9d5f1f6efcf7bbc4,
		0xa1d8815a262abc49,
		0xa5b3215660e038f2,
		0xa982576b7a2a2040,
		0xb57bd5aef30c4b61,
		0xb62b02486ebe26ed,
		0xc6212e1217d001ce,
		0xc6ca13f7c8dbd102,
		0xcb83a480981bc290,
		0xcdd1222d14073645,
		0xcf43ebe6a5a6f1b4,
		0xcf9e3f33950df819,
		0xd14a2ec2bad45f69,
		0xd77df9f44cfcde33,
		0xdd1700c1eb725eb4,
		0xe2d94cf90fe4078d,
		0xe32c506ee93ed6fa,
		0xeab20e1af07806b4,
		0xed10beb11e7383e9,
		0xeeb98f9937d32c0b,
		0xf53aa3a93e49003b,
		0xfd226ae4c6bd2b1e)
}
