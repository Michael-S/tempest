// Code generated by capnpc-go. DO NOT EDIT.

package ip

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	persistent "capnproto.org/go/capnp/v3/std/capnp/persistent"
	context "context"
	strconv "strconv"
	supervisor "zenhack.net/go/sandstorm/capnp/supervisor"
	util "zenhack.net/go/sandstorm/capnp/util"
)

type IpNetwork struct{ Client *capnp.Client }

// IpNetwork_TypeID is the unique identifier for the type IpNetwork.
const IpNetwork_TypeID = 0xa982576b7a2a2040

func (c IpNetwork) GetRemoteHost(ctx context.Context, params func(IpNetwork_getRemoteHost_Params) error) (IpNetwork_getRemoteHost_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHost",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpNetwork_getRemoteHost_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpNetwork_getRemoteHost_Results_Future{Future: ans.Future()}, release
}
func (c IpNetwork) GetRemoteHostByName(ctx context.Context, params func(IpNetwork_getRemoteHostByName_Params) error) (IpNetwork_getRemoteHostByName_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHostByName",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpNetwork_getRemoteHostByName_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpNetwork_getRemoteHostByName_Results_Future{Future: ans.Future()}, release
}

func (c IpNetwork) AddRef() IpNetwork {
	return IpNetwork{
		Client: c.Client.AddRef(),
	}
}

func (c IpNetwork) Release() {
	c.Client.Release()
}

// A IpNetwork_Server is a IpNetwork with a local implementation.
type IpNetwork_Server interface {
	GetRemoteHost(context.Context, IpNetwork_getRemoteHost) error

	GetRemoteHostByName(context.Context, IpNetwork_getRemoteHostByName) error
}

// IpNetwork_NewServer creates a new Server from an implementation of IpNetwork_Server.
func IpNetwork_NewServer(s IpNetwork_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(IpNetwork_Methods(nil, s), s, c, policy)
}

// IpNetwork_ServerToClient creates a new Client from an implementation of IpNetwork_Server.
// The caller is responsible for calling Release on the returned Client.
func IpNetwork_ServerToClient(s IpNetwork_Server, policy *server.Policy) IpNetwork {
	return IpNetwork{Client: capnp.NewClient(IpNetwork_NewServer(s, policy))}
}

// IpNetwork_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func IpNetwork_Methods(methods []server.Method, s IpNetwork_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHost",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetRemoteHost(ctx, IpNetwork_getRemoteHost{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHostByName",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetRemoteHostByName(ctx, IpNetwork_getRemoteHostByName{call})
		},
	})

	return methods
}

// IpNetwork_getRemoteHost holds the state for a server call to IpNetwork.getRemoteHost.
// See server.Call for documentation.
type IpNetwork_getRemoteHost struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpNetwork_getRemoteHost) Args() IpNetwork_getRemoteHost_Params {
	return IpNetwork_getRemoteHost_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IpNetwork_getRemoteHost) AllocResults() (IpNetwork_getRemoteHost_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHost_Results{Struct: r}, err
}

// IpNetwork_getRemoteHostByName holds the state for a server call to IpNetwork.getRemoteHostByName.
// See server.Call for documentation.
type IpNetwork_getRemoteHostByName struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpNetwork_getRemoteHostByName) Args() IpNetwork_getRemoteHostByName_Params {
	return IpNetwork_getRemoteHostByName_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IpNetwork_getRemoteHostByName) AllocResults() (IpNetwork_getRemoteHostByName_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHostByName_Results{Struct: r}, err
}

type IpNetwork_PowerboxTag struct{ capnp.Struct }

// IpNetwork_PowerboxTag_TypeID is the unique identifier for the type IpNetwork_PowerboxTag.
const IpNetwork_PowerboxTag_TypeID = 0xcf9e3f33950df819

func NewIpNetwork_PowerboxTag(s *capnp.Segment) (IpNetwork_PowerboxTag, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_PowerboxTag{st}, err
}

func NewRootIpNetwork_PowerboxTag(s *capnp.Segment) (IpNetwork_PowerboxTag, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_PowerboxTag{st}, err
}

func ReadRootIpNetwork_PowerboxTag(msg *capnp.Message) (IpNetwork_PowerboxTag, error) {
	root, err := msg.Root()
	return IpNetwork_PowerboxTag{root.Struct()}, err
}

func (s IpNetwork_PowerboxTag) String() string {
	str, _ := text.Marshal(0xcf9e3f33950df819, s.Struct)
	return str
}

func (s IpNetwork_PowerboxTag) Encryption() (IpNetwork_PowerboxTag_Encryption, error) {
	p, err := s.Struct.Ptr(0)
	return IpNetwork_PowerboxTag_Encryption{Struct: p.Struct()}, err
}

func (s IpNetwork_PowerboxTag) HasEncryption() bool {
	return s.Struct.HasPtr(0)
}

func (s IpNetwork_PowerboxTag) SetEncryption(v IpNetwork_PowerboxTag_Encryption) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEncryption sets the encryption field to a newly
// allocated IpNetwork_PowerboxTag_Encryption struct, preferring placement in s's segment.
func (s IpNetwork_PowerboxTag) NewEncryption() (IpNetwork_PowerboxTag_Encryption, error) {
	ss, err := NewIpNetwork_PowerboxTag_Encryption(s.Struct.Segment())
	if err != nil {
		return IpNetwork_PowerboxTag_Encryption{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// IpNetwork_PowerboxTag_List is a list of IpNetwork_PowerboxTag.
type IpNetwork_PowerboxTag_List struct{ capnp.List }

// NewIpNetwork_PowerboxTag creates a new list of IpNetwork_PowerboxTag.
func NewIpNetwork_PowerboxTag_List(s *capnp.Segment, sz int32) (IpNetwork_PowerboxTag_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpNetwork_PowerboxTag_List{l}, err
}

func (s IpNetwork_PowerboxTag_List) At(i int) IpNetwork_PowerboxTag {
	return IpNetwork_PowerboxTag{s.List.Struct(i)}
}

func (s IpNetwork_PowerboxTag_List) Set(i int, v IpNetwork_PowerboxTag) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpNetwork_PowerboxTag_List) String() string {
	str, _ := text.MarshalList(0xcf9e3f33950df819, s.List)
	return str
}

// IpNetwork_PowerboxTag_Future is a wrapper for a IpNetwork_PowerboxTag promised by a client call.
type IpNetwork_PowerboxTag_Future struct{ *capnp.Future }

func (p IpNetwork_PowerboxTag_Future) Struct() (IpNetwork_PowerboxTag, error) {
	s, err := p.Future.Struct()
	return IpNetwork_PowerboxTag{s}, err
}

func (p IpNetwork_PowerboxTag_Future) Encryption() IpNetwork_PowerboxTag_Encryption_Future {
	return IpNetwork_PowerboxTag_Encryption_Future{Future: p.Future.Field(0, nil)}
}

type IpNetwork_PowerboxTag_Encryption struct{ capnp.Struct }
type IpNetwork_PowerboxTag_Encryption_Which uint16

const (
	IpNetwork_PowerboxTag_Encryption_Which_none IpNetwork_PowerboxTag_Encryption_Which = 0
	IpNetwork_PowerboxTag_Encryption_Which_tls  IpNetwork_PowerboxTag_Encryption_Which = 1
)

func (w IpNetwork_PowerboxTag_Encryption_Which) String() string {
	const s = "nonetls"
	switch w {
	case IpNetwork_PowerboxTag_Encryption_Which_none:
		return s[0:4]
	case IpNetwork_PowerboxTag_Encryption_Which_tls:
		return s[4:7]

	}
	return "IpNetwork_PowerboxTag_Encryption_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// IpNetwork_PowerboxTag_Encryption_TypeID is the unique identifier for the type IpNetwork_PowerboxTag_Encryption.
const IpNetwork_PowerboxTag_Encryption_TypeID = 0xe2d94cf90fe4078d

func NewIpNetwork_PowerboxTag_Encryption(s *capnp.Segment) (IpNetwork_PowerboxTag_Encryption, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpNetwork_PowerboxTag_Encryption{st}, err
}

func NewRootIpNetwork_PowerboxTag_Encryption(s *capnp.Segment) (IpNetwork_PowerboxTag_Encryption, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpNetwork_PowerboxTag_Encryption{st}, err
}

func ReadRootIpNetwork_PowerboxTag_Encryption(msg *capnp.Message) (IpNetwork_PowerboxTag_Encryption, error) {
	root, err := msg.Root()
	return IpNetwork_PowerboxTag_Encryption{root.Struct()}, err
}

func (s IpNetwork_PowerboxTag_Encryption) String() string {
	str, _ := text.Marshal(0xe2d94cf90fe4078d, s.Struct)
	return str
}

func (s IpNetwork_PowerboxTag_Encryption) Which() IpNetwork_PowerboxTag_Encryption_Which {
	return IpNetwork_PowerboxTag_Encryption_Which(s.Struct.Uint16(0))
}
func (s IpNetwork_PowerboxTag_Encryption) SetNone() {
	s.Struct.SetUint16(0, 0)

}

func (s IpNetwork_PowerboxTag_Encryption) SetTls() {
	s.Struct.SetUint16(0, 1)

}

// IpNetwork_PowerboxTag_Encryption_List is a list of IpNetwork_PowerboxTag_Encryption.
type IpNetwork_PowerboxTag_Encryption_List struct{ capnp.List }

// NewIpNetwork_PowerboxTag_Encryption creates a new list of IpNetwork_PowerboxTag_Encryption.
func NewIpNetwork_PowerboxTag_Encryption_List(s *capnp.Segment, sz int32) (IpNetwork_PowerboxTag_Encryption_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return IpNetwork_PowerboxTag_Encryption_List{l}, err
}

func (s IpNetwork_PowerboxTag_Encryption_List) At(i int) IpNetwork_PowerboxTag_Encryption {
	return IpNetwork_PowerboxTag_Encryption{s.List.Struct(i)}
}

func (s IpNetwork_PowerboxTag_Encryption_List) Set(i int, v IpNetwork_PowerboxTag_Encryption) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpNetwork_PowerboxTag_Encryption_List) String() string {
	str, _ := text.MarshalList(0xe2d94cf90fe4078d, s.List)
	return str
}

// IpNetwork_PowerboxTag_Encryption_Future is a wrapper for a IpNetwork_PowerboxTag_Encryption promised by a client call.
type IpNetwork_PowerboxTag_Encryption_Future struct{ *capnp.Future }

func (p IpNetwork_PowerboxTag_Encryption_Future) Struct() (IpNetwork_PowerboxTag_Encryption, error) {
	s, err := p.Future.Struct()
	return IpNetwork_PowerboxTag_Encryption{s}, err
}

type IpNetwork_getRemoteHost_Params struct{ capnp.Struct }

// IpNetwork_getRemoteHost_Params_TypeID is the unique identifier for the type IpNetwork_getRemoteHost_Params.
const IpNetwork_getRemoteHost_Params_TypeID = 0xdd1700c1eb725eb4

func NewIpNetwork_getRemoteHost_Params(s *capnp.Segment) (IpNetwork_getRemoteHost_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHost_Params{st}, err
}

func NewRootIpNetwork_getRemoteHost_Params(s *capnp.Segment) (IpNetwork_getRemoteHost_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHost_Params{st}, err
}

func ReadRootIpNetwork_getRemoteHost_Params(msg *capnp.Message) (IpNetwork_getRemoteHost_Params, error) {
	root, err := msg.Root()
	return IpNetwork_getRemoteHost_Params{root.Struct()}, err
}

func (s IpNetwork_getRemoteHost_Params) String() string {
	str, _ := text.Marshal(0xdd1700c1eb725eb4, s.Struct)
	return str
}

func (s IpNetwork_getRemoteHost_Params) Address() (IpAddress, error) {
	p, err := s.Struct.Ptr(0)
	return IpAddress{Struct: p.Struct()}, err
}

func (s IpNetwork_getRemoteHost_Params) HasAddress() bool {
	return s.Struct.HasPtr(0)
}

func (s IpNetwork_getRemoteHost_Params) SetAddress(v IpAddress) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddress sets the address field to a newly
// allocated IpAddress struct, preferring placement in s's segment.
func (s IpNetwork_getRemoteHost_Params) NewAddress() (IpAddress, error) {
	ss, err := NewIpAddress(s.Struct.Segment())
	if err != nil {
		return IpAddress{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// IpNetwork_getRemoteHost_Params_List is a list of IpNetwork_getRemoteHost_Params.
type IpNetwork_getRemoteHost_Params_List struct{ capnp.List }

// NewIpNetwork_getRemoteHost_Params creates a new list of IpNetwork_getRemoteHost_Params.
func NewIpNetwork_getRemoteHost_Params_List(s *capnp.Segment, sz int32) (IpNetwork_getRemoteHost_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpNetwork_getRemoteHost_Params_List{l}, err
}

func (s IpNetwork_getRemoteHost_Params_List) At(i int) IpNetwork_getRemoteHost_Params {
	return IpNetwork_getRemoteHost_Params{s.List.Struct(i)}
}

func (s IpNetwork_getRemoteHost_Params_List) Set(i int, v IpNetwork_getRemoteHost_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpNetwork_getRemoteHost_Params_List) String() string {
	str, _ := text.MarshalList(0xdd1700c1eb725eb4, s.List)
	return str
}

// IpNetwork_getRemoteHost_Params_Future is a wrapper for a IpNetwork_getRemoteHost_Params promised by a client call.
type IpNetwork_getRemoteHost_Params_Future struct{ *capnp.Future }

func (p IpNetwork_getRemoteHost_Params_Future) Struct() (IpNetwork_getRemoteHost_Params, error) {
	s, err := p.Future.Struct()
	return IpNetwork_getRemoteHost_Params{s}, err
}

func (p IpNetwork_getRemoteHost_Params_Future) Address() IpAddress_Future {
	return IpAddress_Future{Future: p.Future.Field(0, nil)}
}

type IpNetwork_getRemoteHost_Results struct{ capnp.Struct }

// IpNetwork_getRemoteHost_Results_TypeID is the unique identifier for the type IpNetwork_getRemoteHost_Results.
const IpNetwork_getRemoteHost_Results_TypeID = 0xb57bd5aef30c4b61

func NewIpNetwork_getRemoteHost_Results(s *capnp.Segment) (IpNetwork_getRemoteHost_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHost_Results{st}, err
}

func NewRootIpNetwork_getRemoteHost_Results(s *capnp.Segment) (IpNetwork_getRemoteHost_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHost_Results{st}, err
}

func ReadRootIpNetwork_getRemoteHost_Results(msg *capnp.Message) (IpNetwork_getRemoteHost_Results, error) {
	root, err := msg.Root()
	return IpNetwork_getRemoteHost_Results{root.Struct()}, err
}

func (s IpNetwork_getRemoteHost_Results) String() string {
	str, _ := text.Marshal(0xb57bd5aef30c4b61, s.Struct)
	return str
}

func (s IpNetwork_getRemoteHost_Results) Host() IpRemoteHost {
	p, _ := s.Struct.Ptr(0)
	return IpRemoteHost{Client: p.Interface().Client()}
}

func (s IpNetwork_getRemoteHost_Results) HasHost() bool {
	return s.Struct.HasPtr(0)
}

func (s IpNetwork_getRemoteHost_Results) SetHost(v IpRemoteHost) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpNetwork_getRemoteHost_Results_List is a list of IpNetwork_getRemoteHost_Results.
type IpNetwork_getRemoteHost_Results_List struct{ capnp.List }

// NewIpNetwork_getRemoteHost_Results creates a new list of IpNetwork_getRemoteHost_Results.
func NewIpNetwork_getRemoteHost_Results_List(s *capnp.Segment, sz int32) (IpNetwork_getRemoteHost_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpNetwork_getRemoteHost_Results_List{l}, err
}

func (s IpNetwork_getRemoteHost_Results_List) At(i int) IpNetwork_getRemoteHost_Results {
	return IpNetwork_getRemoteHost_Results{s.List.Struct(i)}
}

func (s IpNetwork_getRemoteHost_Results_List) Set(i int, v IpNetwork_getRemoteHost_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpNetwork_getRemoteHost_Results_List) String() string {
	str, _ := text.MarshalList(0xb57bd5aef30c4b61, s.List)
	return str
}

// IpNetwork_getRemoteHost_Results_Future is a wrapper for a IpNetwork_getRemoteHost_Results promised by a client call.
type IpNetwork_getRemoteHost_Results_Future struct{ *capnp.Future }

func (p IpNetwork_getRemoteHost_Results_Future) Struct() (IpNetwork_getRemoteHost_Results, error) {
	s, err := p.Future.Struct()
	return IpNetwork_getRemoteHost_Results{s}, err
}

func (p IpNetwork_getRemoteHost_Results_Future) Host() IpRemoteHost {
	return IpRemoteHost{Client: p.Future.Field(0, nil).Client()}
}

type IpNetwork_getRemoteHostByName_Params struct{ capnp.Struct }

// IpNetwork_getRemoteHostByName_Params_TypeID is the unique identifier for the type IpNetwork_getRemoteHostByName_Params.
const IpNetwork_getRemoteHostByName_Params_TypeID = 0x9d5f1f6efcf7bbc4

func NewIpNetwork_getRemoteHostByName_Params(s *capnp.Segment) (IpNetwork_getRemoteHostByName_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHostByName_Params{st}, err
}

func NewRootIpNetwork_getRemoteHostByName_Params(s *capnp.Segment) (IpNetwork_getRemoteHostByName_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHostByName_Params{st}, err
}

func ReadRootIpNetwork_getRemoteHostByName_Params(msg *capnp.Message) (IpNetwork_getRemoteHostByName_Params, error) {
	root, err := msg.Root()
	return IpNetwork_getRemoteHostByName_Params{root.Struct()}, err
}

func (s IpNetwork_getRemoteHostByName_Params) String() string {
	str, _ := text.Marshal(0x9d5f1f6efcf7bbc4, s.Struct)
	return str
}

func (s IpNetwork_getRemoteHostByName_Params) Address() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s IpNetwork_getRemoteHostByName_Params) HasAddress() bool {
	return s.Struct.HasPtr(0)
}

func (s IpNetwork_getRemoteHostByName_Params) AddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s IpNetwork_getRemoteHostByName_Params) SetAddress(v string) error {
	return s.Struct.SetText(0, v)
}

// IpNetwork_getRemoteHostByName_Params_List is a list of IpNetwork_getRemoteHostByName_Params.
type IpNetwork_getRemoteHostByName_Params_List struct{ capnp.List }

// NewIpNetwork_getRemoteHostByName_Params creates a new list of IpNetwork_getRemoteHostByName_Params.
func NewIpNetwork_getRemoteHostByName_Params_List(s *capnp.Segment, sz int32) (IpNetwork_getRemoteHostByName_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpNetwork_getRemoteHostByName_Params_List{l}, err
}

func (s IpNetwork_getRemoteHostByName_Params_List) At(i int) IpNetwork_getRemoteHostByName_Params {
	return IpNetwork_getRemoteHostByName_Params{s.List.Struct(i)}
}

func (s IpNetwork_getRemoteHostByName_Params_List) Set(i int, v IpNetwork_getRemoteHostByName_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpNetwork_getRemoteHostByName_Params_List) String() string {
	str, _ := text.MarshalList(0x9d5f1f6efcf7bbc4, s.List)
	return str
}

// IpNetwork_getRemoteHostByName_Params_Future is a wrapper for a IpNetwork_getRemoteHostByName_Params promised by a client call.
type IpNetwork_getRemoteHostByName_Params_Future struct{ *capnp.Future }

func (p IpNetwork_getRemoteHostByName_Params_Future) Struct() (IpNetwork_getRemoteHostByName_Params, error) {
	s, err := p.Future.Struct()
	return IpNetwork_getRemoteHostByName_Params{s}, err
}

type IpNetwork_getRemoteHostByName_Results struct{ capnp.Struct }

// IpNetwork_getRemoteHostByName_Results_TypeID is the unique identifier for the type IpNetwork_getRemoteHostByName_Results.
const IpNetwork_getRemoteHostByName_Results_TypeID = 0xd14a2ec2bad45f69

func NewIpNetwork_getRemoteHostByName_Results(s *capnp.Segment) (IpNetwork_getRemoteHostByName_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHostByName_Results{st}, err
}

func NewRootIpNetwork_getRemoteHostByName_Results(s *capnp.Segment) (IpNetwork_getRemoteHostByName_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHostByName_Results{st}, err
}

func ReadRootIpNetwork_getRemoteHostByName_Results(msg *capnp.Message) (IpNetwork_getRemoteHostByName_Results, error) {
	root, err := msg.Root()
	return IpNetwork_getRemoteHostByName_Results{root.Struct()}, err
}

func (s IpNetwork_getRemoteHostByName_Results) String() string {
	str, _ := text.Marshal(0xd14a2ec2bad45f69, s.Struct)
	return str
}

func (s IpNetwork_getRemoteHostByName_Results) Host() IpRemoteHost {
	p, _ := s.Struct.Ptr(0)
	return IpRemoteHost{Client: p.Interface().Client()}
}

func (s IpNetwork_getRemoteHostByName_Results) HasHost() bool {
	return s.Struct.HasPtr(0)
}

func (s IpNetwork_getRemoteHostByName_Results) SetHost(v IpRemoteHost) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpNetwork_getRemoteHostByName_Results_List is a list of IpNetwork_getRemoteHostByName_Results.
type IpNetwork_getRemoteHostByName_Results_List struct{ capnp.List }

// NewIpNetwork_getRemoteHostByName_Results creates a new list of IpNetwork_getRemoteHostByName_Results.
func NewIpNetwork_getRemoteHostByName_Results_List(s *capnp.Segment, sz int32) (IpNetwork_getRemoteHostByName_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpNetwork_getRemoteHostByName_Results_List{l}, err
}

func (s IpNetwork_getRemoteHostByName_Results_List) At(i int) IpNetwork_getRemoteHostByName_Results {
	return IpNetwork_getRemoteHostByName_Results{s.List.Struct(i)}
}

func (s IpNetwork_getRemoteHostByName_Results_List) Set(i int, v IpNetwork_getRemoteHostByName_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpNetwork_getRemoteHostByName_Results_List) String() string {
	str, _ := text.MarshalList(0xd14a2ec2bad45f69, s.List)
	return str
}

// IpNetwork_getRemoteHostByName_Results_Future is a wrapper for a IpNetwork_getRemoteHostByName_Results promised by a client call.
type IpNetwork_getRemoteHostByName_Results_Future struct{ *capnp.Future }

func (p IpNetwork_getRemoteHostByName_Results_Future) Struct() (IpNetwork_getRemoteHostByName_Results, error) {
	s, err := p.Future.Struct()
	return IpNetwork_getRemoteHostByName_Results{s}, err
}

func (p IpNetwork_getRemoteHostByName_Results_Future) Host() IpRemoteHost {
	return IpRemoteHost{Client: p.Future.Field(0, nil).Client()}
}

type IpAddress struct{ capnp.Struct }

// IpAddress_TypeID is the unique identifier for the type IpAddress.
const IpAddress_TypeID = 0xeeb98f9937d32c0b

func NewIpAddress(s *capnp.Segment) (IpAddress, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return IpAddress{st}, err
}

func NewRootIpAddress(s *capnp.Segment) (IpAddress, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return IpAddress{st}, err
}

func ReadRootIpAddress(msg *capnp.Message) (IpAddress, error) {
	root, err := msg.Root()
	return IpAddress{root.Struct()}, err
}

func (s IpAddress) String() string {
	str, _ := text.Marshal(0xeeb98f9937d32c0b, s.Struct)
	return str
}

func (s IpAddress) Lower64() uint64 {
	return s.Struct.Uint64(0)
}

func (s IpAddress) SetLower64(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s IpAddress) Upper64() uint64 {
	return s.Struct.Uint64(8)
}

func (s IpAddress) SetUpper64(v uint64) {
	s.Struct.SetUint64(8, v)
}

// IpAddress_List is a list of IpAddress.
type IpAddress_List struct{ capnp.List }

// NewIpAddress creates a new list of IpAddress.
func NewIpAddress_List(s *capnp.Segment, sz int32) (IpAddress_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return IpAddress_List{l}, err
}

func (s IpAddress_List) At(i int) IpAddress { return IpAddress{s.List.Struct(i)} }

func (s IpAddress_List) Set(i int, v IpAddress) error { return s.List.SetStruct(i, v.Struct) }

func (s IpAddress_List) String() string {
	str, _ := text.MarshalList(0xeeb98f9937d32c0b, s.List)
	return str
}

// IpAddress_Future is a wrapper for a IpAddress promised by a client call.
type IpAddress_Future struct{ *capnp.Future }

func (p IpAddress_Future) Struct() (IpAddress, error) {
	s, err := p.Future.Struct()
	return IpAddress{s}, err
}

type IpInterface struct{ Client *capnp.Client }

// IpInterface_TypeID is the unique identifier for the type IpInterface.
const IpInterface_TypeID = 0xe32c506ee93ed6fa

func (c IpInterface) ListenTcp(ctx context.Context, params func(IpInterface_listenTcp_Params) error) (IpInterface_listenTcp_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenTcp",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpInterface_listenTcp_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpInterface_listenTcp_Results_Future{Future: ans.Future()}, release
}
func (c IpInterface) ListenUdp(ctx context.Context, params func(IpInterface_listenUdp_Params) error) (IpInterface_listenUdp_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenUdp",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpInterface_listenUdp_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpInterface_listenUdp_Results_Future{Future: ans.Future()}, release
}

func (c IpInterface) AddRef() IpInterface {
	return IpInterface{
		Client: c.Client.AddRef(),
	}
}

func (c IpInterface) Release() {
	c.Client.Release()
}

// A IpInterface_Server is a IpInterface with a local implementation.
type IpInterface_Server interface {
	ListenTcp(context.Context, IpInterface_listenTcp) error

	ListenUdp(context.Context, IpInterface_listenUdp) error
}

// IpInterface_NewServer creates a new Server from an implementation of IpInterface_Server.
func IpInterface_NewServer(s IpInterface_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(IpInterface_Methods(nil, s), s, c, policy)
}

// IpInterface_ServerToClient creates a new Client from an implementation of IpInterface_Server.
// The caller is responsible for calling Release on the returned Client.
func IpInterface_ServerToClient(s IpInterface_Server, policy *server.Policy) IpInterface {
	return IpInterface{Client: capnp.NewClient(IpInterface_NewServer(s, policy))}
}

// IpInterface_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func IpInterface_Methods(methods []server.Method, s IpInterface_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenTcp",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListenTcp(ctx, IpInterface_listenTcp{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenUdp",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListenUdp(ctx, IpInterface_listenUdp{call})
		},
	})

	return methods
}

// IpInterface_listenTcp holds the state for a server call to IpInterface.listenTcp.
// See server.Call for documentation.
type IpInterface_listenTcp struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpInterface_listenTcp) Args() IpInterface_listenTcp_Params {
	return IpInterface_listenTcp_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IpInterface_listenTcp) AllocResults() (IpInterface_listenTcp_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenTcp_Results{Struct: r}, err
}

// IpInterface_listenUdp holds the state for a server call to IpInterface.listenUdp.
// See server.Call for documentation.
type IpInterface_listenUdp struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpInterface_listenUdp) Args() IpInterface_listenUdp_Params {
	return IpInterface_listenUdp_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IpInterface_listenUdp) AllocResults() (IpInterface_listenUdp_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenUdp_Results{Struct: r}, err
}

type IpInterface_listenTcp_Params struct{ capnp.Struct }

// IpInterface_listenTcp_Params_TypeID is the unique identifier for the type IpInterface_listenTcp_Params.
const IpInterface_listenTcp_Params_TypeID = 0xfd226ae4c6bd2b1e

func NewIpInterface_listenTcp_Params(s *capnp.Segment) (IpInterface_listenTcp_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpInterface_listenTcp_Params{st}, err
}

func NewRootIpInterface_listenTcp_Params(s *capnp.Segment) (IpInterface_listenTcp_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpInterface_listenTcp_Params{st}, err
}

func ReadRootIpInterface_listenTcp_Params(msg *capnp.Message) (IpInterface_listenTcp_Params, error) {
	root, err := msg.Root()
	return IpInterface_listenTcp_Params{root.Struct()}, err
}

func (s IpInterface_listenTcp_Params) String() string {
	str, _ := text.Marshal(0xfd226ae4c6bd2b1e, s.Struct)
	return str
}

func (s IpInterface_listenTcp_Params) PortNum() uint16 {
	return s.Struct.Uint16(0)
}

func (s IpInterface_listenTcp_Params) SetPortNum(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s IpInterface_listenTcp_Params) Port() TcpPort {
	p, _ := s.Struct.Ptr(0)
	return TcpPort{Client: p.Interface().Client()}
}

func (s IpInterface_listenTcp_Params) HasPort() bool {
	return s.Struct.HasPtr(0)
}

func (s IpInterface_listenTcp_Params) SetPort(v TcpPort) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpInterface_listenTcp_Params_List is a list of IpInterface_listenTcp_Params.
type IpInterface_listenTcp_Params_List struct{ capnp.List }

// NewIpInterface_listenTcp_Params creates a new list of IpInterface_listenTcp_Params.
func NewIpInterface_listenTcp_Params_List(s *capnp.Segment, sz int32) (IpInterface_listenTcp_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return IpInterface_listenTcp_Params_List{l}, err
}

func (s IpInterface_listenTcp_Params_List) At(i int) IpInterface_listenTcp_Params {
	return IpInterface_listenTcp_Params{s.List.Struct(i)}
}

func (s IpInterface_listenTcp_Params_List) Set(i int, v IpInterface_listenTcp_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpInterface_listenTcp_Params_List) String() string {
	str, _ := text.MarshalList(0xfd226ae4c6bd2b1e, s.List)
	return str
}

// IpInterface_listenTcp_Params_Future is a wrapper for a IpInterface_listenTcp_Params promised by a client call.
type IpInterface_listenTcp_Params_Future struct{ *capnp.Future }

func (p IpInterface_listenTcp_Params_Future) Struct() (IpInterface_listenTcp_Params, error) {
	s, err := p.Future.Struct()
	return IpInterface_listenTcp_Params{s}, err
}

func (p IpInterface_listenTcp_Params_Future) Port() TcpPort {
	return TcpPort{Client: p.Future.Field(0, nil).Client()}
}

type IpInterface_listenTcp_Results struct{ capnp.Struct }

// IpInterface_listenTcp_Results_TypeID is the unique identifier for the type IpInterface_listenTcp_Results.
const IpInterface_listenTcp_Results_TypeID = 0x9381253786627ecf

func NewIpInterface_listenTcp_Results(s *capnp.Segment) (IpInterface_listenTcp_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenTcp_Results{st}, err
}

func NewRootIpInterface_listenTcp_Results(s *capnp.Segment) (IpInterface_listenTcp_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenTcp_Results{st}, err
}

func ReadRootIpInterface_listenTcp_Results(msg *capnp.Message) (IpInterface_listenTcp_Results, error) {
	root, err := msg.Root()
	return IpInterface_listenTcp_Results{root.Struct()}, err
}

func (s IpInterface_listenTcp_Results) String() string {
	str, _ := text.Marshal(0x9381253786627ecf, s.Struct)
	return str
}

func (s IpInterface_listenTcp_Results) Handle() util.Handle {
	p, _ := s.Struct.Ptr(0)
	return util.Handle{Client: p.Interface().Client()}
}

func (s IpInterface_listenTcp_Results) HasHandle() bool {
	return s.Struct.HasPtr(0)
}

func (s IpInterface_listenTcp_Results) SetHandle(v util.Handle) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpInterface_listenTcp_Results_List is a list of IpInterface_listenTcp_Results.
type IpInterface_listenTcp_Results_List struct{ capnp.List }

// NewIpInterface_listenTcp_Results creates a new list of IpInterface_listenTcp_Results.
func NewIpInterface_listenTcp_Results_List(s *capnp.Segment, sz int32) (IpInterface_listenTcp_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpInterface_listenTcp_Results_List{l}, err
}

func (s IpInterface_listenTcp_Results_List) At(i int) IpInterface_listenTcp_Results {
	return IpInterface_listenTcp_Results{s.List.Struct(i)}
}

func (s IpInterface_listenTcp_Results_List) Set(i int, v IpInterface_listenTcp_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpInterface_listenTcp_Results_List) String() string {
	str, _ := text.MarshalList(0x9381253786627ecf, s.List)
	return str
}

// IpInterface_listenTcp_Results_Future is a wrapper for a IpInterface_listenTcp_Results promised by a client call.
type IpInterface_listenTcp_Results_Future struct{ *capnp.Future }

func (p IpInterface_listenTcp_Results_Future) Struct() (IpInterface_listenTcp_Results, error) {
	s, err := p.Future.Struct()
	return IpInterface_listenTcp_Results{s}, err
}

func (p IpInterface_listenTcp_Results_Future) Handle() util.Handle {
	return util.Handle{Client: p.Future.Field(0, nil).Client()}
}

type IpInterface_listenUdp_Params struct{ capnp.Struct }

// IpInterface_listenUdp_Params_TypeID is the unique identifier for the type IpInterface_listenUdp_Params.
const IpInterface_listenUdp_Params_TypeID = 0xa1d8815a262abc49

func NewIpInterface_listenUdp_Params(s *capnp.Segment) (IpInterface_listenUdp_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpInterface_listenUdp_Params{st}, err
}

func NewRootIpInterface_listenUdp_Params(s *capnp.Segment) (IpInterface_listenUdp_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpInterface_listenUdp_Params{st}, err
}

func ReadRootIpInterface_listenUdp_Params(msg *capnp.Message) (IpInterface_listenUdp_Params, error) {
	root, err := msg.Root()
	return IpInterface_listenUdp_Params{root.Struct()}, err
}

func (s IpInterface_listenUdp_Params) String() string {
	str, _ := text.Marshal(0xa1d8815a262abc49, s.Struct)
	return str
}

func (s IpInterface_listenUdp_Params) PortNum() uint16 {
	return s.Struct.Uint16(0)
}

func (s IpInterface_listenUdp_Params) SetPortNum(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s IpInterface_listenUdp_Params) Port() UdpPort {
	p, _ := s.Struct.Ptr(0)
	return UdpPort{Client: p.Interface().Client()}
}

func (s IpInterface_listenUdp_Params) HasPort() bool {
	return s.Struct.HasPtr(0)
}

func (s IpInterface_listenUdp_Params) SetPort(v UdpPort) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpInterface_listenUdp_Params_List is a list of IpInterface_listenUdp_Params.
type IpInterface_listenUdp_Params_List struct{ capnp.List }

// NewIpInterface_listenUdp_Params creates a new list of IpInterface_listenUdp_Params.
func NewIpInterface_listenUdp_Params_List(s *capnp.Segment, sz int32) (IpInterface_listenUdp_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return IpInterface_listenUdp_Params_List{l}, err
}

func (s IpInterface_listenUdp_Params_List) At(i int) IpInterface_listenUdp_Params {
	return IpInterface_listenUdp_Params{s.List.Struct(i)}
}

func (s IpInterface_listenUdp_Params_List) Set(i int, v IpInterface_listenUdp_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpInterface_listenUdp_Params_List) String() string {
	str, _ := text.MarshalList(0xa1d8815a262abc49, s.List)
	return str
}

// IpInterface_listenUdp_Params_Future is a wrapper for a IpInterface_listenUdp_Params promised by a client call.
type IpInterface_listenUdp_Params_Future struct{ *capnp.Future }

func (p IpInterface_listenUdp_Params_Future) Struct() (IpInterface_listenUdp_Params, error) {
	s, err := p.Future.Struct()
	return IpInterface_listenUdp_Params{s}, err
}

func (p IpInterface_listenUdp_Params_Future) Port() UdpPort {
	return UdpPort{Client: p.Future.Field(0, nil).Client()}
}

type IpInterface_listenUdp_Results struct{ capnp.Struct }

// IpInterface_listenUdp_Results_TypeID is the unique identifier for the type IpInterface_listenUdp_Results.
const IpInterface_listenUdp_Results_TypeID = 0xcb83a480981bc290

func NewIpInterface_listenUdp_Results(s *capnp.Segment) (IpInterface_listenUdp_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenUdp_Results{st}, err
}

func NewRootIpInterface_listenUdp_Results(s *capnp.Segment) (IpInterface_listenUdp_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenUdp_Results{st}, err
}

func ReadRootIpInterface_listenUdp_Results(msg *capnp.Message) (IpInterface_listenUdp_Results, error) {
	root, err := msg.Root()
	return IpInterface_listenUdp_Results{root.Struct()}, err
}

func (s IpInterface_listenUdp_Results) String() string {
	str, _ := text.Marshal(0xcb83a480981bc290, s.Struct)
	return str
}

func (s IpInterface_listenUdp_Results) Handle() util.Handle {
	p, _ := s.Struct.Ptr(0)
	return util.Handle{Client: p.Interface().Client()}
}

func (s IpInterface_listenUdp_Results) HasHandle() bool {
	return s.Struct.HasPtr(0)
}

func (s IpInterface_listenUdp_Results) SetHandle(v util.Handle) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpInterface_listenUdp_Results_List is a list of IpInterface_listenUdp_Results.
type IpInterface_listenUdp_Results_List struct{ capnp.List }

// NewIpInterface_listenUdp_Results creates a new list of IpInterface_listenUdp_Results.
func NewIpInterface_listenUdp_Results_List(s *capnp.Segment, sz int32) (IpInterface_listenUdp_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpInterface_listenUdp_Results_List{l}, err
}

func (s IpInterface_listenUdp_Results_List) At(i int) IpInterface_listenUdp_Results {
	return IpInterface_listenUdp_Results{s.List.Struct(i)}
}

func (s IpInterface_listenUdp_Results_List) Set(i int, v IpInterface_listenUdp_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpInterface_listenUdp_Results_List) String() string {
	str, _ := text.MarshalList(0xcb83a480981bc290, s.List)
	return str
}

// IpInterface_listenUdp_Results_Future is a wrapper for a IpInterface_listenUdp_Results promised by a client call.
type IpInterface_listenUdp_Results_Future struct{ *capnp.Future }

func (p IpInterface_listenUdp_Results_Future) Struct() (IpInterface_listenUdp_Results, error) {
	s, err := p.Future.Struct()
	return IpInterface_listenUdp_Results{s}, err
}

func (p IpInterface_listenUdp_Results_Future) Handle() util.Handle {
	return util.Handle{Client: p.Future.Field(0, nil).Client()}
}

type IpRemoteHost struct{ Client *capnp.Client }

// IpRemoteHost_TypeID is the unique identifier for the type IpRemoteHost.
const IpRemoteHost_TypeID = 0x905dd76b298b3130

func (c IpRemoteHost) GetTcpPort(ctx context.Context, params func(IpRemoteHost_getTcpPort_Params) error) (IpRemoteHost_getTcpPort_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x905dd76b298b3130,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpRemoteHost",
			MethodName:    "getTcpPort",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpRemoteHost_getTcpPort_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpRemoteHost_getTcpPort_Results_Future{Future: ans.Future()}, release
}
func (c IpRemoteHost) GetUdpPort(ctx context.Context, params func(IpRemoteHost_getUdpPort_Params) error) (IpRemoteHost_getUdpPort_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x905dd76b298b3130,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpRemoteHost",
			MethodName:    "getUdpPort",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpRemoteHost_getUdpPort_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpRemoteHost_getUdpPort_Results_Future{Future: ans.Future()}, release
}

func (c IpRemoteHost) AddRef() IpRemoteHost {
	return IpRemoteHost{
		Client: c.Client.AddRef(),
	}
}

func (c IpRemoteHost) Release() {
	c.Client.Release()
}

// A IpRemoteHost_Server is a IpRemoteHost with a local implementation.
type IpRemoteHost_Server interface {
	GetTcpPort(context.Context, IpRemoteHost_getTcpPort) error

	GetUdpPort(context.Context, IpRemoteHost_getUdpPort) error
}

// IpRemoteHost_NewServer creates a new Server from an implementation of IpRemoteHost_Server.
func IpRemoteHost_NewServer(s IpRemoteHost_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(IpRemoteHost_Methods(nil, s), s, c, policy)
}

// IpRemoteHost_ServerToClient creates a new Client from an implementation of IpRemoteHost_Server.
// The caller is responsible for calling Release on the returned Client.
func IpRemoteHost_ServerToClient(s IpRemoteHost_Server, policy *server.Policy) IpRemoteHost {
	return IpRemoteHost{Client: capnp.NewClient(IpRemoteHost_NewServer(s, policy))}
}

// IpRemoteHost_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func IpRemoteHost_Methods(methods []server.Method, s IpRemoteHost_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x905dd76b298b3130,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpRemoteHost",
			MethodName:    "getTcpPort",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetTcpPort(ctx, IpRemoteHost_getTcpPort{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x905dd76b298b3130,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpRemoteHost",
			MethodName:    "getUdpPort",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetUdpPort(ctx, IpRemoteHost_getUdpPort{call})
		},
	})

	return methods
}

// IpRemoteHost_getTcpPort holds the state for a server call to IpRemoteHost.getTcpPort.
// See server.Call for documentation.
type IpRemoteHost_getTcpPort struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpRemoteHost_getTcpPort) Args() IpRemoteHost_getTcpPort_Params {
	return IpRemoteHost_getTcpPort_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IpRemoteHost_getTcpPort) AllocResults() (IpRemoteHost_getTcpPort_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getTcpPort_Results{Struct: r}, err
}

// IpRemoteHost_getUdpPort holds the state for a server call to IpRemoteHost.getUdpPort.
// See server.Call for documentation.
type IpRemoteHost_getUdpPort struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpRemoteHost_getUdpPort) Args() IpRemoteHost_getUdpPort_Params {
	return IpRemoteHost_getUdpPort_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IpRemoteHost_getUdpPort) AllocResults() (IpRemoteHost_getUdpPort_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getUdpPort_Results{Struct: r}, err
}

type IpRemoteHost_getTcpPort_Params struct{ capnp.Struct }

// IpRemoteHost_getTcpPort_Params_TypeID is the unique identifier for the type IpRemoteHost_getTcpPort_Params.
const IpRemoteHost_getTcpPort_Params_TypeID = 0xed10beb11e7383e9

func NewIpRemoteHost_getTcpPort_Params(s *capnp.Segment) (IpRemoteHost_getTcpPort_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpRemoteHost_getTcpPort_Params{st}, err
}

func NewRootIpRemoteHost_getTcpPort_Params(s *capnp.Segment) (IpRemoteHost_getTcpPort_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpRemoteHost_getTcpPort_Params{st}, err
}

func ReadRootIpRemoteHost_getTcpPort_Params(msg *capnp.Message) (IpRemoteHost_getTcpPort_Params, error) {
	root, err := msg.Root()
	return IpRemoteHost_getTcpPort_Params{root.Struct()}, err
}

func (s IpRemoteHost_getTcpPort_Params) String() string {
	str, _ := text.Marshal(0xed10beb11e7383e9, s.Struct)
	return str
}

func (s IpRemoteHost_getTcpPort_Params) PortNum() uint16 {
	return s.Struct.Uint16(0)
}

func (s IpRemoteHost_getTcpPort_Params) SetPortNum(v uint16) {
	s.Struct.SetUint16(0, v)
}

// IpRemoteHost_getTcpPort_Params_List is a list of IpRemoteHost_getTcpPort_Params.
type IpRemoteHost_getTcpPort_Params_List struct{ capnp.List }

// NewIpRemoteHost_getTcpPort_Params creates a new list of IpRemoteHost_getTcpPort_Params.
func NewIpRemoteHost_getTcpPort_Params_List(s *capnp.Segment, sz int32) (IpRemoteHost_getTcpPort_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return IpRemoteHost_getTcpPort_Params_List{l}, err
}

func (s IpRemoteHost_getTcpPort_Params_List) At(i int) IpRemoteHost_getTcpPort_Params {
	return IpRemoteHost_getTcpPort_Params{s.List.Struct(i)}
}

func (s IpRemoteHost_getTcpPort_Params_List) Set(i int, v IpRemoteHost_getTcpPort_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpRemoteHost_getTcpPort_Params_List) String() string {
	str, _ := text.MarshalList(0xed10beb11e7383e9, s.List)
	return str
}

// IpRemoteHost_getTcpPort_Params_Future is a wrapper for a IpRemoteHost_getTcpPort_Params promised by a client call.
type IpRemoteHost_getTcpPort_Params_Future struct{ *capnp.Future }

func (p IpRemoteHost_getTcpPort_Params_Future) Struct() (IpRemoteHost_getTcpPort_Params, error) {
	s, err := p.Future.Struct()
	return IpRemoteHost_getTcpPort_Params{s}, err
}

type IpRemoteHost_getTcpPort_Results struct{ capnp.Struct }

// IpRemoteHost_getTcpPort_Results_TypeID is the unique identifier for the type IpRemoteHost_getTcpPort_Results.
const IpRemoteHost_getTcpPort_Results_TypeID = 0xd77df9f44cfcde33

func NewIpRemoteHost_getTcpPort_Results(s *capnp.Segment) (IpRemoteHost_getTcpPort_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getTcpPort_Results{st}, err
}

func NewRootIpRemoteHost_getTcpPort_Results(s *capnp.Segment) (IpRemoteHost_getTcpPort_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getTcpPort_Results{st}, err
}

func ReadRootIpRemoteHost_getTcpPort_Results(msg *capnp.Message) (IpRemoteHost_getTcpPort_Results, error) {
	root, err := msg.Root()
	return IpRemoteHost_getTcpPort_Results{root.Struct()}, err
}

func (s IpRemoteHost_getTcpPort_Results) String() string {
	str, _ := text.Marshal(0xd77df9f44cfcde33, s.Struct)
	return str
}

func (s IpRemoteHost_getTcpPort_Results) Port() TcpPort {
	p, _ := s.Struct.Ptr(0)
	return TcpPort{Client: p.Interface().Client()}
}

func (s IpRemoteHost_getTcpPort_Results) HasPort() bool {
	return s.Struct.HasPtr(0)
}

func (s IpRemoteHost_getTcpPort_Results) SetPort(v TcpPort) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpRemoteHost_getTcpPort_Results_List is a list of IpRemoteHost_getTcpPort_Results.
type IpRemoteHost_getTcpPort_Results_List struct{ capnp.List }

// NewIpRemoteHost_getTcpPort_Results creates a new list of IpRemoteHost_getTcpPort_Results.
func NewIpRemoteHost_getTcpPort_Results_List(s *capnp.Segment, sz int32) (IpRemoteHost_getTcpPort_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpRemoteHost_getTcpPort_Results_List{l}, err
}

func (s IpRemoteHost_getTcpPort_Results_List) At(i int) IpRemoteHost_getTcpPort_Results {
	return IpRemoteHost_getTcpPort_Results{s.List.Struct(i)}
}

func (s IpRemoteHost_getTcpPort_Results_List) Set(i int, v IpRemoteHost_getTcpPort_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpRemoteHost_getTcpPort_Results_List) String() string {
	str, _ := text.MarshalList(0xd77df9f44cfcde33, s.List)
	return str
}

// IpRemoteHost_getTcpPort_Results_Future is a wrapper for a IpRemoteHost_getTcpPort_Results promised by a client call.
type IpRemoteHost_getTcpPort_Results_Future struct{ *capnp.Future }

func (p IpRemoteHost_getTcpPort_Results_Future) Struct() (IpRemoteHost_getTcpPort_Results, error) {
	s, err := p.Future.Struct()
	return IpRemoteHost_getTcpPort_Results{s}, err
}

func (p IpRemoteHost_getTcpPort_Results_Future) Port() TcpPort {
	return TcpPort{Client: p.Future.Field(0, nil).Client()}
}

type IpRemoteHost_getUdpPort_Params struct{ capnp.Struct }

// IpRemoteHost_getUdpPort_Params_TypeID is the unique identifier for the type IpRemoteHost_getUdpPort_Params.
const IpRemoteHost_getUdpPort_Params_TypeID = 0xb62b02486ebe26ed

func NewIpRemoteHost_getUdpPort_Params(s *capnp.Segment) (IpRemoteHost_getUdpPort_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpRemoteHost_getUdpPort_Params{st}, err
}

func NewRootIpRemoteHost_getUdpPort_Params(s *capnp.Segment) (IpRemoteHost_getUdpPort_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpRemoteHost_getUdpPort_Params{st}, err
}

func ReadRootIpRemoteHost_getUdpPort_Params(msg *capnp.Message) (IpRemoteHost_getUdpPort_Params, error) {
	root, err := msg.Root()
	return IpRemoteHost_getUdpPort_Params{root.Struct()}, err
}

func (s IpRemoteHost_getUdpPort_Params) String() string {
	str, _ := text.Marshal(0xb62b02486ebe26ed, s.Struct)
	return str
}

func (s IpRemoteHost_getUdpPort_Params) PortNum() uint16 {
	return s.Struct.Uint16(0)
}

func (s IpRemoteHost_getUdpPort_Params) SetPortNum(v uint16) {
	s.Struct.SetUint16(0, v)
}

// IpRemoteHost_getUdpPort_Params_List is a list of IpRemoteHost_getUdpPort_Params.
type IpRemoteHost_getUdpPort_Params_List struct{ capnp.List }

// NewIpRemoteHost_getUdpPort_Params creates a new list of IpRemoteHost_getUdpPort_Params.
func NewIpRemoteHost_getUdpPort_Params_List(s *capnp.Segment, sz int32) (IpRemoteHost_getUdpPort_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return IpRemoteHost_getUdpPort_Params_List{l}, err
}

func (s IpRemoteHost_getUdpPort_Params_List) At(i int) IpRemoteHost_getUdpPort_Params {
	return IpRemoteHost_getUdpPort_Params{s.List.Struct(i)}
}

func (s IpRemoteHost_getUdpPort_Params_List) Set(i int, v IpRemoteHost_getUdpPort_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpRemoteHost_getUdpPort_Params_List) String() string {
	str, _ := text.MarshalList(0xb62b02486ebe26ed, s.List)
	return str
}

// IpRemoteHost_getUdpPort_Params_Future is a wrapper for a IpRemoteHost_getUdpPort_Params promised by a client call.
type IpRemoteHost_getUdpPort_Params_Future struct{ *capnp.Future }

func (p IpRemoteHost_getUdpPort_Params_Future) Struct() (IpRemoteHost_getUdpPort_Params, error) {
	s, err := p.Future.Struct()
	return IpRemoteHost_getUdpPort_Params{s}, err
}

type IpRemoteHost_getUdpPort_Results struct{ capnp.Struct }

// IpRemoteHost_getUdpPort_Results_TypeID is the unique identifier for the type IpRemoteHost_getUdpPort_Results.
const IpRemoteHost_getUdpPort_Results_TypeID = 0xf53aa3a93e49003b

func NewIpRemoteHost_getUdpPort_Results(s *capnp.Segment) (IpRemoteHost_getUdpPort_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getUdpPort_Results{st}, err
}

func NewRootIpRemoteHost_getUdpPort_Results(s *capnp.Segment) (IpRemoteHost_getUdpPort_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getUdpPort_Results{st}, err
}

func ReadRootIpRemoteHost_getUdpPort_Results(msg *capnp.Message) (IpRemoteHost_getUdpPort_Results, error) {
	root, err := msg.Root()
	return IpRemoteHost_getUdpPort_Results{root.Struct()}, err
}

func (s IpRemoteHost_getUdpPort_Results) String() string {
	str, _ := text.Marshal(0xf53aa3a93e49003b, s.Struct)
	return str
}

func (s IpRemoteHost_getUdpPort_Results) Port() UdpPort {
	p, _ := s.Struct.Ptr(0)
	return UdpPort{Client: p.Interface().Client()}
}

func (s IpRemoteHost_getUdpPort_Results) HasPort() bool {
	return s.Struct.HasPtr(0)
}

func (s IpRemoteHost_getUdpPort_Results) SetPort(v UdpPort) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpRemoteHost_getUdpPort_Results_List is a list of IpRemoteHost_getUdpPort_Results.
type IpRemoteHost_getUdpPort_Results_List struct{ capnp.List }

// NewIpRemoteHost_getUdpPort_Results creates a new list of IpRemoteHost_getUdpPort_Results.
func NewIpRemoteHost_getUdpPort_Results_List(s *capnp.Segment, sz int32) (IpRemoteHost_getUdpPort_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpRemoteHost_getUdpPort_Results_List{l}, err
}

func (s IpRemoteHost_getUdpPort_Results_List) At(i int) IpRemoteHost_getUdpPort_Results {
	return IpRemoteHost_getUdpPort_Results{s.List.Struct(i)}
}

func (s IpRemoteHost_getUdpPort_Results_List) Set(i int, v IpRemoteHost_getUdpPort_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpRemoteHost_getUdpPort_Results_List) String() string {
	str, _ := text.MarshalList(0xf53aa3a93e49003b, s.List)
	return str
}

// IpRemoteHost_getUdpPort_Results_Future is a wrapper for a IpRemoteHost_getUdpPort_Results promised by a client call.
type IpRemoteHost_getUdpPort_Results_Future struct{ *capnp.Future }

func (p IpRemoteHost_getUdpPort_Results_Future) Struct() (IpRemoteHost_getUdpPort_Results, error) {
	s, err := p.Future.Struct()
	return IpRemoteHost_getUdpPort_Results{s}, err
}

func (p IpRemoteHost_getUdpPort_Results_Future) Port() UdpPort {
	return UdpPort{Client: p.Future.Field(0, nil).Client()}
}

type TcpPort struct{ Client *capnp.Client }

// TcpPort_TypeID is the unique identifier for the type TcpPort.
const TcpPort_TypeID = 0xeab20e1af07806b4

func (c TcpPort) Connect(ctx context.Context, params func(TcpPort_connect_Params) error) (TcpPort_connect_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xeab20e1af07806b4,
			MethodID:      0,
			InterfaceName: "ip.capnp:TcpPort",
			MethodName:    "connect",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TcpPort_connect_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TcpPort_connect_Results_Future{Future: ans.Future()}, release
}

func (c TcpPort) AddRef() TcpPort {
	return TcpPort{
		Client: c.Client.AddRef(),
	}
}

func (c TcpPort) Release() {
	c.Client.Release()
}

// A TcpPort_Server is a TcpPort with a local implementation.
type TcpPort_Server interface {
	Connect(context.Context, TcpPort_connect) error
}

// TcpPort_NewServer creates a new Server from an implementation of TcpPort_Server.
func TcpPort_NewServer(s TcpPort_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(TcpPort_Methods(nil, s), s, c, policy)
}

// TcpPort_ServerToClient creates a new Client from an implementation of TcpPort_Server.
// The caller is responsible for calling Release on the returned Client.
func TcpPort_ServerToClient(s TcpPort_Server, policy *server.Policy) TcpPort {
	return TcpPort{Client: capnp.NewClient(TcpPort_NewServer(s, policy))}
}

// TcpPort_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func TcpPort_Methods(methods []server.Method, s TcpPort_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xeab20e1af07806b4,
			MethodID:      0,
			InterfaceName: "ip.capnp:TcpPort",
			MethodName:    "connect",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Connect(ctx, TcpPort_connect{call})
		},
	})

	return methods
}

// TcpPort_connect holds the state for a server call to TcpPort.connect.
// See server.Call for documentation.
type TcpPort_connect struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TcpPort_connect) Args() TcpPort_connect_Params {
	return TcpPort_connect_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c TcpPort_connect) AllocResults() (TcpPort_connect_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TcpPort_connect_Results{Struct: r}, err
}

type TcpPort_connect_Params struct{ capnp.Struct }

// TcpPort_connect_Params_TypeID is the unique identifier for the type TcpPort_connect_Params.
const TcpPort_connect_Params_TypeID = 0x8a60e53250a32321

func NewTcpPort_connect_Params(s *capnp.Segment) (TcpPort_connect_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TcpPort_connect_Params{st}, err
}

func NewRootTcpPort_connect_Params(s *capnp.Segment) (TcpPort_connect_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TcpPort_connect_Params{st}, err
}

func ReadRootTcpPort_connect_Params(msg *capnp.Message) (TcpPort_connect_Params, error) {
	root, err := msg.Root()
	return TcpPort_connect_Params{root.Struct()}, err
}

func (s TcpPort_connect_Params) String() string {
	str, _ := text.Marshal(0x8a60e53250a32321, s.Struct)
	return str
}

func (s TcpPort_connect_Params) Downstream() util.ByteStream {
	p, _ := s.Struct.Ptr(0)
	return util.ByteStream{Client: p.Interface().Client()}
}

func (s TcpPort_connect_Params) HasDownstream() bool {
	return s.Struct.HasPtr(0)
}

func (s TcpPort_connect_Params) SetDownstream(v util.ByteStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// TcpPort_connect_Params_List is a list of TcpPort_connect_Params.
type TcpPort_connect_Params_List struct{ capnp.List }

// NewTcpPort_connect_Params creates a new list of TcpPort_connect_Params.
func NewTcpPort_connect_Params_List(s *capnp.Segment, sz int32) (TcpPort_connect_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return TcpPort_connect_Params_List{l}, err
}

func (s TcpPort_connect_Params_List) At(i int) TcpPort_connect_Params {
	return TcpPort_connect_Params{s.List.Struct(i)}
}

func (s TcpPort_connect_Params_List) Set(i int, v TcpPort_connect_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TcpPort_connect_Params_List) String() string {
	str, _ := text.MarshalList(0x8a60e53250a32321, s.List)
	return str
}

// TcpPort_connect_Params_Future is a wrapper for a TcpPort_connect_Params promised by a client call.
type TcpPort_connect_Params_Future struct{ *capnp.Future }

func (p TcpPort_connect_Params_Future) Struct() (TcpPort_connect_Params, error) {
	s, err := p.Future.Struct()
	return TcpPort_connect_Params{s}, err
}

func (p TcpPort_connect_Params_Future) Downstream() util.ByteStream {
	return util.ByteStream{Client: p.Future.Field(0, nil).Client()}
}

type TcpPort_connect_Results struct{ capnp.Struct }

// TcpPort_connect_Results_TypeID is the unique identifier for the type TcpPort_connect_Results.
const TcpPort_connect_Results_TypeID = 0xcdd1222d14073645

func NewTcpPort_connect_Results(s *capnp.Segment) (TcpPort_connect_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TcpPort_connect_Results{st}, err
}

func NewRootTcpPort_connect_Results(s *capnp.Segment) (TcpPort_connect_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TcpPort_connect_Results{st}, err
}

func ReadRootTcpPort_connect_Results(msg *capnp.Message) (TcpPort_connect_Results, error) {
	root, err := msg.Root()
	return TcpPort_connect_Results{root.Struct()}, err
}

func (s TcpPort_connect_Results) String() string {
	str, _ := text.Marshal(0xcdd1222d14073645, s.Struct)
	return str
}

func (s TcpPort_connect_Results) Upstream() util.ByteStream {
	p, _ := s.Struct.Ptr(0)
	return util.ByteStream{Client: p.Interface().Client()}
}

func (s TcpPort_connect_Results) HasUpstream() bool {
	return s.Struct.HasPtr(0)
}

func (s TcpPort_connect_Results) SetUpstream(v util.ByteStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// TcpPort_connect_Results_List is a list of TcpPort_connect_Results.
type TcpPort_connect_Results_List struct{ capnp.List }

// NewTcpPort_connect_Results creates a new list of TcpPort_connect_Results.
func NewTcpPort_connect_Results_List(s *capnp.Segment, sz int32) (TcpPort_connect_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return TcpPort_connect_Results_List{l}, err
}

func (s TcpPort_connect_Results_List) At(i int) TcpPort_connect_Results {
	return TcpPort_connect_Results{s.List.Struct(i)}
}

func (s TcpPort_connect_Results_List) Set(i int, v TcpPort_connect_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TcpPort_connect_Results_List) String() string {
	str, _ := text.MarshalList(0xcdd1222d14073645, s.List)
	return str
}

// TcpPort_connect_Results_Future is a wrapper for a TcpPort_connect_Results promised by a client call.
type TcpPort_connect_Results_Future struct{ *capnp.Future }

func (p TcpPort_connect_Results_Future) Struct() (TcpPort_connect_Results, error) {
	s, err := p.Future.Struct()
	return TcpPort_connect_Results{s}, err
}

func (p TcpPort_connect_Results_Future) Upstream() util.ByteStream {
	return util.ByteStream{Client: p.Future.Field(0, nil).Client()}
}

type UdpPort struct{ Client *capnp.Client }

// UdpPort_TypeID is the unique identifier for the type UdpPort.
const UdpPort_TypeID = 0xc6212e1217d001ce

func (c UdpPort) Send(ctx context.Context, params func(UdpPort_send_Params) error) (UdpPort_send_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc6212e1217d001ce,
			MethodID:      0,
			InterfaceName: "ip.capnp:UdpPort",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UdpPort_send_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return UdpPort_send_Results_Future{Future: ans.Future()}, release
}

func (c UdpPort) AddRef() UdpPort {
	return UdpPort{
		Client: c.Client.AddRef(),
	}
}

func (c UdpPort) Release() {
	c.Client.Release()
}

// A UdpPort_Server is a UdpPort with a local implementation.
type UdpPort_Server interface {
	Send(context.Context, UdpPort_send) error
}

// UdpPort_NewServer creates a new Server from an implementation of UdpPort_Server.
func UdpPort_NewServer(s UdpPort_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(UdpPort_Methods(nil, s), s, c, policy)
}

// UdpPort_ServerToClient creates a new Client from an implementation of UdpPort_Server.
// The caller is responsible for calling Release on the returned Client.
func UdpPort_ServerToClient(s UdpPort_Server, policy *server.Policy) UdpPort {
	return UdpPort{Client: capnp.NewClient(UdpPort_NewServer(s, policy))}
}

// UdpPort_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func UdpPort_Methods(methods []server.Method, s UdpPort_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc6212e1217d001ce,
			MethodID:      0,
			InterfaceName: "ip.capnp:UdpPort",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, UdpPort_send{call})
		},
	})

	return methods
}

// UdpPort_send holds the state for a server call to UdpPort.send.
// See server.Call for documentation.
type UdpPort_send struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UdpPort_send) Args() UdpPort_send_Params {
	return UdpPort_send_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c UdpPort_send) AllocResults() (UdpPort_send_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UdpPort_send_Results{Struct: r}, err
}

type UdpPort_send_Params struct{ capnp.Struct }

// UdpPort_send_Params_TypeID is the unique identifier for the type UdpPort_send_Params.
const UdpPort_send_Params_TypeID = 0xc6ca13f7c8dbd102

func NewUdpPort_send_Params(s *capnp.Segment) (UdpPort_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UdpPort_send_Params{st}, err
}

func NewRootUdpPort_send_Params(s *capnp.Segment) (UdpPort_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UdpPort_send_Params{st}, err
}

func ReadRootUdpPort_send_Params(msg *capnp.Message) (UdpPort_send_Params, error) {
	root, err := msg.Root()
	return UdpPort_send_Params{root.Struct()}, err
}

func (s UdpPort_send_Params) String() string {
	str, _ := text.Marshal(0xc6ca13f7c8dbd102, s.Struct)
	return str
}

func (s UdpPort_send_Params) Message() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s UdpPort_send_Params) HasMessage() bool {
	return s.Struct.HasPtr(0)
}

func (s UdpPort_send_Params) SetMessage(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s UdpPort_send_Params) ReturnPort() UdpPort {
	p, _ := s.Struct.Ptr(1)
	return UdpPort{Client: p.Interface().Client()}
}

func (s UdpPort_send_Params) HasReturnPort() bool {
	return s.Struct.HasPtr(1)
}

func (s UdpPort_send_Params) SetReturnPort(v UdpPort) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// UdpPort_send_Params_List is a list of UdpPort_send_Params.
type UdpPort_send_Params_List struct{ capnp.List }

// NewUdpPort_send_Params creates a new list of UdpPort_send_Params.
func NewUdpPort_send_Params_List(s *capnp.Segment, sz int32) (UdpPort_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return UdpPort_send_Params_List{l}, err
}

func (s UdpPort_send_Params_List) At(i int) UdpPort_send_Params {
	return UdpPort_send_Params{s.List.Struct(i)}
}

func (s UdpPort_send_Params_List) Set(i int, v UdpPort_send_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s UdpPort_send_Params_List) String() string {
	str, _ := text.MarshalList(0xc6ca13f7c8dbd102, s.List)
	return str
}

// UdpPort_send_Params_Future is a wrapper for a UdpPort_send_Params promised by a client call.
type UdpPort_send_Params_Future struct{ *capnp.Future }

func (p UdpPort_send_Params_Future) Struct() (UdpPort_send_Params, error) {
	s, err := p.Future.Struct()
	return UdpPort_send_Params{s}, err
}

func (p UdpPort_send_Params_Future) ReturnPort() UdpPort {
	return UdpPort{Client: p.Future.Field(1, nil).Client()}
}

type UdpPort_send_Results struct{ capnp.Struct }

// UdpPort_send_Results_TypeID is the unique identifier for the type UdpPort_send_Results.
const UdpPort_send_Results_TypeID = 0x8e43fd8e213b1811

func NewUdpPort_send_Results(s *capnp.Segment) (UdpPort_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UdpPort_send_Results{st}, err
}

func NewRootUdpPort_send_Results(s *capnp.Segment) (UdpPort_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UdpPort_send_Results{st}, err
}

func ReadRootUdpPort_send_Results(msg *capnp.Message) (UdpPort_send_Results, error) {
	root, err := msg.Root()
	return UdpPort_send_Results{root.Struct()}, err
}

func (s UdpPort_send_Results) String() string {
	str, _ := text.Marshal(0x8e43fd8e213b1811, s.Struct)
	return str
}

// UdpPort_send_Results_List is a list of UdpPort_send_Results.
type UdpPort_send_Results_List struct{ capnp.List }

// NewUdpPort_send_Results creates a new list of UdpPort_send_Results.
func NewUdpPort_send_Results_List(s *capnp.Segment, sz int32) (UdpPort_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return UdpPort_send_Results_List{l}, err
}

func (s UdpPort_send_Results_List) At(i int) UdpPort_send_Results {
	return UdpPort_send_Results{s.List.Struct(i)}
}

func (s UdpPort_send_Results_List) Set(i int, v UdpPort_send_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s UdpPort_send_Results_List) String() string {
	str, _ := text.MarshalList(0x8e43fd8e213b1811, s.List)
	return str
}

// UdpPort_send_Results_Future is a wrapper for a UdpPort_send_Results promised by a client call.
type UdpPort_send_Results_Future struct{ *capnp.Future }

func (p UdpPort_send_Results_Future) Struct() (UdpPort_send_Results, error) {
	s, err := p.Future.Struct()
	return UdpPort_send_Results{s}, err
}

type IpPortPowerboxMetadata struct{ capnp.Struct }

// IpPortPowerboxMetadata_TypeID is the unique identifier for the type IpPortPowerboxMetadata.
const IpPortPowerboxMetadata_TypeID = 0x856e71a6a4f22bba

func NewIpPortPowerboxMetadata(s *capnp.Segment) (IpPortPowerboxMetadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpPortPowerboxMetadata{st}, err
}

func NewRootIpPortPowerboxMetadata(s *capnp.Segment) (IpPortPowerboxMetadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpPortPowerboxMetadata{st}, err
}

func ReadRootIpPortPowerboxMetadata(msg *capnp.Message) (IpPortPowerboxMetadata, error) {
	root, err := msg.Root()
	return IpPortPowerboxMetadata{root.Struct()}, err
}

func (s IpPortPowerboxMetadata) String() string {
	str, _ := text.Marshal(0x856e71a6a4f22bba, s.Struct)
	return str
}

func (s IpPortPowerboxMetadata) PreferredPortNum() uint16 {
	return s.Struct.Uint16(0)
}

func (s IpPortPowerboxMetadata) SetPreferredPortNum(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s IpPortPowerboxMetadata) PreferredHost() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s IpPortPowerboxMetadata) HasPreferredHost() bool {
	return s.Struct.HasPtr(0)
}

func (s IpPortPowerboxMetadata) PreferredHostBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s IpPortPowerboxMetadata) SetPreferredHost(v string) error {
	return s.Struct.SetText(0, v)
}

// IpPortPowerboxMetadata_List is a list of IpPortPowerboxMetadata.
type IpPortPowerboxMetadata_List struct{ capnp.List }

// NewIpPortPowerboxMetadata creates a new list of IpPortPowerboxMetadata.
func NewIpPortPowerboxMetadata_List(s *capnp.Segment, sz int32) (IpPortPowerboxMetadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return IpPortPowerboxMetadata_List{l}, err
}

func (s IpPortPowerboxMetadata_List) At(i int) IpPortPowerboxMetadata {
	return IpPortPowerboxMetadata{s.List.Struct(i)}
}

func (s IpPortPowerboxMetadata_List) Set(i int, v IpPortPowerboxMetadata) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpPortPowerboxMetadata_List) String() string {
	str, _ := text.MarshalList(0x856e71a6a4f22bba, s.List)
	return str
}

// IpPortPowerboxMetadata_Future is a wrapper for a IpPortPowerboxMetadata promised by a client call.
type IpPortPowerboxMetadata_Future struct{ *capnp.Future }

func (p IpPortPowerboxMetadata_Future) Struct() (IpPortPowerboxMetadata, error) {
	s, err := p.Future.Struct()
	return IpPortPowerboxMetadata{s}, err
}

type PersistentIpNetwork struct{ Client *capnp.Client }

// PersistentIpNetwork_TypeID is the unique identifier for the type PersistentIpNetwork.
const PersistentIpNetwork_TypeID = 0xa5b3215660e038f2

func (c PersistentIpNetwork) GetRemoteHost(ctx context.Context, params func(IpNetwork_getRemoteHost_Params) error) (IpNetwork_getRemoteHost_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHost",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpNetwork_getRemoteHost_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpNetwork_getRemoteHost_Results_Future{Future: ans.Future()}, release
}
func (c PersistentIpNetwork) GetRemoteHostByName(ctx context.Context, params func(IpNetwork_getRemoteHostByName_Params) error) (IpNetwork_getRemoteHostByName_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHostByName",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpNetwork_getRemoteHostByName_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpNetwork_getRemoteHostByName_Results_Future{Future: ans.Future()}, release
}
func (c PersistentIpNetwork) AddRequirements(ctx context.Context, params func(supervisor.SystemPersistent_addRequirements_Params) error) (supervisor.SystemPersistent_addRequirements_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error {
			return params(supervisor.SystemPersistent_addRequirements_Params{Struct: s})
		}
	}
	ans, release := c.Client.SendCall(ctx, s)
	return supervisor.SystemPersistent_addRequirements_Results_Future{Future: ans.Future()}, release
}
func (c PersistentIpNetwork) Save(ctx context.Context, params func(persistent.Persistent_SaveParams) error) (persistent.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistent.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistent.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c PersistentIpNetwork) AddRef() PersistentIpNetwork {
	return PersistentIpNetwork{
		Client: c.Client.AddRef(),
	}
}

func (c PersistentIpNetwork) Release() {
	c.Client.Release()
}

// A PersistentIpNetwork_Server is a PersistentIpNetwork with a local implementation.
type PersistentIpNetwork_Server interface {
	GetRemoteHost(context.Context, IpNetwork_getRemoteHost) error

	GetRemoteHostByName(context.Context, IpNetwork_getRemoteHostByName) error

	AddRequirements(context.Context, supervisor.SystemPersistent_addRequirements) error

	Save(context.Context, persistent.Persistent_save) error
}

// PersistentIpNetwork_NewServer creates a new Server from an implementation of PersistentIpNetwork_Server.
func PersistentIpNetwork_NewServer(s PersistentIpNetwork_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PersistentIpNetwork_Methods(nil, s), s, c, policy)
}

// PersistentIpNetwork_ServerToClient creates a new Client from an implementation of PersistentIpNetwork_Server.
// The caller is responsible for calling Release on the returned Client.
func PersistentIpNetwork_ServerToClient(s PersistentIpNetwork_Server, policy *server.Policy) PersistentIpNetwork {
	return PersistentIpNetwork{Client: capnp.NewClient(PersistentIpNetwork_NewServer(s, policy))}
}

// PersistentIpNetwork_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PersistentIpNetwork_Methods(methods []server.Method, s PersistentIpNetwork_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHost",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetRemoteHost(ctx, IpNetwork_getRemoteHost{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHostByName",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetRemoteHostByName(ctx, IpNetwork_getRemoteHostByName{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddRequirements(ctx, supervisor.SystemPersistent_addRequirements{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistent.Persistent_save{call})
		},
	})

	return methods
}

type PersistentIpInterface struct{ Client *capnp.Client }

// PersistentIpInterface_TypeID is the unique identifier for the type PersistentIpInterface.
const PersistentIpInterface_TypeID = 0xcf43ebe6a5a6f1b4

func (c PersistentIpInterface) ListenTcp(ctx context.Context, params func(IpInterface_listenTcp_Params) error) (IpInterface_listenTcp_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenTcp",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpInterface_listenTcp_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpInterface_listenTcp_Results_Future{Future: ans.Future()}, release
}
func (c PersistentIpInterface) ListenUdp(ctx context.Context, params func(IpInterface_listenUdp_Params) error) (IpInterface_listenUdp_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenUdp",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpInterface_listenUdp_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpInterface_listenUdp_Results_Future{Future: ans.Future()}, release
}
func (c PersistentIpInterface) AddRequirements(ctx context.Context, params func(supervisor.SystemPersistent_addRequirements_Params) error) (supervisor.SystemPersistent_addRequirements_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error {
			return params(supervisor.SystemPersistent_addRequirements_Params{Struct: s})
		}
	}
	ans, release := c.Client.SendCall(ctx, s)
	return supervisor.SystemPersistent_addRequirements_Results_Future{Future: ans.Future()}, release
}
func (c PersistentIpInterface) Save(ctx context.Context, params func(persistent.Persistent_SaveParams) error) (persistent.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistent.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistent.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c PersistentIpInterface) AddRef() PersistentIpInterface {
	return PersistentIpInterface{
		Client: c.Client.AddRef(),
	}
}

func (c PersistentIpInterface) Release() {
	c.Client.Release()
}

// A PersistentIpInterface_Server is a PersistentIpInterface with a local implementation.
type PersistentIpInterface_Server interface {
	ListenTcp(context.Context, IpInterface_listenTcp) error

	ListenUdp(context.Context, IpInterface_listenUdp) error

	AddRequirements(context.Context, supervisor.SystemPersistent_addRequirements) error

	Save(context.Context, persistent.Persistent_save) error
}

// PersistentIpInterface_NewServer creates a new Server from an implementation of PersistentIpInterface_Server.
func PersistentIpInterface_NewServer(s PersistentIpInterface_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PersistentIpInterface_Methods(nil, s), s, c, policy)
}

// PersistentIpInterface_ServerToClient creates a new Client from an implementation of PersistentIpInterface_Server.
// The caller is responsible for calling Release on the returned Client.
func PersistentIpInterface_ServerToClient(s PersistentIpInterface_Server, policy *server.Policy) PersistentIpInterface {
	return PersistentIpInterface{Client: capnp.NewClient(PersistentIpInterface_NewServer(s, policy))}
}

// PersistentIpInterface_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PersistentIpInterface_Methods(methods []server.Method, s PersistentIpInterface_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenTcp",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListenTcp(ctx, IpInterface_listenTcp{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenUdp",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListenUdp(ctx, IpInterface_listenUdp{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddRequirements(ctx, supervisor.SystemPersistent_addRequirements{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistent.Persistent_save{call})
		},
	})

	return methods
}

const schema_f44732d435305f86 = "x\xda\xacW}l\x13\xe7\x19\x7f\x9e\xb3\x9dK\xe6\xb3" +
	"\xcf\xb7\xe3sS\xc8\xc22\xb6\x04\xb0\x12\xc2g\x10$" +
	"\x84E`\x06\xc8\x97\x85\xa1Eb\xc9%>B\x96\xf8" +
	"|\xbb\xbb(\x84\x8de\x0c\x0d\xa4lcLU%@" +
	"\xa2\x12\x85 QUHPh\x05-H\xa1\x05\xf5C" +
	"i\x8a\x0a\xa5\xa8\xa2\xa5\x05*\x01J\xd5R*\x0a\"" +
	"\xbd\xea}\xed\xf3]b'@\xe9\x7f~s\xcf\xfb|" +
	"\xfe~\xbf\xe7M\xa9\xe2\xabb\xca|\xafL\x00\xf8}" +
	".\xfar\xac\x93\xd3\xef\x1c8\xf8\x17\xf5_ \xe5!" +
	"Z\xdb\x1aJ\xe7\\\x98\xb5\xec.\xf8\x90\x05(_\xe2" +
	"gP\\\xe5g\x01\xc4\x88\xbf\x13\xd0*\xfc\xe5\xfe\xe8" +
	"\xac\x1b\x8d= \x08\x08)\xa3#~\x06\x01\xc5\xe3\xfe" +
	"J@K\x98\xb4\xb0p\xc7\xd0\xd2\x1dI\x03/\xb9y" +
	"\xd9\x7f\x07\xbcVi\xd9\xbf\x8b\xdb.\xad\xdb\x09B\x9e" +
	"\xc7\x09\x03(\x9e\xf2\x1f\x15\xcf\xd2\x10}\xfe\xed\xe2d" +
	"\x8e\x05\xb0\x06\xfe\xde\xb4m\xde\xaf\xb6<\x03\xc2\xf8t" +
	"\x18\xe4*H\x98<\x8e\x84y\xe3\xd5{\x0f\xd5\x82\x86" +
	"\xbd \x88i\x83bN'\x06s\xa8A\xe4\xb5\x92i" +
	"\xf5[>\xdc\x07\xd2xL[\xac\xe1f\x11\x8bu\x1c" +
	")\xe5\xce\xfc\xab\x8d\x7f(|\xa97#\xa1\x13\xdc-" +
	"\xf1,G\x13\xe2X\xb1\x8f\xfb5\x80U\xf5\x8b\x92M" +
	"mk\xffy(\x8b\xf1\x1e\xb1\x8f\x9b\x08 \xf6s\xdb" +
	"\xc5\xe2\x00\xc9^\xfe\x1d\xf7\xf5\xe1\x8b\x7f=\xeeNN" +
	"\x08\xac \xa1\xf3\x03$\xb9\xc1i\xa7\xd5\xe5\xcc\xf4\x97" +
	"A\x9a\x80\xa9.\x95/\x0aT\x13\x83\x1aj\xf0.\xbe" +
	"7\xf1\xa7\xe1\xc2s\x19\xe1\x94@\x8f\x18'A\xc4\xd6" +
	"\xc02\xf1\xff4\x1cs\xfe\xa37\xef\x89o\x9fK\xcd" +
	"\x84!_\xbb\x02\xb7\x00\xc5\xcd\x01R\xe8\xce3?\xdf" +
	"\xf5\x8f\x03[\xdfq7\xf3J\x806\xf3\x06\x8dV3" +
	"\x97\x1d7s\xea\xf9~\xf7P}\xc1\x9f\x10\x83@\x90" +
	"\x18\x1c\xfb\xea`\xef\xe7\xb7\x97\x0ed\xa4S\x16| " +
	".\x0a\x92\x80\x0b\x82\xac\xb8 HZ5\xf9\xdb\xc0\xb3" +
	"\xe5\x95\xcf\x0d\x90\xea\x9d\xbeQ\xaf){\xd2\xad\x08u" +
	"\xdc\xdap\xe1\xe4\x99\xf0\x8a\xf3\xeeN\xc5\x83\x9bH\xe4" +
	".jP\xfe\xf1\xc3\x95w\xefo\xbe\x04\xc2\x84\xb4\xc1" +
	"\xee me/1\xf8\xe4\xd8\x9f\xf4\xdb}\x13\xaf\xb8" +
	"\xee\x9f\x0d\xd2F\xf6\xd3\xfb\xffe\xaf\xf3\xf7W^\xfe" +
	"\x0c\xa4\x02D'\xb5\xdf\xb2\x0c@\xf9`\xb0\x16E\xe4" +
	"IbCA\xd2\xa9\x07\x1f,\xbe\xa9Fg\\\xcb\xa8" +
	"\xf3\x8f\xfc\x0b\xa2L\x0d\xd7\xf1\xdb\xc5\xe3\xe4\x97u," +
	"g\xe3\x97?\x0b\x1e\xbd\x95a\xbc\x97\xef\x11{\xa9\xf1" +
	">~\x99\xf8\x165\xbe\xb9\xd5\x98r\xe4th\xd0=" +
	"\xf1#<M\xf4\x04O\x12\xf5\xcfx\x7f\xde\xee\xff\x9d" +
	"\xf8\x82\xd0\x90q\xdc%\x09\xc4\xef\x11?\xa5\x0e\xaf\xf0" +
	"\x9d\x80C\x0b#\x8b\x0f\xed\xaf\xf8\xc6\xd5\x92\x05!\xda" +
	"\x92\x9a\x10q5e\xfa\xa9s\xd7\xff<uh\x18\xf4" +
	"\x95\x10\x85~<\xd4\x09\x16\x1c\xb6Z\xb5p\xb3\xac\xa9" +
	"\x9a\xa7\"\xa2E\x13\xba\x19Mt*zSb\xe3*" +
	"\xc5\x94c\xb2)C\x14Q\xca\xf5x\x01\xbc\x08 \x14" +
	"\xf7\x00H3<(\xcdg\x10q\x1cq+\xcc\xd1\x01" +
	"\xa4\xd9\x1e\x94\xaa\x18\xb44]Y\xaf\xe8\xba\x821\xe2" +
	"muG\x1c\x00Y`\x90\x05\xe7\x1b\x14\xc4\x96'\x0c" +
	"\x139`\x90#\xc3O\xe7P\xd7L\x93\x087'T" +
	"Ui6\x8b\xa2\xb2.\xc7\x0d\x90\xbc\xe9\x04\x02\xf5\x00" +
	"\x12\xe7Ai\x12\x83V,\xd1\xa9\x1a\xa6\xae\x80G\x8e" +
	"\xa3`5\\\x1b(\xee\x9c\xbf\xb6\x1f\x00Qp\xf9e" +
	"*\xd6\xc4\x92~\x0dE\x8d\x15\xd5*\x05FG\xbbi" +
	"\xa4\xbfcED\xabU\xe2\x09\xb3@!y%+\xf6" +
	"\xb9\x86\x856\xfa\x84\xb2z`\x84b\x16\x1d\xea\xe2B" +
	"HM!\x9f|\x1b\xcfZ-\x8aI\xeb\x00\x8fnV" +
	"!9\xd2\xf0\xc9c\x14qX\xcf#\xaa\xa9\xe8\xeb\xe5" +
	"f%\xdc\xdej\x98\x8aZ\xd7\xac\x15\xd5V*4A" +
	"w\xd9\x15\x00R\xae\x07\xa5q\x0cVn\x90\xd5X\xbb" +
	"\x82\x82u\xb5\xba\xb1\xf1\xc5\xa2\xbb\xbbF\x16\xec\xad\x88" +
	"h\xab\x15\xb33\xa1\xb7\x85[\x14\x93\xd6FK\xab\xee" +
	"Z-\xc7\x95\xa2h\x01\xed\xab\xdb\x7f\xb5\xe3\xbf[\x8e" +
	"\xc5t\xc50\xb2\xcc'3\xdf51-\xed\xce\x05\x13" +
	"\xe2\xae\xc8\x83R\xa9\x03\x93\x99%\x00\xd2o<(\xcd" +
	"f\xb0[K\x82\xc3\x86\x06O\xce(8r\x971\xc1" +
	"\xa8\xa2\x1b4\xa0IK\xe3ImQ\xc4\xa8\xc7'\xe5" +
	"\xa2K^\x08\x1f/\x9e\xfe\xdb\xa5\xc1\xff\xbcN~\xbb" +
	"GL;\xe2\xd1\xdb$\xaf[\x01\x04l\xb2l\xd0\x03" +
	"['\xb7$go\xeb\x89K\xc3\xcbt{\xf6\xf6\xd2" +
	"A[\xb6\x84\xfc\xe7\x81\x11&\xd3\xd9\xd3nC\x12J" +
	"\xc9\xf1\xd3\xbf\xa0=\x00V\x8e+\xc3q0\xea\xb8\x8a" +
	"j\x93@\x80a\x0c(qF\xc5o <\x12\x9c\x9d" +
	"\x9a\x05\x08\x8e\xbb\xb0\x0dE=+\xb3\xdc\x10\x181\x1f" +
	"W\x1fS\x0e\x80\x0a\x83\x97\xd2\xc4\xde;h\xef|A" +
	"(\x01F\xf0\xb1<\xe1\xdb\xf0ZGp1*\xf3c" +
	"@GHc\xa7\xde\x91\x9d\xee\xb8b\x18r\x8b\x82\x01" +
	"`0\x00h\xe9\x8a\xd9\xa1\xabI\x82\x8d\x81\xa1\xd1\xd0" +
	"\xfb\xd4l\xcb\x94\xad\xacc[\xe1\x12\xae\x0e\x8d\xc8\x96" +
	"\x1c\x07\x801u\xcb\x8d\xfa\x88jV&\x93w\xe1>" +
	"\xbd\xa8F\xc1=\xe3\x82\x16EyeSb#\x019" +
	"\xe1@z'\x0aXo\xd5\xa8\xcdz\x97f\xb6\x82'" +
	"\xa1\x8e\xa6\xb7\x8a\xcb\x06C\xce}@\x0c=\x81\xfcd" +
	"\xeb\xf8S\x81:\xd5\xffG\xd3%%3\xe9\x8d\xfd\xb8" +
	"\xba\xf9(\xba\xd8\x8a\x19r\xd6\xf7\x18=\xb1\xe5\xa6N" +
	"n\x09\xdbmO\xa0\x9a\xda\xb4\x9ce%\x89P\xe2\x10" +
	"!\x80\xdfY)&LuT\x94W\x13\xaa\x029\xac" +
	"\xd9n@\xce0\xa9\xa38\xe7SXI-3\xfb5" +
	"\x80\xf6\x9bZ(\xab\xb5\x05\xcd~$\xa3\xfdD\x14\xf2" +
	"k\x93\xcb\xcc\xdeJ\x80Z\x15Z6k\xe8\xc9Mk" +
	"\xb49\xe0\xd6\x05\xfb\x7f\x04\xb4\xdf\x95\x82PMu\xa1" +
	";E\x94L\x19\xcc>\xd7\x1f,V\x11m\x09\x99\x8c" +
	"\xc70F<c\xb2\x8aL\xb5kA\xb5\x93\x19\xcd\x9d" +
	"\x8dy\xc0`\x1e`w\x87\xa6\xb9\xcf\x8f\xa1\xb0\x8f\x0b" +
	"\xc6'\xd1+\xf2:\xf8\xf1\xb6\xed\x08\x1a|\x1f\x00\x00" +
	"\xff\xff\xc98\xdf\xb8"

func init() {
	schemas.Register(schema_f44732d435305f86,
		0x856e71a6a4f22bba,
		0x8a60e53250a32321,
		0x8e43fd8e213b1811,
		0x905dd76b298b3130,
		0x9381253786627ecf,
		0x9d5f1f6efcf7bbc4,
		0xa1d8815a262abc49,
		0xa5b3215660e038f2,
		0xa982576b7a2a2040,
		0xb57bd5aef30c4b61,
		0xb62b02486ebe26ed,
		0xc6212e1217d001ce,
		0xc6ca13f7c8dbd102,
		0xcb83a480981bc290,
		0xcdd1222d14073645,
		0xcf43ebe6a5a6f1b4,
		0xcf9e3f33950df819,
		0xd14a2ec2bad45f69,
		0xd77df9f44cfcde33,
		0xdd1700c1eb725eb4,
		0xe2d94cf90fe4078d,
		0xe32c506ee93ed6fa,
		0xeab20e1af07806b4,
		0xed10beb11e7383e9,
		0xeeb98f9937d32c0b,
		0xf53aa3a93e49003b,
		0xfd226ae4c6bd2b1e)
}
