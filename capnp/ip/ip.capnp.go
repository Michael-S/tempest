// Code generated by capnpc-go. DO NOT EDIT.

package ip

import (
	context "context"
	strconv "strconv"
	supervisor "zenhack.net/go/sandstorm/capnp/supervisor"
	util "zenhack.net/go/sandstorm/capnp/util"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
	persistent "zombiezen.com/go/capnproto2/std/capnp/persistent"
)

type IpNetwork struct{ Client *capnp.Client }

// IpNetwork_TypeID is the unique identifier for the type IpNetwork.
const IpNetwork_TypeID = 0xa982576b7a2a2040

func (c IpNetwork) GetRemoteHost(ctx context.Context, params func(IpNetwork_getRemoteHost_Params) error) (IpNetwork_getRemoteHost_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHost",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpNetwork_getRemoteHost_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpNetwork_getRemoteHost_Results_Future{Future: ans.Future()}, release
}
func (c IpNetwork) GetRemoteHostByName(ctx context.Context, params func(IpNetwork_getRemoteHostByName_Params) error) (IpNetwork_getRemoteHostByName_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHostByName",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpNetwork_getRemoteHostByName_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpNetwork_getRemoteHostByName_Results_Future{Future: ans.Future()}, release
}

// A IpNetwork_Server is a IpNetwork with a local implementation.
type IpNetwork_Server interface {
	GetRemoteHost(context.Context, IpNetwork_getRemoteHost) error

	GetRemoteHostByName(context.Context, IpNetwork_getRemoteHostByName) error
}

// IpNetwork_NewServer creates a new Server from an implementation of IpNetwork_Server.
func IpNetwork_NewServer(s IpNetwork_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(IpNetwork_Methods(nil, s), s, c, policy)
}

// IpNetwork_ServerToClient creates a new Client from an implementation of IpNetwork_Server.
// The caller is responsible for calling Release on the returned Client.
func IpNetwork_ServerToClient(s IpNetwork_Server, policy *server.Policy) IpNetwork {
	return IpNetwork{Client: capnp.NewClient(IpNetwork_NewServer(s, policy))}
}

// IpNetwork_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func IpNetwork_Methods(methods []server.Method, s IpNetwork_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHost",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetRemoteHost(ctx, IpNetwork_getRemoteHost{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHostByName",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetRemoteHostByName(ctx, IpNetwork_getRemoteHostByName{call})
		},
	})

	return methods
}

// IpNetwork_getRemoteHost holds the state for a server call to IpNetwork.getRemoteHost.
// See server.Call for documentation.
type IpNetwork_getRemoteHost struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpNetwork_getRemoteHost) Args() IpNetwork_getRemoteHost_Params {
	return IpNetwork_getRemoteHost_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IpNetwork_getRemoteHost) AllocResults() (IpNetwork_getRemoteHost_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHost_Results{Struct: r}, err
}

// IpNetwork_getRemoteHostByName holds the state for a server call to IpNetwork.getRemoteHostByName.
// See server.Call for documentation.
type IpNetwork_getRemoteHostByName struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpNetwork_getRemoteHostByName) Args() IpNetwork_getRemoteHostByName_Params {
	return IpNetwork_getRemoteHostByName_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IpNetwork_getRemoteHostByName) AllocResults() (IpNetwork_getRemoteHostByName_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHostByName_Results{Struct: r}, err
}

type IpNetwork_PowerboxTag struct{ capnp.Struct }

// IpNetwork_PowerboxTag_TypeID is the unique identifier for the type IpNetwork_PowerboxTag.
const IpNetwork_PowerboxTag_TypeID = 0xcf9e3f33950df819

func NewIpNetwork_PowerboxTag(s *capnp.Segment) (IpNetwork_PowerboxTag, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_PowerboxTag{st}, err
}

func NewRootIpNetwork_PowerboxTag(s *capnp.Segment) (IpNetwork_PowerboxTag, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_PowerboxTag{st}, err
}

func ReadRootIpNetwork_PowerboxTag(msg *capnp.Message) (IpNetwork_PowerboxTag, error) {
	root, err := msg.Root()
	return IpNetwork_PowerboxTag{root.Struct()}, err
}

func (s IpNetwork_PowerboxTag) String() string {
	str, _ := text.Marshal(0xcf9e3f33950df819, s.Struct)
	return str
}

func (s IpNetwork_PowerboxTag) Encryption() (IpNetwork_PowerboxTag_Encryption, error) {
	p, err := s.Struct.Ptr(0)
	return IpNetwork_PowerboxTag_Encryption{Struct: p.Struct()}, err
}

func (s IpNetwork_PowerboxTag) HasEncryption() bool {
	return s.Struct.HasPtr(0)
}

func (s IpNetwork_PowerboxTag) SetEncryption(v IpNetwork_PowerboxTag_Encryption) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEncryption sets the encryption field to a newly
// allocated IpNetwork_PowerboxTag_Encryption struct, preferring placement in s's segment.
func (s IpNetwork_PowerboxTag) NewEncryption() (IpNetwork_PowerboxTag_Encryption, error) {
	ss, err := NewIpNetwork_PowerboxTag_Encryption(s.Struct.Segment())
	if err != nil {
		return IpNetwork_PowerboxTag_Encryption{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// IpNetwork_PowerboxTag_List is a list of IpNetwork_PowerboxTag.
type IpNetwork_PowerboxTag_List struct{ capnp.List }

// NewIpNetwork_PowerboxTag creates a new list of IpNetwork_PowerboxTag.
func NewIpNetwork_PowerboxTag_List(s *capnp.Segment, sz int32) (IpNetwork_PowerboxTag_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpNetwork_PowerboxTag_List{l}, err
}

func (s IpNetwork_PowerboxTag_List) At(i int) IpNetwork_PowerboxTag {
	return IpNetwork_PowerboxTag{s.List.Struct(i)}
}

func (s IpNetwork_PowerboxTag_List) Set(i int, v IpNetwork_PowerboxTag) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpNetwork_PowerboxTag_List) String() string {
	str, _ := text.MarshalList(0xcf9e3f33950df819, s.List)
	return str
}

// IpNetwork_PowerboxTag_Future is a wrapper for a IpNetwork_PowerboxTag promised by a client call.
type IpNetwork_PowerboxTag_Future struct{ *capnp.Future }

func (p IpNetwork_PowerboxTag_Future) Struct() (IpNetwork_PowerboxTag, error) {
	s, err := p.Future.Struct()
	return IpNetwork_PowerboxTag{s}, err
}

func (p IpNetwork_PowerboxTag_Future) Encryption() IpNetwork_PowerboxTag_Encryption_Future {
	return IpNetwork_PowerboxTag_Encryption_Future{Future: p.Future.Field(0, nil)}
}

type IpNetwork_PowerboxTag_Encryption struct{ capnp.Struct }
type IpNetwork_PowerboxTag_Encryption_Which uint16

const (
	IpNetwork_PowerboxTag_Encryption_Which_none IpNetwork_PowerboxTag_Encryption_Which = 0
	IpNetwork_PowerboxTag_Encryption_Which_tls  IpNetwork_PowerboxTag_Encryption_Which = 1
)

func (w IpNetwork_PowerboxTag_Encryption_Which) String() string {
	const s = "nonetls"
	switch w {
	case IpNetwork_PowerboxTag_Encryption_Which_none:
		return s[0:4]
	case IpNetwork_PowerboxTag_Encryption_Which_tls:
		return s[4:7]

	}
	return "IpNetwork_PowerboxTag_Encryption_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// IpNetwork_PowerboxTag_Encryption_TypeID is the unique identifier for the type IpNetwork_PowerboxTag_Encryption.
const IpNetwork_PowerboxTag_Encryption_TypeID = 0xe2d94cf90fe4078d

func NewIpNetwork_PowerboxTag_Encryption(s *capnp.Segment) (IpNetwork_PowerboxTag_Encryption, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpNetwork_PowerboxTag_Encryption{st}, err
}

func NewRootIpNetwork_PowerboxTag_Encryption(s *capnp.Segment) (IpNetwork_PowerboxTag_Encryption, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpNetwork_PowerboxTag_Encryption{st}, err
}

func ReadRootIpNetwork_PowerboxTag_Encryption(msg *capnp.Message) (IpNetwork_PowerboxTag_Encryption, error) {
	root, err := msg.Root()
	return IpNetwork_PowerboxTag_Encryption{root.Struct()}, err
}

func (s IpNetwork_PowerboxTag_Encryption) String() string {
	str, _ := text.Marshal(0xe2d94cf90fe4078d, s.Struct)
	return str
}

func (s IpNetwork_PowerboxTag_Encryption) Which() IpNetwork_PowerboxTag_Encryption_Which {
	return IpNetwork_PowerboxTag_Encryption_Which(s.Struct.Uint16(0))
}
func (s IpNetwork_PowerboxTag_Encryption) SetNone() {
	s.Struct.SetUint16(0, 0)

}

func (s IpNetwork_PowerboxTag_Encryption) SetTls() {
	s.Struct.SetUint16(0, 1)

}

// IpNetwork_PowerboxTag_Encryption_List is a list of IpNetwork_PowerboxTag_Encryption.
type IpNetwork_PowerboxTag_Encryption_List struct{ capnp.List }

// NewIpNetwork_PowerboxTag_Encryption creates a new list of IpNetwork_PowerboxTag_Encryption.
func NewIpNetwork_PowerboxTag_Encryption_List(s *capnp.Segment, sz int32) (IpNetwork_PowerboxTag_Encryption_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return IpNetwork_PowerboxTag_Encryption_List{l}, err
}

func (s IpNetwork_PowerboxTag_Encryption_List) At(i int) IpNetwork_PowerboxTag_Encryption {
	return IpNetwork_PowerboxTag_Encryption{s.List.Struct(i)}
}

func (s IpNetwork_PowerboxTag_Encryption_List) Set(i int, v IpNetwork_PowerboxTag_Encryption) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpNetwork_PowerboxTag_Encryption_List) String() string {
	str, _ := text.MarshalList(0xe2d94cf90fe4078d, s.List)
	return str
}

// IpNetwork_PowerboxTag_Encryption_Future is a wrapper for a IpNetwork_PowerboxTag_Encryption promised by a client call.
type IpNetwork_PowerboxTag_Encryption_Future struct{ *capnp.Future }

func (p IpNetwork_PowerboxTag_Encryption_Future) Struct() (IpNetwork_PowerboxTag_Encryption, error) {
	s, err := p.Future.Struct()
	return IpNetwork_PowerboxTag_Encryption{s}, err
}

type IpNetwork_getRemoteHost_Params struct{ capnp.Struct }

// IpNetwork_getRemoteHost_Params_TypeID is the unique identifier for the type IpNetwork_getRemoteHost_Params.
const IpNetwork_getRemoteHost_Params_TypeID = 0xdd1700c1eb725eb4

func NewIpNetwork_getRemoteHost_Params(s *capnp.Segment) (IpNetwork_getRemoteHost_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHost_Params{st}, err
}

func NewRootIpNetwork_getRemoteHost_Params(s *capnp.Segment) (IpNetwork_getRemoteHost_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHost_Params{st}, err
}

func ReadRootIpNetwork_getRemoteHost_Params(msg *capnp.Message) (IpNetwork_getRemoteHost_Params, error) {
	root, err := msg.Root()
	return IpNetwork_getRemoteHost_Params{root.Struct()}, err
}

func (s IpNetwork_getRemoteHost_Params) String() string {
	str, _ := text.Marshal(0xdd1700c1eb725eb4, s.Struct)
	return str
}

func (s IpNetwork_getRemoteHost_Params) Address() (IpAddress, error) {
	p, err := s.Struct.Ptr(0)
	return IpAddress{Struct: p.Struct()}, err
}

func (s IpNetwork_getRemoteHost_Params) HasAddress() bool {
	return s.Struct.HasPtr(0)
}

func (s IpNetwork_getRemoteHost_Params) SetAddress(v IpAddress) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddress sets the address field to a newly
// allocated IpAddress struct, preferring placement in s's segment.
func (s IpNetwork_getRemoteHost_Params) NewAddress() (IpAddress, error) {
	ss, err := NewIpAddress(s.Struct.Segment())
	if err != nil {
		return IpAddress{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// IpNetwork_getRemoteHost_Params_List is a list of IpNetwork_getRemoteHost_Params.
type IpNetwork_getRemoteHost_Params_List struct{ capnp.List }

// NewIpNetwork_getRemoteHost_Params creates a new list of IpNetwork_getRemoteHost_Params.
func NewIpNetwork_getRemoteHost_Params_List(s *capnp.Segment, sz int32) (IpNetwork_getRemoteHost_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpNetwork_getRemoteHost_Params_List{l}, err
}

func (s IpNetwork_getRemoteHost_Params_List) At(i int) IpNetwork_getRemoteHost_Params {
	return IpNetwork_getRemoteHost_Params{s.List.Struct(i)}
}

func (s IpNetwork_getRemoteHost_Params_List) Set(i int, v IpNetwork_getRemoteHost_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpNetwork_getRemoteHost_Params_List) String() string {
	str, _ := text.MarshalList(0xdd1700c1eb725eb4, s.List)
	return str
}

// IpNetwork_getRemoteHost_Params_Future is a wrapper for a IpNetwork_getRemoteHost_Params promised by a client call.
type IpNetwork_getRemoteHost_Params_Future struct{ *capnp.Future }

func (p IpNetwork_getRemoteHost_Params_Future) Struct() (IpNetwork_getRemoteHost_Params, error) {
	s, err := p.Future.Struct()
	return IpNetwork_getRemoteHost_Params{s}, err
}

func (p IpNetwork_getRemoteHost_Params_Future) Address() IpAddress_Future {
	return IpAddress_Future{Future: p.Future.Field(0, nil)}
}

type IpNetwork_getRemoteHost_Results struct{ capnp.Struct }

// IpNetwork_getRemoteHost_Results_TypeID is the unique identifier for the type IpNetwork_getRemoteHost_Results.
const IpNetwork_getRemoteHost_Results_TypeID = 0xb57bd5aef30c4b61

func NewIpNetwork_getRemoteHost_Results(s *capnp.Segment) (IpNetwork_getRemoteHost_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHost_Results{st}, err
}

func NewRootIpNetwork_getRemoteHost_Results(s *capnp.Segment) (IpNetwork_getRemoteHost_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHost_Results{st}, err
}

func ReadRootIpNetwork_getRemoteHost_Results(msg *capnp.Message) (IpNetwork_getRemoteHost_Results, error) {
	root, err := msg.Root()
	return IpNetwork_getRemoteHost_Results{root.Struct()}, err
}

func (s IpNetwork_getRemoteHost_Results) String() string {
	str, _ := text.Marshal(0xb57bd5aef30c4b61, s.Struct)
	return str
}

func (s IpNetwork_getRemoteHost_Results) Host() IpRemoteHost {
	p, _ := s.Struct.Ptr(0)
	return IpRemoteHost{Client: p.Interface().Client()}
}

func (s IpNetwork_getRemoteHost_Results) HasHost() bool {
	return s.Struct.HasPtr(0)
}

func (s IpNetwork_getRemoteHost_Results) SetHost(v IpRemoteHost) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpNetwork_getRemoteHost_Results_List is a list of IpNetwork_getRemoteHost_Results.
type IpNetwork_getRemoteHost_Results_List struct{ capnp.List }

// NewIpNetwork_getRemoteHost_Results creates a new list of IpNetwork_getRemoteHost_Results.
func NewIpNetwork_getRemoteHost_Results_List(s *capnp.Segment, sz int32) (IpNetwork_getRemoteHost_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpNetwork_getRemoteHost_Results_List{l}, err
}

func (s IpNetwork_getRemoteHost_Results_List) At(i int) IpNetwork_getRemoteHost_Results {
	return IpNetwork_getRemoteHost_Results{s.List.Struct(i)}
}

func (s IpNetwork_getRemoteHost_Results_List) Set(i int, v IpNetwork_getRemoteHost_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpNetwork_getRemoteHost_Results_List) String() string {
	str, _ := text.MarshalList(0xb57bd5aef30c4b61, s.List)
	return str
}

// IpNetwork_getRemoteHost_Results_Future is a wrapper for a IpNetwork_getRemoteHost_Results promised by a client call.
type IpNetwork_getRemoteHost_Results_Future struct{ *capnp.Future }

func (p IpNetwork_getRemoteHost_Results_Future) Struct() (IpNetwork_getRemoteHost_Results, error) {
	s, err := p.Future.Struct()
	return IpNetwork_getRemoteHost_Results{s}, err
}

func (p IpNetwork_getRemoteHost_Results_Future) Host() IpRemoteHost {
	return IpRemoteHost{Client: p.Future.Field(0, nil).Client()}
}

type IpNetwork_getRemoteHostByName_Params struct{ capnp.Struct }

// IpNetwork_getRemoteHostByName_Params_TypeID is the unique identifier for the type IpNetwork_getRemoteHostByName_Params.
const IpNetwork_getRemoteHostByName_Params_TypeID = 0x9d5f1f6efcf7bbc4

func NewIpNetwork_getRemoteHostByName_Params(s *capnp.Segment) (IpNetwork_getRemoteHostByName_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHostByName_Params{st}, err
}

func NewRootIpNetwork_getRemoteHostByName_Params(s *capnp.Segment) (IpNetwork_getRemoteHostByName_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHostByName_Params{st}, err
}

func ReadRootIpNetwork_getRemoteHostByName_Params(msg *capnp.Message) (IpNetwork_getRemoteHostByName_Params, error) {
	root, err := msg.Root()
	return IpNetwork_getRemoteHostByName_Params{root.Struct()}, err
}

func (s IpNetwork_getRemoteHostByName_Params) String() string {
	str, _ := text.Marshal(0x9d5f1f6efcf7bbc4, s.Struct)
	return str
}

func (s IpNetwork_getRemoteHostByName_Params) Address() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s IpNetwork_getRemoteHostByName_Params) HasAddress() bool {
	return s.Struct.HasPtr(0)
}

func (s IpNetwork_getRemoteHostByName_Params) AddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s IpNetwork_getRemoteHostByName_Params) SetAddress(v string) error {
	return s.Struct.SetText(0, v)
}

// IpNetwork_getRemoteHostByName_Params_List is a list of IpNetwork_getRemoteHostByName_Params.
type IpNetwork_getRemoteHostByName_Params_List struct{ capnp.List }

// NewIpNetwork_getRemoteHostByName_Params creates a new list of IpNetwork_getRemoteHostByName_Params.
func NewIpNetwork_getRemoteHostByName_Params_List(s *capnp.Segment, sz int32) (IpNetwork_getRemoteHostByName_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpNetwork_getRemoteHostByName_Params_List{l}, err
}

func (s IpNetwork_getRemoteHostByName_Params_List) At(i int) IpNetwork_getRemoteHostByName_Params {
	return IpNetwork_getRemoteHostByName_Params{s.List.Struct(i)}
}

func (s IpNetwork_getRemoteHostByName_Params_List) Set(i int, v IpNetwork_getRemoteHostByName_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpNetwork_getRemoteHostByName_Params_List) String() string {
	str, _ := text.MarshalList(0x9d5f1f6efcf7bbc4, s.List)
	return str
}

// IpNetwork_getRemoteHostByName_Params_Future is a wrapper for a IpNetwork_getRemoteHostByName_Params promised by a client call.
type IpNetwork_getRemoteHostByName_Params_Future struct{ *capnp.Future }

func (p IpNetwork_getRemoteHostByName_Params_Future) Struct() (IpNetwork_getRemoteHostByName_Params, error) {
	s, err := p.Future.Struct()
	return IpNetwork_getRemoteHostByName_Params{s}, err
}

type IpNetwork_getRemoteHostByName_Results struct{ capnp.Struct }

// IpNetwork_getRemoteHostByName_Results_TypeID is the unique identifier for the type IpNetwork_getRemoteHostByName_Results.
const IpNetwork_getRemoteHostByName_Results_TypeID = 0xd14a2ec2bad45f69

func NewIpNetwork_getRemoteHostByName_Results(s *capnp.Segment) (IpNetwork_getRemoteHostByName_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHostByName_Results{st}, err
}

func NewRootIpNetwork_getRemoteHostByName_Results(s *capnp.Segment) (IpNetwork_getRemoteHostByName_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpNetwork_getRemoteHostByName_Results{st}, err
}

func ReadRootIpNetwork_getRemoteHostByName_Results(msg *capnp.Message) (IpNetwork_getRemoteHostByName_Results, error) {
	root, err := msg.Root()
	return IpNetwork_getRemoteHostByName_Results{root.Struct()}, err
}

func (s IpNetwork_getRemoteHostByName_Results) String() string {
	str, _ := text.Marshal(0xd14a2ec2bad45f69, s.Struct)
	return str
}

func (s IpNetwork_getRemoteHostByName_Results) Host() IpRemoteHost {
	p, _ := s.Struct.Ptr(0)
	return IpRemoteHost{Client: p.Interface().Client()}
}

func (s IpNetwork_getRemoteHostByName_Results) HasHost() bool {
	return s.Struct.HasPtr(0)
}

func (s IpNetwork_getRemoteHostByName_Results) SetHost(v IpRemoteHost) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpNetwork_getRemoteHostByName_Results_List is a list of IpNetwork_getRemoteHostByName_Results.
type IpNetwork_getRemoteHostByName_Results_List struct{ capnp.List }

// NewIpNetwork_getRemoteHostByName_Results creates a new list of IpNetwork_getRemoteHostByName_Results.
func NewIpNetwork_getRemoteHostByName_Results_List(s *capnp.Segment, sz int32) (IpNetwork_getRemoteHostByName_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpNetwork_getRemoteHostByName_Results_List{l}, err
}

func (s IpNetwork_getRemoteHostByName_Results_List) At(i int) IpNetwork_getRemoteHostByName_Results {
	return IpNetwork_getRemoteHostByName_Results{s.List.Struct(i)}
}

func (s IpNetwork_getRemoteHostByName_Results_List) Set(i int, v IpNetwork_getRemoteHostByName_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpNetwork_getRemoteHostByName_Results_List) String() string {
	str, _ := text.MarshalList(0xd14a2ec2bad45f69, s.List)
	return str
}

// IpNetwork_getRemoteHostByName_Results_Future is a wrapper for a IpNetwork_getRemoteHostByName_Results promised by a client call.
type IpNetwork_getRemoteHostByName_Results_Future struct{ *capnp.Future }

func (p IpNetwork_getRemoteHostByName_Results_Future) Struct() (IpNetwork_getRemoteHostByName_Results, error) {
	s, err := p.Future.Struct()
	return IpNetwork_getRemoteHostByName_Results{s}, err
}

func (p IpNetwork_getRemoteHostByName_Results_Future) Host() IpRemoteHost {
	return IpRemoteHost{Client: p.Future.Field(0, nil).Client()}
}

type IpAddress struct{ capnp.Struct }

// IpAddress_TypeID is the unique identifier for the type IpAddress.
const IpAddress_TypeID = 0xeeb98f9937d32c0b

func NewIpAddress(s *capnp.Segment) (IpAddress, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return IpAddress{st}, err
}

func NewRootIpAddress(s *capnp.Segment) (IpAddress, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return IpAddress{st}, err
}

func ReadRootIpAddress(msg *capnp.Message) (IpAddress, error) {
	root, err := msg.Root()
	return IpAddress{root.Struct()}, err
}

func (s IpAddress) String() string {
	str, _ := text.Marshal(0xeeb98f9937d32c0b, s.Struct)
	return str
}

func (s IpAddress) Lower64() uint64 {
	return s.Struct.Uint64(0)
}

func (s IpAddress) SetLower64(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s IpAddress) Upper64() uint64 {
	return s.Struct.Uint64(8)
}

func (s IpAddress) SetUpper64(v uint64) {
	s.Struct.SetUint64(8, v)
}

// IpAddress_List is a list of IpAddress.
type IpAddress_List struct{ capnp.List }

// NewIpAddress creates a new list of IpAddress.
func NewIpAddress_List(s *capnp.Segment, sz int32) (IpAddress_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return IpAddress_List{l}, err
}

func (s IpAddress_List) At(i int) IpAddress { return IpAddress{s.List.Struct(i)} }

func (s IpAddress_List) Set(i int, v IpAddress) error { return s.List.SetStruct(i, v.Struct) }

func (s IpAddress_List) String() string {
	str, _ := text.MarshalList(0xeeb98f9937d32c0b, s.List)
	return str
}

// IpAddress_Future is a wrapper for a IpAddress promised by a client call.
type IpAddress_Future struct{ *capnp.Future }

func (p IpAddress_Future) Struct() (IpAddress, error) {
	s, err := p.Future.Struct()
	return IpAddress{s}, err
}

type IpInterface struct{ Client *capnp.Client }

// IpInterface_TypeID is the unique identifier for the type IpInterface.
const IpInterface_TypeID = 0xe32c506ee93ed6fa

func (c IpInterface) ListenTcp(ctx context.Context, params func(IpInterface_listenTcp_Params) error) (IpInterface_listenTcp_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenTcp",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpInterface_listenTcp_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpInterface_listenTcp_Results_Future{Future: ans.Future()}, release
}
func (c IpInterface) ListenUdp(ctx context.Context, params func(IpInterface_listenUdp_Params) error) (IpInterface_listenUdp_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenUdp",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpInterface_listenUdp_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpInterface_listenUdp_Results_Future{Future: ans.Future()}, release
}

// A IpInterface_Server is a IpInterface with a local implementation.
type IpInterface_Server interface {
	ListenTcp(context.Context, IpInterface_listenTcp) error

	ListenUdp(context.Context, IpInterface_listenUdp) error
}

// IpInterface_NewServer creates a new Server from an implementation of IpInterface_Server.
func IpInterface_NewServer(s IpInterface_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(IpInterface_Methods(nil, s), s, c, policy)
}

// IpInterface_ServerToClient creates a new Client from an implementation of IpInterface_Server.
// The caller is responsible for calling Release on the returned Client.
func IpInterface_ServerToClient(s IpInterface_Server, policy *server.Policy) IpInterface {
	return IpInterface{Client: capnp.NewClient(IpInterface_NewServer(s, policy))}
}

// IpInterface_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func IpInterface_Methods(methods []server.Method, s IpInterface_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenTcp",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListenTcp(ctx, IpInterface_listenTcp{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenUdp",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListenUdp(ctx, IpInterface_listenUdp{call})
		},
	})

	return methods
}

// IpInterface_listenTcp holds the state for a server call to IpInterface.listenTcp.
// See server.Call for documentation.
type IpInterface_listenTcp struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpInterface_listenTcp) Args() IpInterface_listenTcp_Params {
	return IpInterface_listenTcp_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IpInterface_listenTcp) AllocResults() (IpInterface_listenTcp_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenTcp_Results{Struct: r}, err
}

// IpInterface_listenUdp holds the state for a server call to IpInterface.listenUdp.
// See server.Call for documentation.
type IpInterface_listenUdp struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpInterface_listenUdp) Args() IpInterface_listenUdp_Params {
	return IpInterface_listenUdp_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IpInterface_listenUdp) AllocResults() (IpInterface_listenUdp_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenUdp_Results{Struct: r}, err
}

type IpInterface_listenTcp_Params struct{ capnp.Struct }

// IpInterface_listenTcp_Params_TypeID is the unique identifier for the type IpInterface_listenTcp_Params.
const IpInterface_listenTcp_Params_TypeID = 0xfd226ae4c6bd2b1e

func NewIpInterface_listenTcp_Params(s *capnp.Segment) (IpInterface_listenTcp_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpInterface_listenTcp_Params{st}, err
}

func NewRootIpInterface_listenTcp_Params(s *capnp.Segment) (IpInterface_listenTcp_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpInterface_listenTcp_Params{st}, err
}

func ReadRootIpInterface_listenTcp_Params(msg *capnp.Message) (IpInterface_listenTcp_Params, error) {
	root, err := msg.Root()
	return IpInterface_listenTcp_Params{root.Struct()}, err
}

func (s IpInterface_listenTcp_Params) String() string {
	str, _ := text.Marshal(0xfd226ae4c6bd2b1e, s.Struct)
	return str
}

func (s IpInterface_listenTcp_Params) PortNum() uint16 {
	return s.Struct.Uint16(0)
}

func (s IpInterface_listenTcp_Params) SetPortNum(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s IpInterface_listenTcp_Params) Port() TcpPort {
	p, _ := s.Struct.Ptr(0)
	return TcpPort{Client: p.Interface().Client()}
}

func (s IpInterface_listenTcp_Params) HasPort() bool {
	return s.Struct.HasPtr(0)
}

func (s IpInterface_listenTcp_Params) SetPort(v TcpPort) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpInterface_listenTcp_Params_List is a list of IpInterface_listenTcp_Params.
type IpInterface_listenTcp_Params_List struct{ capnp.List }

// NewIpInterface_listenTcp_Params creates a new list of IpInterface_listenTcp_Params.
func NewIpInterface_listenTcp_Params_List(s *capnp.Segment, sz int32) (IpInterface_listenTcp_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return IpInterface_listenTcp_Params_List{l}, err
}

func (s IpInterface_listenTcp_Params_List) At(i int) IpInterface_listenTcp_Params {
	return IpInterface_listenTcp_Params{s.List.Struct(i)}
}

func (s IpInterface_listenTcp_Params_List) Set(i int, v IpInterface_listenTcp_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpInterface_listenTcp_Params_List) String() string {
	str, _ := text.MarshalList(0xfd226ae4c6bd2b1e, s.List)
	return str
}

// IpInterface_listenTcp_Params_Future is a wrapper for a IpInterface_listenTcp_Params promised by a client call.
type IpInterface_listenTcp_Params_Future struct{ *capnp.Future }

func (p IpInterface_listenTcp_Params_Future) Struct() (IpInterface_listenTcp_Params, error) {
	s, err := p.Future.Struct()
	return IpInterface_listenTcp_Params{s}, err
}

func (p IpInterface_listenTcp_Params_Future) Port() TcpPort {
	return TcpPort{Client: p.Future.Field(0, nil).Client()}
}

type IpInterface_listenTcp_Results struct{ capnp.Struct }

// IpInterface_listenTcp_Results_TypeID is the unique identifier for the type IpInterface_listenTcp_Results.
const IpInterface_listenTcp_Results_TypeID = 0x9381253786627ecf

func NewIpInterface_listenTcp_Results(s *capnp.Segment) (IpInterface_listenTcp_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenTcp_Results{st}, err
}

func NewRootIpInterface_listenTcp_Results(s *capnp.Segment) (IpInterface_listenTcp_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenTcp_Results{st}, err
}

func ReadRootIpInterface_listenTcp_Results(msg *capnp.Message) (IpInterface_listenTcp_Results, error) {
	root, err := msg.Root()
	return IpInterface_listenTcp_Results{root.Struct()}, err
}

func (s IpInterface_listenTcp_Results) String() string {
	str, _ := text.Marshal(0x9381253786627ecf, s.Struct)
	return str
}

func (s IpInterface_listenTcp_Results) Handle() util.Handle {
	p, _ := s.Struct.Ptr(0)
	return util.Handle{Client: p.Interface().Client()}
}

func (s IpInterface_listenTcp_Results) HasHandle() bool {
	return s.Struct.HasPtr(0)
}

func (s IpInterface_listenTcp_Results) SetHandle(v util.Handle) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpInterface_listenTcp_Results_List is a list of IpInterface_listenTcp_Results.
type IpInterface_listenTcp_Results_List struct{ capnp.List }

// NewIpInterface_listenTcp_Results creates a new list of IpInterface_listenTcp_Results.
func NewIpInterface_listenTcp_Results_List(s *capnp.Segment, sz int32) (IpInterface_listenTcp_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpInterface_listenTcp_Results_List{l}, err
}

func (s IpInterface_listenTcp_Results_List) At(i int) IpInterface_listenTcp_Results {
	return IpInterface_listenTcp_Results{s.List.Struct(i)}
}

func (s IpInterface_listenTcp_Results_List) Set(i int, v IpInterface_listenTcp_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpInterface_listenTcp_Results_List) String() string {
	str, _ := text.MarshalList(0x9381253786627ecf, s.List)
	return str
}

// IpInterface_listenTcp_Results_Future is a wrapper for a IpInterface_listenTcp_Results promised by a client call.
type IpInterface_listenTcp_Results_Future struct{ *capnp.Future }

func (p IpInterface_listenTcp_Results_Future) Struct() (IpInterface_listenTcp_Results, error) {
	s, err := p.Future.Struct()
	return IpInterface_listenTcp_Results{s}, err
}

func (p IpInterface_listenTcp_Results_Future) Handle() util.Handle {
	return util.Handle{Client: p.Future.Field(0, nil).Client()}
}

type IpInterface_listenUdp_Params struct{ capnp.Struct }

// IpInterface_listenUdp_Params_TypeID is the unique identifier for the type IpInterface_listenUdp_Params.
const IpInterface_listenUdp_Params_TypeID = 0xa1d8815a262abc49

func NewIpInterface_listenUdp_Params(s *capnp.Segment) (IpInterface_listenUdp_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpInterface_listenUdp_Params{st}, err
}

func NewRootIpInterface_listenUdp_Params(s *capnp.Segment) (IpInterface_listenUdp_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpInterface_listenUdp_Params{st}, err
}

func ReadRootIpInterface_listenUdp_Params(msg *capnp.Message) (IpInterface_listenUdp_Params, error) {
	root, err := msg.Root()
	return IpInterface_listenUdp_Params{root.Struct()}, err
}

func (s IpInterface_listenUdp_Params) String() string {
	str, _ := text.Marshal(0xa1d8815a262abc49, s.Struct)
	return str
}

func (s IpInterface_listenUdp_Params) PortNum() uint16 {
	return s.Struct.Uint16(0)
}

func (s IpInterface_listenUdp_Params) SetPortNum(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s IpInterface_listenUdp_Params) Port() UdpPort {
	p, _ := s.Struct.Ptr(0)
	return UdpPort{Client: p.Interface().Client()}
}

func (s IpInterface_listenUdp_Params) HasPort() bool {
	return s.Struct.HasPtr(0)
}

func (s IpInterface_listenUdp_Params) SetPort(v UdpPort) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpInterface_listenUdp_Params_List is a list of IpInterface_listenUdp_Params.
type IpInterface_listenUdp_Params_List struct{ capnp.List }

// NewIpInterface_listenUdp_Params creates a new list of IpInterface_listenUdp_Params.
func NewIpInterface_listenUdp_Params_List(s *capnp.Segment, sz int32) (IpInterface_listenUdp_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return IpInterface_listenUdp_Params_List{l}, err
}

func (s IpInterface_listenUdp_Params_List) At(i int) IpInterface_listenUdp_Params {
	return IpInterface_listenUdp_Params{s.List.Struct(i)}
}

func (s IpInterface_listenUdp_Params_List) Set(i int, v IpInterface_listenUdp_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpInterface_listenUdp_Params_List) String() string {
	str, _ := text.MarshalList(0xa1d8815a262abc49, s.List)
	return str
}

// IpInterface_listenUdp_Params_Future is a wrapper for a IpInterface_listenUdp_Params promised by a client call.
type IpInterface_listenUdp_Params_Future struct{ *capnp.Future }

func (p IpInterface_listenUdp_Params_Future) Struct() (IpInterface_listenUdp_Params, error) {
	s, err := p.Future.Struct()
	return IpInterface_listenUdp_Params{s}, err
}

func (p IpInterface_listenUdp_Params_Future) Port() UdpPort {
	return UdpPort{Client: p.Future.Field(0, nil).Client()}
}

type IpInterface_listenUdp_Results struct{ capnp.Struct }

// IpInterface_listenUdp_Results_TypeID is the unique identifier for the type IpInterface_listenUdp_Results.
const IpInterface_listenUdp_Results_TypeID = 0xcb83a480981bc290

func NewIpInterface_listenUdp_Results(s *capnp.Segment) (IpInterface_listenUdp_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenUdp_Results{st}, err
}

func NewRootIpInterface_listenUdp_Results(s *capnp.Segment) (IpInterface_listenUdp_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpInterface_listenUdp_Results{st}, err
}

func ReadRootIpInterface_listenUdp_Results(msg *capnp.Message) (IpInterface_listenUdp_Results, error) {
	root, err := msg.Root()
	return IpInterface_listenUdp_Results{root.Struct()}, err
}

func (s IpInterface_listenUdp_Results) String() string {
	str, _ := text.Marshal(0xcb83a480981bc290, s.Struct)
	return str
}

func (s IpInterface_listenUdp_Results) Handle() util.Handle {
	p, _ := s.Struct.Ptr(0)
	return util.Handle{Client: p.Interface().Client()}
}

func (s IpInterface_listenUdp_Results) HasHandle() bool {
	return s.Struct.HasPtr(0)
}

func (s IpInterface_listenUdp_Results) SetHandle(v util.Handle) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpInterface_listenUdp_Results_List is a list of IpInterface_listenUdp_Results.
type IpInterface_listenUdp_Results_List struct{ capnp.List }

// NewIpInterface_listenUdp_Results creates a new list of IpInterface_listenUdp_Results.
func NewIpInterface_listenUdp_Results_List(s *capnp.Segment, sz int32) (IpInterface_listenUdp_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpInterface_listenUdp_Results_List{l}, err
}

func (s IpInterface_listenUdp_Results_List) At(i int) IpInterface_listenUdp_Results {
	return IpInterface_listenUdp_Results{s.List.Struct(i)}
}

func (s IpInterface_listenUdp_Results_List) Set(i int, v IpInterface_listenUdp_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpInterface_listenUdp_Results_List) String() string {
	str, _ := text.MarshalList(0xcb83a480981bc290, s.List)
	return str
}

// IpInterface_listenUdp_Results_Future is a wrapper for a IpInterface_listenUdp_Results promised by a client call.
type IpInterface_listenUdp_Results_Future struct{ *capnp.Future }

func (p IpInterface_listenUdp_Results_Future) Struct() (IpInterface_listenUdp_Results, error) {
	s, err := p.Future.Struct()
	return IpInterface_listenUdp_Results{s}, err
}

func (p IpInterface_listenUdp_Results_Future) Handle() util.Handle {
	return util.Handle{Client: p.Future.Field(0, nil).Client()}
}

type IpRemoteHost struct{ Client *capnp.Client }

// IpRemoteHost_TypeID is the unique identifier for the type IpRemoteHost.
const IpRemoteHost_TypeID = 0x905dd76b298b3130

func (c IpRemoteHost) GetTcpPort(ctx context.Context, params func(IpRemoteHost_getTcpPort_Params) error) (IpRemoteHost_getTcpPort_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x905dd76b298b3130,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpRemoteHost",
			MethodName:    "getTcpPort",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpRemoteHost_getTcpPort_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpRemoteHost_getTcpPort_Results_Future{Future: ans.Future()}, release
}
func (c IpRemoteHost) GetUdpPort(ctx context.Context, params func(IpRemoteHost_getUdpPort_Params) error) (IpRemoteHost_getUdpPort_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x905dd76b298b3130,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpRemoteHost",
			MethodName:    "getUdpPort",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpRemoteHost_getUdpPort_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpRemoteHost_getUdpPort_Results_Future{Future: ans.Future()}, release
}

// A IpRemoteHost_Server is a IpRemoteHost with a local implementation.
type IpRemoteHost_Server interface {
	GetTcpPort(context.Context, IpRemoteHost_getTcpPort) error

	GetUdpPort(context.Context, IpRemoteHost_getUdpPort) error
}

// IpRemoteHost_NewServer creates a new Server from an implementation of IpRemoteHost_Server.
func IpRemoteHost_NewServer(s IpRemoteHost_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(IpRemoteHost_Methods(nil, s), s, c, policy)
}

// IpRemoteHost_ServerToClient creates a new Client from an implementation of IpRemoteHost_Server.
// The caller is responsible for calling Release on the returned Client.
func IpRemoteHost_ServerToClient(s IpRemoteHost_Server, policy *server.Policy) IpRemoteHost {
	return IpRemoteHost{Client: capnp.NewClient(IpRemoteHost_NewServer(s, policy))}
}

// IpRemoteHost_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func IpRemoteHost_Methods(methods []server.Method, s IpRemoteHost_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x905dd76b298b3130,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpRemoteHost",
			MethodName:    "getTcpPort",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetTcpPort(ctx, IpRemoteHost_getTcpPort{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x905dd76b298b3130,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpRemoteHost",
			MethodName:    "getUdpPort",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetUdpPort(ctx, IpRemoteHost_getUdpPort{call})
		},
	})

	return methods
}

// IpRemoteHost_getTcpPort holds the state for a server call to IpRemoteHost.getTcpPort.
// See server.Call for documentation.
type IpRemoteHost_getTcpPort struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpRemoteHost_getTcpPort) Args() IpRemoteHost_getTcpPort_Params {
	return IpRemoteHost_getTcpPort_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IpRemoteHost_getTcpPort) AllocResults() (IpRemoteHost_getTcpPort_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getTcpPort_Results{Struct: r}, err
}

// IpRemoteHost_getUdpPort holds the state for a server call to IpRemoteHost.getUdpPort.
// See server.Call for documentation.
type IpRemoteHost_getUdpPort struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IpRemoteHost_getUdpPort) Args() IpRemoteHost_getUdpPort_Params {
	return IpRemoteHost_getUdpPort_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IpRemoteHost_getUdpPort) AllocResults() (IpRemoteHost_getUdpPort_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getUdpPort_Results{Struct: r}, err
}

type IpRemoteHost_getTcpPort_Params struct{ capnp.Struct }

// IpRemoteHost_getTcpPort_Params_TypeID is the unique identifier for the type IpRemoteHost_getTcpPort_Params.
const IpRemoteHost_getTcpPort_Params_TypeID = 0xed10beb11e7383e9

func NewIpRemoteHost_getTcpPort_Params(s *capnp.Segment) (IpRemoteHost_getTcpPort_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpRemoteHost_getTcpPort_Params{st}, err
}

func NewRootIpRemoteHost_getTcpPort_Params(s *capnp.Segment) (IpRemoteHost_getTcpPort_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpRemoteHost_getTcpPort_Params{st}, err
}

func ReadRootIpRemoteHost_getTcpPort_Params(msg *capnp.Message) (IpRemoteHost_getTcpPort_Params, error) {
	root, err := msg.Root()
	return IpRemoteHost_getTcpPort_Params{root.Struct()}, err
}

func (s IpRemoteHost_getTcpPort_Params) String() string {
	str, _ := text.Marshal(0xed10beb11e7383e9, s.Struct)
	return str
}

func (s IpRemoteHost_getTcpPort_Params) PortNum() uint16 {
	return s.Struct.Uint16(0)
}

func (s IpRemoteHost_getTcpPort_Params) SetPortNum(v uint16) {
	s.Struct.SetUint16(0, v)
}

// IpRemoteHost_getTcpPort_Params_List is a list of IpRemoteHost_getTcpPort_Params.
type IpRemoteHost_getTcpPort_Params_List struct{ capnp.List }

// NewIpRemoteHost_getTcpPort_Params creates a new list of IpRemoteHost_getTcpPort_Params.
func NewIpRemoteHost_getTcpPort_Params_List(s *capnp.Segment, sz int32) (IpRemoteHost_getTcpPort_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return IpRemoteHost_getTcpPort_Params_List{l}, err
}

func (s IpRemoteHost_getTcpPort_Params_List) At(i int) IpRemoteHost_getTcpPort_Params {
	return IpRemoteHost_getTcpPort_Params{s.List.Struct(i)}
}

func (s IpRemoteHost_getTcpPort_Params_List) Set(i int, v IpRemoteHost_getTcpPort_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpRemoteHost_getTcpPort_Params_List) String() string {
	str, _ := text.MarshalList(0xed10beb11e7383e9, s.List)
	return str
}

// IpRemoteHost_getTcpPort_Params_Future is a wrapper for a IpRemoteHost_getTcpPort_Params promised by a client call.
type IpRemoteHost_getTcpPort_Params_Future struct{ *capnp.Future }

func (p IpRemoteHost_getTcpPort_Params_Future) Struct() (IpRemoteHost_getTcpPort_Params, error) {
	s, err := p.Future.Struct()
	return IpRemoteHost_getTcpPort_Params{s}, err
}

type IpRemoteHost_getTcpPort_Results struct{ capnp.Struct }

// IpRemoteHost_getTcpPort_Results_TypeID is the unique identifier for the type IpRemoteHost_getTcpPort_Results.
const IpRemoteHost_getTcpPort_Results_TypeID = 0xd77df9f44cfcde33

func NewIpRemoteHost_getTcpPort_Results(s *capnp.Segment) (IpRemoteHost_getTcpPort_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getTcpPort_Results{st}, err
}

func NewRootIpRemoteHost_getTcpPort_Results(s *capnp.Segment) (IpRemoteHost_getTcpPort_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getTcpPort_Results{st}, err
}

func ReadRootIpRemoteHost_getTcpPort_Results(msg *capnp.Message) (IpRemoteHost_getTcpPort_Results, error) {
	root, err := msg.Root()
	return IpRemoteHost_getTcpPort_Results{root.Struct()}, err
}

func (s IpRemoteHost_getTcpPort_Results) String() string {
	str, _ := text.Marshal(0xd77df9f44cfcde33, s.Struct)
	return str
}

func (s IpRemoteHost_getTcpPort_Results) Port() TcpPort {
	p, _ := s.Struct.Ptr(0)
	return TcpPort{Client: p.Interface().Client()}
}

func (s IpRemoteHost_getTcpPort_Results) HasPort() bool {
	return s.Struct.HasPtr(0)
}

func (s IpRemoteHost_getTcpPort_Results) SetPort(v TcpPort) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpRemoteHost_getTcpPort_Results_List is a list of IpRemoteHost_getTcpPort_Results.
type IpRemoteHost_getTcpPort_Results_List struct{ capnp.List }

// NewIpRemoteHost_getTcpPort_Results creates a new list of IpRemoteHost_getTcpPort_Results.
func NewIpRemoteHost_getTcpPort_Results_List(s *capnp.Segment, sz int32) (IpRemoteHost_getTcpPort_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpRemoteHost_getTcpPort_Results_List{l}, err
}

func (s IpRemoteHost_getTcpPort_Results_List) At(i int) IpRemoteHost_getTcpPort_Results {
	return IpRemoteHost_getTcpPort_Results{s.List.Struct(i)}
}

func (s IpRemoteHost_getTcpPort_Results_List) Set(i int, v IpRemoteHost_getTcpPort_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpRemoteHost_getTcpPort_Results_List) String() string {
	str, _ := text.MarshalList(0xd77df9f44cfcde33, s.List)
	return str
}

// IpRemoteHost_getTcpPort_Results_Future is a wrapper for a IpRemoteHost_getTcpPort_Results promised by a client call.
type IpRemoteHost_getTcpPort_Results_Future struct{ *capnp.Future }

func (p IpRemoteHost_getTcpPort_Results_Future) Struct() (IpRemoteHost_getTcpPort_Results, error) {
	s, err := p.Future.Struct()
	return IpRemoteHost_getTcpPort_Results{s}, err
}

func (p IpRemoteHost_getTcpPort_Results_Future) Port() TcpPort {
	return TcpPort{Client: p.Future.Field(0, nil).Client()}
}

type IpRemoteHost_getUdpPort_Params struct{ capnp.Struct }

// IpRemoteHost_getUdpPort_Params_TypeID is the unique identifier for the type IpRemoteHost_getUdpPort_Params.
const IpRemoteHost_getUdpPort_Params_TypeID = 0xb62b02486ebe26ed

func NewIpRemoteHost_getUdpPort_Params(s *capnp.Segment) (IpRemoteHost_getUdpPort_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpRemoteHost_getUdpPort_Params{st}, err
}

func NewRootIpRemoteHost_getUdpPort_Params(s *capnp.Segment) (IpRemoteHost_getUdpPort_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IpRemoteHost_getUdpPort_Params{st}, err
}

func ReadRootIpRemoteHost_getUdpPort_Params(msg *capnp.Message) (IpRemoteHost_getUdpPort_Params, error) {
	root, err := msg.Root()
	return IpRemoteHost_getUdpPort_Params{root.Struct()}, err
}

func (s IpRemoteHost_getUdpPort_Params) String() string {
	str, _ := text.Marshal(0xb62b02486ebe26ed, s.Struct)
	return str
}

func (s IpRemoteHost_getUdpPort_Params) PortNum() uint16 {
	return s.Struct.Uint16(0)
}

func (s IpRemoteHost_getUdpPort_Params) SetPortNum(v uint16) {
	s.Struct.SetUint16(0, v)
}

// IpRemoteHost_getUdpPort_Params_List is a list of IpRemoteHost_getUdpPort_Params.
type IpRemoteHost_getUdpPort_Params_List struct{ capnp.List }

// NewIpRemoteHost_getUdpPort_Params creates a new list of IpRemoteHost_getUdpPort_Params.
func NewIpRemoteHost_getUdpPort_Params_List(s *capnp.Segment, sz int32) (IpRemoteHost_getUdpPort_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return IpRemoteHost_getUdpPort_Params_List{l}, err
}

func (s IpRemoteHost_getUdpPort_Params_List) At(i int) IpRemoteHost_getUdpPort_Params {
	return IpRemoteHost_getUdpPort_Params{s.List.Struct(i)}
}

func (s IpRemoteHost_getUdpPort_Params_List) Set(i int, v IpRemoteHost_getUdpPort_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpRemoteHost_getUdpPort_Params_List) String() string {
	str, _ := text.MarshalList(0xb62b02486ebe26ed, s.List)
	return str
}

// IpRemoteHost_getUdpPort_Params_Future is a wrapper for a IpRemoteHost_getUdpPort_Params promised by a client call.
type IpRemoteHost_getUdpPort_Params_Future struct{ *capnp.Future }

func (p IpRemoteHost_getUdpPort_Params_Future) Struct() (IpRemoteHost_getUdpPort_Params, error) {
	s, err := p.Future.Struct()
	return IpRemoteHost_getUdpPort_Params{s}, err
}

type IpRemoteHost_getUdpPort_Results struct{ capnp.Struct }

// IpRemoteHost_getUdpPort_Results_TypeID is the unique identifier for the type IpRemoteHost_getUdpPort_Results.
const IpRemoteHost_getUdpPort_Results_TypeID = 0xf53aa3a93e49003b

func NewIpRemoteHost_getUdpPort_Results(s *capnp.Segment) (IpRemoteHost_getUdpPort_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getUdpPort_Results{st}, err
}

func NewRootIpRemoteHost_getUdpPort_Results(s *capnp.Segment) (IpRemoteHost_getUdpPort_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IpRemoteHost_getUdpPort_Results{st}, err
}

func ReadRootIpRemoteHost_getUdpPort_Results(msg *capnp.Message) (IpRemoteHost_getUdpPort_Results, error) {
	root, err := msg.Root()
	return IpRemoteHost_getUdpPort_Results{root.Struct()}, err
}

func (s IpRemoteHost_getUdpPort_Results) String() string {
	str, _ := text.Marshal(0xf53aa3a93e49003b, s.Struct)
	return str
}

func (s IpRemoteHost_getUdpPort_Results) Port() UdpPort {
	p, _ := s.Struct.Ptr(0)
	return UdpPort{Client: p.Interface().Client()}
}

func (s IpRemoteHost_getUdpPort_Results) HasPort() bool {
	return s.Struct.HasPtr(0)
}

func (s IpRemoteHost_getUdpPort_Results) SetPort(v UdpPort) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IpRemoteHost_getUdpPort_Results_List is a list of IpRemoteHost_getUdpPort_Results.
type IpRemoteHost_getUdpPort_Results_List struct{ capnp.List }

// NewIpRemoteHost_getUdpPort_Results creates a new list of IpRemoteHost_getUdpPort_Results.
func NewIpRemoteHost_getUdpPort_Results_List(s *capnp.Segment, sz int32) (IpRemoteHost_getUdpPort_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IpRemoteHost_getUdpPort_Results_List{l}, err
}

func (s IpRemoteHost_getUdpPort_Results_List) At(i int) IpRemoteHost_getUdpPort_Results {
	return IpRemoteHost_getUdpPort_Results{s.List.Struct(i)}
}

func (s IpRemoteHost_getUdpPort_Results_List) Set(i int, v IpRemoteHost_getUdpPort_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpRemoteHost_getUdpPort_Results_List) String() string {
	str, _ := text.MarshalList(0xf53aa3a93e49003b, s.List)
	return str
}

// IpRemoteHost_getUdpPort_Results_Future is a wrapper for a IpRemoteHost_getUdpPort_Results promised by a client call.
type IpRemoteHost_getUdpPort_Results_Future struct{ *capnp.Future }

func (p IpRemoteHost_getUdpPort_Results_Future) Struct() (IpRemoteHost_getUdpPort_Results, error) {
	s, err := p.Future.Struct()
	return IpRemoteHost_getUdpPort_Results{s}, err
}

func (p IpRemoteHost_getUdpPort_Results_Future) Port() UdpPort {
	return UdpPort{Client: p.Future.Field(0, nil).Client()}
}

type TcpPort struct{ Client *capnp.Client }

// TcpPort_TypeID is the unique identifier for the type TcpPort.
const TcpPort_TypeID = 0xeab20e1af07806b4

func (c TcpPort) Connect(ctx context.Context, params func(TcpPort_connect_Params) error) (TcpPort_connect_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xeab20e1af07806b4,
			MethodID:      0,
			InterfaceName: "ip.capnp:TcpPort",
			MethodName:    "connect",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TcpPort_connect_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TcpPort_connect_Results_Future{Future: ans.Future()}, release
}

// A TcpPort_Server is a TcpPort with a local implementation.
type TcpPort_Server interface {
	Connect(context.Context, TcpPort_connect) error
}

// TcpPort_NewServer creates a new Server from an implementation of TcpPort_Server.
func TcpPort_NewServer(s TcpPort_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(TcpPort_Methods(nil, s), s, c, policy)
}

// TcpPort_ServerToClient creates a new Client from an implementation of TcpPort_Server.
// The caller is responsible for calling Release on the returned Client.
func TcpPort_ServerToClient(s TcpPort_Server, policy *server.Policy) TcpPort {
	return TcpPort{Client: capnp.NewClient(TcpPort_NewServer(s, policy))}
}

// TcpPort_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func TcpPort_Methods(methods []server.Method, s TcpPort_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xeab20e1af07806b4,
			MethodID:      0,
			InterfaceName: "ip.capnp:TcpPort",
			MethodName:    "connect",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Connect(ctx, TcpPort_connect{call})
		},
	})

	return methods
}

// TcpPort_connect holds the state for a server call to TcpPort.connect.
// See server.Call for documentation.
type TcpPort_connect struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TcpPort_connect) Args() TcpPort_connect_Params {
	return TcpPort_connect_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c TcpPort_connect) AllocResults() (TcpPort_connect_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TcpPort_connect_Results{Struct: r}, err
}

type TcpPort_connect_Params struct{ capnp.Struct }

// TcpPort_connect_Params_TypeID is the unique identifier for the type TcpPort_connect_Params.
const TcpPort_connect_Params_TypeID = 0x8a60e53250a32321

func NewTcpPort_connect_Params(s *capnp.Segment) (TcpPort_connect_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TcpPort_connect_Params{st}, err
}

func NewRootTcpPort_connect_Params(s *capnp.Segment) (TcpPort_connect_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TcpPort_connect_Params{st}, err
}

func ReadRootTcpPort_connect_Params(msg *capnp.Message) (TcpPort_connect_Params, error) {
	root, err := msg.Root()
	return TcpPort_connect_Params{root.Struct()}, err
}

func (s TcpPort_connect_Params) String() string {
	str, _ := text.Marshal(0x8a60e53250a32321, s.Struct)
	return str
}

func (s TcpPort_connect_Params) Downstream() util.ByteStream {
	p, _ := s.Struct.Ptr(0)
	return util.ByteStream{Client: p.Interface().Client()}
}

func (s TcpPort_connect_Params) HasDownstream() bool {
	return s.Struct.HasPtr(0)
}

func (s TcpPort_connect_Params) SetDownstream(v util.ByteStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// TcpPort_connect_Params_List is a list of TcpPort_connect_Params.
type TcpPort_connect_Params_List struct{ capnp.List }

// NewTcpPort_connect_Params creates a new list of TcpPort_connect_Params.
func NewTcpPort_connect_Params_List(s *capnp.Segment, sz int32) (TcpPort_connect_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return TcpPort_connect_Params_List{l}, err
}

func (s TcpPort_connect_Params_List) At(i int) TcpPort_connect_Params {
	return TcpPort_connect_Params{s.List.Struct(i)}
}

func (s TcpPort_connect_Params_List) Set(i int, v TcpPort_connect_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TcpPort_connect_Params_List) String() string {
	str, _ := text.MarshalList(0x8a60e53250a32321, s.List)
	return str
}

// TcpPort_connect_Params_Future is a wrapper for a TcpPort_connect_Params promised by a client call.
type TcpPort_connect_Params_Future struct{ *capnp.Future }

func (p TcpPort_connect_Params_Future) Struct() (TcpPort_connect_Params, error) {
	s, err := p.Future.Struct()
	return TcpPort_connect_Params{s}, err
}

func (p TcpPort_connect_Params_Future) Downstream() util.ByteStream {
	return util.ByteStream{Client: p.Future.Field(0, nil).Client()}
}

type TcpPort_connect_Results struct{ capnp.Struct }

// TcpPort_connect_Results_TypeID is the unique identifier for the type TcpPort_connect_Results.
const TcpPort_connect_Results_TypeID = 0xcdd1222d14073645

func NewTcpPort_connect_Results(s *capnp.Segment) (TcpPort_connect_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TcpPort_connect_Results{st}, err
}

func NewRootTcpPort_connect_Results(s *capnp.Segment) (TcpPort_connect_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TcpPort_connect_Results{st}, err
}

func ReadRootTcpPort_connect_Results(msg *capnp.Message) (TcpPort_connect_Results, error) {
	root, err := msg.Root()
	return TcpPort_connect_Results{root.Struct()}, err
}

func (s TcpPort_connect_Results) String() string {
	str, _ := text.Marshal(0xcdd1222d14073645, s.Struct)
	return str
}

func (s TcpPort_connect_Results) Upstream() util.ByteStream {
	p, _ := s.Struct.Ptr(0)
	return util.ByteStream{Client: p.Interface().Client()}
}

func (s TcpPort_connect_Results) HasUpstream() bool {
	return s.Struct.HasPtr(0)
}

func (s TcpPort_connect_Results) SetUpstream(v util.ByteStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// TcpPort_connect_Results_List is a list of TcpPort_connect_Results.
type TcpPort_connect_Results_List struct{ capnp.List }

// NewTcpPort_connect_Results creates a new list of TcpPort_connect_Results.
func NewTcpPort_connect_Results_List(s *capnp.Segment, sz int32) (TcpPort_connect_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return TcpPort_connect_Results_List{l}, err
}

func (s TcpPort_connect_Results_List) At(i int) TcpPort_connect_Results {
	return TcpPort_connect_Results{s.List.Struct(i)}
}

func (s TcpPort_connect_Results_List) Set(i int, v TcpPort_connect_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TcpPort_connect_Results_List) String() string {
	str, _ := text.MarshalList(0xcdd1222d14073645, s.List)
	return str
}

// TcpPort_connect_Results_Future is a wrapper for a TcpPort_connect_Results promised by a client call.
type TcpPort_connect_Results_Future struct{ *capnp.Future }

func (p TcpPort_connect_Results_Future) Struct() (TcpPort_connect_Results, error) {
	s, err := p.Future.Struct()
	return TcpPort_connect_Results{s}, err
}

func (p TcpPort_connect_Results_Future) Upstream() util.ByteStream {
	return util.ByteStream{Client: p.Future.Field(0, nil).Client()}
}

type UdpPort struct{ Client *capnp.Client }

// UdpPort_TypeID is the unique identifier for the type UdpPort.
const UdpPort_TypeID = 0xc6212e1217d001ce

func (c UdpPort) Send(ctx context.Context, params func(UdpPort_send_Params) error) (UdpPort_send_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc6212e1217d001ce,
			MethodID:      0,
			InterfaceName: "ip.capnp:UdpPort",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UdpPort_send_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return UdpPort_send_Results_Future{Future: ans.Future()}, release
}

// A UdpPort_Server is a UdpPort with a local implementation.
type UdpPort_Server interface {
	Send(context.Context, UdpPort_send) error
}

// UdpPort_NewServer creates a new Server from an implementation of UdpPort_Server.
func UdpPort_NewServer(s UdpPort_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(UdpPort_Methods(nil, s), s, c, policy)
}

// UdpPort_ServerToClient creates a new Client from an implementation of UdpPort_Server.
// The caller is responsible for calling Release on the returned Client.
func UdpPort_ServerToClient(s UdpPort_Server, policy *server.Policy) UdpPort {
	return UdpPort{Client: capnp.NewClient(UdpPort_NewServer(s, policy))}
}

// UdpPort_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func UdpPort_Methods(methods []server.Method, s UdpPort_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc6212e1217d001ce,
			MethodID:      0,
			InterfaceName: "ip.capnp:UdpPort",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, UdpPort_send{call})
		},
	})

	return methods
}

// UdpPort_send holds the state for a server call to UdpPort.send.
// See server.Call for documentation.
type UdpPort_send struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UdpPort_send) Args() UdpPort_send_Params {
	return UdpPort_send_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c UdpPort_send) AllocResults() (UdpPort_send_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UdpPort_send_Results{Struct: r}, err
}

type UdpPort_send_Params struct{ capnp.Struct }

// UdpPort_send_Params_TypeID is the unique identifier for the type UdpPort_send_Params.
const UdpPort_send_Params_TypeID = 0xc6ca13f7c8dbd102

func NewUdpPort_send_Params(s *capnp.Segment) (UdpPort_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UdpPort_send_Params{st}, err
}

func NewRootUdpPort_send_Params(s *capnp.Segment) (UdpPort_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UdpPort_send_Params{st}, err
}

func ReadRootUdpPort_send_Params(msg *capnp.Message) (UdpPort_send_Params, error) {
	root, err := msg.Root()
	return UdpPort_send_Params{root.Struct()}, err
}

func (s UdpPort_send_Params) String() string {
	str, _ := text.Marshal(0xc6ca13f7c8dbd102, s.Struct)
	return str
}

func (s UdpPort_send_Params) Message() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s UdpPort_send_Params) HasMessage() bool {
	return s.Struct.HasPtr(0)
}

func (s UdpPort_send_Params) SetMessage(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s UdpPort_send_Params) ReturnPort() UdpPort {
	p, _ := s.Struct.Ptr(1)
	return UdpPort{Client: p.Interface().Client()}
}

func (s UdpPort_send_Params) HasReturnPort() bool {
	return s.Struct.HasPtr(1)
}

func (s UdpPort_send_Params) SetReturnPort(v UdpPort) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// UdpPort_send_Params_List is a list of UdpPort_send_Params.
type UdpPort_send_Params_List struct{ capnp.List }

// NewUdpPort_send_Params creates a new list of UdpPort_send_Params.
func NewUdpPort_send_Params_List(s *capnp.Segment, sz int32) (UdpPort_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return UdpPort_send_Params_List{l}, err
}

func (s UdpPort_send_Params_List) At(i int) UdpPort_send_Params {
	return UdpPort_send_Params{s.List.Struct(i)}
}

func (s UdpPort_send_Params_List) Set(i int, v UdpPort_send_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s UdpPort_send_Params_List) String() string {
	str, _ := text.MarshalList(0xc6ca13f7c8dbd102, s.List)
	return str
}

// UdpPort_send_Params_Future is a wrapper for a UdpPort_send_Params promised by a client call.
type UdpPort_send_Params_Future struct{ *capnp.Future }

func (p UdpPort_send_Params_Future) Struct() (UdpPort_send_Params, error) {
	s, err := p.Future.Struct()
	return UdpPort_send_Params{s}, err
}

func (p UdpPort_send_Params_Future) ReturnPort() UdpPort {
	return UdpPort{Client: p.Future.Field(1, nil).Client()}
}

type UdpPort_send_Results struct{ capnp.Struct }

// UdpPort_send_Results_TypeID is the unique identifier for the type UdpPort_send_Results.
const UdpPort_send_Results_TypeID = 0x8e43fd8e213b1811

func NewUdpPort_send_Results(s *capnp.Segment) (UdpPort_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UdpPort_send_Results{st}, err
}

func NewRootUdpPort_send_Results(s *capnp.Segment) (UdpPort_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UdpPort_send_Results{st}, err
}

func ReadRootUdpPort_send_Results(msg *capnp.Message) (UdpPort_send_Results, error) {
	root, err := msg.Root()
	return UdpPort_send_Results{root.Struct()}, err
}

func (s UdpPort_send_Results) String() string {
	str, _ := text.Marshal(0x8e43fd8e213b1811, s.Struct)
	return str
}

// UdpPort_send_Results_List is a list of UdpPort_send_Results.
type UdpPort_send_Results_List struct{ capnp.List }

// NewUdpPort_send_Results creates a new list of UdpPort_send_Results.
func NewUdpPort_send_Results_List(s *capnp.Segment, sz int32) (UdpPort_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return UdpPort_send_Results_List{l}, err
}

func (s UdpPort_send_Results_List) At(i int) UdpPort_send_Results {
	return UdpPort_send_Results{s.List.Struct(i)}
}

func (s UdpPort_send_Results_List) Set(i int, v UdpPort_send_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s UdpPort_send_Results_List) String() string {
	str, _ := text.MarshalList(0x8e43fd8e213b1811, s.List)
	return str
}

// UdpPort_send_Results_Future is a wrapper for a UdpPort_send_Results promised by a client call.
type UdpPort_send_Results_Future struct{ *capnp.Future }

func (p UdpPort_send_Results_Future) Struct() (UdpPort_send_Results, error) {
	s, err := p.Future.Struct()
	return UdpPort_send_Results{s}, err
}

type IpPortPowerboxMetadata struct{ capnp.Struct }

// IpPortPowerboxMetadata_TypeID is the unique identifier for the type IpPortPowerboxMetadata.
const IpPortPowerboxMetadata_TypeID = 0x856e71a6a4f22bba

func NewIpPortPowerboxMetadata(s *capnp.Segment) (IpPortPowerboxMetadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpPortPowerboxMetadata{st}, err
}

func NewRootIpPortPowerboxMetadata(s *capnp.Segment) (IpPortPowerboxMetadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IpPortPowerboxMetadata{st}, err
}

func ReadRootIpPortPowerboxMetadata(msg *capnp.Message) (IpPortPowerboxMetadata, error) {
	root, err := msg.Root()
	return IpPortPowerboxMetadata{root.Struct()}, err
}

func (s IpPortPowerboxMetadata) String() string {
	str, _ := text.Marshal(0x856e71a6a4f22bba, s.Struct)
	return str
}

func (s IpPortPowerboxMetadata) PreferredPortNum() uint16 {
	return s.Struct.Uint16(0)
}

func (s IpPortPowerboxMetadata) SetPreferredPortNum(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s IpPortPowerboxMetadata) PreferredHost() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s IpPortPowerboxMetadata) HasPreferredHost() bool {
	return s.Struct.HasPtr(0)
}

func (s IpPortPowerboxMetadata) PreferredHostBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s IpPortPowerboxMetadata) SetPreferredHost(v string) error {
	return s.Struct.SetText(0, v)
}

// IpPortPowerboxMetadata_List is a list of IpPortPowerboxMetadata.
type IpPortPowerboxMetadata_List struct{ capnp.List }

// NewIpPortPowerboxMetadata creates a new list of IpPortPowerboxMetadata.
func NewIpPortPowerboxMetadata_List(s *capnp.Segment, sz int32) (IpPortPowerboxMetadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return IpPortPowerboxMetadata_List{l}, err
}

func (s IpPortPowerboxMetadata_List) At(i int) IpPortPowerboxMetadata {
	return IpPortPowerboxMetadata{s.List.Struct(i)}
}

func (s IpPortPowerboxMetadata_List) Set(i int, v IpPortPowerboxMetadata) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IpPortPowerboxMetadata_List) String() string {
	str, _ := text.MarshalList(0x856e71a6a4f22bba, s.List)
	return str
}

// IpPortPowerboxMetadata_Future is a wrapper for a IpPortPowerboxMetadata promised by a client call.
type IpPortPowerboxMetadata_Future struct{ *capnp.Future }

func (p IpPortPowerboxMetadata_Future) Struct() (IpPortPowerboxMetadata, error) {
	s, err := p.Future.Struct()
	return IpPortPowerboxMetadata{s}, err
}

type PersistentIpNetwork struct{ Client *capnp.Client }

// PersistentIpNetwork_TypeID is the unique identifier for the type PersistentIpNetwork.
const PersistentIpNetwork_TypeID = 0xa5b3215660e038f2

func (c PersistentIpNetwork) GetRemoteHost(ctx context.Context, params func(IpNetwork_getRemoteHost_Params) error) (IpNetwork_getRemoteHost_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHost",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpNetwork_getRemoteHost_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpNetwork_getRemoteHost_Results_Future{Future: ans.Future()}, release
}
func (c PersistentIpNetwork) GetRemoteHostByName(ctx context.Context, params func(IpNetwork_getRemoteHostByName_Params) error) (IpNetwork_getRemoteHostByName_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHostByName",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpNetwork_getRemoteHostByName_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpNetwork_getRemoteHostByName_Results_Future{Future: ans.Future()}, release
}
func (c PersistentIpNetwork) AddRequirements(ctx context.Context, params func(supervisor.SystemPersistent_addRequirements_Params) error) (supervisor.SystemPersistent_addRequirements_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error {
			return params(supervisor.SystemPersistent_addRequirements_Params{Struct: s})
		}
	}
	ans, release := c.Client.SendCall(ctx, s)
	return supervisor.SystemPersistent_addRequirements_Results_Future{Future: ans.Future()}, release
}
func (c PersistentIpNetwork) Save(ctx context.Context, params func(persistent.Persistent_SaveParams) error) (persistent.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistent.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistent.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

// A PersistentIpNetwork_Server is a PersistentIpNetwork with a local implementation.
type PersistentIpNetwork_Server interface {
	GetRemoteHost(context.Context, IpNetwork_getRemoteHost) error

	GetRemoteHostByName(context.Context, IpNetwork_getRemoteHostByName) error

	AddRequirements(context.Context, supervisor.SystemPersistent_addRequirements) error

	Save(context.Context, persistent.Persistent_save) error
}

// PersistentIpNetwork_NewServer creates a new Server from an implementation of PersistentIpNetwork_Server.
func PersistentIpNetwork_NewServer(s PersistentIpNetwork_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PersistentIpNetwork_Methods(nil, s), s, c, policy)
}

// PersistentIpNetwork_ServerToClient creates a new Client from an implementation of PersistentIpNetwork_Server.
// The caller is responsible for calling Release on the returned Client.
func PersistentIpNetwork_ServerToClient(s PersistentIpNetwork_Server, policy *server.Policy) PersistentIpNetwork {
	return PersistentIpNetwork{Client: capnp.NewClient(PersistentIpNetwork_NewServer(s, policy))}
}

// PersistentIpNetwork_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PersistentIpNetwork_Methods(methods []server.Method, s PersistentIpNetwork_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHost",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetRemoteHost(ctx, IpNetwork_getRemoteHost{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa982576b7a2a2040,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpNetwork",
			MethodName:    "getRemoteHostByName",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetRemoteHostByName(ctx, IpNetwork_getRemoteHostByName{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddRequirements(ctx, supervisor.SystemPersistent_addRequirements{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistent.Persistent_save{call})
		},
	})

	return methods
}

type PersistentIpInterface struct{ Client *capnp.Client }

// PersistentIpInterface_TypeID is the unique identifier for the type PersistentIpInterface.
const PersistentIpInterface_TypeID = 0xcf43ebe6a5a6f1b4

func (c PersistentIpInterface) ListenTcp(ctx context.Context, params func(IpInterface_listenTcp_Params) error) (IpInterface_listenTcp_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenTcp",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpInterface_listenTcp_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpInterface_listenTcp_Results_Future{Future: ans.Future()}, release
}
func (c PersistentIpInterface) ListenUdp(ctx context.Context, params func(IpInterface_listenUdp_Params) error) (IpInterface_listenUdp_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenUdp",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IpInterface_listenUdp_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IpInterface_listenUdp_Results_Future{Future: ans.Future()}, release
}
func (c PersistentIpInterface) AddRequirements(ctx context.Context, params func(supervisor.SystemPersistent_addRequirements_Params) error) (supervisor.SystemPersistent_addRequirements_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error {
			return params(supervisor.SystemPersistent_addRequirements_Params{Struct: s})
		}
	}
	ans, release := c.Client.SendCall(ctx, s)
	return supervisor.SystemPersistent_addRequirements_Results_Future{Future: ans.Future()}, release
}
func (c PersistentIpInterface) Save(ctx context.Context, params func(persistent.Persistent_SaveParams) error) (persistent.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistent.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistent.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

// A PersistentIpInterface_Server is a PersistentIpInterface with a local implementation.
type PersistentIpInterface_Server interface {
	ListenTcp(context.Context, IpInterface_listenTcp) error

	ListenUdp(context.Context, IpInterface_listenUdp) error

	AddRequirements(context.Context, supervisor.SystemPersistent_addRequirements) error

	Save(context.Context, persistent.Persistent_save) error
}

// PersistentIpInterface_NewServer creates a new Server from an implementation of PersistentIpInterface_Server.
func PersistentIpInterface_NewServer(s PersistentIpInterface_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PersistentIpInterface_Methods(nil, s), s, c, policy)
}

// PersistentIpInterface_ServerToClient creates a new Client from an implementation of PersistentIpInterface_Server.
// The caller is responsible for calling Release on the returned Client.
func PersistentIpInterface_ServerToClient(s PersistentIpInterface_Server, policy *server.Policy) PersistentIpInterface {
	return PersistentIpInterface{Client: capnp.NewClient(PersistentIpInterface_NewServer(s, policy))}
}

// PersistentIpInterface_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PersistentIpInterface_Methods(methods []server.Method, s PersistentIpInterface_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      0,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenTcp",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListenTcp(ctx, IpInterface_listenTcp{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe32c506ee93ed6fa,
			MethodID:      1,
			InterfaceName: "ip.capnp:IpInterface",
			MethodName:    "listenUdp",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListenUdp(ctx, IpInterface_listenUdp{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddRequirements(ctx, supervisor.SystemPersistent_addRequirements{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistent.Persistent_save{call})
		},
	})

	return methods
}

const schema_f44732d435305f86 = "x\xda\xacW}l\x14e\x1a\x7f\x9e\xd9\xdd\x0e\xed\xee" +
	"\xectn(\x1fw\x81^\xb9\xc2]\x0blZ\xca\xd7" +
	"\x95\x84\x96r\x04\x96\x03ngS\x8e\xd0\x84k\xa7\xdd" +
	"\xa1\xf4\xda\x9d\x1df\xa6)\xe0GE\x02\xc4*Hb" +
	"H\x90D\x13\xe5#\xa9Q\x13\x10L@%\x01\x95\x18" +
	"\x0d\xd6F\x10\x89AA\xc0\x04H\x8d \x04!\xd41" +
	"\xef\xbb;;\xd3\xee\xb6\x80\xf8\xdfN\xe77\xcf\xfb|" +
	"\xfc~\xbf\xe7m\xd9\x7f|\xd5L\xb9\x8f\x1d\x05\x10E" +
	"_\x8eut\xf2\xcd\xbd\xfb\xd7\xaa\x9bA\xcaE\xb4\xb6" +
	"\xd4\x97\xcd8=m\xe1-\xf0!\x0bPq5\x8fA" +
	"\xf1v\x1e\x0b \xde\xc8\xeb\x00\xb4\x8a\xfe\xb6'2\xed" +
	"JC\x17\x08\x02B\x0a\xb4\xd2\xcf \xa0\xb8\xca_\x05" +
	"h\x09c\xe6\x14m\xef\x9f\xbf=\x09\xf0\x92/7\xfa" +
	"o\x82\xd7*+\x7f\xbe\xa4\xf5\xec\xaa\x1d \xe4z\x9c" +
	"c\x00E\xc5\x7fP\x8c\xfb\x09\xb0\xc5\xbfU<N~" +
	"Y=O7n\x995q\xe3K \x14\xa4\x8f\xe9\xf6" +
	"W\x92c\x0e\xd0c>z\xef\xce}\xb5\xb0\xfe\x15\x10" +
	"\xc44\xa0\xd7\xaf\x13\xc0y\x0a\x08\xbf_:\xa9n\xe3" +
	"\xd7\xaf\x81T\x80iD\xbf\x7f\x1aA\xf8\x02\xa4\x94\x9b" +
	"\xb3/4\xfc\xb7\xe8\x9d}\x19\x09\xc9\x81kb<@" +
	"\x13\x0a\xb0bK\xe0\xef\x00V\xf5_K7\xb4\xaex" +
	"\xb6;\x0bx\xb7\xd8\x12\x18\x0d \xb6\x07\xb6\x8a\xbd\xe4" +
	"3K\xfew\xe0\xe7\xb7\xcf<q\xd8\x9d\xdc\x91\xc0b" +
	"r\xf4\xc7\x01\x92\\\xdf\xa4c\xea\"f\xf2\xbb \x8d" +
	"\xc2T\x97*\xae\x04j\x08\xa0\x8f\x02>\xc7/F\xff" +
	")Tt2\xe38\x8e\xeb\x12\x0b8\x92\x9b\xc0-\x14" +
	"\xffI~YL\xef7\x9f\xdc\x11?=\x99\x9a\x09C" +
	"\xde\x16q\xd7\x00\xc5\x89\x1c)t\xc7\x89\xbf\xeczf" +
	"\xef\xa6\xcf\xdc\xcd\xdc\xcc\xd1fn\xe3\xc8i\x0bf\xb2" +
	"#\xa7N\xe8=\xe5\x1e\xea[\\\x1e\x01\x1c\xa6\x80C" +
	"7\xf6\xef\xfb\xe1\xfa\xfc\x9e\x8ct\xceq\xf7\xc4+4" +
	"\x9d\x8b\x1c+^\xe4H\xab\xc6\xfe\xc2\xed\xac\xa8z\xb5" +
	"\x87T\xef\xf4\x8dFM\xe1I\xb7n\xd0\xc0-\xf5\xa7" +
	"\x8f\x9e\x08-\xeeuw\xaa \xb8\x81\x9c\\\x14$\x80" +
	"\x8ao\xef/\xb9u\xf7\xa9\xb3 \x8cJ\x03\xe6\x05i" +
	"+\x97\x12\xc0w\x87\xfe\xa7_?>\xfa\xbc\xeb\xfbx" +
	"\x906\xb2\x9d~\xbf\x8d\xbd\xcc\xdf]r\xee{\x90\x0a" +
	"\x11\x9d\xd4\xfe\xc52\x00\x15;\x83Q\x14\xbb\x83$\xb1" +
	"}A\xd2\xa9{_\xcd\xbd\xaaF\xa6\\\xca\xa8\x13\xf9" +
	"7\xc4\\\x9e\x00}\xfcVq\x15\xf9e\x1d\xcaY\xf7" +
	"\xd3\x9f\x83\x07\xafe\x80\x17\xf0]\xe2R\x0a\x0e\xf3\x0b" +
	"\xc5\xb5\x14|u\x931\xfe\xc0\xb1\xfc>\xf7\xc4W\xf2" +
	"4Q\x99'\x89\xfa\xa7|9\xeb\xe5\x17\x8f\xfcHd" +
	"\xc88\xe1\x92\x02\xe2w\x8b\xcf\xd1\x80\x9b\xf9\x0e\xc0\xfe" +
	"9\xe1\xb9\xdd{*o\xbbZr\x91\xa7-\xe9\xa3\xa1" +
	"\xc6O\xfe\xe0\xe4\xe5\xffO\xe8\x1f@}.\x9fR\xbf" +
	" \xbf\x03,\xd8e\xb5h\xa1&YS5OeX" +
	"\x8b$t3\x92\xe8P\xf4\xc6\xc4\xba\xa5\x8a)\xc7d" +
	"S\x86\x08\xa24\xc2\xe3\x05\xf0\"\x80P\xd2\x05 M" +
	"\xf1\xa04\x9bA\xc4\x91$\xac0C\x07\x90\xa6{P" +
	"\xaaf\xd0\xd2te\xb5\xa2\xeb\x0a\xc6H\xb4e\xedq" +
	"\x00d\x81A\x16\x9cwP\x18[\x940L\x0c\x00\x83" +
	"\x012\xfct\x0e\xb5M4\x89PSBU\x95&\xb3" +
	"8\"\xebr\xdc\x00\xc9\x9bN\x80\xab\x03\x90\x02\x1e\x94" +
	"\xc60h\xc5\x12\x1d\xaaa\xea\x0ax\xe48\x0aV\xfd" +
	"\xa5\x9e\x92\x8e\xd9+N\x01 \x0a\xae\xb8L\xe5\xf2X" +
	"2\xae\xa1\xa8\xb1\xe2\xa8Rh\xb4\xb7\x99F\xfa=V" +
	"\x86\xb5\xa8\x12O\x98\x85\x0a\xc9+Y\xb1\xcf5,\xb4" +
	"\xd9'\x94\xd7\x01#\x94\xb0\xe8H\x17\xe7@j\x0a\xe3" +
	"\xc8\xbb\x02\xd6jVLZ\x07xt\xb3\x1a\xc9#=" +
	">\xf9\x18A\x1c\xd0\xf3\xb0j*\xfaj\xb9I\x09\xb5" +
	"\xb5\x18\xa6\xa2\xd66i\xc5\xd1*\x85&\xe8.\xbb\x12" +
	"@\x1a\xe1Ai$\x83Ukd5\xd6\xa6\xa0`]" +
	"\xa8ihx\xb3\xf8\xd6\xae\xc1\x05{+\xc3\xda2\xc5" +
	"\xecH\xe8\xad\xa1f\xc5\xa4\xb5\xd1\xd2j\xd6/\x93\xe3" +
	"Jq\xa4\x90\xf6\xd5\x1d\xbf\xc6\x89\xdf)\xc7b\xbab" +
	"\x18Y\xe6\x93\x99\xef\xf2\x98\x96\x0e\xe7\xa2\x09\x09W\xec" +
	"A\xa9\xcc\xa1\xc9\xd4R\x00\xe9\x1f\x1e\x94\xa63\xd8\xa9" +
	"%\xc9aS\x83'\xcf(8v\x971\xc1\x88\xa2\x1b" +
	"\xf4@\x93\x96\xc6\x93\xda\"\x88\x11\x8fO\x1a\x81.{" +
	"!z<s\xec\xc9\xb3}/|H~\xbbGL;" +
	"\xe2\xd1[%\xaf\xdb\x01\x04l\xb4l\xd2\x03[+7" +
	"'go\xfb\x89\xcb\xc3\xcbu{\xf6\xf6\xd2A\xdb\xb6" +
	"\x84q\xaf\x03#\x8c\xa5\xb3\xa7\xdd\x86$\x95\x92\xe3\xa7" +
	"\x7fA{\x00\xac\x1cW\x06\xf2`\xc8q\x15G\x93D" +
	"\x80\x01\x0a(uF\xc5\xaf!:\x12\x9c\x9d\x9a\x85\x08" +
	"N\xb8\x90ME=\xab\xb2\xdc\x14\x184\x1fW\x1fS" +
	"\x01\x80\x1a\x83\x97\xca\xc4\xde;h\xef|A(\x05F" +
	"\xf0\xb1<\xd1\xdb\xc0Z\x07i1\"\xf3\xc3PGH" +
	"s\xa7\xce\xb1\x9d\xce\xb8b\x18r\xb3\x82\x1c0\xc8\x01" +
	"Z\xbab\xb6\xebjR`\xc3ph(\xf6>\xb6\xda" +
	"2m+\xeb\xd8\x16\xbb\x8c\xab]#\xb6%\xc7\x01`" +
	"X\xdfr\xb3>\xac\x9aU\xc9\xe4]\xbcO/\xaa!" +
	"x\xcf\xb8\xa8EY^\xd5\x98XGHN4\x90\xde" +
	"\x89\x02\xd6Y\x0b\xd4&}\xbdf\xb6\x80'\xa1\x0e\xe5" +
	"\xb7\x8a\x0b\x83\xf9\xce\xf7\x80\x98\xff\x08\xf6\x93\xad\xe3\x8f" +
	"E\xeaT\xff\x1f,\x97\x94\xcd\xa47\xf6\xc3\xfa\xe6\x83" +
	"\xe4b;f\xbe\xb3\xbe\x87\xe9\x89m7\xb5rs\xc8" +
	"n{\x02\xd5\xd4\xa6\x0dXVR\x08\xa5\x8e\x108\xfc" +
	"\xd5J)a\x82\xe3\xa2\xbc\x9aP\x15\xc8a\xcd6\x03" +
	"r\x06X\x1d\xe59\x9f\xe2Jj\x99\xd9\xb7\x01\xb4\xef" +
	"\xd4By\xd464\xfb\x92\x8c\xf6\x15Q\x18\x17M." +
	"3{+\x01j\xd5h\xd9\xaa\xa1OnY\xa3\xad\x01" +
	"\xb7/\xd8\xff#\xa0}\xaf\x14\x84\x1a\xea\x0b\x9d)\xa1" +
	"d\xda`\xf6\xb9\xfen\xb3\x0ak\xf3\xc8d<\x861" +
	"\xe8\x1a\x93\xd5dj\\\x0b\xaa\x8d\xcch\xe6t\xcc\x05" +
	"\x06s\x01;\xdb5\xcd\xfd\xfc\x10\x0e\xfb\xb0d|\x14" +
	"\xbf\"\xb7\x83?n\xdb\x0e\x92\xc1o\x01\x00\x00\xff\xff" +
	"\xb4D\xe0Q"

func init() {
	schemas.Register(schema_f44732d435305f86,
		0x856e71a6a4f22bba,
		0x8a60e53250a32321,
		0x8e43fd8e213b1811,
		0x905dd76b298b3130,
		0x9381253786627ecf,
		0x9d5f1f6efcf7bbc4,
		0xa1d8815a262abc49,
		0xa5b3215660e038f2,
		0xa982576b7a2a2040,
		0xb57bd5aef30c4b61,
		0xb62b02486ebe26ed,
		0xc6212e1217d001ce,
		0xc6ca13f7c8dbd102,
		0xcb83a480981bc290,
		0xcdd1222d14073645,
		0xcf43ebe6a5a6f1b4,
		0xcf9e3f33950df819,
		0xd14a2ec2bad45f69,
		0xd77df9f44cfcde33,
		0xdd1700c1eb725eb4,
		0xe2d94cf90fe4078d,
		0xe32c506ee93ed6fa,
		0xeab20e1af07806b4,
		0xed10beb11e7383e9,
		0xeeb98f9937d32c0b,
		0xf53aa3a93e49003b,
		0xfd226ae4c6bd2b1e)
}
