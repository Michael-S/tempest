// Code generated by capnpc-go. DO NOT EDIT.

package sandstormhttpbridgeinternal

import (
	context "context"
	strconv "strconv"
	grain "zenhack.net/go/sandstorm/capnp/grain"
	websession "zenhack.net/go/sandstorm/capnp/websession"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

// Constants defined in sandstorm-http-bridge-internal.capnp.
const (
	BridgeRequestSessionHtml = "<!DOCTYPE html>\n\n<html>\n  <head>\n    <style type=\"text/css\">\n      * {\n        box-sizing: border-box;\n      }\n      body {\n        font-family: sans-serif;\n        font-size: 20px;\n      }\n      button {\n        border: none;\n        font-size: inherit;\n        font-family: inherit;\n        font-weight: inherit;\n        text-decoration: inherit;\n        color: inherit;\n        line-height: inherit;\n        background-color: transparent;\n        text-align: inherit;\n        padding: 0;\n        cursor: pointer;\n        display: block;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        width: 100%;\n        padding-left: 32px;\n        height: 31px;\n      }\n      li {\n        border: 1px solid #ddd;\n        border-bottom: none;\n        background-color: #eee;\n        vertical-align: middle;\n        height: 32px;\n      }\n      ul {\n        border-bottom: 1px solid #ddd;\n        padding: 0;\n        margin: 10px;\n        list-style-type: none;\n      }\n    </style>\n  </head>\n  <body>\n    <ul id=\"list\">\n    </ul>\n\n    <script type=\"text/javascript\">\n      var config = @CONFIG@;\n\n      function makeClickHandler(name) {\n        return function () {\n          var xhr = new XMLHttpRequest();\n          xhr.onload = function () {\n            if (xhr.status >= 400) {\n              alert(\"XHR returned status \" + xhr.status + \":\\n\" + xhr.responseText);\n            }\n          }\n          xhr.onerror = function(e) { alert(e); };\n          xhr.open(\"post\", \"/\");\n          xhr.send(name);\n        }\n      }\n\n      var list = document.getElementById(\"list\");\n      for (var i in config) {\n        var api = config[i];\n\n        var button = document.createElement(\"button\");\n        button.addEventListener(\"click\", makeClickHandler(api.name));\n        if (api.displayInfo && api.displayInfo.title && api.displayInfo.title.defaultText) {\n          button.textContent = api.displayInfo.title.defaultText;\n        } else {\n          button.textContent = \"Use this grain\";\n        }\n\n        var item = document.createElement(\"li\");\n        item.appendChild(button);\n\n        list.appendChild(item);\n      }\n    </script>\n  </body>\n</html>\n"
)

type BridgeObjectId struct{ capnp.Struct }
type BridgeObjectId_Which uint16

const (
	BridgeObjectId_Which_application BridgeObjectId_Which = 0
	BridgeObjectId_Which_httpApi     BridgeObjectId_Which = 1
)

func (w BridgeObjectId_Which) String() string {
	const s = "applicationhttpApi"
	switch w {
	case BridgeObjectId_Which_application:
		return s[0:11]
	case BridgeObjectId_Which_httpApi:
		return s[11:18]

	}
	return "BridgeObjectId_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// BridgeObjectId_TypeID is the unique identifier for the type BridgeObjectId.
const BridgeObjectId_TypeID = 0xde7c54260c265bb4

func NewBridgeObjectId(s *capnp.Segment) (BridgeObjectId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BridgeObjectId{st}, err
}

func NewRootBridgeObjectId(s *capnp.Segment) (BridgeObjectId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BridgeObjectId{st}, err
}

func ReadRootBridgeObjectId(msg *capnp.Message) (BridgeObjectId, error) {
	root, err := msg.Root()
	return BridgeObjectId{root.Struct()}, err
}

func (s BridgeObjectId) String() string {
	str, _ := text.Marshal(0xde7c54260c265bb4, s.Struct)
	return str
}

func (s BridgeObjectId) Which() BridgeObjectId_Which {
	return BridgeObjectId_Which(s.Struct.Uint16(0))
}
func (s BridgeObjectId) Application() (capnp.Ptr, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != application")
	}
	return s.Struct.Ptr(0)
}

func (s BridgeObjectId) HasApplication() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s BridgeObjectId) SetApplication(v capnp.Ptr) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v)
}

func (s BridgeObjectId) HttpApi() (BridgeObjectId_HttpApi, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != httpApi")
	}
	p, err := s.Struct.Ptr(0)
	return BridgeObjectId_HttpApi{Struct: p.Struct()}, err
}

func (s BridgeObjectId) HasHttpApi() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s BridgeObjectId) SetHttpApi(v BridgeObjectId_HttpApi) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHttpApi sets the httpApi field to a newly
// allocated BridgeObjectId_HttpApi struct, preferring placement in s's segment.
func (s BridgeObjectId) NewHttpApi() (BridgeObjectId_HttpApi, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewBridgeObjectId_HttpApi(s.Struct.Segment())
	if err != nil {
		return BridgeObjectId_HttpApi{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// BridgeObjectId_List is a list of BridgeObjectId.
type BridgeObjectId_List struct{ capnp.List }

// NewBridgeObjectId creates a new list of BridgeObjectId.
func NewBridgeObjectId_List(s *capnp.Segment, sz int32) (BridgeObjectId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return BridgeObjectId_List{l}, err
}

func (s BridgeObjectId_List) At(i int) BridgeObjectId { return BridgeObjectId{s.List.Struct(i)} }

func (s BridgeObjectId_List) Set(i int, v BridgeObjectId) error { return s.List.SetStruct(i, v.Struct) }

func (s BridgeObjectId_List) String() string {
	str, _ := text.MarshalList(0xde7c54260c265bb4, s.List)
	return str
}

// BridgeObjectId_Future is a wrapper for a BridgeObjectId promised by a client call.
type BridgeObjectId_Future struct{ *capnp.Future }

func (p BridgeObjectId_Future) Struct() (BridgeObjectId, error) {
	s, err := p.Future.Struct()
	return BridgeObjectId{s}, err
}

func (p BridgeObjectId_Future) Application() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p BridgeObjectId_Future) HttpApi() BridgeObjectId_HttpApi_Future {
	return BridgeObjectId_HttpApi_Future{Future: p.Future.Field(0, nil)}
}

type BridgeObjectId_HttpApi struct{ capnp.Struct }

// BridgeObjectId_HttpApi_TypeID is the unique identifier for the type BridgeObjectId_HttpApi.
const BridgeObjectId_HttpApi_TypeID = 0x903896a2654fb12b

func NewBridgeObjectId_HttpApi(s *capnp.Segment) (BridgeObjectId_HttpApi, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return BridgeObjectId_HttpApi{st}, err
}

func NewRootBridgeObjectId_HttpApi(s *capnp.Segment) (BridgeObjectId_HttpApi, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return BridgeObjectId_HttpApi{st}, err
}

func ReadRootBridgeObjectId_HttpApi(msg *capnp.Message) (BridgeObjectId_HttpApi, error) {
	root, err := msg.Root()
	return BridgeObjectId_HttpApi{root.Struct()}, err
}

func (s BridgeObjectId_HttpApi) String() string {
	str, _ := text.Marshal(0x903896a2654fb12b, s.Struct)
	return str
}

func (s BridgeObjectId_HttpApi) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s BridgeObjectId_HttpApi) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s BridgeObjectId_HttpApi) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s BridgeObjectId_HttpApi) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s BridgeObjectId_HttpApi) Path() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s BridgeObjectId_HttpApi) HasPath() bool {
	return s.Struct.HasPtr(1)
}

func (s BridgeObjectId_HttpApi) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s BridgeObjectId_HttpApi) SetPath(v string) error {
	return s.Struct.SetText(1, v)
}

func (s BridgeObjectId_HttpApi) Permissions() (capnp.BitList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.BitList{List: p.List()}, err
}

func (s BridgeObjectId_HttpApi) HasPermissions() bool {
	return s.Struct.HasPtr(2)
}

func (s BridgeObjectId_HttpApi) SetPermissions(v capnp.BitList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewPermissions sets the permissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s BridgeObjectId_HttpApi) NewPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s BridgeObjectId_HttpApi) IdentityId() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s BridgeObjectId_HttpApi) HasIdentityId() bool {
	return s.Struct.HasPtr(3)
}

func (s BridgeObjectId_HttpApi) SetIdentityId(v []byte) error {
	return s.Struct.SetData(3, v)
}

// BridgeObjectId_HttpApi_List is a list of BridgeObjectId_HttpApi.
type BridgeObjectId_HttpApi_List struct{ capnp.List }

// NewBridgeObjectId_HttpApi creates a new list of BridgeObjectId_HttpApi.
func NewBridgeObjectId_HttpApi_List(s *capnp.Segment, sz int32) (BridgeObjectId_HttpApi_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return BridgeObjectId_HttpApi_List{l}, err
}

func (s BridgeObjectId_HttpApi_List) At(i int) BridgeObjectId_HttpApi {
	return BridgeObjectId_HttpApi{s.List.Struct(i)}
}

func (s BridgeObjectId_HttpApi_List) Set(i int, v BridgeObjectId_HttpApi) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s BridgeObjectId_HttpApi_List) String() string {
	str, _ := text.MarshalList(0x903896a2654fb12b, s.List)
	return str
}

// BridgeObjectId_HttpApi_Future is a wrapper for a BridgeObjectId_HttpApi promised by a client call.
type BridgeObjectId_HttpApi_Future struct{ *capnp.Future }

func (p BridgeObjectId_HttpApi_Future) Struct() (BridgeObjectId_HttpApi, error) {
	s, err := p.Future.Struct()
	return BridgeObjectId_HttpApi{s}, err
}

type BridgeHttpSession struct{ Client *capnp.Client }

// BridgeHttpSession_TypeID is the unique identifier for the type BridgeHttpSession.
const BridgeHttpSession_TypeID = 0xb71e38915c2a2afc

func (c BridgeHttpSession) Get(ctx context.Context, params func(websession.WebSession_get_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Post(ctx context.Context, params func(websession.WebSession_post_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_post_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) OpenWebSocket(ctx context.Context, params func(websession.WebSession_openWebSocket_Params) error) (websession.WebSession_openWebSocket_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_openWebSocket_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_openWebSocket_Results_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Put(ctx context.Context, params func(websession.WebSession_put_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_put_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Delete(ctx context.Context, params func(websession.WebSession_delete_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_delete_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) PostStreaming(ctx context.Context, params func(websession.WebSession_postStreaming_Params) error) (websession.WebSession_postStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_postStreaming_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_postStreaming_Results_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) PutStreaming(ctx context.Context, params func(websession.WebSession_putStreaming_Params) error) (websession.WebSession_putStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_putStreaming_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_putStreaming_Results_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Propfind(ctx context.Context, params func(websession.WebSession_propfind_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_propfind_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Proppatch(ctx context.Context, params func(websession.WebSession_proppatch_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_proppatch_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Mkcol(ctx context.Context, params func(websession.WebSession_mkcol_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_mkcol_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Copy(ctx context.Context, params func(websession.WebSession_copy_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_copy_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Move(ctx context.Context, params func(websession.WebSession_move_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_move_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Lock(ctx context.Context, params func(websession.WebSession_lock_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_lock_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Unlock(ctx context.Context, params func(websession.WebSession_unlock_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_unlock_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Acl(ctx context.Context, params func(websession.WebSession_acl_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_acl_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Report(ctx context.Context, params func(websession.WebSession_report_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_report_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Options(ctx context.Context, params func(websession.WebSession_options_Params) error) (websession.WebSession_Options_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_options_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Options_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Patch(ctx context.Context, params func(websession.WebSession_patch_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_patch_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Save(ctx context.Context, params func(grain.AppPersistent_save_Params) error) (grain.AppPersistent_save_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaffa789add8747b8,
			MethodID:      0,
			InterfaceName: "grain.capnp:AppPersistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(grain.AppPersistent_save_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return grain.AppPersistent_save_Results_Future{Future: ans.Future()}, release
}

// A BridgeHttpSession_Server is a BridgeHttpSession with a local implementation.
type BridgeHttpSession_Server interface {
	Get(context.Context, websession.WebSession_get) error

	Post(context.Context, websession.WebSession_post) error

	OpenWebSocket(context.Context, websession.WebSession_openWebSocket) error

	Put(context.Context, websession.WebSession_put) error

	Delete(context.Context, websession.WebSession_delete) error

	PostStreaming(context.Context, websession.WebSession_postStreaming) error

	PutStreaming(context.Context, websession.WebSession_putStreaming) error

	Propfind(context.Context, websession.WebSession_propfind) error

	Proppatch(context.Context, websession.WebSession_proppatch) error

	Mkcol(context.Context, websession.WebSession_mkcol) error

	Copy(context.Context, websession.WebSession_copy) error

	Move(context.Context, websession.WebSession_move) error

	Lock(context.Context, websession.WebSession_lock) error

	Unlock(context.Context, websession.WebSession_unlock) error

	Acl(context.Context, websession.WebSession_acl) error

	Report(context.Context, websession.WebSession_report) error

	Options(context.Context, websession.WebSession_options) error

	Patch(context.Context, websession.WebSession_patch) error

	Save(context.Context, grain.AppPersistent_save) error
}

// BridgeHttpSession_NewServer creates a new Server from an implementation of BridgeHttpSession_Server.
func BridgeHttpSession_NewServer(s BridgeHttpSession_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BridgeHttpSession_Methods(nil, s), s, c, policy)
}

// BridgeHttpSession_ServerToClient creates a new Client from an implementation of BridgeHttpSession_Server.
// The caller is responsible for calling Release on the returned Client.
func BridgeHttpSession_ServerToClient(s BridgeHttpSession_Server, policy *server.Policy) BridgeHttpSession {
	return BridgeHttpSession{Client: capnp.NewClient(BridgeHttpSession_NewServer(s, policy))}
}

// BridgeHttpSession_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BridgeHttpSession_Methods(methods []server.Method, s BridgeHttpSession_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 19)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, websession.WebSession_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Post(ctx, websession.WebSession_post{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.OpenWebSocket(ctx, websession.WebSession_openWebSocket{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, websession.WebSession_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Delete(ctx, websession.WebSession_delete{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PostStreaming(ctx, websession.WebSession_postStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PutStreaming(ctx, websession.WebSession_putStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Propfind(ctx, websession.WebSession_propfind{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Proppatch(ctx, websession.WebSession_proppatch{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Mkcol(ctx, websession.WebSession_mkcol{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Copy(ctx, websession.WebSession_copy{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Move(ctx, websession.WebSession_move{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lock(ctx, websession.WebSession_lock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unlock(ctx, websession.WebSession_unlock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Acl(ctx, websession.WebSession_acl{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Report(ctx, websession.WebSession_report{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Options(ctx, websession.WebSession_options{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Patch(ctx, websession.WebSession_patch{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaffa789add8747b8,
			MethodID:      0,
			InterfaceName: "grain.capnp:AppPersistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, grain.AppPersistent_save{call})
		},
	})

	return methods
}

type SessionType uint16

// SessionType_TypeID is the unique identifier for the type SessionType.
const SessionType_TypeID = 0xa602fb2d5be9c504

// Values of SessionType.
const (
	SessionType_normal  SessionType = 0
	SessionType_request SessionType = 1
	SessionType_offer   SessionType = 2
)

// String returns the enum's constant name.
func (c SessionType) String() string {
	switch c {
	case SessionType_normal:
		return "normal"
	case SessionType_request:
		return "request"
	case SessionType_offer:
		return "offer"

	default:
		return ""
	}
}

// SessionTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func SessionTypeFromString(c string) SessionType {
	switch c {
	case "normal":
		return SessionType_normal
	case "request":
		return SessionType_request
	case "offer":
		return SessionType_offer

	default:
		return 0
	}
}

type SessionType_List struct{ capnp.List }

func NewSessionType_List(s *capnp.Segment, sz int32) (SessionType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return SessionType_List{l.List}, err
}

func (l SessionType_List) At(i int) SessionType {
	ul := capnp.UInt16List{List: l.List}
	return SessionType(ul.At(i))
}

func (l SessionType_List) Set(i int, v SessionType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

const schema_f963cc483d8f9e3a = "x\xda\x8cVKlcI\xd5>\xe7:\x19\x8fZ\xe9" +
	"?\xf1\xd8\xd1\xac\xfe\xe9\xc2\xa34Nw\xdbI:\xbd" +
	"h9\xf1LO2a\x124\x90x\xd2H\xc3t#" +
	"Q\xbeU\xf6\xad\xe9r\xd5\xa5\xaa\x9c\xd8\x03\xad\x061" +
	"\x12\x12B\x026\x08\xb1`1\x0b\x84X\x80\x90\x90x" +
	"H,X\xf0X\xc0\x92\xc5,`\x01\x0b\x98-\x1b\xc4" +
	"c\xb8\xa8|\x9d\xf8:v3\xad,r}\xbeS\xe7" +
	"|\xf5\x9d\x87j\xfd{\xf3w\x82\x8d\xf9\xbf?\x07p" +
	"\x1c\xe1\xfcS\xc9\xf7\x07\xee\xaf?\xfd\xe6\x1b_\x84\xc2" +
	"\xca\\R\xff\xf6W\x1b\xfb\xbf\x0d\xff\x01\x80\x9bt\xf1" +
	"oX|\xb8\x98\x078\xee/\xe6\xf0\xf8\xed\xc5\x00\x01" +
	"\x92\xeb?<\xe4\xef|\xe3\xf6\xd7\xa0p\x0b\x93\x1f\xdd" +
	"\xbb\xbap\xf5\xee\xe7\xfe\x08\xf3sy\x80\xcd\x9f\x17\xff" +
	"\x84\xc5w\x8by\x80\xe2\xef\x8b\x7f\x01L\xe6~\xf9\xde" +
	"\xbd\xea\xbf\x82\xef@a%\x98\x08\xfe\x8b\xd2\x97\xb1\xf8" +
	"ni\xe8Y:\x04L\xfe}\xed\xda\xfd\xaf\xdf~\xee" +
	"\xc7PX\xc9Mx\xbeW\xfa\x19\x16q\xd9{\xbe_" +
	"\xca\x17\xdf/}\x18`\x9c\xb7\xb9\x828v\xdf\xc3|" +
	"\x00\xb0\xb9\xb2\xfc\x0e\x16\x1b\xcb\xcf\x02\x14\xf7\x96O!" +
	"\x19\xfe}7\xb1T1\xeb\xb4y\xaa[\x8d\x9c\x8b\xab" +
	"-#X\x87W\x85r\xdc(*k!\x8dU\\O" +
	"\xad\xaf\xf1\xcf\xf4\xb8u\xc7\xdcZ\xa1\xaf\xa8}\xd7\x95" +
	"G\x88\xb8\x00\x01.\x00l\xe0G_N\xb6?\xf4\xf2" +
	"\xe1\xee\xddO\x1e%{$r]\xf9\xc2\xa5K\xdb\xe9" +
	"\x7fB\xb6#N\x99\xff d\xdb\xba\x81\xe4\xc4\x0db" +
	"\xde(;\xdewk\xa1\xb5\xe5\x14#\xe4\x1a\xf9\xec\xe8" +
	"\x8b\x90\x96\xeeW\xadxK\xa8N\x9d\xb4\xb4a\xdcT" +
	"[\xba\xbf5\xc2\x1f^:\xf3b\x83\xcc\xa1\xb6V\xae" +
	"\xda\xa6]!\x07ub\xa9\xb2U\xcb\x8dhoM:" +
	"X\xf1\x16\xaf\x93\x9b\xeb\xf1t\xb8\x9esZM\xb0\xf0" +
	"\x99\xebDi\xc5gF\x11*\xe2F\xb8\xad\xd9\x14f" +
	"\xa3\xa7\\t\"7\x03\xf5\x82T\x19\x0f\xb5\xa1Nh" +
	"5\xc3#\xd4R\x9b\x19v)\x14\xafF\x8f\x8b\xdb\xa2" +
	"\xe1\x83\x8e\xd1=\xc5\xaa\xa3\x00\xcePecj\xb8\xba" +
	"\x98\x9eJ\xd1\x99\x959\xa6\x8c\x0d\x8b\xb1\x9ea\xd33" +
	"\xd6G\x8b\xf5\xb0k\xc6\x00\x136\x96tP'-\xa9" +
	"\xc3\x07c\xbb>\xe1\xa6-\xf5i\x9dD\x821\xae." +
	"\xe4\x1e\xc3\\J\x11[a\xc7\x0e\xa7\x91p\xbcjc" +
	"\x1ar_\x8eSC\xe3\x0c(\x98\x8b\xeadc}}" +
	"e\x8aqU\xf2\xb6\xab\x93\xcd\x9b\xe3r\x13r&\xd5" +
	"\xe6\xc6t\x13H1\xa3\x016\xe2>\xb1Z\x0aF\x9e" +
	"g\x8cm]\xc0\xab-\xed\x9c\xee^\xec\x93i\xdd\x9f" +
	"\xe7<\x83\x9fp\xe3DH\xe5\x99\xe8]\xc1\x98\xe43" +
	"X\xde\x9cf\xd9\x93S,\xcfY<\x8e\xec\xac\x1av" +
	"\xa9\xe9\x08\xe5\xb5\xcb\xea#\x85u\xd5\xe1\xacV\xfd\xac" +
	"N^,\xa5\xb0\xbd6\xc4\x87\x03\xbev6\xe1\xdb~" +
	" G\xa3\xde\x93D\xb0F\xd9\x87\x1aM\xf8\xf6Z\xcf" +
	"/\x86t\x11\x84F\xc4.\xbb\x09\xde\xa4'4\xb5\x9e" +
	"/\x84\x13jH\xa8U[tH\x83\xdc\xd9=\xfc\xf8" +
	"G\x0e^\xb9\xb3ui\x84\xb6{*\xf4sB\xba\xf4" +
	"\x01\xdf\x95\"|\xb0O\x15\x93\xdcT\x14\xed\xf2\xd5\x8c" +
	">\x86\xbb\x9eQ\xe3\x03\x95,\x98\xa6\xe9G\x864\x88" +
	"\xe2\xa7\xe4\xf5\x8f\xbd\xba\xef\\<\xday\x95\xd5\xad\x8c" +
	"g?25\xad\xa4\xa6\x8c4\x1e\x1b\x8e\x10\xd1&\x15" +
	"\xefj\x1du=K^h\x90[\xeb\xeb\x17\x9d\x08\xa1" +
	"\x92\x1bW)\xbf\xbe\xff\xda\x88!gdt\xa4L\xae" +
	"\x93L\x84\xeb\xa4\\\xbf\xaf\xce\x8c\x86\xdbX+\xcb\xef" +
	"\xf2\xbe\x9b\xa07n\x8f\x8b\xdf)qn\x8c6\x19\xe6" +
	"\x15\xaf\xd2\x88\x06_\xdd\"\x0f\xa7\xee\x1asU)\xc7" +
	"\xda\xba\xf2\x0dR^+O\x89a\xb9b\xa9\xdcc\xe4" +
	"\xe1y\x9fd\xca\xe8\xdb\x804\x08\xd3a\xaf\xcb\x95\xab" +
	"u\xb8\xdb\x93\xdc\x7f\xee\x0c\x0eX%m\x93\xf3 m" +
	"mH\xc5\x1f\x13D\xa8Q\x0bd\xf5\xf3\x10\x8d\x05i" +
	"\x8c\xb0{\xe2S\xe7m\x91\xa2\xa3U\x9e\xc9\x18\x1aN" +
	"\x1d\x1f%\xad\x94S\x87\xec\x8dRK\x8d2\xb6w\xc2" +
	"\x95{UX\xc7\x157\x95r\xe8{\xab|c\xba\xcf" +
	"h,j\xc3\xcbg\xa2\xf8\xda{\xfbh\x07\x1e\xa8\xb6" +
	"&W\xaf\x92\x0b\xa6\x9a\x13N\xf2\xc7\x025\xc6\xdb\xb4" +
	"'\xdd\xb0\xc2\x13}3\"\xe9'fW+\xc7\x95W" +
	"\xf5\x03cd\x8aC\xb8\xb4\xfc\x83C\x96?a9q" +
	"\x91\xb0\xa4c\xa8P\xe5ly'\x84\x16\x8ew\xbd\xcc" +
	"\xc9\x99\xceK\x17\x84\x96\"+\xb2w\xaf\xd18\xe6\x8a" +
	"\xedFB\xb2J\x9a}5S>\xdf\x0a\x13.\xfe\xcc" +
	"\xea\xd4\xf6\x19\xae\x8at\xfd\xa4[g{-}q\x00" +
	"<\xe1\xe3fgh=l\xbd\xc9Cw\xc0j~\xea" +
	"\xf3/\xc5\xe2\x08\xb1\xb9\x94\x9b\x03\x98C\x80\x02\xbd\x06" +
	"\xd0\xbc\x9f\xc3f\x14`\x01\xb1\x84\xde\xc8\xbd\xf1\xd39" +
	"l\xca\x00\x0bAP\xc2\x00\xa0 Z\x00\xcd(\x87\xcd" +
	"\xb7\x03,\xe4r%\xcc\x01\x14\xbe\xf0\x06@\xf3\xf39" +
	"l~%\xc0E\xdf+\xa3W\x13.\xc6\xd4Eg?" +
	"\x92\x98\x9b\xae\xb0V@^+\x8b\xff\x07x\x94CD" +
	"\x08\xfcg\"\x18WN\xb8\x01\xe4\x0e\x18^\x86\x00/" +
	"\x03\x9e_q\xfe\x7f^1}\xb2\xa9\xbb\x83\x98\x03\xf8" +
	"\x8b-\x0c\xa9\xfe\x7f\x1d\x00\xb1\xb0\xbc\x03\x80A\xe1\xf2" +
	"M\x80\x17\x956]*\x1f\x99t\xed]\xd1\xed67" +
	"O\x98$\xd5\xd1\xcbw\xfcb\x9a\xef\x08\xf1(7\xdf" +
	"|\x1a1\xf9\xf5\xefV~5\xf8\xf3\xe07\x00\x90\xfc" +
	"\xe4\x95/\xfd\xe1[\xfd\x7f\xfe\x00\xee`\x01\xaf4\xe7" +
	"\x02\x1c\x9b\x00\x0a\xf8ls\x0e\x11\x87w_\x1a\xbfj" +
	"\x9f\xf8\xb2\x99z\xe6\xdd\x01\xf3\xc12\x0ft\xdcy\xe4" +
	")\xbe\x14\x8b\xe6\xd3\xb9\xb9\x85$\x19\x96w\xd5\x17\xad" +
	"\x92\xc3\xe6\xad\x00/\xe3\x7f\x92\xb4\xbe\x1b;\x00\xcd\x1b" +
	"9l\xde\x0e0\xa1q,EH\x1d\xe4\x85V\xf8\x0c" +
	"\x04\xf8\x0c\xe0\xa3(\x8d\x85K\xe3\x14\x80\xb8\x04\xf8\xdf" +
	"\x00\x00\x00\xff\xff\xfb\x1c\x87\x98"

func init() {
	schemas.Register(schema_f963cc483d8f9e3a,
		0x835a98b9e87479ae,
		0x903896a2654fb12b,
		0xa602fb2d5be9c504,
		0xb71e38915c2a2afc,
		0xde7c54260c265bb4)
}
