// Code generated by capnpc-go. DO NOT EDIT.

package sandstormhttpbridgeinternal

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	strconv "strconv"
	grain "zenhack.net/go/sandstorm/capnp/grain"
	powerbox "zenhack.net/go/sandstorm/capnp/powerbox"
	websession "zenhack.net/go/sandstorm/capnp/websession"
)

// Constants defined in sandstorm-http-bridge-internal.capnp.
const (
	BridgeRequestSessionHtml = "<!DOCTYPE html>\n\n<html>\n  <head>\n    <style type=\"text/css\">\n      * {\n        box-sizing: border-box;\n      }\n      body {\n        font-family: sans-serif;\n        font-size: 20px;\n      }\n      button {\n        border: none;\n        font-size: inherit;\n        font-family: inherit;\n        font-weight: inherit;\n        text-decoration: inherit;\n        color: inherit;\n        line-height: inherit;\n        background-color: transparent;\n        text-align: inherit;\n        padding: 0;\n        cursor: pointer;\n        display: block;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        width: 100%;\n        padding-left: 32px;\n        height: 31px;\n      }\n      li {\n        border: 1px solid #ddd;\n        border-bottom: none;\n        background-color: #eee;\n        vertical-align: middle;\n        height: 32px;\n      }\n      ul {\n        border-bottom: 1px solid #ddd;\n        padding: 0;\n        margin: 10px;\n        list-style-type: none;\n      }\n    </style>\n  </head>\n  <body>\n    <ul id=\"list\">\n    </ul>\n\n    <script type=\"text/javascript\">\n      var config = @CONFIG@;\n\n      function makeClickHandler(name) {\n        return function () {\n          var xhr = new XMLHttpRequest();\n          xhr.onload = function () {\n            if (xhr.status >= 400) {\n              alert(\"XHR returned status \" + xhr.status + \":\\n\" + xhr.responseText);\n            }\n          }\n          xhr.onerror = function(e) { alert(e); };\n          xhr.open(\"post\", \"/\");\n          xhr.send(name);\n        }\n      }\n\n      var list = document.getElementById(\"list\");\n      for (var i in config) {\n        var api = config[i];\n\n        var button = document.createElement(\"button\");\n        button.addEventListener(\"click\", makeClickHandler(api.name));\n        if (api.displayInfo && api.displayInfo.title && api.displayInfo.title.defaultText) {\n          button.textContent = api.displayInfo.title.defaultText;\n        } else {\n          button.textContent = \"Use this grain\";\n        }\n\n        var item = document.createElement(\"li\");\n        item.appendChild(button);\n\n        list.appendChild(item);\n      }\n    </script>\n  </body>\n</html>\n"
)

type BridgeObjectId struct{ capnp.Struct }
type BridgeObjectId_Which uint16

const (
	BridgeObjectId_Which_application BridgeObjectId_Which = 0
	BridgeObjectId_Which_httpApi     BridgeObjectId_Which = 1
)

func (w BridgeObjectId_Which) String() string {
	const s = "applicationhttpApi"
	switch w {
	case BridgeObjectId_Which_application:
		return s[0:11]
	case BridgeObjectId_Which_httpApi:
		return s[11:18]

	}
	return "BridgeObjectId_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// BridgeObjectId_TypeID is the unique identifier for the type BridgeObjectId.
const BridgeObjectId_TypeID = 0xde7c54260c265bb4

func NewBridgeObjectId(s *capnp.Segment) (BridgeObjectId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BridgeObjectId{st}, err
}

func NewRootBridgeObjectId(s *capnp.Segment) (BridgeObjectId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BridgeObjectId{st}, err
}

func ReadRootBridgeObjectId(msg *capnp.Message) (BridgeObjectId, error) {
	root, err := msg.Root()
	return BridgeObjectId{root.Struct()}, err
}

func (s BridgeObjectId) String() string {
	str, _ := text.Marshal(0xde7c54260c265bb4, s.Struct)
	return str
}

func (s BridgeObjectId) Which() BridgeObjectId_Which {
	return BridgeObjectId_Which(s.Struct.Uint16(0))
}
func (s BridgeObjectId) Application() (capnp.Ptr, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != application")
	}
	return s.Struct.Ptr(0)
}

func (s BridgeObjectId) HasApplication() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s BridgeObjectId) SetApplication(v capnp.Ptr) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v)
}

func (s BridgeObjectId) HttpApi() (BridgeObjectId_HttpApi, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != httpApi")
	}
	p, err := s.Struct.Ptr(0)
	return BridgeObjectId_HttpApi{Struct: p.Struct()}, err
}

func (s BridgeObjectId) HasHttpApi() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s BridgeObjectId) SetHttpApi(v BridgeObjectId_HttpApi) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHttpApi sets the httpApi field to a newly
// allocated BridgeObjectId_HttpApi struct, preferring placement in s's segment.
func (s BridgeObjectId) NewHttpApi() (BridgeObjectId_HttpApi, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewBridgeObjectId_HttpApi(s.Struct.Segment())
	if err != nil {
		return BridgeObjectId_HttpApi{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// BridgeObjectId_List is a list of BridgeObjectId.
type BridgeObjectId_List struct{ capnp.List }

// NewBridgeObjectId creates a new list of BridgeObjectId.
func NewBridgeObjectId_List(s *capnp.Segment, sz int32) (BridgeObjectId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return BridgeObjectId_List{l}, err
}

func (s BridgeObjectId_List) At(i int) BridgeObjectId { return BridgeObjectId{s.List.Struct(i)} }

func (s BridgeObjectId_List) Set(i int, v BridgeObjectId) error { return s.List.SetStruct(i, v.Struct) }

func (s BridgeObjectId_List) String() string {
	str, _ := text.MarshalList(0xde7c54260c265bb4, s.List)
	return str
}

// BridgeObjectId_Future is a wrapper for a BridgeObjectId promised by a client call.
type BridgeObjectId_Future struct{ *capnp.Future }

func (p BridgeObjectId_Future) Struct() (BridgeObjectId, error) {
	s, err := p.Future.Struct()
	return BridgeObjectId{s}, err
}

func (p BridgeObjectId_Future) Application() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p BridgeObjectId_Future) HttpApi() BridgeObjectId_HttpApi_Future {
	return BridgeObjectId_HttpApi_Future{Future: p.Future.Field(0, nil)}
}

type BridgeObjectId_HttpApi struct{ capnp.Struct }

// BridgeObjectId_HttpApi_TypeID is the unique identifier for the type BridgeObjectId_HttpApi.
const BridgeObjectId_HttpApi_TypeID = 0x903896a2654fb12b

func NewBridgeObjectId_HttpApi(s *capnp.Segment) (BridgeObjectId_HttpApi, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return BridgeObjectId_HttpApi{st}, err
}

func NewRootBridgeObjectId_HttpApi(s *capnp.Segment) (BridgeObjectId_HttpApi, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return BridgeObjectId_HttpApi{st}, err
}

func ReadRootBridgeObjectId_HttpApi(msg *capnp.Message) (BridgeObjectId_HttpApi, error) {
	root, err := msg.Root()
	return BridgeObjectId_HttpApi{root.Struct()}, err
}

func (s BridgeObjectId_HttpApi) String() string {
	str, _ := text.Marshal(0x903896a2654fb12b, s.Struct)
	return str
}

func (s BridgeObjectId_HttpApi) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s BridgeObjectId_HttpApi) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s BridgeObjectId_HttpApi) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s BridgeObjectId_HttpApi) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s BridgeObjectId_HttpApi) Path() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s BridgeObjectId_HttpApi) HasPath() bool {
	return s.Struct.HasPtr(1)
}

func (s BridgeObjectId_HttpApi) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s BridgeObjectId_HttpApi) SetPath(v string) error {
	return s.Struct.SetText(1, v)
}

func (s BridgeObjectId_HttpApi) Permissions() (capnp.BitList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.BitList{List: p.List()}, err
}

func (s BridgeObjectId_HttpApi) HasPermissions() bool {
	return s.Struct.HasPtr(2)
}

func (s BridgeObjectId_HttpApi) SetPermissions(v capnp.BitList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewPermissions sets the permissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s BridgeObjectId_HttpApi) NewPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s BridgeObjectId_HttpApi) IdentityId() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s BridgeObjectId_HttpApi) HasIdentityId() bool {
	return s.Struct.HasPtr(3)
}

func (s BridgeObjectId_HttpApi) SetIdentityId(v []byte) error {
	return s.Struct.SetData(3, v)
}

// BridgeObjectId_HttpApi_List is a list of BridgeObjectId_HttpApi.
type BridgeObjectId_HttpApi_List struct{ capnp.List }

// NewBridgeObjectId_HttpApi creates a new list of BridgeObjectId_HttpApi.
func NewBridgeObjectId_HttpApi_List(s *capnp.Segment, sz int32) (BridgeObjectId_HttpApi_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return BridgeObjectId_HttpApi_List{l}, err
}

func (s BridgeObjectId_HttpApi_List) At(i int) BridgeObjectId_HttpApi {
	return BridgeObjectId_HttpApi{s.List.Struct(i)}
}

func (s BridgeObjectId_HttpApi_List) Set(i int, v BridgeObjectId_HttpApi) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s BridgeObjectId_HttpApi_List) String() string {
	str, _ := text.MarshalList(0x903896a2654fb12b, s.List)
	return str
}

// BridgeObjectId_HttpApi_Future is a wrapper for a BridgeObjectId_HttpApi promised by a client call.
type BridgeObjectId_HttpApi_Future struct{ *capnp.Future }

func (p BridgeObjectId_HttpApi_Future) Struct() (BridgeObjectId_HttpApi, error) {
	s, err := p.Future.Struct()
	return BridgeObjectId_HttpApi{s}, err
}

type BridgeHttpSession struct{ Client *capnp.Client }

// BridgeHttpSession_TypeID is the unique identifier for the type BridgeHttpSession.
const BridgeHttpSession_TypeID = 0xb71e38915c2a2afc

func (c BridgeHttpSession) Get(ctx context.Context, params func(websession.WebSession_get_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Post(ctx context.Context, params func(websession.WebSession_post_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_post_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) OpenWebSocket(ctx context.Context, params func(websession.WebSession_openWebSocket_Params) error) (websession.WebSession_openWebSocket_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_openWebSocket_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_openWebSocket_Results_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Put(ctx context.Context, params func(websession.WebSession_put_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_put_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Delete(ctx context.Context, params func(websession.WebSession_delete_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_delete_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) PostStreaming(ctx context.Context, params func(websession.WebSession_postStreaming_Params) error) (websession.WebSession_postStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_postStreaming_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_postStreaming_Results_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) PutStreaming(ctx context.Context, params func(websession.WebSession_putStreaming_Params) error) (websession.WebSession_putStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_putStreaming_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_putStreaming_Results_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Propfind(ctx context.Context, params func(websession.WebSession_propfind_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_propfind_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Proppatch(ctx context.Context, params func(websession.WebSession_proppatch_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_proppatch_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Mkcol(ctx context.Context, params func(websession.WebSession_mkcol_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_mkcol_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Copy(ctx context.Context, params func(websession.WebSession_copy_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_copy_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Move(ctx context.Context, params func(websession.WebSession_move_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_move_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Lock(ctx context.Context, params func(websession.WebSession_lock_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_lock_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Unlock(ctx context.Context, params func(websession.WebSession_unlock_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_unlock_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Acl(ctx context.Context, params func(websession.WebSession_acl_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_acl_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Report(ctx context.Context, params func(websession.WebSession_report_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_report_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Options(ctx context.Context, params func(websession.WebSession_options_Params) error) (websession.WebSession_Options_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_options_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Options_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Patch(ctx context.Context, params func(websession.WebSession_patch_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_patch_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Save(ctx context.Context, params func(grain.AppPersistent_save_Params) error) (grain.AppPersistent_save_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaffa789add8747b8,
			MethodID:      0,
			InterfaceName: "grain.capnp:AppPersistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(grain.AppPersistent_save_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return grain.AppPersistent_save_Results_Future{Future: ans.Future()}, release
}

func (c BridgeHttpSession) AddRef() BridgeHttpSession {
	return BridgeHttpSession{
		Client: c.Client.AddRef(),
	}
}

func (c BridgeHttpSession) Release() {
	c.Client.Release()
}

// A BridgeHttpSession_Server is a BridgeHttpSession with a local implementation.
type BridgeHttpSession_Server interface {
	Get(context.Context, websession.WebSession_get) error

	Post(context.Context, websession.WebSession_post) error

	OpenWebSocket(context.Context, websession.WebSession_openWebSocket) error

	Put(context.Context, websession.WebSession_put) error

	Delete(context.Context, websession.WebSession_delete) error

	PostStreaming(context.Context, websession.WebSession_postStreaming) error

	PutStreaming(context.Context, websession.WebSession_putStreaming) error

	Propfind(context.Context, websession.WebSession_propfind) error

	Proppatch(context.Context, websession.WebSession_proppatch) error

	Mkcol(context.Context, websession.WebSession_mkcol) error

	Copy(context.Context, websession.WebSession_copy) error

	Move(context.Context, websession.WebSession_move) error

	Lock(context.Context, websession.WebSession_lock) error

	Unlock(context.Context, websession.WebSession_unlock) error

	Acl(context.Context, websession.WebSession_acl) error

	Report(context.Context, websession.WebSession_report) error

	Options(context.Context, websession.WebSession_options) error

	Patch(context.Context, websession.WebSession_patch) error

	Save(context.Context, grain.AppPersistent_save) error
}

// BridgeHttpSession_NewServer creates a new Server from an implementation of BridgeHttpSession_Server.
func BridgeHttpSession_NewServer(s BridgeHttpSession_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BridgeHttpSession_Methods(nil, s), s, c, policy)
}

// BridgeHttpSession_ServerToClient creates a new Client from an implementation of BridgeHttpSession_Server.
// The caller is responsible for calling Release on the returned Client.
func BridgeHttpSession_ServerToClient(s BridgeHttpSession_Server, policy *server.Policy) BridgeHttpSession {
	return BridgeHttpSession{Client: capnp.NewClient(BridgeHttpSession_NewServer(s, policy))}
}

// BridgeHttpSession_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BridgeHttpSession_Methods(methods []server.Method, s BridgeHttpSession_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 19)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, websession.WebSession_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Post(ctx, websession.WebSession_post{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.OpenWebSocket(ctx, websession.WebSession_openWebSocket{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, websession.WebSession_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Delete(ctx, websession.WebSession_delete{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PostStreaming(ctx, websession.WebSession_postStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PutStreaming(ctx, websession.WebSession_putStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Propfind(ctx, websession.WebSession_propfind{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Proppatch(ctx, websession.WebSession_proppatch{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Mkcol(ctx, websession.WebSession_mkcol{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Copy(ctx, websession.WebSession_copy{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Move(ctx, websession.WebSession_move{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lock(ctx, websession.WebSession_lock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unlock(ctx, websession.WebSession_unlock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Acl(ctx, websession.WebSession_acl{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Report(ctx, websession.WebSession_report{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Options(ctx, websession.WebSession_options{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Patch(ctx, websession.WebSession_patch{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaffa789add8747b8,
			MethodID:      0,
			InterfaceName: "grain.capnp:AppPersistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, grain.AppPersistent_save{call})
		},
	})

	return methods
}

type SessionInfo struct{ capnp.Struct }
type SessionInfo_request SessionInfo
type SessionInfo_offer SessionInfo
type SessionInfo_Which uint16

const (
	SessionInfo_Which_normal  SessionInfo_Which = 0
	SessionInfo_Which_request SessionInfo_Which = 1
	SessionInfo_Which_offer   SessionInfo_Which = 2
)

func (w SessionInfo_Which) String() string {
	const s = "normalrequestoffer"
	switch w {
	case SessionInfo_Which_normal:
		return s[0:6]
	case SessionInfo_Which_request:
		return s[6:13]
	case SessionInfo_Which_offer:
		return s[13:18]

	}
	return "SessionInfo_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// SessionInfo_TypeID is the unique identifier for the type SessionInfo.
const SessionInfo_TypeID = 0xcf999463ccff87dd

func NewSessionInfo(s *capnp.Segment) (SessionInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SessionInfo{st}, err
}

func NewRootSessionInfo(s *capnp.Segment) (SessionInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SessionInfo{st}, err
}

func ReadRootSessionInfo(msg *capnp.Message) (SessionInfo, error) {
	root, err := msg.Root()
	return SessionInfo{root.Struct()}, err
}

func (s SessionInfo) String() string {
	str, _ := text.Marshal(0xcf999463ccff87dd, s.Struct)
	return str
}

func (s SessionInfo) Which() SessionInfo_Which {
	return SessionInfo_Which(s.Struct.Uint16(0))
}
func (s SessionInfo) SetNormal() {
	s.Struct.SetUint16(0, 0)

}

func (s SessionInfo) Request() SessionInfo_request { return SessionInfo_request(s) }

func (s SessionInfo) SetRequest() {
	s.Struct.SetUint16(0, 1)
}

func (s SessionInfo_request) RequestInfo() (powerbox.PowerboxDescriptor_List, error) {
	p, err := s.Struct.Ptr(0)
	return powerbox.PowerboxDescriptor_List{List: p.List()}, err
}

func (s SessionInfo_request) HasRequestInfo() bool {
	return s.Struct.HasPtr(0)
}

func (s SessionInfo_request) SetRequestInfo(v powerbox.PowerboxDescriptor_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRequestInfo sets the requestInfo field to a newly
// allocated powerbox.PowerboxDescriptor_List, preferring placement in s's segment.
func (s SessionInfo_request) NewRequestInfo(n int32) (powerbox.PowerboxDescriptor_List, error) {
	l, err := powerbox.NewPowerboxDescriptor_List(s.Struct.Segment(), n)
	if err != nil {
		return powerbox.PowerboxDescriptor_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s SessionInfo) Offer() SessionInfo_offer { return SessionInfo_offer(s) }

func (s SessionInfo) SetOffer() {
	s.Struct.SetUint16(0, 2)
}

func (s SessionInfo_offer) Offer() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s SessionInfo_offer) HasOffer() bool {
	return s.Struct.HasPtr(0)
}

func (s SessionInfo_offer) SetOffer(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s SessionInfo_offer) Descriptor() (powerbox.PowerboxDescriptor, error) {
	p, err := s.Struct.Ptr(1)
	return powerbox.PowerboxDescriptor{Struct: p.Struct()}, err
}

func (s SessionInfo_offer) HasDescriptor() bool {
	return s.Struct.HasPtr(1)
}

func (s SessionInfo_offer) SetDescriptor(v powerbox.PowerboxDescriptor) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewDescriptor sets the descriptor field to a newly
// allocated powerbox.PowerboxDescriptor struct, preferring placement in s's segment.
func (s SessionInfo_offer) NewDescriptor() (powerbox.PowerboxDescriptor, error) {
	ss, err := powerbox.NewPowerboxDescriptor(s.Struct.Segment())
	if err != nil {
		return powerbox.PowerboxDescriptor{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// SessionInfo_List is a list of SessionInfo.
type SessionInfo_List struct{ capnp.List }

// NewSessionInfo creates a new list of SessionInfo.
func NewSessionInfo_List(s *capnp.Segment, sz int32) (SessionInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return SessionInfo_List{l}, err
}

func (s SessionInfo_List) At(i int) SessionInfo { return SessionInfo{s.List.Struct(i)} }

func (s SessionInfo_List) Set(i int, v SessionInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s SessionInfo_List) String() string {
	str, _ := text.MarshalList(0xcf999463ccff87dd, s.List)
	return str
}

// SessionInfo_Future is a wrapper for a SessionInfo promised by a client call.
type SessionInfo_Future struct{ *capnp.Future }

func (p SessionInfo_Future) Struct() (SessionInfo, error) {
	s, err := p.Future.Struct()
	return SessionInfo{s}, err
}

func (p SessionInfo_Future) Request() SessionInfo_request_Future {
	return SessionInfo_request_Future{p.Future}
}

// SessionInfo_request_Future is a wrapper for a SessionInfo_request promised by a client call.
type SessionInfo_request_Future struct{ *capnp.Future }

func (p SessionInfo_request_Future) Struct() (SessionInfo_request, error) {
	s, err := p.Future.Struct()
	return SessionInfo_request{s}, err
}

func (p SessionInfo_Future) Offer() SessionInfo_offer_Future {
	return SessionInfo_offer_Future{p.Future}
}

// SessionInfo_offer_Future is a wrapper for a SessionInfo_offer promised by a client call.
type SessionInfo_offer_Future struct{ *capnp.Future }

func (p SessionInfo_offer_Future) Struct() (SessionInfo_offer, error) {
	s, err := p.Future.Struct()
	return SessionInfo_offer{s}, err
}

func (p SessionInfo_offer_Future) Offer() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p SessionInfo_offer_Future) Descriptor() powerbox.PowerboxDescriptor_Future {
	return powerbox.PowerboxDescriptor_Future{Future: p.Future.Field(1, nil)}
}

const schema_f963cc483d8f9e3a = "x\xda\x9cWMl\x1cI\x15~\xaf\xdb\xf6\xecF\xf6" +
	"f&v\xec\x03\x88\xd4\xce\xe20N2\xe3\xbf\x1c\xc2" +
	"\xd8\xb3\xf1\xdak\xd6F\x09qo\x82\x14v\x83D\xb9" +
	"\xab\xc6S\x9b\x9e\xaa\xa6\xba\xc6\xf6,DY\x04h\x05" +
	"Z\x04H\x08\x01\x07\x0e\xe1\x88\xd8\x15\x12\x12\xb0\x17N" +
	"\xb0\xfc,\xda\x0b\x17\x0eY\x89\x1f\x098p\xe1\x06\x02" +
	"\x1a\xd5t\xdb\xd3\xf3\x13\x12\x90\x0f.\xbf\xf7\xea\xd5W" +
	"\xdf\xfb\xdes\xf5\xc2\xc6\xd8\x9a\xb38\x9a{\x12\xe0\xfa" +
	"+8:\x16\xbf\xde6\x7f\xfe\xf17^\xf8,\x14f" +
	"G\xe2\xea\xb7\xbf\\\xdbz\xdb\xff;\x00.\x8b\xfc\xdf" +
	"p\xf2\xf3\xf9\x9c\x0d\xcc\xbbx\xfd\xb5\xbc\x83\x00\xf1\xf9" +
	"\xef_\xe3\xf7\xbe~\xe9+P\xb8\x88\xf1\x0f^<;" +
	"~\xf6\xc6\xa7\xdf\x85\xd1\x91\x1c\xc0\xf2O\xa7~\x8f\x93" +
	"\xbf\x9b\xca\x01L\xde\x9f\xfa\x13`L\x16\xdf\xfd\xde\xda" +
	"{\x9c\xd7\xc1[D\x8c\xef\xbf\x1a\xbf\xed\x7f\xed\x9b\xef" +
	"\xc0i'\x87\x00\xcb\xbf8\xfd&\x02N\xfe\xf6\xf4\x01" +
	"`\xfc\xcfs\xe7n}\xf5\xd2\xfb~\x08\x85Y\xb7\x07" +
	"\xc7\x07\xa7\xdf\xc4Io\xda&\xbd:\x9d\x9b\xbc:\xfd" +
	"\x01\x80n*o\x16\xb1\x1b\xbe\xe9\xe4\\\x80\xe5\xd6\xf4" +
	"\x17q\xf2K\x9d-_\x98~\x0328\xfb\xc21\xe7" +
	"\x00,\xffe\xfa\x1eN\xe2\xcc\x0c\xc0\xe4\xe33\x16K" +
	"\xed\xder\xeeW\xdf}\xfc\x8f\xc3a\x8b\x99_Z\xd8" +
	"wf.C\xdc\xf9\xf9M\x1cQ\xc9\"\xa3\xf4X\xb3" +
	"\xdc0&,\xefj\xc1\xf6xYH\xc3\xb5\xa4A\xc5" +
	"\xa7\xa1\x0c\xab\x89\xf5y\xfe\xc9\x16\x8f\xccu\x1eEB" +
	"\x9d\x91[\xa6\x19\xec \xe2888\x0e\xb0\x88\x1f~" +
	"6^}\xf2\xd9k\x1b7>\xb6\x13o\x92\x86i\x06" +
	"O\x9f8\xb1\x9a\xfc&d\xb5\xc1)\xb3\x0bBV#" +
	"\xd3\x0e81\xed\x90\xd7\x8a\x86\x1f\x9ay?\x8a\x8a\x89" +
	"\x8f\x90s\xe4S\xe9\x8a\x90]uX\x8e\xc4\xcbB\xee" +
	"U\xc9\xae\xd2\x8c\xeb\xf2\xae:\\I\xfdwN\x1cE" +
	"\xb1vfS]IS\xae\xd3\xa6\x08\xdaU\x12Q\x19" +
	"\x95#\xaeE}\xa57 \x12/\xf3*YZ\x08\x07" +
	"\xd3\xb5\x8cQ\xb2\x07\x85=\xb9J\xa4\x92|h\x16!" +
	"\x1b\\\x0b\xb32\x1c\xc2p\xef\x01\x17{\x0d3\xc4k" +
	"\x09)3\xee+M\x8dPrH\x84\xaf\x02\xa5\x87\xd8" +
	"\x03!y\xb9\xf1\xa0\xbc\xbb\xd4\xbf\xbd\xa7UK\xb2r" +
	"\x9a\xc0h*\xa3\x90j.\xfb\x8f\xa7\x81\xd8\x1bvr" +
	"H\x19\xeb\x14c!\x83\xa6\xa5#\x9b-T\x1d\xd5t" +
	"\x1dLDa@\xdbU\xb2\x1b(\xffv\xd7\xae\xf6\xb9" +
	"\xae\x07\xea\xa0J\x1a\x821.\xfb\xce\xee\xbay\x10\x88" +
	"0\x12Q7\xe0\xa0!\x0c/G!\xf5\xb9-\xc7\x81" +
	"\xa6a\xc6)\x98iT\xc9\xe2\xc2\xc2\xec\x00\xe2r\xc0" +
	"\xeb\xa6J\x96\x97\xba\xe5&\xe4\x88\xaa\xe5\xc5A\x11\x04" +
	"b\x88\x00\x16\xc3C\x12\xa9@0\xf2\x14cl\xa5\xcf" +
	"_\xdeU\xc6\xa8f\xbfN\x06y\x7f\x8a\xf3\x8c\x7f\x9f" +
	"k#|\x1a\x1c\x91\xde\x14\x8c\x05|\x08\xca\xa5A\x94" +
	"\xad`\x00\xe51\x8a\x07\x81\x1dV\xc3&\xd5{BZ" +
	"\xee\xb2\xfc\x04\"2\xe5N\xaf\x96m\xaf\xf6^,\x81" +
	"\xb0:\xdf\xf1w\x1a|\xfe\xa8\xc3WmC\xa6\xad\xde" +
	"\x0a\x88`\xb5\xa2M\x95v\xf8\xea|\xcb\x0e\x86d\x10" +
	"\xf8Z\x84&;\x09^\xa2\xfb4\xb1\x1e\x0f\x84}\xaa" +
	"\x89\xafd]\xec\x91\x1aY\xdb\xb8\xf6\x91\x0fm?\xb7" +
	"\xb6r\"\xf5\xd6[\xd2\xb7}B\x9a\xf46\xdf\x08\x84" +
	"\x7f{\x8bJ\x16p]\x92\xb4\xc9\xe72\xfchnZ" +
	"Zv7\x94\xb2\xce\xe4\x98\xc3\x86&5\"\xf9\x01\xb9" +
	"y\xf5\xca\x961a:\xf3Js+\x99\xc8\xc3\x86\xae" +
	"(\x19(\xcaH\xed\x81\xe9\x08\x11uR\xb2\xa1\x91\xa1" +
	"\xa6\x15\x91\xa7k\xe4\xe2\xc2B\x7f\x10!4\xe0\xda\x94" +
	"\x8a7\xb7\x9eO\x11rF\xd2-Er\x9ed2\x9c" +
	"'\xc5\xea-yd\xd4<\x0a\x95\x8c\xf8\x0d~hz" +
	"\xe0u\xe5\xd1\xbfN\x80s\xad\x95\xce /Y\x96R" +
	"\x18|n\x85\xdc\x19\xb8k\xc8e\xa9\x18\xaa\xc8\x14/" +
	"\x90\xe2|q\x80\x8c\x88K\x96\xd0\xdd\xf5\xdc9\xd6I" +
	"\xa6\x8cV\x06\xa4F\x98\xf2[M.Me\x8f\x9b\xcd" +
	"\x80\xdb\xe5z{\x9b\x95\x12\x99\x1c'\xa9+MJv" +
	"\x9b B\xa6\x12\xc8\xf2g]4\x14\xa4\x96\xfa^\x14" +
	"\x1f?\x96E\xe2MGy\xe6D_sjxzh" +
	"\xa9\x98\x04do\x94X*\x94\xb1\xcd}.\xcd\x15\x11" +
	"\x19.\xb9.\x15}\xab\xad\xe2\x85A\x9d\xd1PT:" +
	"\x97\xcfd\xb1\xb5\xb7\xf6t\x06n\xcb\xba\"g\xcf\x92" +
	">S\xc5\x08\x13\xf0\x07:*\x8c\xd7i+0\x9d\x0a" +
	"\xf7\xe8&\x05i;fCI\xc3\xa5e\xf5\xa192" +
	"\xc5!<\x88\xf8\xc3S\x16?\x1aqb\x1a\"\"{" +
	"\x9a\x0aY\xcc\x96\xb7\x87hax\xd3\xd2\x1c\x1f\xf1\x9c" +
	"\xef#:\x10Y\x92mx\x85\x86!\x97l\xa3!\x02" +
	"VJN\x9f\xcb\x94\xcfJ\xa1'\xc4\xee\x99\x1b\x98>" +
	"\x9dQ\x91\x8c\x9fd\xea\xac\xce'/\x0e\x80G|\xdc" +
	"\xacw\xac\xd7v_\xe2\xbe\xd9f\x15\xdb\xf5\xb9gB" +
	"\xb1\x83\xe8\xe5\xdd\x11\x80\x11\x04(\xd0s\x00\xde-\x17" +
	"\xbd\x86\x83\x05\xc4)\xb4Fn\x8d\x9fp\xd1\x0b\x1c," +
	"8\xce\x14:\x00\x05\xb1\x0b\xe05\\\xf4>\xe7`\xc1" +
	"u\xa7\xd0\x05(|\xe6\x05\x00\xef\x15\x17\xbd\xd7\x1c<" +
	"i\xb5\x92\xbe\x9a\xf0dHM\xe3\xe8\x8f8\xe4\xba)" +
	"\xa2H@N\xc9\x08\x9f\x00\xdcq\x11\x11\x1c\xbb\x8c\x05" +
	"\xe3\xd2\x08\xd3\x06w\x9b\xe1\x0488\x01x|\xc5\xd1" +
	"\xffz\xc5\xe4\xc9&\xad*.WT\xbd\xce\xb5\xf7\x98" +
	"\xbdZ\x82xn\x09\xc0{\xbf\x8b\xdeBz7\x8b\xb8" +
	"l\x11_p\xd1\xbb\xe4\xe0\x99\xce\x16<5\xe2\x02\xe2" +
	")\xc0\x98\xf1\x84wp\x95\xc6||\xf3\xbdo\xfd\xe4" +
	";'\xdf\xf9+\x00b\xfe\x91A%\xbc[\xba\xaf_" +
	"N\xf0\xed \xee\xb8\xa3\xdec\x88\xf1[\xbf\x9e\xfdY" +
	"\xfb\x0f\xed\x9f\x03@\xfc\xa3\xe7^\xbd\xff\xad\xc3\x7f\xbc" +
	"\x01kX\xc03\xde\x88\x83]\x13@\x01g\xbc\x11D" +
	"\xecp\x95\xef>\x98\xff\x1fr\x00l\xd5\xc7\xdd\x91\xf1" +
	"8\xee\x94}\xb3\x0a\xe0\xad\xb9\xe8]qp\x02\xff\x1d" +
	"c\xe6\x89]\xd8^\x07g\xc2\xf9\x975\x1e\x7f.\x14" +
	"\x16\x97\xc0\xb9,\x95n\xd2\x00\xc6\xee\xea\xe4\xdfGB" +
	"\xe0\xff\xc4KG\x8f9\xb3\xcd\xec\xe52\xdf.\xb8~" +
	"\xd7R\xf6L(l\x09\x8fp\xceY\xd1\x95\\\xf4." +
	"&8\x13}.\xaewk\x18\xd30\x0c\x84O\x0d\xe4" +
	"\x84\x92x\x0a\x1c[\xc9\xbb\x8d$\x17\xe6\xbbG\xf4\x15" +
	"q\xecQ\xc9\xab\xa4\x97\x05\xf0F\x12qY\x0c\x13\x16" +
	"\xd9\xb8\x8b^\xc9\xc18\x8d\xd8\x86\x9c\xac\xab#}\xf7" +
	"\xea\xe7\x09\xc0\xff\x04\x00\x00\xff\xff\xaf\xbb\xff`"

func init() {
	schemas.Register(schema_f963cc483d8f9e3a,
		0x835a98b9e87479ae,
		0x903896a2654fb12b,
		0xae021b40adde3120,
		0xb71e38915c2a2afc,
		0xcf999463ccff87dd,
		0xde7c54260c265bb4,
		0xe409abcb0733a23d)
}
