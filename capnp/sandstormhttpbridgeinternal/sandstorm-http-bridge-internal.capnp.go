// Code generated by capnpc-go. DO NOT EDIT.

package sandstormhttpbridgeinternal

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	strconv "strconv"
	grain "zenhack.net/go/sandstorm/capnp/grain"
	powerbox "zenhack.net/go/sandstorm/capnp/powerbox"
	websession "zenhack.net/go/sandstorm/capnp/websession"
)

// Constants defined in sandstorm-http-bridge-internal.capnp.
const (
	BridgeRequestSessionHtml = "<!DOCTYPE html>\n\n<html>\n  <head>\n    <style type=\"text/css\">\n      * {\n        box-sizing: border-box;\n      }\n      body {\n        font-family: sans-serif;\n        font-size: 20px;\n      }\n      button {\n        border: none;\n        font-size: inherit;\n        font-family: inherit;\n        font-weight: inherit;\n        text-decoration: inherit;\n        color: inherit;\n        line-height: inherit;\n        background-color: transparent;\n        text-align: inherit;\n        padding: 0;\n        cursor: pointer;\n        display: block;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        width: 100%;\n        padding-left: 32px;\n        height: 31px;\n      }\n      li {\n        border: 1px solid #ddd;\n        border-bottom: none;\n        background-color: #eee;\n        vertical-align: middle;\n        height: 32px;\n      }\n      ul {\n        border-bottom: 1px solid #ddd;\n        padding: 0;\n        margin: 10px;\n        list-style-type: none;\n      }\n    </style>\n  </head>\n  <body>\n    <ul id=\"list\">\n    </ul>\n\n    <script type=\"text/javascript\">\n      var config = @CONFIG@;\n\n      function makeClickHandler(name) {\n        return function () {\n          var xhr = new XMLHttpRequest();\n          xhr.onload = function () {\n            if (xhr.status >= 400) {\n              alert(\"XHR returned status \" + xhr.status + \":\\n\" + xhr.responseText);\n            }\n          }\n          xhr.onerror = function(e) { alert(e); };\n          xhr.open(\"post\", \"/\");\n          xhr.send(name);\n        }\n      }\n\n      var list = document.getElementById(\"list\");\n      for (var i in config) {\n        var api = config[i];\n\n        var button = document.createElement(\"button\");\n        button.addEventListener(\"click\", makeClickHandler(api.name));\n        if (api.displayInfo && api.displayInfo.title && api.displayInfo.title.defaultText) {\n          button.textContent = api.displayInfo.title.defaultText;\n        } else {\n          button.textContent = \"Use this grain\";\n        }\n\n        var item = document.createElement(\"li\");\n        item.appendChild(button);\n\n        list.appendChild(item);\n      }\n    </script>\n  </body>\n</html>\n"
)

type BridgeObjectId capnp.Struct
type BridgeObjectId_Which uint16

const (
	BridgeObjectId_Which_application BridgeObjectId_Which = 0
	BridgeObjectId_Which_httpApi     BridgeObjectId_Which = 1
)

func (w BridgeObjectId_Which) String() string {
	const s = "applicationhttpApi"
	switch w {
	case BridgeObjectId_Which_application:
		return s[0:11]
	case BridgeObjectId_Which_httpApi:
		return s[11:18]

	}
	return "BridgeObjectId_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// BridgeObjectId_TypeID is the unique identifier for the type BridgeObjectId.
const BridgeObjectId_TypeID = 0xde7c54260c265bb4

func NewBridgeObjectId(s *capnp.Segment) (BridgeObjectId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BridgeObjectId(st), err
}

func NewRootBridgeObjectId(s *capnp.Segment) (BridgeObjectId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BridgeObjectId(st), err
}

func ReadRootBridgeObjectId(msg *capnp.Message) (BridgeObjectId, error) {
	root, err := msg.Root()
	return BridgeObjectId(root.Struct()), err
}

func (s BridgeObjectId) String() string {
	str, _ := text.Marshal(0xde7c54260c265bb4, capnp.Struct(s))
	return str
}

func (s BridgeObjectId) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BridgeObjectId) DecodeFromPtr(p capnp.Ptr) BridgeObjectId {
	return BridgeObjectId(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BridgeObjectId) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s BridgeObjectId) Which() BridgeObjectId_Which {
	return BridgeObjectId_Which(capnp.Struct(s).Uint16(0))
}
func (s BridgeObjectId) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BridgeObjectId) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BridgeObjectId) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BridgeObjectId) Application() (capnp.Ptr, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != application")
	}
	return capnp.Struct(s).Ptr(0)
}

func (s BridgeObjectId) HasApplication() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s BridgeObjectId) SetApplication(v capnp.Ptr) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, v)
}

func (s BridgeObjectId) HttpApi() (BridgeObjectId_HttpApi, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != httpApi")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return BridgeObjectId_HttpApi(p.Struct()), err
}

func (s BridgeObjectId) HasHttpApi() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s BridgeObjectId) SetHttpApi(v BridgeObjectId_HttpApi) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHttpApi sets the httpApi field to a newly
// allocated BridgeObjectId_HttpApi struct, preferring placement in s's segment.
func (s BridgeObjectId) NewHttpApi() (BridgeObjectId_HttpApi, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewBridgeObjectId_HttpApi(capnp.Struct(s).Segment())
	if err != nil {
		return BridgeObjectId_HttpApi{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// BridgeObjectId_List is a list of BridgeObjectId.
type BridgeObjectId_List = capnp.StructList[BridgeObjectId]

// NewBridgeObjectId creates a new list of BridgeObjectId.
func NewBridgeObjectId_List(s *capnp.Segment, sz int32) (BridgeObjectId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BridgeObjectId](l), err
}

// BridgeObjectId_Future is a wrapper for a BridgeObjectId promised by a client call.
type BridgeObjectId_Future struct{ *capnp.Future }

func (p BridgeObjectId_Future) Struct() (BridgeObjectId, error) {
	s, err := p.Future.Struct()
	return BridgeObjectId(s), err
}

func (p BridgeObjectId_Future) Application() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p BridgeObjectId_Future) HttpApi() BridgeObjectId_HttpApi_Future {
	return BridgeObjectId_HttpApi_Future{Future: p.Future.Field(0, nil)}
}

type BridgeObjectId_HttpApi capnp.Struct

// BridgeObjectId_HttpApi_TypeID is the unique identifier for the type BridgeObjectId_HttpApi.
const BridgeObjectId_HttpApi_TypeID = 0x903896a2654fb12b

func NewBridgeObjectId_HttpApi(s *capnp.Segment) (BridgeObjectId_HttpApi, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return BridgeObjectId_HttpApi(st), err
}

func NewRootBridgeObjectId_HttpApi(s *capnp.Segment) (BridgeObjectId_HttpApi, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return BridgeObjectId_HttpApi(st), err
}

func ReadRootBridgeObjectId_HttpApi(msg *capnp.Message) (BridgeObjectId_HttpApi, error) {
	root, err := msg.Root()
	return BridgeObjectId_HttpApi(root.Struct()), err
}

func (s BridgeObjectId_HttpApi) String() string {
	str, _ := text.Marshal(0x903896a2654fb12b, capnp.Struct(s))
	return str
}

func (s BridgeObjectId_HttpApi) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BridgeObjectId_HttpApi) DecodeFromPtr(p capnp.Ptr) BridgeObjectId_HttpApi {
	return BridgeObjectId_HttpApi(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BridgeObjectId_HttpApi) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BridgeObjectId_HttpApi) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BridgeObjectId_HttpApi) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BridgeObjectId_HttpApi) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BridgeObjectId_HttpApi) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BridgeObjectId_HttpApi) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BridgeObjectId_HttpApi) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BridgeObjectId_HttpApi) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s BridgeObjectId_HttpApi) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s BridgeObjectId_HttpApi) HasPath() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s BridgeObjectId_HttpApi) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s BridgeObjectId_HttpApi) SetPath(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s BridgeObjectId_HttpApi) Permissions() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.BitList(p.List()), err
}

func (s BridgeObjectId_HttpApi) HasPermissions() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s BridgeObjectId_HttpApi) SetPermissions(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewPermissions sets the permissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s BridgeObjectId_HttpApi) NewPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

func (s BridgeObjectId_HttpApi) IdentityId() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return []byte(p.Data()), err
}

func (s BridgeObjectId_HttpApi) HasIdentityId() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s BridgeObjectId_HttpApi) SetIdentityId(v []byte) error {
	return capnp.Struct(s).SetData(3, v)
}

// BridgeObjectId_HttpApi_List is a list of BridgeObjectId_HttpApi.
type BridgeObjectId_HttpApi_List = capnp.StructList[BridgeObjectId_HttpApi]

// NewBridgeObjectId_HttpApi creates a new list of BridgeObjectId_HttpApi.
func NewBridgeObjectId_HttpApi_List(s *capnp.Segment, sz int32) (BridgeObjectId_HttpApi_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[BridgeObjectId_HttpApi](l), err
}

// BridgeObjectId_HttpApi_Future is a wrapper for a BridgeObjectId_HttpApi promised by a client call.
type BridgeObjectId_HttpApi_Future struct{ *capnp.Future }

func (p BridgeObjectId_HttpApi_Future) Struct() (BridgeObjectId_HttpApi, error) {
	s, err := p.Future.Struct()
	return BridgeObjectId_HttpApi(s), err
}

type BridgeHttpSession capnp.Client

// BridgeHttpSession_TypeID is the unique identifier for the type BridgeHttpSession.
const BridgeHttpSession_TypeID = 0xb71e38915c2a2afc

func (c BridgeHttpSession) Get(ctx context.Context, params func(websession.WebSession_get_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_get_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Post(ctx context.Context, params func(websession.WebSession_post_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_post_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) OpenWebSocket(ctx context.Context, params func(websession.WebSession_openWebSocket_Params) error) (websession.WebSession_openWebSocket_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_openWebSocket_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_openWebSocket_Results_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Put(ctx context.Context, params func(websession.WebSession_put_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_put_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Delete(ctx context.Context, params func(websession.WebSession_delete_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_delete_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) PostStreaming(ctx context.Context, params func(websession.WebSession_postStreaming_Params) error) (websession.WebSession_postStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_postStreaming_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_postStreaming_Results_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) PutStreaming(ctx context.Context, params func(websession.WebSession_putStreaming_Params) error) (websession.WebSession_putStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_putStreaming_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_putStreaming_Results_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Propfind(ctx context.Context, params func(websession.WebSession_propfind_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_propfind_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Proppatch(ctx context.Context, params func(websession.WebSession_proppatch_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_proppatch_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Mkcol(ctx context.Context, params func(websession.WebSession_mkcol_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_mkcol_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Copy(ctx context.Context, params func(websession.WebSession_copy_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_copy_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Move(ctx context.Context, params func(websession.WebSession_move_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_move_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Lock(ctx context.Context, params func(websession.WebSession_lock_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_lock_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Unlock(ctx context.Context, params func(websession.WebSession_unlock_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_unlock_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Acl(ctx context.Context, params func(websession.WebSession_acl_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_acl_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Report(ctx context.Context, params func(websession.WebSession_report_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_report_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Options(ctx context.Context, params func(websession.WebSession_options_Params) error) (websession.WebSession_Options_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_options_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Options_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Patch(ctx context.Context, params func(websession.WebSession_patch_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_patch_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Save(ctx context.Context, params func(grain.AppPersistent_save_Params) error) (grain.AppPersistent_save_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaffa789add8747b8,
			MethodID:      0,
			InterfaceName: "grain.capnp:AppPersistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(grain.AppPersistent_save_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return grain.AppPersistent_save_Results_Future{Future: ans.Future()}, release
}

func (c BridgeHttpSession) AddRef() BridgeHttpSession {
	return BridgeHttpSession(capnp.Client(c).AddRef())
}

func (c BridgeHttpSession) Release() {
	capnp.Client(c).Release()
}

func (c BridgeHttpSession) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (BridgeHttpSession) DecodeFromPtr(p capnp.Ptr) BridgeHttpSession {
	return BridgeHttpSession(capnp.Client{}.DecodeFromPtr(p))
}

func (c BridgeHttpSession) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A BridgeHttpSession_Server is a BridgeHttpSession with a local implementation.
type BridgeHttpSession_Server interface {
	Get(context.Context, websession.WebSession_get) error

	Post(context.Context, websession.WebSession_post) error

	OpenWebSocket(context.Context, websession.WebSession_openWebSocket) error

	Put(context.Context, websession.WebSession_put) error

	Delete(context.Context, websession.WebSession_delete) error

	PostStreaming(context.Context, websession.WebSession_postStreaming) error

	PutStreaming(context.Context, websession.WebSession_putStreaming) error

	Propfind(context.Context, websession.WebSession_propfind) error

	Proppatch(context.Context, websession.WebSession_proppatch) error

	Mkcol(context.Context, websession.WebSession_mkcol) error

	Copy(context.Context, websession.WebSession_copy) error

	Move(context.Context, websession.WebSession_move) error

	Lock(context.Context, websession.WebSession_lock) error

	Unlock(context.Context, websession.WebSession_unlock) error

	Acl(context.Context, websession.WebSession_acl) error

	Report(context.Context, websession.WebSession_report) error

	Options(context.Context, websession.WebSession_options) error

	Patch(context.Context, websession.WebSession_patch) error

	Save(context.Context, grain.AppPersistent_save) error
}

// BridgeHttpSession_NewServer creates a new Server from an implementation of BridgeHttpSession_Server.
func BridgeHttpSession_NewServer(s BridgeHttpSession_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BridgeHttpSession_Methods(nil, s), s, c)
}

// BridgeHttpSession_ServerToClient creates a new Client from an implementation of BridgeHttpSession_Server.
// The caller is responsible for calling Release on the returned Client.
func BridgeHttpSession_ServerToClient(s BridgeHttpSession_Server) BridgeHttpSession {
	return BridgeHttpSession(capnp.NewClient(BridgeHttpSession_NewServer(s)))
}

// BridgeHttpSession_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BridgeHttpSession_Methods(methods []server.Method, s BridgeHttpSession_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 19)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, websession.WebSession_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Post(ctx, websession.WebSession_post{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.OpenWebSocket(ctx, websession.WebSession_openWebSocket{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, websession.WebSession_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Delete(ctx, websession.WebSession_delete{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PostStreaming(ctx, websession.WebSession_postStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PutStreaming(ctx, websession.WebSession_putStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Propfind(ctx, websession.WebSession_propfind{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Proppatch(ctx, websession.WebSession_proppatch{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Mkcol(ctx, websession.WebSession_mkcol{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Copy(ctx, websession.WebSession_copy{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Move(ctx, websession.WebSession_move{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lock(ctx, websession.WebSession_lock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unlock(ctx, websession.WebSession_unlock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Acl(ctx, websession.WebSession_acl{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Report(ctx, websession.WebSession_report{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Options(ctx, websession.WebSession_options{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Patch(ctx, websession.WebSession_patch{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaffa789add8747b8,
			MethodID:      0,
			InterfaceName: "grain.capnp:AppPersistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, grain.AppPersistent_save{call})
		},
	})

	return methods
}

// BridgeHttpSession_List is a list of BridgeHttpSession.
type BridgeHttpSession_List = capnp.CapList[BridgeHttpSession]

// NewBridgeHttpSession creates a new list of BridgeHttpSession.
func NewBridgeHttpSession_List(s *capnp.Segment, sz int32) (BridgeHttpSession_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[BridgeHttpSession](l), err
}

type SessionInfo capnp.Struct
type SessionInfo_request SessionInfo
type SessionInfo_offer SessionInfo
type SessionInfo_Which uint16

const (
	SessionInfo_Which_normal  SessionInfo_Which = 0
	SessionInfo_Which_request SessionInfo_Which = 1
	SessionInfo_Which_offer   SessionInfo_Which = 2
)

func (w SessionInfo_Which) String() string {
	const s = "normalrequestoffer"
	switch w {
	case SessionInfo_Which_normal:
		return s[0:6]
	case SessionInfo_Which_request:
		return s[6:13]
	case SessionInfo_Which_offer:
		return s[13:18]

	}
	return "SessionInfo_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// SessionInfo_TypeID is the unique identifier for the type SessionInfo.
const SessionInfo_TypeID = 0xcf999463ccff87dd

func NewSessionInfo(s *capnp.Segment) (SessionInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SessionInfo(st), err
}

func NewRootSessionInfo(s *capnp.Segment) (SessionInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SessionInfo(st), err
}

func ReadRootSessionInfo(msg *capnp.Message) (SessionInfo, error) {
	root, err := msg.Root()
	return SessionInfo(root.Struct()), err
}

func (s SessionInfo) String() string {
	str, _ := text.Marshal(0xcf999463ccff87dd, capnp.Struct(s))
	return str
}

func (s SessionInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionInfo) DecodeFromPtr(p capnp.Ptr) SessionInfo {
	return SessionInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s SessionInfo) Which() SessionInfo_Which {
	return SessionInfo_Which(capnp.Struct(s).Uint16(0))
}
func (s SessionInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionInfo) SetNormal() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s SessionInfo) Request() SessionInfo_request { return SessionInfo_request(s) }

func (s SessionInfo) SetRequest() {
	capnp.Struct(s).SetUint16(0, 1)
}

func (s SessionInfo_request) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionInfo_request) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionInfo_request) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionInfo_request) RequestInfo() (powerbox.PowerboxDescriptor_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return powerbox.PowerboxDescriptor_List(p.List()), err
}

func (s SessionInfo_request) HasRequestInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionInfo_request) SetRequestInfo(v powerbox.PowerboxDescriptor_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewRequestInfo sets the requestInfo field to a newly
// allocated powerbox.PowerboxDescriptor_List, preferring placement in s's segment.
func (s SessionInfo_request) NewRequestInfo(n int32) (powerbox.PowerboxDescriptor_List, error) {
	l, err := powerbox.NewPowerboxDescriptor_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return powerbox.PowerboxDescriptor_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

func (s SessionInfo) Offer() SessionInfo_offer { return SessionInfo_offer(s) }

func (s SessionInfo) SetOffer() {
	capnp.Struct(s).SetUint16(0, 2)
}

func (s SessionInfo_offer) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionInfo_offer) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionInfo_offer) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionInfo_offer) Offer() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s SessionInfo_offer) HasOffer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionInfo_offer) SetOffer(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}
func (s SessionInfo_offer) Descriptor() (powerbox.PowerboxDescriptor, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return powerbox.PowerboxDescriptor(p.Struct()), err
}

func (s SessionInfo_offer) HasDescriptor() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SessionInfo_offer) SetDescriptor(v powerbox.PowerboxDescriptor) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewDescriptor sets the descriptor field to a newly
// allocated powerbox.PowerboxDescriptor struct, preferring placement in s's segment.
func (s SessionInfo_offer) NewDescriptor() (powerbox.PowerboxDescriptor, error) {
	ss, err := powerbox.NewPowerboxDescriptor(capnp.Struct(s).Segment())
	if err != nil {
		return powerbox.PowerboxDescriptor{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SessionInfo_List is a list of SessionInfo.
type SessionInfo_List = capnp.StructList[SessionInfo]

// NewSessionInfo creates a new list of SessionInfo.
func NewSessionInfo_List(s *capnp.Segment, sz int32) (SessionInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[SessionInfo](l), err
}

// SessionInfo_Future is a wrapper for a SessionInfo promised by a client call.
type SessionInfo_Future struct{ *capnp.Future }

func (p SessionInfo_Future) Struct() (SessionInfo, error) {
	s, err := p.Future.Struct()
	return SessionInfo(s), err
}

func (p SessionInfo_Future) Request() SessionInfo_request_Future {
	return SessionInfo_request_Future{p.Future}
}

// SessionInfo_request_Future is a wrapper for a SessionInfo_request promised by a client call.
type SessionInfo_request_Future struct{ *capnp.Future }

func (p SessionInfo_request_Future) Struct() (SessionInfo_request, error) {
	s, err := p.Future.Struct()
	return SessionInfo_request(s), err
}

func (p SessionInfo_Future) Offer() SessionInfo_offer_Future {
	return SessionInfo_offer_Future{p.Future}
}

// SessionInfo_offer_Future is a wrapper for a SessionInfo_offer promised by a client call.
type SessionInfo_offer_Future struct{ *capnp.Future }

func (p SessionInfo_offer_Future) Struct() (SessionInfo_offer, error) {
	s, err := p.Future.Struct()
	return SessionInfo_offer(s), err
}

func (p SessionInfo_offer_Future) Offer() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p SessionInfo_offer_Future) Descriptor() powerbox.PowerboxDescriptor_Future {
	return powerbox.PowerboxDescriptor_Future{Future: p.Future.Field(1, nil)}
}

const schema_f963cc483d8f9e3a = "x\xda\x9cW\xdfo\\G\x15>\xe7\xde\xb5\xb7\x8d\xec" +
	"f7\x8e\xed\x07\x10\x99nqX'\xd9\xf5\xaf E" +
	"ko\xe3\xda5\xb5Q \xbeu\x90B\x1b\x04\xe3;" +
	"\xb3\xdei\xee\xce\\\xe6\xce\xda\xdeB\x14\x10\x95*!" +
	"$@\xa2\x08x@\"<!\xa0U%\x10m_x" +
	"\xa3\x08\x8a\xfa\x17\xb4H\x80\x04/<\x80\xc4\x03\x08\xb8" +
	"h\xf6^{\xafw74 ?x|\xce\x993\xdf" +
	"|\xe7;\xc7s\xe7\xb7GWs\x0b\xe3\x9f~\x14\x9c" +
	"\x9d\x17pd4~\xb9c\xfe\xf4\xfa\xb7\x9e\xf9\x12\x14" +
	"grq\xed\xbb_\xado\xbe\xe5\xff\x1d\x00\x97^*" +
	"\xfc\x15'^-\xe4\x01v~Tpq\xe7\xb5\x82\x83" +
	"\x00\xf1\xc5W\xaf\xf3{\xdf\xbc\xf25(^\xc6\xf8'" +
	"\xcf\x9e\x1f;\x7f\xe3\xf3\xef\xc2H.\x0f\xb0\xf4\x97\xb3" +
	"\xbf\xc3\x89\xf1\xc9<\xc0\xc4\xc3\x93\x7f\x04\x8c\xc9\xc2\xbb" +
	"?^}\x9f\xf32x\x0b\x88\xf1;/\xc6o\xf9\xdf" +
	"\xf8\xf6\xdb0\xe9\xe4\x11`\xe9o\x93o \xe0\xc4\xc8" +
	"\xd4\x01`\xfc\xcf\x0b\x17n}\xfd\xca\x07~\x06\xc5\x19" +
	"\xf7\x04\x0e>\xf5\x06N\xdc\x99\xb2I;S\xf9\x89\xce" +
	"\xd4\x87\x00z\xa9\xbc\x19\xc4^\xf8\x86\x93w\x01\x96\xbe" +
	"7\xf5e\x9cx\xbd\xbb\xe5\xa7S\xaf@\x06g_8" +
	"\xe6\x1d\x80\xa5\xc9\xe9{8Q\x99\x9e\x06\x98\xf8\xf0\xb4" +
	"\xc5R\xbf\xb7\x94\xff\xf5\x0f\x1f\xfe\xc3p\xd8/M\xff" +
	"\xca\xc2\xfe\xc1\xf4U\x88\xbb?\xbf\x8d#*Yd\x94" +
	"\x1emU\x9a\xc6\x84\x95]-\xd8\x1e\xaf\x08i\xb8\x96" +
	"4\xa8\xfa4\x94a-\xb1>\xcd?\xdb\xe6\x91\xd9\xe1" +
	"Q$\xd49\xb9iZ\xc16\"\x8e\x81\x83c\x00\x0b" +
	"\xf8\xd1'\xe3\x95G\x9f\xbc\xbe~\xe3\x93\xdb\xf1\x06i" +
	"\x9aV\xf0\xf8\xa9S+\xc9oBV\x9a\x9c2\xbb " +
	"d%2\x9d\x80\x13\xd3\x09y\xbdd\xf8\xa1\x99\xf3\xa3" +
	"\xa8\x94\xf8\x08\xb9@>\x97\xae\x08\xd9U\x87\x95H<" +
	"/\xe4^\x8d\xec*\xcd\xb8\xae\xec\xaa\xc3\xe5\xd4\x7f\xe7" +
	"\xd4Q\x14\xebd65\x944\x95\x06m\x89\xa0S#" +
	"\x11\x95Q%\xe2Z4\x96O\x06D\xe2y^#\x8b" +
	"\xf3\xe1`\xba\xb61J\x9e@aO\xae\x11\xa9$\x1f" +
	"\x9aE\xc8&\xd7\xc2,\x0f\x870\xdc{\xc0\xc5^\xd3" +
	"\x0c\xf1ZB*\x8c\xfbJS#\x94\x1c\x12\xe1\xab@" +
	"\xe9!\xf6@H^i\xde/\xef.\xf5o\xefi\xd5" +
	"\x96\xac\x92&0\x9a\xca(\xa4\x9a\xcb\xfe\xe3i \xf6" +
	"\x86\x9d\x1cR\xc6\xba\xc5\x98\xcf\xa0i\xeb\xc8f\x0bU" +
	"W5=\x07\x13Q\x18\xd0N\x8d\xec\x06\xca\xbf\xdd\xb3" +
	"\xab}\xae\x1b\x81:\xa8\x91\xa6`\x8c\xcb\xbe\xb3{n" +
	"\x1e\x04\"\x8cD\xd4\x0b8h\x0a\xc3+QH}n" +
	"\xcbq\xa0i\x98q\x0af\x9a5\xb20??3\x80" +
	"\xb8\x12\xf0\x86\xa9\x91\xa5\xc5^\xb9\x099\xa2jia" +
	"P\x04\x81\x18\"\x80\x85\xf0\x90D*\x10\x8c<\xc6\x18" +
	"[\xee\xf3Wv\x951\xaa\xd5\xaf\x93A\xde\x1f\xe3<" +
	"\xe3\xdf\xe7\xda\x08\x9f\x06G\xa4\xb7\x04c\x01\x1f\x82r" +
	"q\x10e;\x18@y\x8c\xe2~`\x87\xd5\xb0E\xf5" +
	"\x9e\x90\x96\xbb,?\x81\x88L\xa5\xdb\xab\x15\xdb\xab'" +
	"/\x96@X\x99\xeb\xfa\xbb\x0d>w\xd4\xe1+\xb6!" +
	"\xd3Vo\x07D\xb0z\xc9\xa6J;|e\xaem\x07" +
	"C2\x08|-B\x93\x9d\x04\xcf\xd1}\x9aX\x8f\x07" +
	"\xc2>\xd5\xc4W\xb2!\xf6H\x9d\xac\xae_\xff\xf8G" +
	"\xb6\x9eZ]>\x95z\x1bm\xe9\xdb>!-z\x9b" +
	"\xaf\x07\xc2\xbf\xbdI%\x0b\xb8.K\xda\xe2\xb3\x19~" +
	"47m-{\x1b\xcaYgr\xccaS\x93:\x91" +
	"\xfc\x80\xdc\xfc\xd8\xb5Mc\xc2t\xe6\x95g\x973\x91" +
	"\x87M]U2P\x94\x91\xfa}\xd3\x11\"\x1a\xa4l" +
	"C#CM;\"\x8f\xd7\xc9\xe5\xf9\xf9\xfe Bh" +
	"\xc0\xb5)\x97nn>\x9d\"\xe4\x8c\xa4[J\xe4\"" +
	"\xc9d\xb8HJ\xb5[\xf2\xc8\xa8y\x14*\x19\xf1\x1b" +
	"\xfc\xd0\x9c\x80\xd7\x93G\xff:\x01\xce\xb5V:\x83\xbc" +
	"lYJa\xf0\xd9erg\xe0\xae!\x97\xe5R\xa8" +
	"\"S\xbaDJs\xa5\x012\".YBw\xcfs" +
	"\xe7X'\x992Z\x19\x90:a\xcao\xb7\xb84\xd5" +
	"=n6\x02n\x97k\x9d-VNdr\x9c\xa4\xa1" +
	"4)\xdbm\x82\x08\x99J \xcb\x9fu\xd1P\x90z" +
	"\xea{V|\xeaX\x16\x897\x1d\xe5\x99\x13}\xcd\xa9" +
	"\xe1\xe9\xa1\xe5R\x12\x90\xbdQb\xa9R\xc66\xf6\xb9" +
	"4\xd7Dd\xb8\xe4\xba\\\xf2\xad\xb6J\x97\x06uF" +
	"CQ\xed^>\x93\xc5\xd6\xde\xda\xd3\x19\xb8%\x1b\x8a" +
	"\x9c?O\xfaLU#L\xc0\xef\xeb\xa82\xde\xa0\xed" +
	"\xc0t+|B7)H\xdb1\xebJ\x1a.-\xab" +
	"\xef\x99#S\x1c\xc2\x83\x88\xbfw\xca\xd2'\"NL" +
	"SDdOS!K\xd9\xf2\x9e Z\x18\xde\xb24" +
	"\xc7G<\x17\xfa\x88\x0eD\x96d\x1b^\xa5a\xc8%" +
	"[o\x8a\x80\x95\x93\xd3g3\xe5\xb3R8\x11b\xf7" +
	"\xcc\x0eL\x9f\xee\xa8H\xc6O2uV\xe6\x92\x17\x07" +
	"\xc0\x03>n\xd6\xba\xd6\xeb\xbb\xcfq\xdfl\xb1\xaa\xed" +
	"\xfa\xfc\x13\xa1\xd8F\xf4\x0an\x0e \x87\x00Ez\x01" +
	"\xc0\xbb\xe5\xa2\xd7t\xb0\x88x\x16\xad\x91[\xe3g\\" +
	"\xf4\x02\x07\x8b\x8es\x16\x1d\x80\xa2\xd8\x05\xf0\x9a.z" +
	"/8Xt\xdd\xb3\xe8\x02\x14\xbf\xf8\x0c\x80\xf7\x05\x17" +
	"\xbd\xaf8x\xdaj%}5\xe1\xe9\x90\x9a\xe6\xd1\x1f" +
	"q\xc8uKD\x91\x80\xbc\x92\x11>\x02\xb8\xed\"\"" +
	"8v\x19\x0b\xc6\xa5\x11\xa6\x03\xee\x16\xc3qpp\x1c" +
	"\xf0\xf8\x8a#\xff\xf5\x8a\xc9\x93MZU\\\xad\xaaF" +
	"\x83k\xef!{\xb5\x04\xf1\xec\"\x80\xf7A\x17\xbd\xf9" +
	"\xf4n\x16q\xc5\"\xbe\xe4\xa2w\xc5\xc1s\xdd-x" +
	"&\xe7\x02\xe2\x19\xc0\x98\xf1\x84wp\x95\xc6B|\xf3" +
	"\xfdo\xfe\xfc\xfb\xa7\xdf\xfe3\x00b\xe1\x81A%\xbc" +
	"[\xbaw\xae&\xf8\xb6\x11\xb7\xdd\x11\xef!\xc4\xf8\xcd" +
	"\xdf\xcc\xfc\xa2\xf3\xfb\xce/\x01 ~\xed\xa9\x17\xdf\xf9" +
	"\xce\xe1?^\x81U,\xe29/\xe7`\xcf\x04P\xc4" +
	"i/\x87\x88]\xae\x0a\xbd\x07\xf3\xffC\x0e\x80\xad\xfa" +
	"\x98\x9b\x1b\x8b\xe3n\xd97j\x00\xde\xaa\x8b\xde5\x07" +
	"\xc7\xf1\xdf1f\x9e\xd8\xc5\xad5p\xc6\x9d\x7fY\xe3" +
	"\xf1\xe7Bqa\x11\x9c\xabR\xe9\x16\x0d`\xf4\xaeN" +
	"\xfe}$\x04\xfeO\xbct\xf5\x987[\xcc^.\xf3" +
	"\xed\x82kw-eO\x84\xc2\x96\xf0\x08\xe7\xac\x15]" +
	"\xd9E\xefr\x823\xd1\xe7\xc2Z\xaf\x861\x0d\xc3@" +
	"\xf8\xd4@^(\x89g\xc0\xb1\x95\xbc\xdbLra\xa1" +
	"wD_\x11G\x1f\x94\xbcjzY\x00/\x97\x88\xcb" +
	"b\x18\xb7\xc8\xc6\\\xf4\xca\x0e\xc6i\xc4\x16\xe4eC" +
	"\x1d\xe9\xfb\xa4~\x1e\x01\xfcO\x00\x00\x00\xff\xffI\xdb" +
	"\xff\x80"

func init() {
	schemas.Register(schema_f963cc483d8f9e3a,
		0x835a98b9e87479ae,
		0x903896a2654fb12b,
		0xae021b40adde3120,
		0xb71e38915c2a2afc,
		0xcf999463ccff87dd,
		0xde7c54260c265bb4,
		0xe409abcb0733a23d)
}
