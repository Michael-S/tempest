// Code generated by capnpc-go. DO NOT EDIT.

package sandstormhttpbridgeinternal

import (
	context "context"
	strconv "strconv"
	grain "zenhack.net/go/sandstorm/capnp/grain"
	websession "zenhack.net/go/sandstorm/capnp/websession"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

// Constants defined in sandstorm-http-bridge-internal.capnp.
const (
	BridgeRequestSessionHtml = "<!DOCTYPE html>\n\n<html>\n  <head>\n    <style type=\"text/css\">\n      * {\n        box-sizing: border-box;\n      }\n      body {\n        font-family: sans-serif;\n        font-size: 20px;\n      }\n      button {\n        border: none;\n        font-size: inherit;\n        font-family: inherit;\n        font-weight: inherit;\n        text-decoration: inherit;\n        color: inherit;\n        line-height: inherit;\n        background-color: transparent;\n        text-align: inherit;\n        padding: 0;\n        cursor: pointer;\n        display: block;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        width: 100%;\n        padding-left: 32px;\n        height: 31px;\n      }\n      li {\n        border: 1px solid #ddd;\n        border-bottom: none;\n        background-color: #eee;\n        vertical-align: middle;\n        height: 32px;\n      }\n      ul {\n        border-bottom: 1px solid #ddd;\n        padding: 0;\n        margin: 10px;\n        list-style-type: none;\n      }\n    </style>\n  </head>\n  <body>\n    <ul id=\"list\">\n    </ul>\n\n    <script type=\"text/javascript\">\n      var config = @CONFIG@;\n\n      function makeClickHandler(name) {\n        return function () {\n          var xhr = new XMLHttpRequest();\n          xhr.onload = function () {\n            if (xhr.status >= 400) {\n              alert(\"XHR returned status \" + xhr.status + \":\\n\" + xhr.responseText);\n            }\n          }\n          xhr.onerror = function(e) { alert(e); };\n          xhr.open(\"post\", \"/\");\n          xhr.send(name);\n        }\n      }\n\n      var list = document.getElementById(\"list\");\n      for (var i in config) {\n        var api = config[i];\n\n        var button = document.createElement(\"button\");\n        button.addEventListener(\"click\", makeClickHandler(api.name));\n        if (api.displayInfo && api.displayInfo.title && api.displayInfo.title.defaultText) {\n          button.textContent = api.displayInfo.title.defaultText;\n        } else {\n          button.textContent = \"Use this grain\";\n        }\n\n        var item = document.createElement(\"li\");\n        item.appendChild(button);\n\n        list.appendChild(item);\n      }\n    </script>\n  </body>\n</html>\n"
)

type BridgeObjectId struct{ capnp.Struct }
type BridgeObjectId_Which uint16

const (
	BridgeObjectId_Which_application BridgeObjectId_Which = 0
	BridgeObjectId_Which_httpApi     BridgeObjectId_Which = 1
)

func (w BridgeObjectId_Which) String() string {
	const s = "applicationhttpApi"
	switch w {
	case BridgeObjectId_Which_application:
		return s[0:11]
	case BridgeObjectId_Which_httpApi:
		return s[11:18]

	}
	return "BridgeObjectId_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// BridgeObjectId_TypeID is the unique identifier for the type BridgeObjectId.
const BridgeObjectId_TypeID = 0xde7c54260c265bb4

func NewBridgeObjectId(s *capnp.Segment) (BridgeObjectId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BridgeObjectId{st}, err
}

func NewRootBridgeObjectId(s *capnp.Segment) (BridgeObjectId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BridgeObjectId{st}, err
}

func ReadRootBridgeObjectId(msg *capnp.Message) (BridgeObjectId, error) {
	root, err := msg.Root()
	return BridgeObjectId{root.Struct()}, err
}

func (s BridgeObjectId) String() string {
	str, _ := text.Marshal(0xde7c54260c265bb4, s.Struct)
	return str
}

func (s BridgeObjectId) Which() BridgeObjectId_Which {
	return BridgeObjectId_Which(s.Struct.Uint16(0))
}
func (s BridgeObjectId) Application() (capnp.Ptr, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != application")
	}
	return s.Struct.Ptr(0)
}

func (s BridgeObjectId) HasApplication() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s BridgeObjectId) SetApplication(v capnp.Ptr) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v)
}

func (s BridgeObjectId) HttpApi() (BridgeObjectId_HttpApi, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != httpApi")
	}
	p, err := s.Struct.Ptr(0)
	return BridgeObjectId_HttpApi{Struct: p.Struct()}, err
}

func (s BridgeObjectId) HasHttpApi() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s BridgeObjectId) SetHttpApi(v BridgeObjectId_HttpApi) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHttpApi sets the httpApi field to a newly
// allocated BridgeObjectId_HttpApi struct, preferring placement in s's segment.
func (s BridgeObjectId) NewHttpApi() (BridgeObjectId_HttpApi, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewBridgeObjectId_HttpApi(s.Struct.Segment())
	if err != nil {
		return BridgeObjectId_HttpApi{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// BridgeObjectId_List is a list of BridgeObjectId.
type BridgeObjectId_List struct{ capnp.List }

// NewBridgeObjectId creates a new list of BridgeObjectId.
func NewBridgeObjectId_List(s *capnp.Segment, sz int32) (BridgeObjectId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return BridgeObjectId_List{l}, err
}

func (s BridgeObjectId_List) At(i int) BridgeObjectId { return BridgeObjectId{s.List.Struct(i)} }

func (s BridgeObjectId_List) Set(i int, v BridgeObjectId) error { return s.List.SetStruct(i, v.Struct) }

func (s BridgeObjectId_List) String() string {
	str, _ := text.MarshalList(0xde7c54260c265bb4, s.List)
	return str
}

// BridgeObjectId_Future is a wrapper for a BridgeObjectId promised by a client call.
type BridgeObjectId_Future struct{ *capnp.Future }

func (p BridgeObjectId_Future) Struct() (BridgeObjectId, error) {
	s, err := p.Future.Struct()
	return BridgeObjectId{s}, err
}

func (p BridgeObjectId_Future) Application() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p BridgeObjectId_Future) HttpApi() BridgeObjectId_HttpApi_Future {
	return BridgeObjectId_HttpApi_Future{Future: p.Future.Field(0, nil)}
}

type BridgeObjectId_HttpApi struct{ capnp.Struct }

// BridgeObjectId_HttpApi_TypeID is the unique identifier for the type BridgeObjectId_HttpApi.
const BridgeObjectId_HttpApi_TypeID = 0x903896a2654fb12b

func NewBridgeObjectId_HttpApi(s *capnp.Segment) (BridgeObjectId_HttpApi, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return BridgeObjectId_HttpApi{st}, err
}

func NewRootBridgeObjectId_HttpApi(s *capnp.Segment) (BridgeObjectId_HttpApi, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return BridgeObjectId_HttpApi{st}, err
}

func ReadRootBridgeObjectId_HttpApi(msg *capnp.Message) (BridgeObjectId_HttpApi, error) {
	root, err := msg.Root()
	return BridgeObjectId_HttpApi{root.Struct()}, err
}

func (s BridgeObjectId_HttpApi) String() string {
	str, _ := text.Marshal(0x903896a2654fb12b, s.Struct)
	return str
}

func (s BridgeObjectId_HttpApi) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s BridgeObjectId_HttpApi) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s BridgeObjectId_HttpApi) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s BridgeObjectId_HttpApi) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s BridgeObjectId_HttpApi) Path() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s BridgeObjectId_HttpApi) HasPath() bool {
	return s.Struct.HasPtr(1)
}

func (s BridgeObjectId_HttpApi) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s BridgeObjectId_HttpApi) SetPath(v string) error {
	return s.Struct.SetText(1, v)
}

func (s BridgeObjectId_HttpApi) Permissions() (capnp.BitList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.BitList{List: p.List()}, err
}

func (s BridgeObjectId_HttpApi) HasPermissions() bool {
	return s.Struct.HasPtr(2)
}

func (s BridgeObjectId_HttpApi) SetPermissions(v capnp.BitList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewPermissions sets the permissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s BridgeObjectId_HttpApi) NewPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s BridgeObjectId_HttpApi) IdentityId() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s BridgeObjectId_HttpApi) HasIdentityId() bool {
	return s.Struct.HasPtr(3)
}

func (s BridgeObjectId_HttpApi) SetIdentityId(v []byte) error {
	return s.Struct.SetData(3, v)
}

// BridgeObjectId_HttpApi_List is a list of BridgeObjectId_HttpApi.
type BridgeObjectId_HttpApi_List struct{ capnp.List }

// NewBridgeObjectId_HttpApi creates a new list of BridgeObjectId_HttpApi.
func NewBridgeObjectId_HttpApi_List(s *capnp.Segment, sz int32) (BridgeObjectId_HttpApi_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return BridgeObjectId_HttpApi_List{l}, err
}

func (s BridgeObjectId_HttpApi_List) At(i int) BridgeObjectId_HttpApi {
	return BridgeObjectId_HttpApi{s.List.Struct(i)}
}

func (s BridgeObjectId_HttpApi_List) Set(i int, v BridgeObjectId_HttpApi) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s BridgeObjectId_HttpApi_List) String() string {
	str, _ := text.MarshalList(0x903896a2654fb12b, s.List)
	return str
}

// BridgeObjectId_HttpApi_Future is a wrapper for a BridgeObjectId_HttpApi promised by a client call.
type BridgeObjectId_HttpApi_Future struct{ *capnp.Future }

func (p BridgeObjectId_HttpApi_Future) Struct() (BridgeObjectId_HttpApi, error) {
	s, err := p.Future.Struct()
	return BridgeObjectId_HttpApi{s}, err
}

type BridgeHttpSession struct{ Client *capnp.Client }

// BridgeHttpSession_TypeID is the unique identifier for the type BridgeHttpSession.
const BridgeHttpSession_TypeID = 0xb71e38915c2a2afc

func (c BridgeHttpSession) Get(ctx context.Context, params func(websession.WebSession_get_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Post(ctx context.Context, params func(websession.WebSession_post_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_post_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) OpenWebSocket(ctx context.Context, params func(websession.WebSession_openWebSocket_Params) error) (websession.WebSession_openWebSocket_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_openWebSocket_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_openWebSocket_Results_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Put(ctx context.Context, params func(websession.WebSession_put_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_put_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Delete(ctx context.Context, params func(websession.WebSession_delete_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_delete_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) PostStreaming(ctx context.Context, params func(websession.WebSession_postStreaming_Params) error) (websession.WebSession_postStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_postStreaming_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_postStreaming_Results_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) PutStreaming(ctx context.Context, params func(websession.WebSession_putStreaming_Params) error) (websession.WebSession_putStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_putStreaming_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_putStreaming_Results_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Propfind(ctx context.Context, params func(websession.WebSession_propfind_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_propfind_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Proppatch(ctx context.Context, params func(websession.WebSession_proppatch_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_proppatch_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Mkcol(ctx context.Context, params func(websession.WebSession_mkcol_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_mkcol_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Copy(ctx context.Context, params func(websession.WebSession_copy_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_copy_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Move(ctx context.Context, params func(websession.WebSession_move_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_move_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Lock(ctx context.Context, params func(websession.WebSession_lock_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_lock_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Unlock(ctx context.Context, params func(websession.WebSession_unlock_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_unlock_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Acl(ctx context.Context, params func(websession.WebSession_acl_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_acl_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Report(ctx context.Context, params func(websession.WebSession_report_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_report_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Options(ctx context.Context, params func(websession.WebSession_options_Params) error) (websession.WebSession_Options_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_options_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Options_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Patch(ctx context.Context, params func(websession.WebSession_patch_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_patch_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Save(ctx context.Context, params func(grain.AppPersistent_save_Params) error) (grain.AppPersistent_save_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaffa789add8747b8,
			MethodID:      0,
			InterfaceName: "grain.capnp:AppPersistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(grain.AppPersistent_save_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return grain.AppPersistent_save_Results_Future{Future: ans.Future()}, release
}

// A BridgeHttpSession_Server is a BridgeHttpSession with a local implementation.
type BridgeHttpSession_Server interface {
	Get(context.Context, websession.WebSession_get) error

	Post(context.Context, websession.WebSession_post) error

	OpenWebSocket(context.Context, websession.WebSession_openWebSocket) error

	Put(context.Context, websession.WebSession_put) error

	Delete(context.Context, websession.WebSession_delete) error

	PostStreaming(context.Context, websession.WebSession_postStreaming) error

	PutStreaming(context.Context, websession.WebSession_putStreaming) error

	Propfind(context.Context, websession.WebSession_propfind) error

	Proppatch(context.Context, websession.WebSession_proppatch) error

	Mkcol(context.Context, websession.WebSession_mkcol) error

	Copy(context.Context, websession.WebSession_copy) error

	Move(context.Context, websession.WebSession_move) error

	Lock(context.Context, websession.WebSession_lock) error

	Unlock(context.Context, websession.WebSession_unlock) error

	Acl(context.Context, websession.WebSession_acl) error

	Report(context.Context, websession.WebSession_report) error

	Options(context.Context, websession.WebSession_options) error

	Patch(context.Context, websession.WebSession_patch) error

	Save(context.Context, grain.AppPersistent_save) error
}

// BridgeHttpSession_NewServer creates a new Server from an implementation of BridgeHttpSession_Server.
func BridgeHttpSession_NewServer(s BridgeHttpSession_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BridgeHttpSession_Methods(nil, s), s, c, policy)
}

// BridgeHttpSession_ServerToClient creates a new Client from an implementation of BridgeHttpSession_Server.
// The caller is responsible for calling Release on the returned Client.
func BridgeHttpSession_ServerToClient(s BridgeHttpSession_Server, policy *server.Policy) BridgeHttpSession {
	return BridgeHttpSession{Client: capnp.NewClient(BridgeHttpSession_NewServer(s, policy))}
}

// BridgeHttpSession_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BridgeHttpSession_Methods(methods []server.Method, s BridgeHttpSession_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 19)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, websession.WebSession_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Post(ctx, websession.WebSession_post{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.OpenWebSocket(ctx, websession.WebSession_openWebSocket{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, websession.WebSession_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Delete(ctx, websession.WebSession_delete{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PostStreaming(ctx, websession.WebSession_postStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PutStreaming(ctx, websession.WebSession_putStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Propfind(ctx, websession.WebSession_propfind{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Proppatch(ctx, websession.WebSession_proppatch{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Mkcol(ctx, websession.WebSession_mkcol{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Copy(ctx, websession.WebSession_copy{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Move(ctx, websession.WebSession_move{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lock(ctx, websession.WebSession_lock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unlock(ctx, websession.WebSession_unlock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Acl(ctx, websession.WebSession_acl{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Report(ctx, websession.WebSession_report{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Options(ctx, websession.WebSession_options{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Patch(ctx, websession.WebSession_patch{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaffa789add8747b8,
			MethodID:      0,
			InterfaceName: "grain.capnp:AppPersistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, grain.AppPersistent_save{call})
		},
	})

	return methods
}

const schema_f963cc483d8f9e3a = "x\xda\x94V\xcdo$G\x15\xaf\xd7mg\xa2\xd5." +
	"\xf6dF\xca-)&\xb2\x19{w\xc6\xf6z\x91V" +
	"\xe3\x99\xe0\xd81\xb1\xd1\x82\xdd\xf1\"-\xc9\"Q\xd3" +
	"U3]qMUSUc\xcf\x04V\x01\x81\x84\x84" +
	"\x90 \x07\x10\xe2\x00RN\xe4\x10\x10\x12\x12\x1f\x7f\x00" +
	"p\x80\x03\x7f\x00\x1c\xe0\x00\x1c\xe1\x06B4\xaa\xe9\xb6" +
	"\xa7\xe7\xc3J\"\x1f\xdc\xf3~\xaf\xde\xfb\xd5\xef}\xa8" +
	"6\xbf\xb9\xb8\xebm-\xfe\xe89\x84N),>\x95" +
	"\xfcdh\xff\xfe\xab\xef\xbf\xf65T\\YH\x1a?" +
	"\xfcv\xeb\xf0\xf7\xe1\xbf\x11\x82\xed\x8f/\xfd\x0bJ\xc1" +
	"R\x01\xa1\xd3\x07K>\x9c>Z\xf2\x00\xa1\xe4\xf6\xcf" +
	"\x8e\xd9;\xdf\xbb\xff\x1dT\xbc\x07\xc9\xcf__\xbd\xb9" +
	"\xfa\xf0\xcb\x7fF\x8b\x0b\x05\x84\xb6\xdf.\xfd\x05J\xef" +
	"\x95\x0a\x08\x95\xde-\xfd\x0dA\xf2\xdf\xf5\xf5\xc7o\xdf" +
	"\x7f\xee\x17\xa8\xb8\xe2O\x04\xffn\xf9\xd7Pz\xaf<" +
	"\xf2,\x17J\xef\x96?\x86\xd08Z\xb0\x020v?" +
	"\x80\x82\x87\xd0\xf6\x1f\xcb\xef@\xe9\x1f\xe5g\x11*\xfd" +
	"\xb3|\x81\x92\xd1\xdf\x8f\x13C$5V\xe9\xa7z\xb5" +
	"\xc8\xda\xb8\xd6\xd6\x9cvY\x8dK\xcb\xb4$\xa2\x1e\x92" +
	"X\xc6\x8d\xd4\xfa*\xfbb\x9f\x19{\xca\x8c\xe1\xeay" +
	"yh{\xe2\x04\x00n\"\x0fn\"\xb4\x05\x9fz9" +
	"i~\xf4\xe5\xe3\xfd\x87\x9f;I\x0epd{\xe2\xc5" +
	"\x1b7\x9a\xe9\x7f\x8c\x9b\x11#\xd4}`\xdc4v(" +
	"\x18\xb6\xc3\x98\xb5*\x96\x0d\xecFhL%\xc50^" +
	"\xc7_\xca\xbe0n\xabA\xcd\xf07\xb9\xec6p[" +
	"i\xcat\xad\xad\x06;\x19\xfe\xe4\xc6\xa5\x17\x1d\xe6\x0e" +
	"u\x94\xb4\xb5\x0e\xe9q1l`C\xa4\xa9\x19\xa6y" +
	"gg\xd2\xc1\xf07Y\x03\xdf\xdd\x8cg\xc3\xf5\xadU" +
	"r\x82\x85\xcb\xdc\xc0RI67\x0a\x97\x11\xd3\xdc\xee" +
	"\xcc\xa70\x1f\xbd`\xbc\x1b\xd99\xa8\x13\xa4FY\xa8" +
	"4\xb1\\\xc99\x1e\xa1\x12J\xcf\xb1\x0b.Y-\xba" +
	".n\x9b\x84g]\xad\xfa\x92\xd6\xb2\x00V\x13ib" +
	"\xa2\x99\x9cNO\x04\xef\xce\xcb\x1c\x13JG\xc5\xd8\xcc" +
	"\xb1\xe9k\xe3\xa2\xc5j\xd45c\x80r\x13\x0b2l" +
	"\xe0\xb6P\xe1\xd9\xd8\xae\xce\x99\xee\x08u\xd1\xc0\x11\xa7" +
	"\x94\xc9\xa9\xdcc\x98\x09\xc1c\xc3\xcd\xd8\xe1\"\xe2\x96" +
	"\xd5LLB\xe6\xcaq\xa1I\x9c\x039\xb5Q\x03o" +
	"mn\xae\xcc0\xae\x09\xd6\xb1\x0d\xbc}w\\n\x8c" +
	"/\xa5\xda\xde\x9am\x02\xc1\xe74\xc0V<\xc0F\x09" +
	"N\xf1\x0b\x94\xd2\x9d)\xbc\xd6V\xd6\xaa\xdet\x9f\xcc" +
	"\xea\xfe\x02c9\xfc\x9ci\xcbC\".E\xefqJ" +
	"\x05\x9b\xc3\xf2\xee,\xcb\xbe\x98ay\xc5\xe2:\xb2\xf3" +
	"j\xd8#\xba\xcb\xa5\xd3.\xaf\x8f\xe0\xc6\xd6F\xb3Z" +
	"s\xb3:y\xb1\x94Bsc\x84\x8f\x06|\xe3r\xc2" +
	"\x9bn \xb3Q\xef\x0b\xcci\xab\xe2Be\x13\xde\xdc" +
	"\xe8\xbb\xc5\x90.\x82P\xf3\xd8\xe67\xc1\x1b\xe4\x9c\xa4" +
	"\xd6\xab\x85pN4\x0e\x95\xec\xf0.n\xe1\xdd\xfd\xe3" +
	"\xcf|\xf2\xe8\x95\xdd\x9d\x1b\x19\xda\xe9\xcb\xd0\xcd\x09\xee" +
	"\x913\xb6/xxvH$\x15LW%\xe9\xb1\xb5" +
	"\x9c>\x9a\xd9\xbe\x96\xe3\x03\xd5<\x98\xa6\x19D\x1a\xb7" +
	"\xb0d\x17\xf8\xd1\xa7\x1f\x1cZ\x1bg;\xaf\xba\xb6\x93" +
	"\xf3\x1cD\xba\xae\xa4P\x84\xe2\xd6\xb5\xe10\xe6\x1d\\" +
	"u\xae\xc6\x12\xdb7\xf8\xc5\x16\xbe\xb7\xb99\xed\x841" +
	"\x11L\xdbj\xe5\xd1\xe1\xab\x19CFqv\xa4\x82o" +
	"\xe3\\\x84\xdb\xb8\xd2x,/\x8d\x9a\x99XI\xc3\x1e" +
	"\xb2\x81\x9d\xa07n\x8f\xe9\xef\x948\xd3Z\xe9\x1c\xf3" +
	"\xaaS)\xa3\xc1\xd6v\xf0\x93\x99\xbb\xc6LV+\xb1" +
	"2\xb6r\x07W6*3b\x18&i*\xf7\x18y" +
	"r\xd5'\xb92\xba6\xc0-LU\xd8\xef1i\xeb" +
	"]f\x0f\x04s\x9f{\xc3#ZM\xdb\xe4*HG" +
	"i\\u\xc78\xe62k\x81\xbc~\x0e\"1\xc7\xad" +
	"\x0c{\x9d\x7f\xfe\xaa-R4[\xe5\xb9\x8c\xa1f\xc4" +
	"\xb2,i\xb5\x92:\xe4o\x94Z\xea\x84\xd2\x83s&" +
	"\xed\x03n,\x93LW+\xa1\xeb\xad\xca\x9d\xd9>#" +
	"1\xaf\x8f.\x9f\x8b\xe2j\xef\xec\xd9\x0e<\x92\x1d\x85" +
	"WW\xf1\x94\xa9n\xb9\x15\xecZ\xa0NY\x87\xf4\x85" +
	"\x1dUx\xa2o2\x92nb\xf6\x95\xb4L:U\xdf" +
	"7F\xae8\x98\x09\xc3\xde?d\xe5\xb3\x86a\x1bq" +
	"\x83\xbb\x9apY\xc9\x97wBhnY\xcf\xc9\x9c\\" +
	"\xea\xbc<%\xb4\xe0y\x91\x9d{\x9d\xc41\x93t?" +
	"\xe2\x82V\xd3\xeck\xb9\xf2\xb9V\x98pqg\xd6f" +
	"\xb6\xcfhU\xa4\xeb'\xdd:\xcd\x8d\xf4\xc5\x81\xd0\x07" +
	"|\xdc\xec\x8d\xac\xc7\xed7Xh\x8fh\xddM}\xe1" +
	"\xa5\x98\x9f\x00\x04\xcb\xfe\x02B\x0b\x80P\x91\xac#\x14" +
	"<\xf6!\x88<(\x02\x94\xc1\x19\x993~\xc1\x87@" +
	"xP\xf4\xbc2x\x08\x15y\x1b\xa1 \xf2!\xf8\xba" +
	"\x07E\xdf/\x83\x8fP\xf1\xab\xaf!\x14|\xc5\x87\xe0" +
	"[\x1e,\xb9^\xc9^M\xb0\x14\x13\x1b]\xfeHb" +
	"\xa6{\xdc\x18\x8e\x0aJ\x1a\xf8\x08\x82\x13\x1f\x00\x90\xe7" +
	">\x13N\x99\xb4\xdc\x0e\x91\x7fD\xe1\x16\xf2\xe0\x16\x82" +
	"\xab+.~\x80+\xba\x9b\x9d~b\xf4z\x93'\x00" +
	"'\xfeb\xf04@\xf2\xdb?\xac\xfcf\xf8\xd7\xe1\xef" +
	"\x10B\xc9/_\xf9\xc6\x9f~0\xf8\xcfO\xd1.\x14" +
	"\xe1\xf9`\xc1\x83\xb1\x09\xa1\"<\x1b,\x00\xc0\x88\xd6" +
	"\xf2\xf8\xc1\xf9!y\x8c\xa4.\xd8#\xea\x82\xe5^\xc4" +
	"\xb0\xf7\x96\xa3\xf8R\xcc\x83\xa7\xfd\x85\x9bI2R~" +
	"\xcd\xe9Y\xf5!\xb8\xe7\xc1-\xf8_\x92J\xbf\xb5\x87" +
	"Pp\xc7\x87\xe0\xbe\x07\x09\x89c\xc1CbQ\x81+" +
	"\x09\xcf \x0f\x9eA\xf0V\x94\xc6\x82\xe5q\x0a\x04\xb0" +
	"\x8c\xe0\xff\x01\x00\x00\xff\xff\xf3~[B"

func init() {
	schemas.Register(schema_f963cc483d8f9e3a,
		0x835a98b9e87479ae,
		0x903896a2654fb12b,
		0xb71e38915c2a2afc,
		0xde7c54260c265bb4)
}
