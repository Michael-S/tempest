// Code generated by capnpc-go. DO NOT EDIT.

package sandstormhttpbridgeinternal

import (
	context "context"
	strconv "strconv"
	grain "zenhack.net/go/sandstorm/capnp/grain"
	websession "zenhack.net/go/sandstorm/capnp/websession"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

// Constants defined in sandstorm-http-bridge-internal.capnp.
const (
	BridgeRequestSessionHtml = "<!DOCTYPE html>\n\n<html>\n  <head>\n    <style type=\"text/css\">\n      * {\n        box-sizing: border-box;\n      }\n      body {\n        font-family: sans-serif;\n        font-size: 20px;\n      }\n      button {\n        border: none;\n        font-size: inherit;\n        font-family: inherit;\n        font-weight: inherit;\n        text-decoration: inherit;\n        color: inherit;\n        line-height: inherit;\n        background-color: transparent;\n        text-align: inherit;\n        padding: 0;\n        cursor: pointer;\n        display: block;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        width: 100%;\n        padding-left: 32px;\n        height: 31px;\n      }\n      li {\n        border: 1px solid #ddd;\n        border-bottom: none;\n        background-color: #eee;\n        vertical-align: middle;\n        height: 32px;\n      }\n      ul {\n        border-bottom: 1px solid #ddd;\n        padding: 0;\n        margin: 10px;\n        list-style-type: none;\n      }\n    </style>\n  </head>\n  <body>\n    <ul id=\"list\">\n    </ul>\n\n    <script type=\"text/javascript\">\n      var config = @CONFIG@;\n\n      function makeClickHandler(name) {\n        return function () {\n          var xhr = new XMLHttpRequest();\n          xhr.onload = function () {\n            if (xhr.status >= 400) {\n              alert(\"XHR returned status \" + xhr.status + \":\\n\" + xhr.responseText);\n            }\n          }\n          xhr.onerror = function(e) { alert(e); };\n          xhr.open(\"post\", \"/\");\n          xhr.send(name);\n        }\n      }\n\n      var list = document.getElementById(\"list\");\n      for (var i in config) {\n        var api = config[i];\n\n        var button = document.createElement(\"button\");\n        button.addEventListener(\"click\", makeClickHandler(api.name));\n        if (api.displayInfo && api.displayInfo.title && api.displayInfo.title.defaultText) {\n          button.textContent = api.displayInfo.title.defaultText;\n        } else {\n          button.textContent = \"Use this grain\";\n        }\n\n        var item = document.createElement(\"li\");\n        item.appendChild(button);\n\n        list.appendChild(item);\n      }\n    </script>\n  </body>\n</html>\n"
)

type BridgeObjectId struct{ capnp.Struct }
type BridgeObjectId_Which uint16

const (
	BridgeObjectId_Which_application BridgeObjectId_Which = 0
	BridgeObjectId_Which_httpApi     BridgeObjectId_Which = 1
)

func (w BridgeObjectId_Which) String() string {
	const s = "applicationhttpApi"
	switch w {
	case BridgeObjectId_Which_application:
		return s[0:11]
	case BridgeObjectId_Which_httpApi:
		return s[11:18]

	}
	return "BridgeObjectId_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// BridgeObjectId_TypeID is the unique identifier for the type BridgeObjectId.
const BridgeObjectId_TypeID = 0xde7c54260c265bb4

func NewBridgeObjectId(s *capnp.Segment) (BridgeObjectId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BridgeObjectId{st}, err
}

func NewRootBridgeObjectId(s *capnp.Segment) (BridgeObjectId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BridgeObjectId{st}, err
}

func ReadRootBridgeObjectId(msg *capnp.Message) (BridgeObjectId, error) {
	root, err := msg.Root()
	return BridgeObjectId{root.Struct()}, err
}

func (s BridgeObjectId) String() string {
	str, _ := text.Marshal(0xde7c54260c265bb4, s.Struct)
	return str
}

func (s BridgeObjectId) Which() BridgeObjectId_Which {
	return BridgeObjectId_Which(s.Struct.Uint16(0))
}
func (s BridgeObjectId) Application() (capnp.Ptr, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != application")
	}
	return s.Struct.Ptr(0)
}

func (s BridgeObjectId) HasApplication() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s BridgeObjectId) SetApplication(v capnp.Ptr) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v)
}

func (s BridgeObjectId) HttpApi() (BridgeObjectId_HttpApi, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != httpApi")
	}
	p, err := s.Struct.Ptr(0)
	return BridgeObjectId_HttpApi{Struct: p.Struct()}, err
}

func (s BridgeObjectId) HasHttpApi() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s BridgeObjectId) SetHttpApi(v BridgeObjectId_HttpApi) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHttpApi sets the httpApi field to a newly
// allocated BridgeObjectId_HttpApi struct, preferring placement in s's segment.
func (s BridgeObjectId) NewHttpApi() (BridgeObjectId_HttpApi, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewBridgeObjectId_HttpApi(s.Struct.Segment())
	if err != nil {
		return BridgeObjectId_HttpApi{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// BridgeObjectId_List is a list of BridgeObjectId.
type BridgeObjectId_List struct{ capnp.List }

// NewBridgeObjectId creates a new list of BridgeObjectId.
func NewBridgeObjectId_List(s *capnp.Segment, sz int32) (BridgeObjectId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return BridgeObjectId_List{l}, err
}

func (s BridgeObjectId_List) At(i int) BridgeObjectId { return BridgeObjectId{s.List.Struct(i)} }

func (s BridgeObjectId_List) Set(i int, v BridgeObjectId) error { return s.List.SetStruct(i, v.Struct) }

func (s BridgeObjectId_List) String() string {
	str, _ := text.MarshalList(0xde7c54260c265bb4, s.List)
	return str
}

// BridgeObjectId_Future is a wrapper for a BridgeObjectId promised by a client call.
type BridgeObjectId_Future struct{ *capnp.Future }

func (p BridgeObjectId_Future) Struct() (BridgeObjectId, error) {
	s, err := p.Future.Struct()
	return BridgeObjectId{s}, err
}

func (p BridgeObjectId_Future) Application() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p BridgeObjectId_Future) HttpApi() BridgeObjectId_HttpApi_Future {
	return BridgeObjectId_HttpApi_Future{Future: p.Future.Field(0, nil)}
}

type BridgeObjectId_HttpApi struct{ capnp.Struct }

// BridgeObjectId_HttpApi_TypeID is the unique identifier for the type BridgeObjectId_HttpApi.
const BridgeObjectId_HttpApi_TypeID = 0x903896a2654fb12b

func NewBridgeObjectId_HttpApi(s *capnp.Segment) (BridgeObjectId_HttpApi, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return BridgeObjectId_HttpApi{st}, err
}

func NewRootBridgeObjectId_HttpApi(s *capnp.Segment) (BridgeObjectId_HttpApi, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return BridgeObjectId_HttpApi{st}, err
}

func ReadRootBridgeObjectId_HttpApi(msg *capnp.Message) (BridgeObjectId_HttpApi, error) {
	root, err := msg.Root()
	return BridgeObjectId_HttpApi{root.Struct()}, err
}

func (s BridgeObjectId_HttpApi) String() string {
	str, _ := text.Marshal(0x903896a2654fb12b, s.Struct)
	return str
}

func (s BridgeObjectId_HttpApi) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s BridgeObjectId_HttpApi) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s BridgeObjectId_HttpApi) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s BridgeObjectId_HttpApi) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s BridgeObjectId_HttpApi) Path() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s BridgeObjectId_HttpApi) HasPath() bool {
	return s.Struct.HasPtr(1)
}

func (s BridgeObjectId_HttpApi) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s BridgeObjectId_HttpApi) SetPath(v string) error {
	return s.Struct.SetText(1, v)
}

func (s BridgeObjectId_HttpApi) Permissions() (capnp.BitList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.BitList{List: p.List()}, err
}

func (s BridgeObjectId_HttpApi) HasPermissions() bool {
	return s.Struct.HasPtr(2)
}

func (s BridgeObjectId_HttpApi) SetPermissions(v capnp.BitList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewPermissions sets the permissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s BridgeObjectId_HttpApi) NewPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s BridgeObjectId_HttpApi) IdentityId() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s BridgeObjectId_HttpApi) HasIdentityId() bool {
	return s.Struct.HasPtr(3)
}

func (s BridgeObjectId_HttpApi) SetIdentityId(v []byte) error {
	return s.Struct.SetData(3, v)
}

// BridgeObjectId_HttpApi_List is a list of BridgeObjectId_HttpApi.
type BridgeObjectId_HttpApi_List struct{ capnp.List }

// NewBridgeObjectId_HttpApi creates a new list of BridgeObjectId_HttpApi.
func NewBridgeObjectId_HttpApi_List(s *capnp.Segment, sz int32) (BridgeObjectId_HttpApi_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return BridgeObjectId_HttpApi_List{l}, err
}

func (s BridgeObjectId_HttpApi_List) At(i int) BridgeObjectId_HttpApi {
	return BridgeObjectId_HttpApi{s.List.Struct(i)}
}

func (s BridgeObjectId_HttpApi_List) Set(i int, v BridgeObjectId_HttpApi) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s BridgeObjectId_HttpApi_List) String() string {
	str, _ := text.MarshalList(0x903896a2654fb12b, s.List)
	return str
}

// BridgeObjectId_HttpApi_Future is a wrapper for a BridgeObjectId_HttpApi promised by a client call.
type BridgeObjectId_HttpApi_Future struct{ *capnp.Future }

func (p BridgeObjectId_HttpApi_Future) Struct() (BridgeObjectId_HttpApi, error) {
	s, err := p.Future.Struct()
	return BridgeObjectId_HttpApi{s}, err
}

type BridgeHttpSession struct{ Client *capnp.Client }

// BridgeHttpSession_TypeID is the unique identifier for the type BridgeHttpSession.
const BridgeHttpSession_TypeID = 0xb71e38915c2a2afc

func (c BridgeHttpSession) Get(ctx context.Context, params func(websession.WebSession_get_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Post(ctx context.Context, params func(websession.WebSession_post_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_post_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) OpenWebSocket(ctx context.Context, params func(websession.WebSession_openWebSocket_Params) error) (websession.WebSession_openWebSocket_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_openWebSocket_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_openWebSocket_Results_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Put(ctx context.Context, params func(websession.WebSession_put_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_put_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Delete(ctx context.Context, params func(websession.WebSession_delete_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_delete_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) PostStreaming(ctx context.Context, params func(websession.WebSession_postStreaming_Params) error) (websession.WebSession_postStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_postStreaming_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_postStreaming_Results_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) PutStreaming(ctx context.Context, params func(websession.WebSession_putStreaming_Params) error) (websession.WebSession_putStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_putStreaming_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_putStreaming_Results_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Propfind(ctx context.Context, params func(websession.WebSession_propfind_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_propfind_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Proppatch(ctx context.Context, params func(websession.WebSession_proppatch_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_proppatch_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Mkcol(ctx context.Context, params func(websession.WebSession_mkcol_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_mkcol_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Copy(ctx context.Context, params func(websession.WebSession_copy_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_copy_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Move(ctx context.Context, params func(websession.WebSession_move_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_move_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Lock(ctx context.Context, params func(websession.WebSession_lock_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_lock_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Unlock(ctx context.Context, params func(websession.WebSession_unlock_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_unlock_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Acl(ctx context.Context, params func(websession.WebSession_acl_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_acl_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Report(ctx context.Context, params func(websession.WebSession_report_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_report_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Options(ctx context.Context, params func(websession.WebSession_options_Params) error) (websession.WebSession_Options_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_options_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Options_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Patch(ctx context.Context, params func(websession.WebSession_patch_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_patch_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c BridgeHttpSession) Save(ctx context.Context, params func(grain.AppPersistent_save_Params) error) (grain.AppPersistent_save_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaffa789add8747b8,
			MethodID:      0,
			InterfaceName: "grain.capnp:AppPersistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(grain.AppPersistent_save_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return grain.AppPersistent_save_Results_Future{Future: ans.Future()}, release
}

// A BridgeHttpSession_Server is a BridgeHttpSession with a local implementation.
type BridgeHttpSession_Server interface {
	Get(context.Context, websession.WebSession_get) error

	Post(context.Context, websession.WebSession_post) error

	OpenWebSocket(context.Context, websession.WebSession_openWebSocket) error

	Put(context.Context, websession.WebSession_put) error

	Delete(context.Context, websession.WebSession_delete) error

	PostStreaming(context.Context, websession.WebSession_postStreaming) error

	PutStreaming(context.Context, websession.WebSession_putStreaming) error

	Propfind(context.Context, websession.WebSession_propfind) error

	Proppatch(context.Context, websession.WebSession_proppatch) error

	Mkcol(context.Context, websession.WebSession_mkcol) error

	Copy(context.Context, websession.WebSession_copy) error

	Move(context.Context, websession.WebSession_move) error

	Lock(context.Context, websession.WebSession_lock) error

	Unlock(context.Context, websession.WebSession_unlock) error

	Acl(context.Context, websession.WebSession_acl) error

	Report(context.Context, websession.WebSession_report) error

	Options(context.Context, websession.WebSession_options) error

	Patch(context.Context, websession.WebSession_patch) error

	Save(context.Context, grain.AppPersistent_save) error
}

// BridgeHttpSession_NewServer creates a new Server from an implementation of BridgeHttpSession_Server.
func BridgeHttpSession_NewServer(s BridgeHttpSession_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BridgeHttpSession_Methods(nil, s), s, c, policy)
}

// BridgeHttpSession_ServerToClient creates a new Client from an implementation of BridgeHttpSession_Server.
// The caller is responsible for calling Release on the returned Client.
func BridgeHttpSession_ServerToClient(s BridgeHttpSession_Server, policy *server.Policy) BridgeHttpSession {
	return BridgeHttpSession{Client: capnp.NewClient(BridgeHttpSession_NewServer(s, policy))}
}

// BridgeHttpSession_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BridgeHttpSession_Methods(methods []server.Method, s BridgeHttpSession_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 19)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, websession.WebSession_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Post(ctx, websession.WebSession_post{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.OpenWebSocket(ctx, websession.WebSession_openWebSocket{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, websession.WebSession_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Delete(ctx, websession.WebSession_delete{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PostStreaming(ctx, websession.WebSession_postStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PutStreaming(ctx, websession.WebSession_putStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Propfind(ctx, websession.WebSession_propfind{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Proppatch(ctx, websession.WebSession_proppatch{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Mkcol(ctx, websession.WebSession_mkcol{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Copy(ctx, websession.WebSession_copy{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Move(ctx, websession.WebSession_move{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lock(ctx, websession.WebSession_lock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unlock(ctx, websession.WebSession_unlock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Acl(ctx, websession.WebSession_acl{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Report(ctx, websession.WebSession_report{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Options(ctx, websession.WebSession_options{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Patch(ctx, websession.WebSession_patch{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaffa789add8747b8,
			MethodID:      0,
			InterfaceName: "grain.capnp:AppPersistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, grain.AppPersistent_save{call})
		},
	})

	return methods
}

const schema_f963cc483d8f9e3a = "x\xda\x94V\xcdo$G\x15\xaf\xd7mg\xa2\xd5~" +
	"x2#\xe5\x04)&\xb2\x19{w\xc6\xf6z\x0f\xcb" +
	"x&8vLl\x14\xb0{\xbd+\x85\xc4H\xd4t" +
	"\xd5LW\\S\xd5T\xd5\xd83\x81U@ qA" +
	"\x82p@\xc0\x81C\xfe\x00\x10\x12\x12\x1f\x7f\x00p\x80" +
	"?!\x1c\xe0\x007$\xc4%\x08\xd1\xa8\xa6\xdb\x9e\x9e" +
	"\x0f+\x8b|p\xcf\xfb\xbdz\xefW\xbf\xf7\xa1\xda\xb0" +
	"\x8b;\xde\xe6\xe2?>\x81\xd0\xc9),>\x97\xfcl" +
	"h\xff\xfe\x9b\x1f\xbd\xf5-T\\^H\x1a?\xfd^" +
	"\xeb\xe0\x8f\xe1G\x08\xc1\xd6\x87\xb7\xff\x09\xa5\x8fn\x17" +
	"\x10:\xf9\xd7m\x1f\x1e\xdd\xf1\x00\xa1\xe4\xee/\x8e\xd8" +
	"\x07?|\xf8}T|\x00\xc9/\xdf^\xb9\xb9\xf2\xf8" +
	"\xeb\x7fF\x8b\x0b\x05\x84\xb6>S\xfa\x0b\x94\x9e\x94\x0a" +
	"\x08\x95\x82\xd2\xdf\x10$\xffY[;}\xff\xe1'\x7f" +
	"\x85\x8a\xcb\xfeD\xecV\xf9\xb7PzR\x1ey\x96\x0b" +
	"\xa5\xa0\xfci\x84\xc6\xd1\x82e\x80\xb1\xfb>\x14<\x84" +
	"\xb6\x86\xe5\x0f\xa0\xf4~\xf9E\x84J?._\xa0d" +
	"\xf4\xf7\x83\xc4\x10I\x8dU\xfa\xb9^-\xb26\xae\xb5" +
	"5\xa7]V\xe3\xd22-\x89\xa8\x87$\x96q#\xb5" +
	">b_\xed3cO\x981\\\xbd$\x0flO\x1c" +
	"\x03\xc0M\xe4\xc1M\x846\xe1\xf3\xaf%\xcdO\xbdv" +
	"\xb4\xf7\xf8K\xc7\xc9>\x8elO\xbcr\xe3F3\xfd" +
	"\x8fq3b\x84\xba\x0f\x8c\x9b\xc6\x0e\x05\xc3v\x18\xb3" +
	"V\xc5\xb2\x81]\x0f\x8d\xa9\xa4\x18\xc6k\xf8k\xd9\x17" +
	"\xc6m5\xa8\x19\xfe.\x97\xdd\x06n+M\x99\xae\xb5" +
	"\xd5`;\xc3\x9f\xde\xb8\xf4\xa2\xc3\xdc\xa1\x8e\x92\xb6\xd6" +
	"!=.\x86\x0dl\x8845\xc34\xeflO:\x18" +
	"\xfe.k\xe0\xfb\x1b\xf1l\xb8\xbe\xb5JN\xb0p\x99" +
	"\x1bX*\xc9\xe6F\xe12b\x9a\xdb\xed\xf9\x14\xe6\xa3" +
	"\x17\x8cw#;\x07u\x82\xd4(\x0b\x95&\x96+9" +
	"\xc7#TB\xe99v\xc1%\xabE\xd7\xc5m\x93\xf0" +
	"\xac\xabU_\xd2Z\x16\xc0j\"ML4\x93\xd3\xe9" +
	"\x89\xe0\xddy\x99cB\xe9\xa8\x18\x1b96}m\\" +
	"\xb4X\x8d\xbaf\x0cPnbA\x86\x0d\xdc\x16*<" +
	"\x1b\xdb\xd59\xd3\x1d\xa1.\x1a8\xe2\x9429\x95{" +
	"\x0c3!xl\xb8\x19;\\D\xdc\xb2\x9a\x89I\xc8" +
	"\\9.4\x89s \xa76j\xe0\xcd\x8d\x8d\xe5\x19" +
	"\xc65\xc1:\xb6\x81\xb7\xee\x8f\xcb\x8d\xf1\xa5T[\x9b" +
	"\xb3M \xf8\x9c\x06\xd8\x8c\x07\xd8(\xc1)~\x99R" +
	"\xba=\x85\xd7\xda\xcaZ\xd5\x9b\xee\x93Y\xdd_f," +
	"\x87\x9f3myH\xc4\xa5\xe8=N\xa9`sX\xde" +
	"\x9fe\xd9\x173,\xafX\\Gv^\x0d{Dw" +
	"\xb9t\xda\xe5\xf5\x11\xdc\xd8\xdahVknV'/" +
	"\x96Rh\xae\x8f\xf0\xd1\x80\xaf_Nx\xd3\x0dd6" +
	"\xea}\x819mU\\\xa8l\xc2\x9b\xeb}\xb7\x18\xd2" +
	"E\x10j\x1e\xdb\xfc&x\x87\x9c\x93\xd4z\xb5\x10\xce" +
	"\x89\xc6\xa1\x92\x1d\xde\xc5-\xbc\xb3w\xf4\xc5\xcf\x1d\xbe" +
	"\xbe\xb3}#C;}\x19\xba9\xc1=r\xc6\xf6\x04" +
	"\x0f\xcf\x0e\x88\xa4\x82\xe9\xaa$=\xb6\x9a\xd3G3\xdb" +
	"\xd7r|\xa0\x9a\x07\xd34\x83H\xe3\x16\x96\xec\x02\xbf" +
	"\xf9\x857\x0e\xac\x8d\xb3\x9dW]\xdd\xcey\x0e\"]" +
	"WR(Bq\xeb\xdap\x18\xf3\x0e\xae:Wc\x89" +
	"\xed\x1b\xfcJ\x0b?\xd8\xd8\x98v\xc2\x98\x08\xa6m\xb5" +
	"\xf2\xe6\xc1\xa3\x8c!\xa38;R\xc1wq.\xc2]" +
	"\\i\x9c\xcaK\xa3f&V\xd2\xb0\xc7l`'\xe8" +
	"\x8d\xdbc\xfa;%\xce\xb4V:\xc7\xbc\xeaT\xcah" +
	"\xb0\xd5m\xfct\xe6\xae1\x93\xd5J\xac\x8c\xad\xdc\xc3" +
	"\x95\xf5\xca\x8c\x18\x86I\x9a\xca=F\x9e^\xf5I\xae" +
	"\x8c\xae\x0dp\x0bS\x15\xf6{L\xdaz\x97\xd9}\xc1" +
	"\xdc\xe7\xee\xf0\x90V\xd36\xb9\x0a\xd2Q\x1aW\xdd1" +
	"\x8e\xb9\xccZ \xaf\x9f\x83H\xccq+\xc3\xde\xe6_" +
	"\xbej\x8b\x14\xcdVy.c\xa8\x19\xb1,KZ\xad" +
	"\xa4\x0e\xf9\x1b\xa5\x96:\xa1t\xff\x9cI\xfb\x067\x96" +
	"I\xa6\xab\x95\xd0\xf5V\xe5\xdel\x9f\x91\x98\xd7G\x97" +
	"\xcfEq\xb5w\xf6l\x07\x1e\xca\x8e\xc2++x\xca" +
	"T\xb7\xdc\x0av-P\xa7\xacC\xfa\xc2\x8e*<\xd1" +
	"7\x19I71{JZ&\x9d\xaa\x1f\x1b#W\x1c" +
	"\xcc\x84a\x1f\x1f\xb2\xf2\xc40l#npW\x13." +
	"+\xf9\xf2N\x08\xcd-\xeb9\x99\x93K\x9d\x97\xa6\x84" +
	"\x16</\xb2s\xaf\x938f\x92\xeeE\\\xd0j\x9a" +
	"}5W>\xd7\x0a\x13.\xee\xcc\xea\xcc\xf6\x19\xad\x8a" +
	"t\xfd\xa4[\xa7\xb9\x9e\xbe8\x10z\xc6\xc7\xcd\xee\xc8" +
	"z\xd4~\x87\x85\xf6\x90\xd6\xdd\xd4\x17^\x8d\xf91@" +
	"\xb0\xe4/ \xb4\x00\x08\x15\xc9\x1aB\xc1\xa9\x0fA\xe4" +
	"A\x11\xa0\x0c\xce\xc8\x9c\xf1+>\x04\xc2\x83\xa2\xe7\x95" +
	"\xc1C\xa8\xc8\xdb\x08\x05\x91\x0f\xc1\xb7=(\xfa~\x19" +
	"|\x84\x8a\xdf|\x0b\xa1\xe0\x1b>\x04\xdf\xf5\xe0\x8e\xeb" +
	"\x95\xec\xd5\x04wbb\xa3\xcb\x1fI\xcct\x8f\x1b\xc3" +
	"QAI\x03\xb7\x11\x1c\xfb\x00\x80<\xf7\x99p\xca\xa4" +
	"\xe5v\x88\xfcC\x0a\xb7\x90\x07\xb7\x10\\]q\xf1\x19" +
	"\xae\xe8nv\xf2\xd9\xd1\xebM\x1e\x03\x1c\xfb\x8b\xc1\xf3" +
	"\x00\xc9\xef\xff\xb4\xfc\xbb\xe1_\x87\x7f@\x08%\xbf~" +
	"\xfd;\x1f\xfed\xf0\xef\x9f\xa3\x1d(\xc2K\xc1\x82\x07" +
	"c\x13BEx1X\x00\x80\x11\xad\xa5\xf1\x83\xf3\xff" +
	"\xe41\x92\xba`\x0f\xa9\x0b\x96{\x11\xc3\xee{\x8e\xe2" +
	"\xab1\x0f\x9e\xf7\x17n&\xc9H\xf9U\xa7g\xd5\x87" +
	"\xe0\x81\x07\xb7\xe0\xbfI*\xfd\xe6.B\xc1=\x1f\x82" +
	"\x87\x1e$$\x8e\x05\x0f\x89E\x05\xae$\xbc\x80<x" +
	"\x01\xc1{Q\x1a\x0b\x96\xc6)\x10\xc0\x12\x82\xff\x05\x00" +
	"\x00\xff\xffO\xf1Y\x89"

func init() {
	schemas.Register(schema_f963cc483d8f9e3a,
		0x835a98b9e87479ae,
		0x903896a2654fb12b,
		0xb71e38915c2a2afc,
		0xde7c54260c265bb4)
}
