// Code generated by capnpc-go. DO NOT EDIT.

package payments

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	persistent "capnproto.org/go/capnp/v3/std/capnp/persistent"
	context "context"
	fmt "fmt"
	strconv "strconv"
	supervisor "zenhack.net/go/sandstorm/capnp/supervisor"
	util "zenhack.net/go/sandstorm/capnp/util"
)

type PaymentSource capnp.Client

// PaymentSource_TypeID is the unique identifier for the type PaymentSource.
const PaymentSource_TypeID = 0xf9692c357124ed70

func (c PaymentSource) GetTitle(ctx context.Context, params func(PaymentSource_getTitle_Params) error) (PaymentSource_getTitle_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf9692c357124ed70,
			MethodID:      0,
			InterfaceName: "payments.capnp:PaymentSource",
			MethodName:    "getTitle",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(PaymentSource_getTitle_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return PaymentSource_getTitle_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c PaymentSource) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c PaymentSource) AddRef() PaymentSource {
	return PaymentSource(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c PaymentSource) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c PaymentSource) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c PaymentSource) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (PaymentSource) DecodeFromPtr(p capnp.Ptr) PaymentSource {
	return PaymentSource(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c PaymentSource) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c PaymentSource) IsSame(other PaymentSource) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c PaymentSource) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c PaymentSource) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A PaymentSource_Server is a PaymentSource with a local implementation.
type PaymentSource_Server interface {
	GetTitle(context.Context, PaymentSource_getTitle) error
}

// PaymentSource_NewServer creates a new Server from an implementation of PaymentSource_Server.
func PaymentSource_NewServer(s PaymentSource_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PaymentSource_Methods(nil, s), s, c)
}

// PaymentSource_ServerToClient creates a new Client from an implementation of PaymentSource_Server.
// The caller is responsible for calling Release on the returned Client.
func PaymentSource_ServerToClient(s PaymentSource_Server) PaymentSource {
	return PaymentSource(capnp.NewClient(PaymentSource_NewServer(s)))
}

// PaymentSource_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PaymentSource_Methods(methods []server.Method, s PaymentSource_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf9692c357124ed70,
			MethodID:      0,
			InterfaceName: "payments.capnp:PaymentSource",
			MethodName:    "getTitle",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetTitle(ctx, PaymentSource_getTitle{call})
		},
	})

	return methods
}

// PaymentSource_getTitle holds the state for a server call to PaymentSource.getTitle.
// See server.Call for documentation.
type PaymentSource_getTitle struct {
	*server.Call
}

// Args returns the call's arguments.
func (c PaymentSource_getTitle) Args() PaymentSource_getTitle_Params {
	return PaymentSource_getTitle_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c PaymentSource_getTitle) AllocResults() (PaymentSource_getTitle_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PaymentSource_getTitle_Results(r), err
}

// PaymentSource_List is a list of PaymentSource.
type PaymentSource_List = capnp.CapList[PaymentSource]

// NewPaymentSource creates a new list of PaymentSource.
func NewPaymentSource_List(s *capnp.Segment, sz int32) (PaymentSource_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[PaymentSource](l), err
}

type PaymentSource_getTitle_Params capnp.Struct

// PaymentSource_getTitle_Params_TypeID is the unique identifier for the type PaymentSource_getTitle_Params.
const PaymentSource_getTitle_Params_TypeID = 0xcb2516f79343cbe3

func NewPaymentSource_getTitle_Params(s *capnp.Segment) (PaymentSource_getTitle_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PaymentSource_getTitle_Params(st), err
}

func NewRootPaymentSource_getTitle_Params(s *capnp.Segment) (PaymentSource_getTitle_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PaymentSource_getTitle_Params(st), err
}

func ReadRootPaymentSource_getTitle_Params(msg *capnp.Message) (PaymentSource_getTitle_Params, error) {
	root, err := msg.Root()
	return PaymentSource_getTitle_Params(root.Struct()), err
}

func (s PaymentSource_getTitle_Params) String() string {
	str, _ := text.Marshal(0xcb2516f79343cbe3, capnp.Struct(s))
	return str
}

func (s PaymentSource_getTitle_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PaymentSource_getTitle_Params) DecodeFromPtr(p capnp.Ptr) PaymentSource_getTitle_Params {
	return PaymentSource_getTitle_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PaymentSource_getTitle_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PaymentSource_getTitle_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PaymentSource_getTitle_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PaymentSource_getTitle_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// PaymentSource_getTitle_Params_List is a list of PaymentSource_getTitle_Params.
type PaymentSource_getTitle_Params_List = capnp.StructList[PaymentSource_getTitle_Params]

// NewPaymentSource_getTitle_Params creates a new list of PaymentSource_getTitle_Params.
func NewPaymentSource_getTitle_Params_List(s *capnp.Segment, sz int32) (PaymentSource_getTitle_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[PaymentSource_getTitle_Params](l), err
}

// PaymentSource_getTitle_Params_Future is a wrapper for a PaymentSource_getTitle_Params promised by a client call.
type PaymentSource_getTitle_Params_Future struct{ *capnp.Future }

func (f PaymentSource_getTitle_Params_Future) Struct() (PaymentSource_getTitle_Params, error) {
	p, err := f.Future.Ptr()
	return PaymentSource_getTitle_Params(p.Struct()), err
}

type PaymentSource_getTitle_Results capnp.Struct

// PaymentSource_getTitle_Results_TypeID is the unique identifier for the type PaymentSource_getTitle_Results.
const PaymentSource_getTitle_Results_TypeID = 0xaf4ce1881ecae0ae

func NewPaymentSource_getTitle_Results(s *capnp.Segment) (PaymentSource_getTitle_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PaymentSource_getTitle_Results(st), err
}

func NewRootPaymentSource_getTitle_Results(s *capnp.Segment) (PaymentSource_getTitle_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PaymentSource_getTitle_Results(st), err
}

func ReadRootPaymentSource_getTitle_Results(msg *capnp.Message) (PaymentSource_getTitle_Results, error) {
	root, err := msg.Root()
	return PaymentSource_getTitle_Results(root.Struct()), err
}

func (s PaymentSource_getTitle_Results) String() string {
	str, _ := text.Marshal(0xaf4ce1881ecae0ae, capnp.Struct(s))
	return str
}

func (s PaymentSource_getTitle_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PaymentSource_getTitle_Results) DecodeFromPtr(p capnp.Ptr) PaymentSource_getTitle_Results {
	return PaymentSource_getTitle_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PaymentSource_getTitle_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PaymentSource_getTitle_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PaymentSource_getTitle_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PaymentSource_getTitle_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PaymentSource_getTitle_Results) Title() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return util.LocalizedText(p.Struct()), err
}

func (s PaymentSource_getTitle_Results) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PaymentSource_getTitle_Results) SetTitle(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTitle sets the title field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s PaymentSource_getTitle_Results) NewTitle() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// PaymentSource_getTitle_Results_List is a list of PaymentSource_getTitle_Results.
type PaymentSource_getTitle_Results_List = capnp.StructList[PaymentSource_getTitle_Results]

// NewPaymentSource_getTitle_Results creates a new list of PaymentSource_getTitle_Results.
func NewPaymentSource_getTitle_Results_List(s *capnp.Segment, sz int32) (PaymentSource_getTitle_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PaymentSource_getTitle_Results](l), err
}

// PaymentSource_getTitle_Results_Future is a wrapper for a PaymentSource_getTitle_Results promised by a client call.
type PaymentSource_getTitle_Results_Future struct{ *capnp.Future }

func (f PaymentSource_getTitle_Results_Future) Struct() (PaymentSource_getTitle_Results, error) {
	p, err := f.Future.Ptr()
	return PaymentSource_getTitle_Results(p.Struct()), err
}
func (p PaymentSource_getTitle_Results_Future) Title() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(0, nil)}
}

type PaymentAcceptor capnp.Client

// PaymentAcceptor_TypeID is the unique identifier for the type PaymentAcceptor.
const PaymentAcceptor_TypeID = 0xd562e38729bbd911

func (c PaymentAcceptor) CreatePayment(ctx context.Context, params func(PaymentAcceptor_createPayment_Params) error) (PaymentAcceptor_CreatePaymentResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd562e38729bbd911,
			MethodID:      0,
			InterfaceName: "payments.capnp:PaymentAcceptor",
			MethodName:    "createPayment",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(PaymentAcceptor_createPayment_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return PaymentAcceptor_CreatePaymentResults_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c PaymentAcceptor) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c PaymentAcceptor) AddRef() PaymentAcceptor {
	return PaymentAcceptor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c PaymentAcceptor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c PaymentAcceptor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c PaymentAcceptor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (PaymentAcceptor) DecodeFromPtr(p capnp.Ptr) PaymentAcceptor {
	return PaymentAcceptor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c PaymentAcceptor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c PaymentAcceptor) IsSame(other PaymentAcceptor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c PaymentAcceptor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c PaymentAcceptor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A PaymentAcceptor_Server is a PaymentAcceptor with a local implementation.
type PaymentAcceptor_Server interface {
	CreatePayment(context.Context, PaymentAcceptor_createPayment) error
}

// PaymentAcceptor_NewServer creates a new Server from an implementation of PaymentAcceptor_Server.
func PaymentAcceptor_NewServer(s PaymentAcceptor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PaymentAcceptor_Methods(nil, s), s, c)
}

// PaymentAcceptor_ServerToClient creates a new Client from an implementation of PaymentAcceptor_Server.
// The caller is responsible for calling Release on the returned Client.
func PaymentAcceptor_ServerToClient(s PaymentAcceptor_Server) PaymentAcceptor {
	return PaymentAcceptor(capnp.NewClient(PaymentAcceptor_NewServer(s)))
}

// PaymentAcceptor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PaymentAcceptor_Methods(methods []server.Method, s PaymentAcceptor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd562e38729bbd911,
			MethodID:      0,
			InterfaceName: "payments.capnp:PaymentAcceptor",
			MethodName:    "createPayment",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CreatePayment(ctx, PaymentAcceptor_createPayment{call})
		},
	})

	return methods
}

// PaymentAcceptor_createPayment holds the state for a server call to PaymentAcceptor.createPayment.
// See server.Call for documentation.
type PaymentAcceptor_createPayment struct {
	*server.Call
}

// Args returns the call's arguments.
func (c PaymentAcceptor_createPayment) Args() PaymentAcceptor_createPayment_Params {
	return PaymentAcceptor_createPayment_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c PaymentAcceptor_createPayment) AllocResults() (PaymentAcceptor_CreatePaymentResults, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PaymentAcceptor_CreatePaymentResults(r), err
}

// PaymentAcceptor_List is a list of PaymentAcceptor.
type PaymentAcceptor_List = capnp.CapList[PaymentAcceptor]

// NewPaymentAcceptor creates a new list of PaymentAcceptor.
func NewPaymentAcceptor_List(s *capnp.Segment, sz int32) (PaymentAcceptor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[PaymentAcceptor](l), err
}

type PaymentAcceptor_CreatePaymentResults capnp.Struct
type PaymentAcceptor_CreatePaymentResults_success PaymentAcceptor_CreatePaymentResults
type PaymentAcceptor_CreatePaymentResults_failed PaymentAcceptor_CreatePaymentResults
type PaymentAcceptor_CreatePaymentResults_Which uint16

const (
	PaymentAcceptor_CreatePaymentResults_Which_success PaymentAcceptor_CreatePaymentResults_Which = 0
	PaymentAcceptor_CreatePaymentResults_Which_failed  PaymentAcceptor_CreatePaymentResults_Which = 1
)

func (w PaymentAcceptor_CreatePaymentResults_Which) String() string {
	const s = "successfailed"
	switch w {
	case PaymentAcceptor_CreatePaymentResults_Which_success:
		return s[0:7]
	case PaymentAcceptor_CreatePaymentResults_Which_failed:
		return s[7:13]

	}
	return "PaymentAcceptor_CreatePaymentResults_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// PaymentAcceptor_CreatePaymentResults_TypeID is the unique identifier for the type PaymentAcceptor_CreatePaymentResults.
const PaymentAcceptor_CreatePaymentResults_TypeID = 0xeedba0c4417e0460

func NewPaymentAcceptor_CreatePaymentResults(s *capnp.Segment) (PaymentAcceptor_CreatePaymentResults, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PaymentAcceptor_CreatePaymentResults(st), err
}

func NewRootPaymentAcceptor_CreatePaymentResults(s *capnp.Segment) (PaymentAcceptor_CreatePaymentResults, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PaymentAcceptor_CreatePaymentResults(st), err
}

func ReadRootPaymentAcceptor_CreatePaymentResults(msg *capnp.Message) (PaymentAcceptor_CreatePaymentResults, error) {
	root, err := msg.Root()
	return PaymentAcceptor_CreatePaymentResults(root.Struct()), err
}

func (s PaymentAcceptor_CreatePaymentResults) String() string {
	str, _ := text.Marshal(0xeedba0c4417e0460, capnp.Struct(s))
	return str
}

func (s PaymentAcceptor_CreatePaymentResults) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PaymentAcceptor_CreatePaymentResults) DecodeFromPtr(p capnp.Ptr) PaymentAcceptor_CreatePaymentResults {
	return PaymentAcceptor_CreatePaymentResults(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PaymentAcceptor_CreatePaymentResults) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s PaymentAcceptor_CreatePaymentResults) Which() PaymentAcceptor_CreatePaymentResults_Which {
	return PaymentAcceptor_CreatePaymentResults_Which(capnp.Struct(s).Uint16(0))
}
func (s PaymentAcceptor_CreatePaymentResults) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PaymentAcceptor_CreatePaymentResults) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PaymentAcceptor_CreatePaymentResults) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PaymentAcceptor_CreatePaymentResults) Success() PaymentAcceptor_CreatePaymentResults_success {
	return PaymentAcceptor_CreatePaymentResults_success(s)
}

func (s PaymentAcceptor_CreatePaymentResults) SetSuccess() {
	capnp.Struct(s).SetUint16(0, 0)
}

func (s PaymentAcceptor_CreatePaymentResults_success) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PaymentAcceptor_CreatePaymentResults_success) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PaymentAcceptor_CreatePaymentResults_success) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PaymentAcceptor_CreatePaymentResults_success) Payment() Payment {
	p, _ := capnp.Struct(s).Ptr(0)
	return Payment(p.Interface().Client())
}

func (s PaymentAcceptor_CreatePaymentResults_success) HasPayment() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PaymentAcceptor_CreatePaymentResults_success) SetPayment(v Payment) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s PaymentAcceptor_CreatePaymentResults) Failed() PaymentAcceptor_CreatePaymentResults_failed {
	return PaymentAcceptor_CreatePaymentResults_failed(s)
}

func (s PaymentAcceptor_CreatePaymentResults) SetFailed() {
	capnp.Struct(s).SetUint16(0, 1)
}

func (s PaymentAcceptor_CreatePaymentResults_failed) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PaymentAcceptor_CreatePaymentResults_failed) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PaymentAcceptor_CreatePaymentResults_failed) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PaymentAcceptor_CreatePaymentResults_failed) Description() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return util.LocalizedText(p.Struct()), err
}

func (s PaymentAcceptor_CreatePaymentResults_failed) HasDescription() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PaymentAcceptor_CreatePaymentResults_failed) SetDescription(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDescription sets the description field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s PaymentAcceptor_CreatePaymentResults_failed) NewDescription() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// PaymentAcceptor_CreatePaymentResults_List is a list of PaymentAcceptor_CreatePaymentResults.
type PaymentAcceptor_CreatePaymentResults_List = capnp.StructList[PaymentAcceptor_CreatePaymentResults]

// NewPaymentAcceptor_CreatePaymentResults creates a new list of PaymentAcceptor_CreatePaymentResults.
func NewPaymentAcceptor_CreatePaymentResults_List(s *capnp.Segment, sz int32) (PaymentAcceptor_CreatePaymentResults_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PaymentAcceptor_CreatePaymentResults](l), err
}

// PaymentAcceptor_CreatePaymentResults_Future is a wrapper for a PaymentAcceptor_CreatePaymentResults promised by a client call.
type PaymentAcceptor_CreatePaymentResults_Future struct{ *capnp.Future }

func (f PaymentAcceptor_CreatePaymentResults_Future) Struct() (PaymentAcceptor_CreatePaymentResults, error) {
	p, err := f.Future.Ptr()
	return PaymentAcceptor_CreatePaymentResults(p.Struct()), err
}
func (p PaymentAcceptor_CreatePaymentResults_Future) Success() PaymentAcceptor_CreatePaymentResults_success_Future {
	return PaymentAcceptor_CreatePaymentResults_success_Future{p.Future}
}

// PaymentAcceptor_CreatePaymentResults_success_Future is a wrapper for a PaymentAcceptor_CreatePaymentResults_success promised by a client call.
type PaymentAcceptor_CreatePaymentResults_success_Future struct{ *capnp.Future }

func (f PaymentAcceptor_CreatePaymentResults_success_Future) Struct() (PaymentAcceptor_CreatePaymentResults_success, error) {
	p, err := f.Future.Ptr()
	return PaymentAcceptor_CreatePaymentResults_success(p.Struct()), err
}
func (p PaymentAcceptor_CreatePaymentResults_success_Future) Payment() Payment {
	return Payment(p.Future.Field(0, nil).Client())
}

func (p PaymentAcceptor_CreatePaymentResults_Future) Failed() PaymentAcceptor_CreatePaymentResults_failed_Future {
	return PaymentAcceptor_CreatePaymentResults_failed_Future{p.Future}
}

// PaymentAcceptor_CreatePaymentResults_failed_Future is a wrapper for a PaymentAcceptor_CreatePaymentResults_failed promised by a client call.
type PaymentAcceptor_CreatePaymentResults_failed_Future struct{ *capnp.Future }

func (f PaymentAcceptor_CreatePaymentResults_failed_Future) Struct() (PaymentAcceptor_CreatePaymentResults_failed, error) {
	p, err := f.Future.Ptr()
	return PaymentAcceptor_CreatePaymentResults_failed(p.Struct()), err
}
func (p PaymentAcceptor_CreatePaymentResults_failed_Future) Description() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(0, nil)}
}

type PaymentAcceptor_Invoice capnp.Struct

// PaymentAcceptor_Invoice_TypeID is the unique identifier for the type PaymentAcceptor_Invoice.
const PaymentAcceptor_Invoice_TypeID = 0x91d6a3469f738613

func NewPaymentAcceptor_Invoice(s *capnp.Segment) (PaymentAcceptor_Invoice, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PaymentAcceptor_Invoice(st), err
}

func NewRootPaymentAcceptor_Invoice(s *capnp.Segment) (PaymentAcceptor_Invoice, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PaymentAcceptor_Invoice(st), err
}

func ReadRootPaymentAcceptor_Invoice(msg *capnp.Message) (PaymentAcceptor_Invoice, error) {
	root, err := msg.Root()
	return PaymentAcceptor_Invoice(root.Struct()), err
}

func (s PaymentAcceptor_Invoice) String() string {
	str, _ := text.Marshal(0x91d6a3469f738613, capnp.Struct(s))
	return str
}

func (s PaymentAcceptor_Invoice) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PaymentAcceptor_Invoice) DecodeFromPtr(p capnp.Ptr) PaymentAcceptor_Invoice {
	return PaymentAcceptor_Invoice(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PaymentAcceptor_Invoice) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PaymentAcceptor_Invoice) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PaymentAcceptor_Invoice) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PaymentAcceptor_Invoice) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PaymentAcceptor_Invoice) Items() (PaymentAcceptor_Invoice_Item_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return PaymentAcceptor_Invoice_Item_List(p.List()), err
}

func (s PaymentAcceptor_Invoice) HasItems() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PaymentAcceptor_Invoice) SetItems(v PaymentAcceptor_Invoice_Item_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewItems sets the items field to a newly
// allocated PaymentAcceptor_Invoice_Item_List, preferring placement in s's segment.
func (s PaymentAcceptor_Invoice) NewItems(n int32) (PaymentAcceptor_Invoice_Item_List, error) {
	l, err := NewPaymentAcceptor_Invoice_Item_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PaymentAcceptor_Invoice_Item_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// PaymentAcceptor_Invoice_List is a list of PaymentAcceptor_Invoice.
type PaymentAcceptor_Invoice_List = capnp.StructList[PaymentAcceptor_Invoice]

// NewPaymentAcceptor_Invoice creates a new list of PaymentAcceptor_Invoice.
func NewPaymentAcceptor_Invoice_List(s *capnp.Segment, sz int32) (PaymentAcceptor_Invoice_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PaymentAcceptor_Invoice](l), err
}

// PaymentAcceptor_Invoice_Future is a wrapper for a PaymentAcceptor_Invoice promised by a client call.
type PaymentAcceptor_Invoice_Future struct{ *capnp.Future }

func (f PaymentAcceptor_Invoice_Future) Struct() (PaymentAcceptor_Invoice, error) {
	p, err := f.Future.Ptr()
	return PaymentAcceptor_Invoice(p.Struct()), err
}

type PaymentAcceptor_Invoice_Item capnp.Struct

// PaymentAcceptor_Invoice_Item_TypeID is the unique identifier for the type PaymentAcceptor_Invoice_Item.
const PaymentAcceptor_Invoice_Item_TypeID = 0xfe043eafc75e52c0

func NewPaymentAcceptor_Invoice_Item(s *capnp.Segment) (PaymentAcceptor_Invoice_Item, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PaymentAcceptor_Invoice_Item(st), err
}

func NewRootPaymentAcceptor_Invoice_Item(s *capnp.Segment) (PaymentAcceptor_Invoice_Item, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PaymentAcceptor_Invoice_Item(st), err
}

func ReadRootPaymentAcceptor_Invoice_Item(msg *capnp.Message) (PaymentAcceptor_Invoice_Item, error) {
	root, err := msg.Root()
	return PaymentAcceptor_Invoice_Item(root.Struct()), err
}

func (s PaymentAcceptor_Invoice_Item) String() string {
	str, _ := text.Marshal(0xfe043eafc75e52c0, capnp.Struct(s))
	return str
}

func (s PaymentAcceptor_Invoice_Item) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PaymentAcceptor_Invoice_Item) DecodeFromPtr(p capnp.Ptr) PaymentAcceptor_Invoice_Item {
	return PaymentAcceptor_Invoice_Item(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PaymentAcceptor_Invoice_Item) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PaymentAcceptor_Invoice_Item) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PaymentAcceptor_Invoice_Item) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PaymentAcceptor_Invoice_Item) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PaymentAcceptor_Invoice_Item) Title() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return util.LocalizedText(p.Struct()), err
}

func (s PaymentAcceptor_Invoice_Item) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PaymentAcceptor_Invoice_Item) SetTitle(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTitle sets the title field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s PaymentAcceptor_Invoice_Item) NewTitle() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s PaymentAcceptor_Invoice_Item) AmountCents() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PaymentAcceptor_Invoice_Item) SetAmountCents(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// PaymentAcceptor_Invoice_Item_List is a list of PaymentAcceptor_Invoice_Item.
type PaymentAcceptor_Invoice_Item_List = capnp.StructList[PaymentAcceptor_Invoice_Item]

// NewPaymentAcceptor_Invoice_Item creates a new list of PaymentAcceptor_Invoice_Item.
func NewPaymentAcceptor_Invoice_Item_List(s *capnp.Segment, sz int32) (PaymentAcceptor_Invoice_Item_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PaymentAcceptor_Invoice_Item](l), err
}

// PaymentAcceptor_Invoice_Item_Future is a wrapper for a PaymentAcceptor_Invoice_Item promised by a client call.
type PaymentAcceptor_Invoice_Item_Future struct{ *capnp.Future }

func (f PaymentAcceptor_Invoice_Item_Future) Struct() (PaymentAcceptor_Invoice_Item, error) {
	p, err := f.Future.Ptr()
	return PaymentAcceptor_Invoice_Item(p.Struct()), err
}
func (p PaymentAcceptor_Invoice_Item_Future) Title() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(0, nil)}
}

type PaymentAcceptor_createPayment_Params capnp.Struct

// PaymentAcceptor_createPayment_Params_TypeID is the unique identifier for the type PaymentAcceptor_createPayment_Params.
const PaymentAcceptor_createPayment_Params_TypeID = 0x9fe16028dd10ba82

func NewPaymentAcceptor_createPayment_Params(s *capnp.Segment) (PaymentAcceptor_createPayment_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PaymentAcceptor_createPayment_Params(st), err
}

func NewRootPaymentAcceptor_createPayment_Params(s *capnp.Segment) (PaymentAcceptor_createPayment_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PaymentAcceptor_createPayment_Params(st), err
}

func ReadRootPaymentAcceptor_createPayment_Params(msg *capnp.Message) (PaymentAcceptor_createPayment_Params, error) {
	root, err := msg.Root()
	return PaymentAcceptor_createPayment_Params(root.Struct()), err
}

func (s PaymentAcceptor_createPayment_Params) String() string {
	str, _ := text.Marshal(0x9fe16028dd10ba82, capnp.Struct(s))
	return str
}

func (s PaymentAcceptor_createPayment_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PaymentAcceptor_createPayment_Params) DecodeFromPtr(p capnp.Ptr) PaymentAcceptor_createPayment_Params {
	return PaymentAcceptor_createPayment_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PaymentAcceptor_createPayment_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PaymentAcceptor_createPayment_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PaymentAcceptor_createPayment_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PaymentAcceptor_createPayment_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PaymentAcceptor_createPayment_Params) Source() PaymentSource {
	p, _ := capnp.Struct(s).Ptr(0)
	return PaymentSource(p.Interface().Client())
}

func (s PaymentAcceptor_createPayment_Params) HasSource() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PaymentAcceptor_createPayment_Params) SetSource(v PaymentSource) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s PaymentAcceptor_createPayment_Params) Invoice() (PaymentAcceptor_Invoice, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return PaymentAcceptor_Invoice(p.Struct()), err
}

func (s PaymentAcceptor_createPayment_Params) HasInvoice() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s PaymentAcceptor_createPayment_Params) SetInvoice(v PaymentAcceptor_Invoice) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewInvoice sets the invoice field to a newly
// allocated PaymentAcceptor_Invoice struct, preferring placement in s's segment.
func (s PaymentAcceptor_createPayment_Params) NewInvoice() (PaymentAcceptor_Invoice, error) {
	ss, err := NewPaymentAcceptor_Invoice(capnp.Struct(s).Segment())
	if err != nil {
		return PaymentAcceptor_Invoice{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// PaymentAcceptor_createPayment_Params_List is a list of PaymentAcceptor_createPayment_Params.
type PaymentAcceptor_createPayment_Params_List = capnp.StructList[PaymentAcceptor_createPayment_Params]

// NewPaymentAcceptor_createPayment_Params creates a new list of PaymentAcceptor_createPayment_Params.
func NewPaymentAcceptor_createPayment_Params_List(s *capnp.Segment, sz int32) (PaymentAcceptor_createPayment_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[PaymentAcceptor_createPayment_Params](l), err
}

// PaymentAcceptor_createPayment_Params_Future is a wrapper for a PaymentAcceptor_createPayment_Params promised by a client call.
type PaymentAcceptor_createPayment_Params_Future struct{ *capnp.Future }

func (f PaymentAcceptor_createPayment_Params_Future) Struct() (PaymentAcceptor_createPayment_Params, error) {
	p, err := f.Future.Ptr()
	return PaymentAcceptor_createPayment_Params(p.Struct()), err
}
func (p PaymentAcceptor_createPayment_Params_Future) Source() PaymentSource {
	return PaymentSource(p.Future.Field(0, nil).Client())
}

func (p PaymentAcceptor_createPayment_Params_Future) Invoice() PaymentAcceptor_Invoice_Future {
	return PaymentAcceptor_Invoice_Future{Future: p.Future.Field(1, nil)}
}

type Payment capnp.Client

// Payment_TypeID is the unique identifier for the type Payment.
const Payment_TypeID = 0xc5203e36361f382d

func (c Payment) Commit(ctx context.Context, params func(Payment_commit_Params) error) (Payment_commit_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc5203e36361f382d,
			MethodID:      0,
			InterfaceName: "payments.capnp:Payment",
			MethodName:    "commit",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Payment_commit_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Payment_commit_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Payment) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Payment) AddRef() Payment {
	return Payment(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Payment) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Payment) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Payment) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Payment) DecodeFromPtr(p capnp.Ptr) Payment {
	return Payment(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Payment) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Payment) IsSame(other Payment) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Payment) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Payment) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Payment_Server is a Payment with a local implementation.
type Payment_Server interface {
	Commit(context.Context, Payment_commit) error
}

// Payment_NewServer creates a new Server from an implementation of Payment_Server.
func Payment_NewServer(s Payment_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Payment_Methods(nil, s), s, c)
}

// Payment_ServerToClient creates a new Client from an implementation of Payment_Server.
// The caller is responsible for calling Release on the returned Client.
func Payment_ServerToClient(s Payment_Server) Payment {
	return Payment(capnp.NewClient(Payment_NewServer(s)))
}

// Payment_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Payment_Methods(methods []server.Method, s Payment_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc5203e36361f382d,
			MethodID:      0,
			InterfaceName: "payments.capnp:Payment",
			MethodName:    "commit",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Commit(ctx, Payment_commit{call})
		},
	})

	return methods
}

// Payment_commit holds the state for a server call to Payment.commit.
// See server.Call for documentation.
type Payment_commit struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Payment_commit) Args() Payment_commit_Params {
	return Payment_commit_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Payment_commit) AllocResults() (Payment_commit_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Payment_commit_Results(r), err
}

// Payment_List is a list of Payment.
type Payment_List = capnp.CapList[Payment]

// NewPayment creates a new list of Payment.
func NewPayment_List(s *capnp.Segment, sz int32) (Payment_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Payment](l), err
}

type Payment_commit_Params capnp.Struct

// Payment_commit_Params_TypeID is the unique identifier for the type Payment_commit_Params.
const Payment_commit_Params_TypeID = 0xbe3b7a8d4c9cd5b5

func NewPayment_commit_Params(s *capnp.Segment) (Payment_commit_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Payment_commit_Params(st), err
}

func NewRootPayment_commit_Params(s *capnp.Segment) (Payment_commit_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Payment_commit_Params(st), err
}

func ReadRootPayment_commit_Params(msg *capnp.Message) (Payment_commit_Params, error) {
	root, err := msg.Root()
	return Payment_commit_Params(root.Struct()), err
}

func (s Payment_commit_Params) String() string {
	str, _ := text.Marshal(0xbe3b7a8d4c9cd5b5, capnp.Struct(s))
	return str
}

func (s Payment_commit_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Payment_commit_Params) DecodeFromPtr(p capnp.Ptr) Payment_commit_Params {
	return Payment_commit_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Payment_commit_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Payment_commit_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Payment_commit_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Payment_commit_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Payment_commit_Params_List is a list of Payment_commit_Params.
type Payment_commit_Params_List = capnp.StructList[Payment_commit_Params]

// NewPayment_commit_Params creates a new list of Payment_commit_Params.
func NewPayment_commit_Params_List(s *capnp.Segment, sz int32) (Payment_commit_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Payment_commit_Params](l), err
}

// Payment_commit_Params_Future is a wrapper for a Payment_commit_Params promised by a client call.
type Payment_commit_Params_Future struct{ *capnp.Future }

func (f Payment_commit_Params_Future) Struct() (Payment_commit_Params, error) {
	p, err := f.Future.Ptr()
	return Payment_commit_Params(p.Struct()), err
}

type Payment_commit_Results capnp.Struct

// Payment_commit_Results_TypeID is the unique identifier for the type Payment_commit_Results.
const Payment_commit_Results_TypeID = 0xb3942c4ba1c3c70f

func NewPayment_commit_Results(s *capnp.Segment) (Payment_commit_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Payment_commit_Results(st), err
}

func NewRootPayment_commit_Results(s *capnp.Segment) (Payment_commit_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Payment_commit_Results(st), err
}

func ReadRootPayment_commit_Results(msg *capnp.Message) (Payment_commit_Results, error) {
	root, err := msg.Root()
	return Payment_commit_Results(root.Struct()), err
}

func (s Payment_commit_Results) String() string {
	str, _ := text.Marshal(0xb3942c4ba1c3c70f, capnp.Struct(s))
	return str
}

func (s Payment_commit_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Payment_commit_Results) DecodeFromPtr(p capnp.Ptr) Payment_commit_Results {
	return Payment_commit_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Payment_commit_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Payment_commit_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Payment_commit_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Payment_commit_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Payment_commit_Results_List is a list of Payment_commit_Results.
type Payment_commit_Results_List = capnp.StructList[Payment_commit_Results]

// NewPayment_commit_Results creates a new list of Payment_commit_Results.
func NewPayment_commit_Results_List(s *capnp.Segment, sz int32) (Payment_commit_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Payment_commit_Results](l), err
}

// Payment_commit_Results_Future is a wrapper for a Payment_commit_Results promised by a client call.
type Payment_commit_Results_Future struct{ *capnp.Future }

func (f Payment_commit_Results_Future) Struct() (Payment_commit_Results, error) {
	p, err := f.Future.Ptr()
	return Payment_commit_Results(p.Struct()), err
}

type PersistentPaymentSource capnp.Client

// PersistentPaymentSource_TypeID is the unique identifier for the type PersistentPaymentSource.
const PersistentPaymentSource_TypeID = 0xa66dd2d4c80d0fae

func (c PersistentPaymentSource) GetTitle(ctx context.Context, params func(PaymentSource_getTitle_Params) error) (PaymentSource_getTitle_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf9692c357124ed70,
			MethodID:      0,
			InterfaceName: "payments.capnp:PaymentSource",
			MethodName:    "getTitle",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(PaymentSource_getTitle_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return PaymentSource_getTitle_Results_Future{Future: ans.Future()}, release
}
func (c PersistentPaymentSource) AddRequirements(ctx context.Context, params func(supervisor.SystemPersistent_addRequirements_Params) error) (supervisor.SystemPersistent_addRequirements_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(supervisor.SystemPersistent_addRequirements_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return supervisor.SystemPersistent_addRequirements_Results_Future{Future: ans.Future()}, release
}
func (c PersistentPaymentSource) Save(ctx context.Context, params func(persistent.Persistent_SaveParams) error) (persistent.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistent.Persistent_SaveParams(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistent.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c PersistentPaymentSource) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c PersistentPaymentSource) AddRef() PersistentPaymentSource {
	return PersistentPaymentSource(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c PersistentPaymentSource) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c PersistentPaymentSource) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c PersistentPaymentSource) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (PersistentPaymentSource) DecodeFromPtr(p capnp.Ptr) PersistentPaymentSource {
	return PersistentPaymentSource(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c PersistentPaymentSource) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c PersistentPaymentSource) IsSame(other PersistentPaymentSource) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c PersistentPaymentSource) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c PersistentPaymentSource) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A PersistentPaymentSource_Server is a PersistentPaymentSource with a local implementation.
type PersistentPaymentSource_Server interface {
	GetTitle(context.Context, PaymentSource_getTitle) error

	AddRequirements(context.Context, supervisor.SystemPersistent_addRequirements) error

	Save(context.Context, persistent.Persistent_save) error
}

// PersistentPaymentSource_NewServer creates a new Server from an implementation of PersistentPaymentSource_Server.
func PersistentPaymentSource_NewServer(s PersistentPaymentSource_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PersistentPaymentSource_Methods(nil, s), s, c)
}

// PersistentPaymentSource_ServerToClient creates a new Client from an implementation of PersistentPaymentSource_Server.
// The caller is responsible for calling Release on the returned Client.
func PersistentPaymentSource_ServerToClient(s PersistentPaymentSource_Server) PersistentPaymentSource {
	return PersistentPaymentSource(capnp.NewClient(PersistentPaymentSource_NewServer(s)))
}

// PersistentPaymentSource_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PersistentPaymentSource_Methods(methods []server.Method, s PersistentPaymentSource_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf9692c357124ed70,
			MethodID:      0,
			InterfaceName: "payments.capnp:PaymentSource",
			MethodName:    "getTitle",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetTitle(ctx, PaymentSource_getTitle{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddRequirements(ctx, supervisor.SystemPersistent_addRequirements{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistent.Persistent_save{call})
		},
	})

	return methods
}

// PersistentPaymentSource_List is a list of PersistentPaymentSource.
type PersistentPaymentSource_List = capnp.CapList[PersistentPaymentSource]

// NewPersistentPaymentSource creates a new list of PersistentPaymentSource.
func NewPersistentPaymentSource_List(s *capnp.Segment, sz int32) (PersistentPaymentSource_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[PersistentPaymentSource](l), err
}

type PersistentPaymentAcceptor capnp.Client

// PersistentPaymentAcceptor_TypeID is the unique identifier for the type PersistentPaymentAcceptor.
const PersistentPaymentAcceptor_TypeID = 0xe70f1d4eea79f6f5

func (c PersistentPaymentAcceptor) CreatePayment(ctx context.Context, params func(PaymentAcceptor_createPayment_Params) error) (PaymentAcceptor_CreatePaymentResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd562e38729bbd911,
			MethodID:      0,
			InterfaceName: "payments.capnp:PaymentAcceptor",
			MethodName:    "createPayment",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(PaymentAcceptor_createPayment_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return PaymentAcceptor_CreatePaymentResults_Future{Future: ans.Future()}, release
}
func (c PersistentPaymentAcceptor) AddRequirements(ctx context.Context, params func(supervisor.SystemPersistent_addRequirements_Params) error) (supervisor.SystemPersistent_addRequirements_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(supervisor.SystemPersistent_addRequirements_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return supervisor.SystemPersistent_addRequirements_Results_Future{Future: ans.Future()}, release
}
func (c PersistentPaymentAcceptor) Save(ctx context.Context, params func(persistent.Persistent_SaveParams) error) (persistent.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistent.Persistent_SaveParams(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistent.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c PersistentPaymentAcceptor) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c PersistentPaymentAcceptor) AddRef() PersistentPaymentAcceptor {
	return PersistentPaymentAcceptor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c PersistentPaymentAcceptor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c PersistentPaymentAcceptor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c PersistentPaymentAcceptor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (PersistentPaymentAcceptor) DecodeFromPtr(p capnp.Ptr) PersistentPaymentAcceptor {
	return PersistentPaymentAcceptor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c PersistentPaymentAcceptor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c PersistentPaymentAcceptor) IsSame(other PersistentPaymentAcceptor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c PersistentPaymentAcceptor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c PersistentPaymentAcceptor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A PersistentPaymentAcceptor_Server is a PersistentPaymentAcceptor with a local implementation.
type PersistentPaymentAcceptor_Server interface {
	CreatePayment(context.Context, PaymentAcceptor_createPayment) error

	AddRequirements(context.Context, supervisor.SystemPersistent_addRequirements) error

	Save(context.Context, persistent.Persistent_save) error
}

// PersistentPaymentAcceptor_NewServer creates a new Server from an implementation of PersistentPaymentAcceptor_Server.
func PersistentPaymentAcceptor_NewServer(s PersistentPaymentAcceptor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PersistentPaymentAcceptor_Methods(nil, s), s, c)
}

// PersistentPaymentAcceptor_ServerToClient creates a new Client from an implementation of PersistentPaymentAcceptor_Server.
// The caller is responsible for calling Release on the returned Client.
func PersistentPaymentAcceptor_ServerToClient(s PersistentPaymentAcceptor_Server) PersistentPaymentAcceptor {
	return PersistentPaymentAcceptor(capnp.NewClient(PersistentPaymentAcceptor_NewServer(s)))
}

// PersistentPaymentAcceptor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PersistentPaymentAcceptor_Methods(methods []server.Method, s PersistentPaymentAcceptor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd562e38729bbd911,
			MethodID:      0,
			InterfaceName: "payments.capnp:PaymentAcceptor",
			MethodName:    "createPayment",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CreatePayment(ctx, PaymentAcceptor_createPayment{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddRequirements(ctx, supervisor.SystemPersistent_addRequirements{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistent.Persistent_save{call})
		},
	})

	return methods
}

// PersistentPaymentAcceptor_List is a list of PersistentPaymentAcceptor.
type PersistentPaymentAcceptor_List = capnp.CapList[PersistentPaymentAcceptor]

// NewPersistentPaymentAcceptor creates a new list of PersistentPaymentAcceptor.
func NewPersistentPaymentAcceptor_List(s *capnp.Segment, sz int32) (PersistentPaymentAcceptor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[PersistentPaymentAcceptor](l), err
}

type PersistentPayment capnp.Client

// PersistentPayment_TypeID is the unique identifier for the type PersistentPayment.
const PersistentPayment_TypeID = 0xbbcf2f6351d92999

func (c PersistentPayment) Commit(ctx context.Context, params func(Payment_commit_Params) error) (Payment_commit_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc5203e36361f382d,
			MethodID:      0,
			InterfaceName: "payments.capnp:Payment",
			MethodName:    "commit",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Payment_commit_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Payment_commit_Results_Future{Future: ans.Future()}, release
}
func (c PersistentPayment) AddRequirements(ctx context.Context, params func(supervisor.SystemPersistent_addRequirements_Params) error) (supervisor.SystemPersistent_addRequirements_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(supervisor.SystemPersistent_addRequirements_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return supervisor.SystemPersistent_addRequirements_Results_Future{Future: ans.Future()}, release
}
func (c PersistentPayment) Save(ctx context.Context, params func(persistent.Persistent_SaveParams) error) (persistent.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistent.Persistent_SaveParams(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistent.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c PersistentPayment) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c PersistentPayment) AddRef() PersistentPayment {
	return PersistentPayment(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c PersistentPayment) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c PersistentPayment) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c PersistentPayment) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (PersistentPayment) DecodeFromPtr(p capnp.Ptr) PersistentPayment {
	return PersistentPayment(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c PersistentPayment) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c PersistentPayment) IsSame(other PersistentPayment) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c PersistentPayment) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c PersistentPayment) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A PersistentPayment_Server is a PersistentPayment with a local implementation.
type PersistentPayment_Server interface {
	Commit(context.Context, Payment_commit) error

	AddRequirements(context.Context, supervisor.SystemPersistent_addRequirements) error

	Save(context.Context, persistent.Persistent_save) error
}

// PersistentPayment_NewServer creates a new Server from an implementation of PersistentPayment_Server.
func PersistentPayment_NewServer(s PersistentPayment_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PersistentPayment_Methods(nil, s), s, c)
}

// PersistentPayment_ServerToClient creates a new Client from an implementation of PersistentPayment_Server.
// The caller is responsible for calling Release on the returned Client.
func PersistentPayment_ServerToClient(s PersistentPayment_Server) PersistentPayment {
	return PersistentPayment(capnp.NewClient(PersistentPayment_NewServer(s)))
}

// PersistentPayment_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PersistentPayment_Methods(methods []server.Method, s PersistentPayment_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc5203e36361f382d,
			MethodID:      0,
			InterfaceName: "payments.capnp:Payment",
			MethodName:    "commit",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Commit(ctx, Payment_commit{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc38cedd77cbed5b4,
			MethodID:      0,
			InterfaceName: "supervisor.capnp:SystemPersistent",
			MethodName:    "addRequirements",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddRequirements(ctx, supervisor.SystemPersistent_addRequirements{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistent.Persistent_save{call})
		},
	})

	return methods
}

// PersistentPayment_List is a list of PersistentPayment.
type PersistentPayment_List = capnp.CapList[PersistentPayment]

// NewPersistentPayment creates a new list of PersistentPayment.
func NewPersistentPayment_List(s *capnp.Segment, sz int32) (PersistentPayment_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[PersistentPayment](l), err
}

const schema_d512486208994241 = "x\xda\x94U_h\x1c\xd5\x17>g\xfetfJ\xf7" +
	"\xb7{\x7f\xb7Z}\xa8\xebCJ\x9b\x92\xae5\xa9\xb5" +
	"F\xc86\x1bl\xdcZdo\xaa\xbe)\x9dL\xae2" +
	"\x92\xd9\xdd\xceL,U1\xe8\x83U\xfc\x03EA\x02" +
	"J\xb5\xa2\xa0`\xfb\xa0Ri\xa1\x14\xaaT\xed\x83(" +
	"\xaeR5`Z\x8b\xb4\x10\xdfV\x89bG\xee\xcc\xce" +
	"\xccf\xd3\x8d\xf5-{s\xef\xf7}\xe7;\xdf9\xb3" +
	"\x99\xc9\xdb\x95[3\x07r \xb1S\xea\x8a\x80>\xeb" +
	"\x1d\xda\xf1\xf6w\x07\x81\xe41 \xe7N\xf4\x1e\xb80" +
	"\xde\x00\x155\x80\x81^}\x10\xe9\x1d\xfa\x1a\x00:\xac" +
	"\x17\x01\x83g\x8e\xe7f7\xec\x99;$.\x03\xa8\x92" +
	"\xb8\xb4W?\x8c\x80\xf4i}\x1f`p$\x9b\xf9\xfc" +
	"\xdbo\x9cw\x81d\xe5`\xb84\xa3\x8f\xdf\xfd\xff\x06" +
	"\x00\x0e\xcc\x0a\xa8y]\x03\xa0\x97t\x8d^\xd2\xd7\x03" +
	"\x04G~\xfe\xf2\xa6\xe7\xe6v\x1d\x05\xb2V\xc0\x85\x9c" +
	"s\xba+\xe0\xe6C\xbe\xec\x99\xd3o\xdd\xd3\xf7\xea\x87" +
	"@\xd6 \x80\"\xfe\x9f1\xfa\x11\x94`\xa6\xf7\x1c\xb3" +
	"n\xf9\xea\xc4\x12\xa2\xa6\xbe\x12\xa9j\x08\"44\x8a" +
	"\x86 \xfa\xb8\xf1\xfa\xae\x97\x1e\xbf\xf3d\x1b\xce\x82\xbe" +
	"Q\xe0l\xda\x96\xdf\xbau\xe8\xe6\xcf:q\xe8\x9c~" +
	"\\(\x05\xa0\x17\xf5Q\x9a\x11\x80\xc1\x85\xb3#\xaf\xfc" +
	"q\xfd\xba\xb3\x91\xde\x10\xa6\xa9?*`^\xfb\xe4\xe5" +
	"\x0ff\x1fP\x1b\xc0\xb6 \x06{\x94\xa7\x86?}\xf3" +
	"\xc7\xdf\xe0:\xd40\xac\xe9\x07QS3\xac)\xf1\xb8" +
	"\x93\xf1F\xe3O\xbaN\xc8\xa5\xc3\xc6(uB\xc6\x95" +
	"\xf9c?\xfd\xb5c\xe8\x97\xab\xe3\xdeo\x9c\x17\xb8\xb6" +
	"!p\x9b\xbf\xef\xbf|\xef\xda\xec\xafK\x1cy\xde\xd8" +
	"\x89\xf4\x8d\xd0\x91\x19C\xa33\xa1#\x09\x14\xcbc\x9b" +
	"\xa6\xbbP\x93\x00\x06\x0e\x1a\x87\x91\xbe\x17>y\xc7\x10" +
	"}\xad\xcf\xf7\xec\xbd\xad\xcf^X\"\xfa\x0b\xe32m" +
	"\x84\x17\xbf6F\xe9\xdf\xa1\xe8Sc\x0f\x9d9:\xa4" +
	"\\\x01\xb6\x1e1\x0dX\xd4\xdf\x8b\xc68\xd2\x85\xf0E" +
	"\xd3\xd8\x07\x01\x98A\xdd\xdc\xef\xf0\xaa\xef\xc9\x05\xcb\xac" +
	"W\xeb\x83\x95\xe8\xf7\xb0e\xf1\xba_s\x0b\xe5b\xf5" +
	"\xb1\x9amq\xa6 \xa6\xe0\x047f\xcb>w\x98\"" +
	"+\x00\x0a\x02\x90L?\x00\xd3ed=\x12\xe6m\x9f" +
	";\x1e\xfe\x0f\xb0\"#\xe6\xd2w\x80\xe20!U\xbb" +
	"\x90Z.7}\xde:\xed\xa9\x98\xaef:\x1e\xd3\x13" +
	"\xae\xdeA\x00\xd6##\xdb,!A\\\x8d\xe2pS" +
	"\x09\x80m\x90\x91m\x91\xb0\xe8\xd5\xa6\\\x8b#I\xcd" +
	"\x03D\x028mG\xe5`.\xf5\x06\x10sm\xa2\x12" +
	"'\xb8\xeb\xd9\x9e\xcf\xab~KHqw\x08ZA\xac" +
	"\xc8*\xd3\xb1\xad3\x00\xc1G\x8d\x93O~?\xff\xe2" +
	"i\xf1w\x0c\xa5,\xae/z_x\x84\xfb\xf7\xd9\xfe" +
	"$\xef\x19\xe3yoj\xd2\xf7\xae\xe6\xe2j\x09\xf3\xbe" +
	"\xb8\x85\xb9\xa0|\xfe\x89\xdb\xddc\x0f\xbe\xd0Ui\xf4" +
	"\xbb`\xd5\x1c\xc7\xf6\x13\xd8\x7f\xaf\x08\xa0\xad\x98d\x1a" +
	"\xbb\x14\xd3\x85\xadbf]\xd3I\xc90\xbeV\x8c\x0e" +
	"*\x88L\x91\xd5\xb6E\x80\xf1f!d\x10$\xa2j" +
	"\xc5\x08j;V\x10\xaf\xd5\xbbN\xda\x15]\xa24\xd2" +
	"\x1e\xa51\x1e\x1aSx\xd8\xb4'e>\x11\xf9\x1e\xa5" +
	"'3\x0e\xc0V\xc9\xc8n\x900\x98\xe0\x9e\xe5\xdau" +
	"\x1f4\xbbV]\xa6\x01R'i1b\x0d\xfdL\xa6" +
	"\x9c\x18\xef\xb7m\xfaL)\x885a,*+TM" +
	"\x97\xe3I\x0b\xdd\x8a\xd7=\xc68\x84\xb8 \x11C\x0b" +
	"\xe2\xe9\x80|\xf8~\xb1m\xff\xc9\x07o\xca\xb24\xee" +
	"-\x0a`)\x0d\xe0t\x0b\x14I[8\xc21Z\xda" +
	"\xa5\xceh\xc5\xc4\x8b\"\x96\xac\xba.\x11S\xafU\xbc" +
	"6\xe9{\"X\xba\xac\xac\x0a\x02\xc4tW\x93\xde\x12" +
	"H\x19\xbc\"\x0e\x93\x0fC\x18\xb4iQ-\xf7\xbc\xa2" +
	"\xe8>\x9f\xe8\xd6\xc4\xdd\xb5lk\xca[\x8d\x88?<" +
	"\x18\x7f1\x09\xd9\x195\"\x0e#\x00,\x9b\xddt\x99" +
	"F\x1d.\x945\x9f;-\xfd\xf1J\xebOWZ\xb2" +
	"\xd1D&\xfbdd\xdb\x96Y\x06\xa6S\x9b\xaa\xfa#" +
	"\x1c41|\x0aH\xa8\x00\xfe\x13\x00\x00\xff\xff\xb1%" +
	"\xa3\xbd"

func init() {
	schemas.Register(schema_d512486208994241,
		0x91d6a3469f738613,
		0x9fe16028dd10ba82,
		0xa66dd2d4c80d0fae,
		0xaf4ce1881ecae0ae,
		0xb3942c4ba1c3c70f,
		0xbbcf2f6351d92999,
		0xbe3b7a8d4c9cd5b5,
		0xc5203e36361f382d,
		0xcb2516f79343cbe3,
		0xd50556ddad8eb897,
		0xd562e38729bbd911,
		0xe43e46fbdcb71f0a,
		0xe70f1d4eea79f6f5,
		0xeedba0c4417e0460,
		0xf9692c357124ed70,
		0xfe043eafc75e52c0)
}
