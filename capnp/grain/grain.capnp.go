// Code generated by capnpc-go. DO NOT EDIT.

package grain

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	strconv "strconv"
	activity "zenhack.net/go/sandstorm/capnp/activity"
	identity "zenhack.net/go/sandstorm/capnp/identity"
	powerbox "zenhack.net/go/sandstorm/capnp/powerbox"
	util "zenhack.net/go/sandstorm/capnp/util"
)

// Constants defined in grain.capnp.
const (
	MinimumSchedulingSlack = uint64(300000000000)
)

type SandstormApi capnp.Client

// SandstormApi_TypeID is the unique identifier for the type SandstormApi.
const SandstormApi_TypeID = 0xd2654fcf2a7002cb

func (c SandstormApi) DeprecatedPublish(ctx context.Context, params func(SandstormApi_deprecatedPublish_Params) error) (SandstormApi_deprecatedPublish_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      0,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "deprecatedPublish",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_deprecatedPublish_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_deprecatedPublish_Results_Future{Future: ans.Future()}, release
}
func (c SandstormApi) DeprecatedRegisterAction(ctx context.Context, params func(SandstormApi_deprecatedRegisterAction_Params) error) (SandstormApi_deprecatedRegisterAction_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      1,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "deprecatedRegisterAction",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_deprecatedRegisterAction_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_deprecatedRegisterAction_Results_Future{Future: ans.Future()}, release
}
func (c SandstormApi) ShareCap(ctx context.Context, params func(SandstormApi_shareCap_Params) error) (SandstormApi_shareCap_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      2,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "shareCap",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_shareCap_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_shareCap_Results_Future{Future: ans.Future()}, release
}
func (c SandstormApi) ShareView(ctx context.Context, params func(SandstormApi_shareView_Params) error) (SandstormApi_shareView_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      3,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "shareView",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_shareView_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_shareView_Results_Future{Future: ans.Future()}, release
}
func (c SandstormApi) Restore(ctx context.Context, params func(SandstormApi_restore_Params) error) (SandstormApi_restore_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      4,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "restore",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_restore_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_restore_Results_Future{Future: ans.Future()}, release
}
func (c SandstormApi) Drop(ctx context.Context, params func(SandstormApi_drop_Params) error) (SandstormApi_drop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      5,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "drop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_drop_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_drop_Results_Future{Future: ans.Future()}, release
}
func (c SandstormApi) Deleted(ctx context.Context, params func(SandstormApi_deleted_Params) error) (SandstormApi_deleted_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      6,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "deleted",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_deleted_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_deleted_Results_Future{Future: ans.Future()}, release
}
func (c SandstormApi) StayAwake(ctx context.Context, params func(SandstormApi_stayAwake_Params) error) (SandstormApi_stayAwake_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      7,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "stayAwake",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_stayAwake_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_stayAwake_Results_Future{Future: ans.Future()}, release
}
func (c SandstormApi) Save(ctx context.Context, params func(SandstormApi_save_Params) error) (SandstormApi_save_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      8,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_save_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_save_Results_Future{Future: ans.Future()}, release
}
func (c SandstormApi) BackgroundActivity(ctx context.Context, params func(SandstormApi_backgroundActivity_Params) error) (SandstormApi_backgroundActivity_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      9,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "backgroundActivity",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_backgroundActivity_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_backgroundActivity_Results_Future{Future: ans.Future()}, release
}
func (c SandstormApi) GetIdentityId(ctx context.Context, params func(SandstormApi_getIdentityId_Params) error) (SandstormApi_getIdentityId_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      10,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "getIdentityId",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SandstormApi_getIdentityId_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_getIdentityId_Results_Future{Future: ans.Future()}, release
}
func (c SandstormApi) Schedule(ctx context.Context, params func(ScheduledJob) error) (SandstormApi_schedule_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      11,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "schedule",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 24, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ScheduledJob(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SandstormApi_schedule_Results_Future{Future: ans.Future()}, release
}

func (c SandstormApi) AddRef() SandstormApi {
	return SandstormApi(capnp.Client(c).AddRef())
}

func (c SandstormApi) Release() {
	capnp.Client(c).Release()
}

func (c SandstormApi) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (SandstormApi) DecodeFromPtr(p capnp.Ptr) SandstormApi {
	return SandstormApi(capnp.Client{}.DecodeFromPtr(p))
}

func (c SandstormApi) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A SandstormApi_Server is a SandstormApi with a local implementation.
type SandstormApi_Server interface {
	DeprecatedPublish(context.Context, SandstormApi_deprecatedPublish) error

	DeprecatedRegisterAction(context.Context, SandstormApi_deprecatedRegisterAction) error

	ShareCap(context.Context, SandstormApi_shareCap) error

	ShareView(context.Context, SandstormApi_shareView) error

	Restore(context.Context, SandstormApi_restore) error

	Drop(context.Context, SandstormApi_drop) error

	Deleted(context.Context, SandstormApi_deleted) error

	StayAwake(context.Context, SandstormApi_stayAwake) error

	Save(context.Context, SandstormApi_save) error

	BackgroundActivity(context.Context, SandstormApi_backgroundActivity) error

	GetIdentityId(context.Context, SandstormApi_getIdentityId) error

	Schedule(context.Context, SandstormApi_schedule) error
}

// SandstormApi_NewServer creates a new Server from an implementation of SandstormApi_Server.
func SandstormApi_NewServer(s SandstormApi_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(SandstormApi_Methods(nil, s), s, c)
}

// SandstormApi_ServerToClient creates a new Client from an implementation of SandstormApi_Server.
// The caller is responsible for calling Release on the returned Client.
func SandstormApi_ServerToClient(s SandstormApi_Server) SandstormApi {
	return SandstormApi(capnp.NewClient(SandstormApi_NewServer(s)))
}

// SandstormApi_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func SandstormApi_Methods(methods []server.Method, s SandstormApi_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 12)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      0,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "deprecatedPublish",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DeprecatedPublish(ctx, SandstormApi_deprecatedPublish{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      1,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "deprecatedRegisterAction",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DeprecatedRegisterAction(ctx, SandstormApi_deprecatedRegisterAction{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      2,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "shareCap",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ShareCap(ctx, SandstormApi_shareCap{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      3,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "shareView",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ShareView(ctx, SandstormApi_shareView{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      4,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "restore",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Restore(ctx, SandstormApi_restore{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      5,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "drop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Drop(ctx, SandstormApi_drop{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      6,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "deleted",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Deleted(ctx, SandstormApi_deleted{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      7,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "stayAwake",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StayAwake(ctx, SandstormApi_stayAwake{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      8,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, SandstormApi_save{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      9,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "backgroundActivity",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.BackgroundActivity(ctx, SandstormApi_backgroundActivity{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      10,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "getIdentityId",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetIdentityId(ctx, SandstormApi_getIdentityId{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2654fcf2a7002cb,
			MethodID:      11,
			InterfaceName: "grain.capnp:SandstormApi",
			MethodName:    "schedule",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Schedule(ctx, SandstormApi_schedule{call})
		},
	})

	return methods
}

// SandstormApi_deprecatedPublish holds the state for a server call to SandstormApi.deprecatedPublish.
// See server.Call for documentation.
type SandstormApi_deprecatedPublish struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_deprecatedPublish) Args() SandstormApi_deprecatedPublish_Params {
	return SandstormApi_deprecatedPublish_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_deprecatedPublish) AllocResults() (SandstormApi_deprecatedPublish_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deprecatedPublish_Results(r), err
}

// SandstormApi_deprecatedRegisterAction holds the state for a server call to SandstormApi.deprecatedRegisterAction.
// See server.Call for documentation.
type SandstormApi_deprecatedRegisterAction struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_deprecatedRegisterAction) Args() SandstormApi_deprecatedRegisterAction_Params {
	return SandstormApi_deprecatedRegisterAction_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_deprecatedRegisterAction) AllocResults() (SandstormApi_deprecatedRegisterAction_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deprecatedRegisterAction_Results(r), err
}

// SandstormApi_shareCap holds the state for a server call to SandstormApi.shareCap.
// See server.Call for documentation.
type SandstormApi_shareCap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_shareCap) Args() SandstormApi_shareCap_Params {
	return SandstormApi_shareCap_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_shareCap) AllocResults() (SandstormApi_shareCap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_shareCap_Results(r), err
}

// SandstormApi_shareView holds the state for a server call to SandstormApi.shareView.
// See server.Call for documentation.
type SandstormApi_shareView struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_shareView) Args() SandstormApi_shareView_Params {
	return SandstormApi_shareView_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_shareView) AllocResults() (SandstormApi_shareView_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_shareView_Results(r), err
}

// SandstormApi_restore holds the state for a server call to SandstormApi.restore.
// See server.Call for documentation.
type SandstormApi_restore struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_restore) Args() SandstormApi_restore_Params {
	return SandstormApi_restore_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_restore) AllocResults() (SandstormApi_restore_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_restore_Results(r), err
}

// SandstormApi_drop holds the state for a server call to SandstormApi.drop.
// See server.Call for documentation.
type SandstormApi_drop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_drop) Args() SandstormApi_drop_Params {
	return SandstormApi_drop_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_drop) AllocResults() (SandstormApi_drop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_drop_Results(r), err
}

// SandstormApi_deleted holds the state for a server call to SandstormApi.deleted.
// See server.Call for documentation.
type SandstormApi_deleted struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_deleted) Args() SandstormApi_deleted_Params {
	return SandstormApi_deleted_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_deleted) AllocResults() (SandstormApi_deleted_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deleted_Results(r), err
}

// SandstormApi_stayAwake holds the state for a server call to SandstormApi.stayAwake.
// See server.Call for documentation.
type SandstormApi_stayAwake struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_stayAwake) Args() SandstormApi_stayAwake_Params {
	return SandstormApi_stayAwake_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_stayAwake) AllocResults() (SandstormApi_stayAwake_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_stayAwake_Results(r), err
}

// SandstormApi_save holds the state for a server call to SandstormApi.save.
// See server.Call for documentation.
type SandstormApi_save struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_save) Args() SandstormApi_save_Params {
	return SandstormApi_save_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_save) AllocResults() (SandstormApi_save_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_save_Results(r), err
}

// SandstormApi_backgroundActivity holds the state for a server call to SandstormApi.backgroundActivity.
// See server.Call for documentation.
type SandstormApi_backgroundActivity struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_backgroundActivity) Args() SandstormApi_backgroundActivity_Params {
	return SandstormApi_backgroundActivity_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_backgroundActivity) AllocResults() (SandstormApi_backgroundActivity_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_backgroundActivity_Results(r), err
}

// SandstormApi_getIdentityId holds the state for a server call to SandstormApi.getIdentityId.
// See server.Call for documentation.
type SandstormApi_getIdentityId struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_getIdentityId) Args() SandstormApi_getIdentityId_Params {
	return SandstormApi_getIdentityId_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_getIdentityId) AllocResults() (SandstormApi_getIdentityId_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_getIdentityId_Results(r), err
}

// SandstormApi_schedule holds the state for a server call to SandstormApi.schedule.
// See server.Call for documentation.
type SandstormApi_schedule struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SandstormApi_schedule) Args() ScheduledJob {
	return ScheduledJob(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SandstormApi_schedule) AllocResults() (SandstormApi_schedule_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_schedule_Results(r), err
}

// SandstormApi_List is a list of SandstormApi.
type SandstormApi_List = capnp.CapList[SandstormApi]

// NewSandstormApi creates a new list of SandstormApi.
func NewSandstormApi_List(s *capnp.Segment, sz int32) (SandstormApi_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[SandstormApi](l), err
}

type SandstormApi_deprecatedPublish_Params capnp.Struct

// SandstormApi_deprecatedPublish_Params_TypeID is the unique identifier for the type SandstormApi_deprecatedPublish_Params.
const SandstormApi_deprecatedPublish_Params_TypeID = 0xa2873a59df6d885c

func NewSandstormApi_deprecatedPublish_Params(s *capnp.Segment) (SandstormApi_deprecatedPublish_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deprecatedPublish_Params(st), err
}

func NewRootSandstormApi_deprecatedPublish_Params(s *capnp.Segment) (SandstormApi_deprecatedPublish_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deprecatedPublish_Params(st), err
}

func ReadRootSandstormApi_deprecatedPublish_Params(msg *capnp.Message) (SandstormApi_deprecatedPublish_Params, error) {
	root, err := msg.Root()
	return SandstormApi_deprecatedPublish_Params(root.Struct()), err
}

func (s SandstormApi_deprecatedPublish_Params) String() string {
	str, _ := text.Marshal(0xa2873a59df6d885c, capnp.Struct(s))
	return str
}

func (s SandstormApi_deprecatedPublish_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_deprecatedPublish_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_deprecatedPublish_Params {
	return SandstormApi_deprecatedPublish_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_deprecatedPublish_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_deprecatedPublish_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_deprecatedPublish_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_deprecatedPublish_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SandstormApi_deprecatedPublish_Params_List is a list of SandstormApi_deprecatedPublish_Params.
type SandstormApi_deprecatedPublish_Params_List = capnp.StructList[SandstormApi_deprecatedPublish_Params]

// NewSandstormApi_deprecatedPublish_Params creates a new list of SandstormApi_deprecatedPublish_Params.
func NewSandstormApi_deprecatedPublish_Params_List(s *capnp.Segment, sz int32) (SandstormApi_deprecatedPublish_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SandstormApi_deprecatedPublish_Params](l), err
}

// SandstormApi_deprecatedPublish_Params_Future is a wrapper for a SandstormApi_deprecatedPublish_Params promised by a client call.
type SandstormApi_deprecatedPublish_Params_Future struct{ *capnp.Future }

func (p SandstormApi_deprecatedPublish_Params_Future) Struct() (SandstormApi_deprecatedPublish_Params, error) {
	s, err := p.Future.Struct()
	return SandstormApi_deprecatedPublish_Params(s), err
}

type SandstormApi_deprecatedPublish_Results capnp.Struct

// SandstormApi_deprecatedPublish_Results_TypeID is the unique identifier for the type SandstormApi_deprecatedPublish_Results.
const SandstormApi_deprecatedPublish_Results_TypeID = 0xb42ccfaaf45a3f7a

func NewSandstormApi_deprecatedPublish_Results(s *capnp.Segment) (SandstormApi_deprecatedPublish_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deprecatedPublish_Results(st), err
}

func NewRootSandstormApi_deprecatedPublish_Results(s *capnp.Segment) (SandstormApi_deprecatedPublish_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deprecatedPublish_Results(st), err
}

func ReadRootSandstormApi_deprecatedPublish_Results(msg *capnp.Message) (SandstormApi_deprecatedPublish_Results, error) {
	root, err := msg.Root()
	return SandstormApi_deprecatedPublish_Results(root.Struct()), err
}

func (s SandstormApi_deprecatedPublish_Results) String() string {
	str, _ := text.Marshal(0xb42ccfaaf45a3f7a, capnp.Struct(s))
	return str
}

func (s SandstormApi_deprecatedPublish_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_deprecatedPublish_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_deprecatedPublish_Results {
	return SandstormApi_deprecatedPublish_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_deprecatedPublish_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_deprecatedPublish_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_deprecatedPublish_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_deprecatedPublish_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SandstormApi_deprecatedPublish_Results_List is a list of SandstormApi_deprecatedPublish_Results.
type SandstormApi_deprecatedPublish_Results_List = capnp.StructList[SandstormApi_deprecatedPublish_Results]

// NewSandstormApi_deprecatedPublish_Results creates a new list of SandstormApi_deprecatedPublish_Results.
func NewSandstormApi_deprecatedPublish_Results_List(s *capnp.Segment, sz int32) (SandstormApi_deprecatedPublish_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SandstormApi_deprecatedPublish_Results](l), err
}

// SandstormApi_deprecatedPublish_Results_Future is a wrapper for a SandstormApi_deprecatedPublish_Results promised by a client call.
type SandstormApi_deprecatedPublish_Results_Future struct{ *capnp.Future }

func (p SandstormApi_deprecatedPublish_Results_Future) Struct() (SandstormApi_deprecatedPublish_Results, error) {
	s, err := p.Future.Struct()
	return SandstormApi_deprecatedPublish_Results(s), err
}

type SandstormApi_deprecatedRegisterAction_Params capnp.Struct

// SandstormApi_deprecatedRegisterAction_Params_TypeID is the unique identifier for the type SandstormApi_deprecatedRegisterAction_Params.
const SandstormApi_deprecatedRegisterAction_Params_TypeID = 0xd271034eec62b43b

func NewSandstormApi_deprecatedRegisterAction_Params(s *capnp.Segment) (SandstormApi_deprecatedRegisterAction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deprecatedRegisterAction_Params(st), err
}

func NewRootSandstormApi_deprecatedRegisterAction_Params(s *capnp.Segment) (SandstormApi_deprecatedRegisterAction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deprecatedRegisterAction_Params(st), err
}

func ReadRootSandstormApi_deprecatedRegisterAction_Params(msg *capnp.Message) (SandstormApi_deprecatedRegisterAction_Params, error) {
	root, err := msg.Root()
	return SandstormApi_deprecatedRegisterAction_Params(root.Struct()), err
}

func (s SandstormApi_deprecatedRegisterAction_Params) String() string {
	str, _ := text.Marshal(0xd271034eec62b43b, capnp.Struct(s))
	return str
}

func (s SandstormApi_deprecatedRegisterAction_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_deprecatedRegisterAction_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_deprecatedRegisterAction_Params {
	return SandstormApi_deprecatedRegisterAction_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_deprecatedRegisterAction_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_deprecatedRegisterAction_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_deprecatedRegisterAction_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_deprecatedRegisterAction_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SandstormApi_deprecatedRegisterAction_Params_List is a list of SandstormApi_deprecatedRegisterAction_Params.
type SandstormApi_deprecatedRegisterAction_Params_List = capnp.StructList[SandstormApi_deprecatedRegisterAction_Params]

// NewSandstormApi_deprecatedRegisterAction_Params creates a new list of SandstormApi_deprecatedRegisterAction_Params.
func NewSandstormApi_deprecatedRegisterAction_Params_List(s *capnp.Segment, sz int32) (SandstormApi_deprecatedRegisterAction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SandstormApi_deprecatedRegisterAction_Params](l), err
}

// SandstormApi_deprecatedRegisterAction_Params_Future is a wrapper for a SandstormApi_deprecatedRegisterAction_Params promised by a client call.
type SandstormApi_deprecatedRegisterAction_Params_Future struct{ *capnp.Future }

func (p SandstormApi_deprecatedRegisterAction_Params_Future) Struct() (SandstormApi_deprecatedRegisterAction_Params, error) {
	s, err := p.Future.Struct()
	return SandstormApi_deprecatedRegisterAction_Params(s), err
}

type SandstormApi_deprecatedRegisterAction_Results capnp.Struct

// SandstormApi_deprecatedRegisterAction_Results_TypeID is the unique identifier for the type SandstormApi_deprecatedRegisterAction_Results.
const SandstormApi_deprecatedRegisterAction_Results_TypeID = 0xb9d62f4beefefc29

func NewSandstormApi_deprecatedRegisterAction_Results(s *capnp.Segment) (SandstormApi_deprecatedRegisterAction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deprecatedRegisterAction_Results(st), err
}

func NewRootSandstormApi_deprecatedRegisterAction_Results(s *capnp.Segment) (SandstormApi_deprecatedRegisterAction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deprecatedRegisterAction_Results(st), err
}

func ReadRootSandstormApi_deprecatedRegisterAction_Results(msg *capnp.Message) (SandstormApi_deprecatedRegisterAction_Results, error) {
	root, err := msg.Root()
	return SandstormApi_deprecatedRegisterAction_Results(root.Struct()), err
}

func (s SandstormApi_deprecatedRegisterAction_Results) String() string {
	str, _ := text.Marshal(0xb9d62f4beefefc29, capnp.Struct(s))
	return str
}

func (s SandstormApi_deprecatedRegisterAction_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_deprecatedRegisterAction_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_deprecatedRegisterAction_Results {
	return SandstormApi_deprecatedRegisterAction_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_deprecatedRegisterAction_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_deprecatedRegisterAction_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_deprecatedRegisterAction_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_deprecatedRegisterAction_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SandstormApi_deprecatedRegisterAction_Results_List is a list of SandstormApi_deprecatedRegisterAction_Results.
type SandstormApi_deprecatedRegisterAction_Results_List = capnp.StructList[SandstormApi_deprecatedRegisterAction_Results]

// NewSandstormApi_deprecatedRegisterAction_Results creates a new list of SandstormApi_deprecatedRegisterAction_Results.
func NewSandstormApi_deprecatedRegisterAction_Results_List(s *capnp.Segment, sz int32) (SandstormApi_deprecatedRegisterAction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SandstormApi_deprecatedRegisterAction_Results](l), err
}

// SandstormApi_deprecatedRegisterAction_Results_Future is a wrapper for a SandstormApi_deprecatedRegisterAction_Results promised by a client call.
type SandstormApi_deprecatedRegisterAction_Results_Future struct{ *capnp.Future }

func (p SandstormApi_deprecatedRegisterAction_Results_Future) Struct() (SandstormApi_deprecatedRegisterAction_Results, error) {
	s, err := p.Future.Struct()
	return SandstormApi_deprecatedRegisterAction_Results(s), err
}

type SandstormApi_shareCap_Params capnp.Struct

// SandstormApi_shareCap_Params_TypeID is the unique identifier for the type SandstormApi_shareCap_Params.
const SandstormApi_shareCap_Params_TypeID = 0xeb3c29aff080ec3e

func NewSandstormApi_shareCap_Params(s *capnp.Segment) (SandstormApi_shareCap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_shareCap_Params(st), err
}

func NewRootSandstormApi_shareCap_Params(s *capnp.Segment) (SandstormApi_shareCap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_shareCap_Params(st), err
}

func ReadRootSandstormApi_shareCap_Params(msg *capnp.Message) (SandstormApi_shareCap_Params, error) {
	root, err := msg.Root()
	return SandstormApi_shareCap_Params(root.Struct()), err
}

func (s SandstormApi_shareCap_Params) String() string {
	str, _ := text.Marshal(0xeb3c29aff080ec3e, capnp.Struct(s))
	return str
}

func (s SandstormApi_shareCap_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_shareCap_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_shareCap_Params {
	return SandstormApi_shareCap_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_shareCap_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_shareCap_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_shareCap_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_shareCap_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_shareCap_Params) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s SandstormApi_shareCap_Params) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_shareCap_Params) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}
func (s SandstormApi_shareCap_Params) DisplayInfo() (powerbox.PowerboxDisplayInfo, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return powerbox.PowerboxDisplayInfo(p.Struct()), err
}

func (s SandstormApi_shareCap_Params) HasDisplayInfo() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SandstormApi_shareCap_Params) SetDisplayInfo(v powerbox.PowerboxDisplayInfo) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewDisplayInfo sets the displayInfo field to a newly
// allocated powerbox.PowerboxDisplayInfo struct, preferring placement in s's segment.
func (s SandstormApi_shareCap_Params) NewDisplayInfo() (powerbox.PowerboxDisplayInfo, error) {
	ss, err := powerbox.NewPowerboxDisplayInfo(capnp.Struct(s).Segment())
	if err != nil {
		return powerbox.PowerboxDisplayInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SandstormApi_shareCap_Params_List is a list of SandstormApi_shareCap_Params.
type SandstormApi_shareCap_Params_List = capnp.StructList[SandstormApi_shareCap_Params]

// NewSandstormApi_shareCap_Params creates a new list of SandstormApi_shareCap_Params.
func NewSandstormApi_shareCap_Params_List(s *capnp.Segment, sz int32) (SandstormApi_shareCap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SandstormApi_shareCap_Params](l), err
}

// SandstormApi_shareCap_Params_Future is a wrapper for a SandstormApi_shareCap_Params promised by a client call.
type SandstormApi_shareCap_Params_Future struct{ *capnp.Future }

func (p SandstormApi_shareCap_Params_Future) Struct() (SandstormApi_shareCap_Params, error) {
	s, err := p.Future.Struct()
	return SandstormApi_shareCap_Params(s), err
}

func (p SandstormApi_shareCap_Params_Future) Cap() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p SandstormApi_shareCap_Params_Future) DisplayInfo() powerbox.PowerboxDisplayInfo_Future {
	return powerbox.PowerboxDisplayInfo_Future{Future: p.Future.Field(1, nil)}
}

type SandstormApi_shareCap_Results capnp.Struct

// SandstormApi_shareCap_Results_TypeID is the unique identifier for the type SandstormApi_shareCap_Results.
const SandstormApi_shareCap_Results_TypeID = 0xb96fc5fb8137a705

func NewSandstormApi_shareCap_Results(s *capnp.Segment) (SandstormApi_shareCap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_shareCap_Results(st), err
}

func NewRootSandstormApi_shareCap_Results(s *capnp.Segment) (SandstormApi_shareCap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_shareCap_Results(st), err
}

func ReadRootSandstormApi_shareCap_Results(msg *capnp.Message) (SandstormApi_shareCap_Results, error) {
	root, err := msg.Root()
	return SandstormApi_shareCap_Results(root.Struct()), err
}

func (s SandstormApi_shareCap_Results) String() string {
	str, _ := text.Marshal(0xb96fc5fb8137a705, capnp.Struct(s))
	return str
}

func (s SandstormApi_shareCap_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_shareCap_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_shareCap_Results {
	return SandstormApi_shareCap_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_shareCap_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_shareCap_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_shareCap_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_shareCap_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_shareCap_Results) SharedCap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s SandstormApi_shareCap_Results) HasSharedCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_shareCap_Results) SetSharedCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}
func (s SandstormApi_shareCap_Results) Link() SharingLink {
	p, _ := capnp.Struct(s).Ptr(1)
	return SharingLink(p.Interface().Client())
}

func (s SandstormApi_shareCap_Results) HasLink() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SandstormApi_shareCap_Results) SetLink(v SharingLink) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// SandstormApi_shareCap_Results_List is a list of SandstormApi_shareCap_Results.
type SandstormApi_shareCap_Results_List = capnp.StructList[SandstormApi_shareCap_Results]

// NewSandstormApi_shareCap_Results creates a new list of SandstormApi_shareCap_Results.
func NewSandstormApi_shareCap_Results_List(s *capnp.Segment, sz int32) (SandstormApi_shareCap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SandstormApi_shareCap_Results](l), err
}

// SandstormApi_shareCap_Results_Future is a wrapper for a SandstormApi_shareCap_Results promised by a client call.
type SandstormApi_shareCap_Results_Future struct{ *capnp.Future }

func (p SandstormApi_shareCap_Results_Future) Struct() (SandstormApi_shareCap_Results, error) {
	s, err := p.Future.Struct()
	return SandstormApi_shareCap_Results(s), err
}

func (p SandstormApi_shareCap_Results_Future) SharedCap() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p SandstormApi_shareCap_Results_Future) Link() SharingLink {
	return SharingLink(p.Future.Field(1, nil).Client())
}

type SandstormApi_shareView_Params capnp.Struct

// SandstormApi_shareView_Params_TypeID is the unique identifier for the type SandstormApi_shareView_Params.
const SandstormApi_shareView_Params_TypeID = 0xb1e3f6ac609eb4d7

func NewSandstormApi_shareView_Params(s *capnp.Segment) (SandstormApi_shareView_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_shareView_Params(st), err
}

func NewRootSandstormApi_shareView_Params(s *capnp.Segment) (SandstormApi_shareView_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_shareView_Params(st), err
}

func ReadRootSandstormApi_shareView_Params(msg *capnp.Message) (SandstormApi_shareView_Params, error) {
	root, err := msg.Root()
	return SandstormApi_shareView_Params(root.Struct()), err
}

func (s SandstormApi_shareView_Params) String() string {
	str, _ := text.Marshal(0xb1e3f6ac609eb4d7, capnp.Struct(s))
	return str
}

func (s SandstormApi_shareView_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_shareView_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_shareView_Params {
	return SandstormApi_shareView_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_shareView_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_shareView_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_shareView_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_shareView_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_shareView_Params) View() UiView {
	p, _ := capnp.Struct(s).Ptr(0)
	return UiView(p.Interface().Client())
}

func (s SandstormApi_shareView_Params) HasView() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_shareView_Params) SetView(v UiView) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// SandstormApi_shareView_Params_List is a list of SandstormApi_shareView_Params.
type SandstormApi_shareView_Params_List = capnp.StructList[SandstormApi_shareView_Params]

// NewSandstormApi_shareView_Params creates a new list of SandstormApi_shareView_Params.
func NewSandstormApi_shareView_Params_List(s *capnp.Segment, sz int32) (SandstormApi_shareView_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SandstormApi_shareView_Params](l), err
}

// SandstormApi_shareView_Params_Future is a wrapper for a SandstormApi_shareView_Params promised by a client call.
type SandstormApi_shareView_Params_Future struct{ *capnp.Future }

func (p SandstormApi_shareView_Params_Future) Struct() (SandstormApi_shareView_Params, error) {
	s, err := p.Future.Struct()
	return SandstormApi_shareView_Params(s), err
}

func (p SandstormApi_shareView_Params_Future) View() UiView {
	return UiView(p.Future.Field(0, nil).Client())
}

type SandstormApi_shareView_Results capnp.Struct

// SandstormApi_shareView_Results_TypeID is the unique identifier for the type SandstormApi_shareView_Results.
const SandstormApi_shareView_Results_TypeID = 0xe6abbf843a84f35d

func NewSandstormApi_shareView_Results(s *capnp.Segment) (SandstormApi_shareView_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_shareView_Results(st), err
}

func NewRootSandstormApi_shareView_Results(s *capnp.Segment) (SandstormApi_shareView_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_shareView_Results(st), err
}

func ReadRootSandstormApi_shareView_Results(msg *capnp.Message) (SandstormApi_shareView_Results, error) {
	root, err := msg.Root()
	return SandstormApi_shareView_Results(root.Struct()), err
}

func (s SandstormApi_shareView_Results) String() string {
	str, _ := text.Marshal(0xe6abbf843a84f35d, capnp.Struct(s))
	return str
}

func (s SandstormApi_shareView_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_shareView_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_shareView_Results {
	return SandstormApi_shareView_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_shareView_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_shareView_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_shareView_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_shareView_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_shareView_Results) SharedView() UiView {
	p, _ := capnp.Struct(s).Ptr(0)
	return UiView(p.Interface().Client())
}

func (s SandstormApi_shareView_Results) HasSharedView() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_shareView_Results) SetSharedView(v UiView) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s SandstormApi_shareView_Results) Link() ViewSharingLink {
	p, _ := capnp.Struct(s).Ptr(1)
	return ViewSharingLink(p.Interface().Client())
}

func (s SandstormApi_shareView_Results) HasLink() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SandstormApi_shareView_Results) SetLink(v ViewSharingLink) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// SandstormApi_shareView_Results_List is a list of SandstormApi_shareView_Results.
type SandstormApi_shareView_Results_List = capnp.StructList[SandstormApi_shareView_Results]

// NewSandstormApi_shareView_Results creates a new list of SandstormApi_shareView_Results.
func NewSandstormApi_shareView_Results_List(s *capnp.Segment, sz int32) (SandstormApi_shareView_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SandstormApi_shareView_Results](l), err
}

// SandstormApi_shareView_Results_Future is a wrapper for a SandstormApi_shareView_Results promised by a client call.
type SandstormApi_shareView_Results_Future struct{ *capnp.Future }

func (p SandstormApi_shareView_Results_Future) Struct() (SandstormApi_shareView_Results, error) {
	s, err := p.Future.Struct()
	return SandstormApi_shareView_Results(s), err
}

func (p SandstormApi_shareView_Results_Future) SharedView() UiView {
	return UiView(p.Future.Field(0, nil).Client())
}

func (p SandstormApi_shareView_Results_Future) Link() ViewSharingLink {
	return ViewSharingLink(p.Future.Field(1, nil).Client())
}

type SandstormApi_restore_Params capnp.Struct

// SandstormApi_restore_Params_TypeID is the unique identifier for the type SandstormApi_restore_Params.
const SandstormApi_restore_Params_TypeID = 0xd29e9db5843719f0

func NewSandstormApi_restore_Params(s *capnp.Segment) (SandstormApi_restore_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_restore_Params(st), err
}

func NewRootSandstormApi_restore_Params(s *capnp.Segment) (SandstormApi_restore_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_restore_Params(st), err
}

func ReadRootSandstormApi_restore_Params(msg *capnp.Message) (SandstormApi_restore_Params, error) {
	root, err := msg.Root()
	return SandstormApi_restore_Params(root.Struct()), err
}

func (s SandstormApi_restore_Params) String() string {
	str, _ := text.Marshal(0xd29e9db5843719f0, capnp.Struct(s))
	return str
}

func (s SandstormApi_restore_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_restore_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_restore_Params {
	return SandstormApi_restore_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_restore_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_restore_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_restore_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_restore_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_restore_Params) Token() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SandstormApi_restore_Params) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_restore_Params) SetToken(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// SandstormApi_restore_Params_List is a list of SandstormApi_restore_Params.
type SandstormApi_restore_Params_List = capnp.StructList[SandstormApi_restore_Params]

// NewSandstormApi_restore_Params creates a new list of SandstormApi_restore_Params.
func NewSandstormApi_restore_Params_List(s *capnp.Segment, sz int32) (SandstormApi_restore_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SandstormApi_restore_Params](l), err
}

// SandstormApi_restore_Params_Future is a wrapper for a SandstormApi_restore_Params promised by a client call.
type SandstormApi_restore_Params_Future struct{ *capnp.Future }

func (p SandstormApi_restore_Params_Future) Struct() (SandstormApi_restore_Params, error) {
	s, err := p.Future.Struct()
	return SandstormApi_restore_Params(s), err
}

type SandstormApi_restore_Results capnp.Struct

// SandstormApi_restore_Results_TypeID is the unique identifier for the type SandstormApi_restore_Results.
const SandstormApi_restore_Results_TypeID = 0xecf1f14c4209c731

func NewSandstormApi_restore_Results(s *capnp.Segment) (SandstormApi_restore_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_restore_Results(st), err
}

func NewRootSandstormApi_restore_Results(s *capnp.Segment) (SandstormApi_restore_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_restore_Results(st), err
}

func ReadRootSandstormApi_restore_Results(msg *capnp.Message) (SandstormApi_restore_Results, error) {
	root, err := msg.Root()
	return SandstormApi_restore_Results(root.Struct()), err
}

func (s SandstormApi_restore_Results) String() string {
	str, _ := text.Marshal(0xecf1f14c4209c731, capnp.Struct(s))
	return str
}

func (s SandstormApi_restore_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_restore_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_restore_Results {
	return SandstormApi_restore_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_restore_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_restore_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_restore_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_restore_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_restore_Results) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s SandstormApi_restore_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_restore_Results) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// SandstormApi_restore_Results_List is a list of SandstormApi_restore_Results.
type SandstormApi_restore_Results_List = capnp.StructList[SandstormApi_restore_Results]

// NewSandstormApi_restore_Results creates a new list of SandstormApi_restore_Results.
func NewSandstormApi_restore_Results_List(s *capnp.Segment, sz int32) (SandstormApi_restore_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SandstormApi_restore_Results](l), err
}

// SandstormApi_restore_Results_Future is a wrapper for a SandstormApi_restore_Results promised by a client call.
type SandstormApi_restore_Results_Future struct{ *capnp.Future }

func (p SandstormApi_restore_Results_Future) Struct() (SandstormApi_restore_Results, error) {
	s, err := p.Future.Struct()
	return SandstormApi_restore_Results(s), err
}

func (p SandstormApi_restore_Results_Future) Cap() *capnp.Future {
	return p.Future.Field(0, nil)
}

type SandstormApi_drop_Params capnp.Struct

// SandstormApi_drop_Params_TypeID is the unique identifier for the type SandstormApi_drop_Params.
const SandstormApi_drop_Params_TypeID = 0xadac227f85285c65

func NewSandstormApi_drop_Params(s *capnp.Segment) (SandstormApi_drop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_drop_Params(st), err
}

func NewRootSandstormApi_drop_Params(s *capnp.Segment) (SandstormApi_drop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_drop_Params(st), err
}

func ReadRootSandstormApi_drop_Params(msg *capnp.Message) (SandstormApi_drop_Params, error) {
	root, err := msg.Root()
	return SandstormApi_drop_Params(root.Struct()), err
}

func (s SandstormApi_drop_Params) String() string {
	str, _ := text.Marshal(0xadac227f85285c65, capnp.Struct(s))
	return str
}

func (s SandstormApi_drop_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_drop_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_drop_Params {
	return SandstormApi_drop_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_drop_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_drop_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_drop_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_drop_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_drop_Params) Token() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SandstormApi_drop_Params) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_drop_Params) SetToken(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// SandstormApi_drop_Params_List is a list of SandstormApi_drop_Params.
type SandstormApi_drop_Params_List = capnp.StructList[SandstormApi_drop_Params]

// NewSandstormApi_drop_Params creates a new list of SandstormApi_drop_Params.
func NewSandstormApi_drop_Params_List(s *capnp.Segment, sz int32) (SandstormApi_drop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SandstormApi_drop_Params](l), err
}

// SandstormApi_drop_Params_Future is a wrapper for a SandstormApi_drop_Params promised by a client call.
type SandstormApi_drop_Params_Future struct{ *capnp.Future }

func (p SandstormApi_drop_Params_Future) Struct() (SandstormApi_drop_Params, error) {
	s, err := p.Future.Struct()
	return SandstormApi_drop_Params(s), err
}

type SandstormApi_drop_Results capnp.Struct

// SandstormApi_drop_Results_TypeID is the unique identifier for the type SandstormApi_drop_Results.
const SandstormApi_drop_Results_TypeID = 0xfbbc20367c72bc59

func NewSandstormApi_drop_Results(s *capnp.Segment) (SandstormApi_drop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_drop_Results(st), err
}

func NewRootSandstormApi_drop_Results(s *capnp.Segment) (SandstormApi_drop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_drop_Results(st), err
}

func ReadRootSandstormApi_drop_Results(msg *capnp.Message) (SandstormApi_drop_Results, error) {
	root, err := msg.Root()
	return SandstormApi_drop_Results(root.Struct()), err
}

func (s SandstormApi_drop_Results) String() string {
	str, _ := text.Marshal(0xfbbc20367c72bc59, capnp.Struct(s))
	return str
}

func (s SandstormApi_drop_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_drop_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_drop_Results {
	return SandstormApi_drop_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_drop_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_drop_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_drop_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_drop_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SandstormApi_drop_Results_List is a list of SandstormApi_drop_Results.
type SandstormApi_drop_Results_List = capnp.StructList[SandstormApi_drop_Results]

// NewSandstormApi_drop_Results creates a new list of SandstormApi_drop_Results.
func NewSandstormApi_drop_Results_List(s *capnp.Segment, sz int32) (SandstormApi_drop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SandstormApi_drop_Results](l), err
}

// SandstormApi_drop_Results_Future is a wrapper for a SandstormApi_drop_Results promised by a client call.
type SandstormApi_drop_Results_Future struct{ *capnp.Future }

func (p SandstormApi_drop_Results_Future) Struct() (SandstormApi_drop_Results, error) {
	s, err := p.Future.Struct()
	return SandstormApi_drop_Results(s), err
}

type SandstormApi_deleted_Params capnp.Struct

// SandstormApi_deleted_Params_TypeID is the unique identifier for the type SandstormApi_deleted_Params.
const SandstormApi_deleted_Params_TypeID = 0x87d94955ce3c61dd

func NewSandstormApi_deleted_Params(s *capnp.Segment) (SandstormApi_deleted_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_deleted_Params(st), err
}

func NewRootSandstormApi_deleted_Params(s *capnp.Segment) (SandstormApi_deleted_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_deleted_Params(st), err
}

func ReadRootSandstormApi_deleted_Params(msg *capnp.Message) (SandstormApi_deleted_Params, error) {
	root, err := msg.Root()
	return SandstormApi_deleted_Params(root.Struct()), err
}

func (s SandstormApi_deleted_Params) String() string {
	str, _ := text.Marshal(0x87d94955ce3c61dd, capnp.Struct(s))
	return str
}

func (s SandstormApi_deleted_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_deleted_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_deleted_Params {
	return SandstormApi_deleted_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_deleted_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_deleted_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_deleted_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_deleted_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_deleted_Params) Ref() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s SandstormApi_deleted_Params) HasRef() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_deleted_Params) SetRef(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// SandstormApi_deleted_Params_List is a list of SandstormApi_deleted_Params.
type SandstormApi_deleted_Params_List = capnp.StructList[SandstormApi_deleted_Params]

// NewSandstormApi_deleted_Params creates a new list of SandstormApi_deleted_Params.
func NewSandstormApi_deleted_Params_List(s *capnp.Segment, sz int32) (SandstormApi_deleted_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SandstormApi_deleted_Params](l), err
}

// SandstormApi_deleted_Params_Future is a wrapper for a SandstormApi_deleted_Params promised by a client call.
type SandstormApi_deleted_Params_Future struct{ *capnp.Future }

func (p SandstormApi_deleted_Params_Future) Struct() (SandstormApi_deleted_Params, error) {
	s, err := p.Future.Struct()
	return SandstormApi_deleted_Params(s), err
}

func (p SandstormApi_deleted_Params_Future) Ref() *capnp.Future {
	return p.Future.Field(0, nil)
}

type SandstormApi_deleted_Results capnp.Struct

// SandstormApi_deleted_Results_TypeID is the unique identifier for the type SandstormApi_deleted_Results.
const SandstormApi_deleted_Results_TypeID = 0xf8fe6b4e94a960f7

func NewSandstormApi_deleted_Results(s *capnp.Segment) (SandstormApi_deleted_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deleted_Results(st), err
}

func NewRootSandstormApi_deleted_Results(s *capnp.Segment) (SandstormApi_deleted_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_deleted_Results(st), err
}

func ReadRootSandstormApi_deleted_Results(msg *capnp.Message) (SandstormApi_deleted_Results, error) {
	root, err := msg.Root()
	return SandstormApi_deleted_Results(root.Struct()), err
}

func (s SandstormApi_deleted_Results) String() string {
	str, _ := text.Marshal(0xf8fe6b4e94a960f7, capnp.Struct(s))
	return str
}

func (s SandstormApi_deleted_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_deleted_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_deleted_Results {
	return SandstormApi_deleted_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_deleted_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_deleted_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_deleted_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_deleted_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SandstormApi_deleted_Results_List is a list of SandstormApi_deleted_Results.
type SandstormApi_deleted_Results_List = capnp.StructList[SandstormApi_deleted_Results]

// NewSandstormApi_deleted_Results creates a new list of SandstormApi_deleted_Results.
func NewSandstormApi_deleted_Results_List(s *capnp.Segment, sz int32) (SandstormApi_deleted_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SandstormApi_deleted_Results](l), err
}

// SandstormApi_deleted_Results_Future is a wrapper for a SandstormApi_deleted_Results promised by a client call.
type SandstormApi_deleted_Results_Future struct{ *capnp.Future }

func (p SandstormApi_deleted_Results_Future) Struct() (SandstormApi_deleted_Results, error) {
	s, err := p.Future.Struct()
	return SandstormApi_deleted_Results(s), err
}

type SandstormApi_stayAwake_Params capnp.Struct

// SandstormApi_stayAwake_Params_TypeID is the unique identifier for the type SandstormApi_stayAwake_Params.
const SandstormApi_stayAwake_Params_TypeID = 0xb469e5d523b89e1b

func NewSandstormApi_stayAwake_Params(s *capnp.Segment) (SandstormApi_stayAwake_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_stayAwake_Params(st), err
}

func NewRootSandstormApi_stayAwake_Params(s *capnp.Segment) (SandstormApi_stayAwake_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_stayAwake_Params(st), err
}

func ReadRootSandstormApi_stayAwake_Params(msg *capnp.Message) (SandstormApi_stayAwake_Params, error) {
	root, err := msg.Root()
	return SandstormApi_stayAwake_Params(root.Struct()), err
}

func (s SandstormApi_stayAwake_Params) String() string {
	str, _ := text.Marshal(0xb469e5d523b89e1b, capnp.Struct(s))
	return str
}

func (s SandstormApi_stayAwake_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_stayAwake_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_stayAwake_Params {
	return SandstormApi_stayAwake_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_stayAwake_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_stayAwake_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_stayAwake_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_stayAwake_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_stayAwake_Params) DisplayInfo() (activity.NotificationDisplayInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return activity.NotificationDisplayInfo(p.Struct()), err
}

func (s SandstormApi_stayAwake_Params) HasDisplayInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_stayAwake_Params) SetDisplayInfo(v activity.NotificationDisplayInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDisplayInfo sets the displayInfo field to a newly
// allocated activity.NotificationDisplayInfo struct, preferring placement in s's segment.
func (s SandstormApi_stayAwake_Params) NewDisplayInfo() (activity.NotificationDisplayInfo, error) {
	ss, err := activity.NewNotificationDisplayInfo(capnp.Struct(s).Segment())
	if err != nil {
		return activity.NotificationDisplayInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SandstormApi_stayAwake_Params) Notification() activity.OngoingNotification {
	p, _ := capnp.Struct(s).Ptr(1)
	return activity.OngoingNotification(p.Interface().Client())
}

func (s SandstormApi_stayAwake_Params) HasNotification() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SandstormApi_stayAwake_Params) SetNotification(v activity.OngoingNotification) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// SandstormApi_stayAwake_Params_List is a list of SandstormApi_stayAwake_Params.
type SandstormApi_stayAwake_Params_List = capnp.StructList[SandstormApi_stayAwake_Params]

// NewSandstormApi_stayAwake_Params creates a new list of SandstormApi_stayAwake_Params.
func NewSandstormApi_stayAwake_Params_List(s *capnp.Segment, sz int32) (SandstormApi_stayAwake_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SandstormApi_stayAwake_Params](l), err
}

// SandstormApi_stayAwake_Params_Future is a wrapper for a SandstormApi_stayAwake_Params promised by a client call.
type SandstormApi_stayAwake_Params_Future struct{ *capnp.Future }

func (p SandstormApi_stayAwake_Params_Future) Struct() (SandstormApi_stayAwake_Params, error) {
	s, err := p.Future.Struct()
	return SandstormApi_stayAwake_Params(s), err
}

func (p SandstormApi_stayAwake_Params_Future) DisplayInfo() activity.NotificationDisplayInfo_Future {
	return activity.NotificationDisplayInfo_Future{Future: p.Future.Field(0, nil)}
}

func (p SandstormApi_stayAwake_Params_Future) Notification() activity.OngoingNotification {
	return activity.OngoingNotification(p.Future.Field(1, nil).Client())
}

type SandstormApi_stayAwake_Results capnp.Struct

// SandstormApi_stayAwake_Results_TypeID is the unique identifier for the type SandstormApi_stayAwake_Results.
const SandstormApi_stayAwake_Results_TypeID = 0x9fd40f92e1eb5d21

func NewSandstormApi_stayAwake_Results(s *capnp.Segment) (SandstormApi_stayAwake_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_stayAwake_Results(st), err
}

func NewRootSandstormApi_stayAwake_Results(s *capnp.Segment) (SandstormApi_stayAwake_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_stayAwake_Results(st), err
}

func ReadRootSandstormApi_stayAwake_Results(msg *capnp.Message) (SandstormApi_stayAwake_Results, error) {
	root, err := msg.Root()
	return SandstormApi_stayAwake_Results(root.Struct()), err
}

func (s SandstormApi_stayAwake_Results) String() string {
	str, _ := text.Marshal(0x9fd40f92e1eb5d21, capnp.Struct(s))
	return str
}

func (s SandstormApi_stayAwake_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_stayAwake_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_stayAwake_Results {
	return SandstormApi_stayAwake_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_stayAwake_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_stayAwake_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_stayAwake_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_stayAwake_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_stayAwake_Results) Handle() util.Handle {
	p, _ := capnp.Struct(s).Ptr(0)
	return util.Handle(p.Interface().Client())
}

func (s SandstormApi_stayAwake_Results) HasHandle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_stayAwake_Results) SetHandle(v util.Handle) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// SandstormApi_stayAwake_Results_List is a list of SandstormApi_stayAwake_Results.
type SandstormApi_stayAwake_Results_List = capnp.StructList[SandstormApi_stayAwake_Results]

// NewSandstormApi_stayAwake_Results creates a new list of SandstormApi_stayAwake_Results.
func NewSandstormApi_stayAwake_Results_List(s *capnp.Segment, sz int32) (SandstormApi_stayAwake_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SandstormApi_stayAwake_Results](l), err
}

// SandstormApi_stayAwake_Results_Future is a wrapper for a SandstormApi_stayAwake_Results promised by a client call.
type SandstormApi_stayAwake_Results_Future struct{ *capnp.Future }

func (p SandstormApi_stayAwake_Results_Future) Struct() (SandstormApi_stayAwake_Results, error) {
	s, err := p.Future.Struct()
	return SandstormApi_stayAwake_Results(s), err
}

func (p SandstormApi_stayAwake_Results_Future) Handle() util.Handle {
	return util.Handle(p.Future.Field(0, nil).Client())
}

type SandstormApi_save_Params capnp.Struct

// SandstormApi_save_Params_TypeID is the unique identifier for the type SandstormApi_save_Params.
const SandstormApi_save_Params_TypeID = 0xd692a643ba8a1f58

func NewSandstormApi_save_Params(s *capnp.Segment) (SandstormApi_save_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_save_Params(st), err
}

func NewRootSandstormApi_save_Params(s *capnp.Segment) (SandstormApi_save_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SandstormApi_save_Params(st), err
}

func ReadRootSandstormApi_save_Params(msg *capnp.Message) (SandstormApi_save_Params, error) {
	root, err := msg.Root()
	return SandstormApi_save_Params(root.Struct()), err
}

func (s SandstormApi_save_Params) String() string {
	str, _ := text.Marshal(0xd692a643ba8a1f58, capnp.Struct(s))
	return str
}

func (s SandstormApi_save_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_save_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_save_Params {
	return SandstormApi_save_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_save_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_save_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_save_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_save_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_save_Params) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s SandstormApi_save_Params) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_save_Params) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}
func (s SandstormApi_save_Params) Label() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return util.LocalizedText(p.Struct()), err
}

func (s SandstormApi_save_Params) HasLabel() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SandstormApi_save_Params) SetLabel(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewLabel sets the label field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s SandstormApi_save_Params) NewLabel() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SandstormApi_save_Params_List is a list of SandstormApi_save_Params.
type SandstormApi_save_Params_List = capnp.StructList[SandstormApi_save_Params]

// NewSandstormApi_save_Params creates a new list of SandstormApi_save_Params.
func NewSandstormApi_save_Params_List(s *capnp.Segment, sz int32) (SandstormApi_save_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SandstormApi_save_Params](l), err
}

// SandstormApi_save_Params_Future is a wrapper for a SandstormApi_save_Params promised by a client call.
type SandstormApi_save_Params_Future struct{ *capnp.Future }

func (p SandstormApi_save_Params_Future) Struct() (SandstormApi_save_Params, error) {
	s, err := p.Future.Struct()
	return SandstormApi_save_Params(s), err
}

func (p SandstormApi_save_Params_Future) Cap() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p SandstormApi_save_Params_Future) Label() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(1, nil)}
}

type SandstormApi_save_Results capnp.Struct

// SandstormApi_save_Results_TypeID is the unique identifier for the type SandstormApi_save_Results.
const SandstormApi_save_Results_TypeID = 0x9206caa8d3e3cc7e

func NewSandstormApi_save_Results(s *capnp.Segment) (SandstormApi_save_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_save_Results(st), err
}

func NewRootSandstormApi_save_Results(s *capnp.Segment) (SandstormApi_save_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_save_Results(st), err
}

func ReadRootSandstormApi_save_Results(msg *capnp.Message) (SandstormApi_save_Results, error) {
	root, err := msg.Root()
	return SandstormApi_save_Results(root.Struct()), err
}

func (s SandstormApi_save_Results) String() string {
	str, _ := text.Marshal(0x9206caa8d3e3cc7e, capnp.Struct(s))
	return str
}

func (s SandstormApi_save_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_save_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_save_Results {
	return SandstormApi_save_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_save_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_save_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_save_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_save_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_save_Results) Token() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SandstormApi_save_Results) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_save_Results) SetToken(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// SandstormApi_save_Results_List is a list of SandstormApi_save_Results.
type SandstormApi_save_Results_List = capnp.StructList[SandstormApi_save_Results]

// NewSandstormApi_save_Results creates a new list of SandstormApi_save_Results.
func NewSandstormApi_save_Results_List(s *capnp.Segment, sz int32) (SandstormApi_save_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SandstormApi_save_Results](l), err
}

// SandstormApi_save_Results_Future is a wrapper for a SandstormApi_save_Results promised by a client call.
type SandstormApi_save_Results_Future struct{ *capnp.Future }

func (p SandstormApi_save_Results_Future) Struct() (SandstormApi_save_Results, error) {
	s, err := p.Future.Struct()
	return SandstormApi_save_Results(s), err
}

type SandstormApi_backgroundActivity_Params capnp.Struct

// SandstormApi_backgroundActivity_Params_TypeID is the unique identifier for the type SandstormApi_backgroundActivity_Params.
const SandstormApi_backgroundActivity_Params_TypeID = 0xec8866df56873858

func NewSandstormApi_backgroundActivity_Params(s *capnp.Segment) (SandstormApi_backgroundActivity_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_backgroundActivity_Params(st), err
}

func NewRootSandstormApi_backgroundActivity_Params(s *capnp.Segment) (SandstormApi_backgroundActivity_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_backgroundActivity_Params(st), err
}

func ReadRootSandstormApi_backgroundActivity_Params(msg *capnp.Message) (SandstormApi_backgroundActivity_Params, error) {
	root, err := msg.Root()
	return SandstormApi_backgroundActivity_Params(root.Struct()), err
}

func (s SandstormApi_backgroundActivity_Params) String() string {
	str, _ := text.Marshal(0xec8866df56873858, capnp.Struct(s))
	return str
}

func (s SandstormApi_backgroundActivity_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_backgroundActivity_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_backgroundActivity_Params {
	return SandstormApi_backgroundActivity_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_backgroundActivity_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_backgroundActivity_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_backgroundActivity_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_backgroundActivity_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_backgroundActivity_Params) Event() (activity.ActivityEvent, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return activity.ActivityEvent(p.Struct()), err
}

func (s SandstormApi_backgroundActivity_Params) HasEvent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_backgroundActivity_Params) SetEvent(v activity.ActivityEvent) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEvent sets the event field to a newly
// allocated activity.ActivityEvent struct, preferring placement in s's segment.
func (s SandstormApi_backgroundActivity_Params) NewEvent() (activity.ActivityEvent, error) {
	ss, err := activity.NewActivityEvent(capnp.Struct(s).Segment())
	if err != nil {
		return activity.ActivityEvent{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SandstormApi_backgroundActivity_Params_List is a list of SandstormApi_backgroundActivity_Params.
type SandstormApi_backgroundActivity_Params_List = capnp.StructList[SandstormApi_backgroundActivity_Params]

// NewSandstormApi_backgroundActivity_Params creates a new list of SandstormApi_backgroundActivity_Params.
func NewSandstormApi_backgroundActivity_Params_List(s *capnp.Segment, sz int32) (SandstormApi_backgroundActivity_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SandstormApi_backgroundActivity_Params](l), err
}

// SandstormApi_backgroundActivity_Params_Future is a wrapper for a SandstormApi_backgroundActivity_Params promised by a client call.
type SandstormApi_backgroundActivity_Params_Future struct{ *capnp.Future }

func (p SandstormApi_backgroundActivity_Params_Future) Struct() (SandstormApi_backgroundActivity_Params, error) {
	s, err := p.Future.Struct()
	return SandstormApi_backgroundActivity_Params(s), err
}

func (p SandstormApi_backgroundActivity_Params_Future) Event() activity.ActivityEvent_Future {
	return activity.ActivityEvent_Future{Future: p.Future.Field(0, nil)}
}

type SandstormApi_backgroundActivity_Results capnp.Struct

// SandstormApi_backgroundActivity_Results_TypeID is the unique identifier for the type SandstormApi_backgroundActivity_Results.
const SandstormApi_backgroundActivity_Results_TypeID = 0xa535ac09456b2870

func NewSandstormApi_backgroundActivity_Results(s *capnp.Segment) (SandstormApi_backgroundActivity_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_backgroundActivity_Results(st), err
}

func NewRootSandstormApi_backgroundActivity_Results(s *capnp.Segment) (SandstormApi_backgroundActivity_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_backgroundActivity_Results(st), err
}

func ReadRootSandstormApi_backgroundActivity_Results(msg *capnp.Message) (SandstormApi_backgroundActivity_Results, error) {
	root, err := msg.Root()
	return SandstormApi_backgroundActivity_Results(root.Struct()), err
}

func (s SandstormApi_backgroundActivity_Results) String() string {
	str, _ := text.Marshal(0xa535ac09456b2870, capnp.Struct(s))
	return str
}

func (s SandstormApi_backgroundActivity_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_backgroundActivity_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_backgroundActivity_Results {
	return SandstormApi_backgroundActivity_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_backgroundActivity_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_backgroundActivity_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_backgroundActivity_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_backgroundActivity_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SandstormApi_backgroundActivity_Results_List is a list of SandstormApi_backgroundActivity_Results.
type SandstormApi_backgroundActivity_Results_List = capnp.StructList[SandstormApi_backgroundActivity_Results]

// NewSandstormApi_backgroundActivity_Results creates a new list of SandstormApi_backgroundActivity_Results.
func NewSandstormApi_backgroundActivity_Results_List(s *capnp.Segment, sz int32) (SandstormApi_backgroundActivity_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SandstormApi_backgroundActivity_Results](l), err
}

// SandstormApi_backgroundActivity_Results_Future is a wrapper for a SandstormApi_backgroundActivity_Results promised by a client call.
type SandstormApi_backgroundActivity_Results_Future struct{ *capnp.Future }

func (p SandstormApi_backgroundActivity_Results_Future) Struct() (SandstormApi_backgroundActivity_Results, error) {
	s, err := p.Future.Struct()
	return SandstormApi_backgroundActivity_Results(s), err
}

type SandstormApi_getIdentityId_Params capnp.Struct

// SandstormApi_getIdentityId_Params_TypeID is the unique identifier for the type SandstormApi_getIdentityId_Params.
const SandstormApi_getIdentityId_Params_TypeID = 0xd76b6c6364d6bff5

func NewSandstormApi_getIdentityId_Params(s *capnp.Segment) (SandstormApi_getIdentityId_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_getIdentityId_Params(st), err
}

func NewRootSandstormApi_getIdentityId_Params(s *capnp.Segment) (SandstormApi_getIdentityId_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_getIdentityId_Params(st), err
}

func ReadRootSandstormApi_getIdentityId_Params(msg *capnp.Message) (SandstormApi_getIdentityId_Params, error) {
	root, err := msg.Root()
	return SandstormApi_getIdentityId_Params(root.Struct()), err
}

func (s SandstormApi_getIdentityId_Params) String() string {
	str, _ := text.Marshal(0xd76b6c6364d6bff5, capnp.Struct(s))
	return str
}

func (s SandstormApi_getIdentityId_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_getIdentityId_Params) DecodeFromPtr(p capnp.Ptr) SandstormApi_getIdentityId_Params {
	return SandstormApi_getIdentityId_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_getIdentityId_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_getIdentityId_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_getIdentityId_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_getIdentityId_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_getIdentityId_Params) Identity() identity.Identity {
	p, _ := capnp.Struct(s).Ptr(0)
	return identity.Identity(p.Interface().Client())
}

func (s SandstormApi_getIdentityId_Params) HasIdentity() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_getIdentityId_Params) SetIdentity(v identity.Identity) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// SandstormApi_getIdentityId_Params_List is a list of SandstormApi_getIdentityId_Params.
type SandstormApi_getIdentityId_Params_List = capnp.StructList[SandstormApi_getIdentityId_Params]

// NewSandstormApi_getIdentityId_Params creates a new list of SandstormApi_getIdentityId_Params.
func NewSandstormApi_getIdentityId_Params_List(s *capnp.Segment, sz int32) (SandstormApi_getIdentityId_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SandstormApi_getIdentityId_Params](l), err
}

// SandstormApi_getIdentityId_Params_Future is a wrapper for a SandstormApi_getIdentityId_Params promised by a client call.
type SandstormApi_getIdentityId_Params_Future struct{ *capnp.Future }

func (p SandstormApi_getIdentityId_Params_Future) Struct() (SandstormApi_getIdentityId_Params, error) {
	s, err := p.Future.Struct()
	return SandstormApi_getIdentityId_Params(s), err
}

func (p SandstormApi_getIdentityId_Params_Future) Identity() identity.Identity {
	return identity.Identity(p.Future.Field(0, nil).Client())
}

type SandstormApi_getIdentityId_Results capnp.Struct

// SandstormApi_getIdentityId_Results_TypeID is the unique identifier for the type SandstormApi_getIdentityId_Results.
const SandstormApi_getIdentityId_Results_TypeID = 0x8c4a70a31703d35c

func NewSandstormApi_getIdentityId_Results(s *capnp.Segment) (SandstormApi_getIdentityId_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_getIdentityId_Results(st), err
}

func NewRootSandstormApi_getIdentityId_Results(s *capnp.Segment) (SandstormApi_getIdentityId_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SandstormApi_getIdentityId_Results(st), err
}

func ReadRootSandstormApi_getIdentityId_Results(msg *capnp.Message) (SandstormApi_getIdentityId_Results, error) {
	root, err := msg.Root()
	return SandstormApi_getIdentityId_Results(root.Struct()), err
}

func (s SandstormApi_getIdentityId_Results) String() string {
	str, _ := text.Marshal(0x8c4a70a31703d35c, capnp.Struct(s))
	return str
}

func (s SandstormApi_getIdentityId_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_getIdentityId_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_getIdentityId_Results {
	return SandstormApi_getIdentityId_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_getIdentityId_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_getIdentityId_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_getIdentityId_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_getIdentityId_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SandstormApi_getIdentityId_Results) Id() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SandstormApi_getIdentityId_Results) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SandstormApi_getIdentityId_Results) SetId(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// SandstormApi_getIdentityId_Results_List is a list of SandstormApi_getIdentityId_Results.
type SandstormApi_getIdentityId_Results_List = capnp.StructList[SandstormApi_getIdentityId_Results]

// NewSandstormApi_getIdentityId_Results creates a new list of SandstormApi_getIdentityId_Results.
func NewSandstormApi_getIdentityId_Results_List(s *capnp.Segment, sz int32) (SandstormApi_getIdentityId_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SandstormApi_getIdentityId_Results](l), err
}

// SandstormApi_getIdentityId_Results_Future is a wrapper for a SandstormApi_getIdentityId_Results promised by a client call.
type SandstormApi_getIdentityId_Results_Future struct{ *capnp.Future }

func (p SandstormApi_getIdentityId_Results_Future) Struct() (SandstormApi_getIdentityId_Results, error) {
	s, err := p.Future.Struct()
	return SandstormApi_getIdentityId_Results(s), err
}

type SandstormApi_schedule_Results capnp.Struct

// SandstormApi_schedule_Results_TypeID is the unique identifier for the type SandstormApi_schedule_Results.
const SandstormApi_schedule_Results_TypeID = 0x8dc8d4c06855854e

func NewSandstormApi_schedule_Results(s *capnp.Segment) (SandstormApi_schedule_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_schedule_Results(st), err
}

func NewRootSandstormApi_schedule_Results(s *capnp.Segment) (SandstormApi_schedule_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SandstormApi_schedule_Results(st), err
}

func ReadRootSandstormApi_schedule_Results(msg *capnp.Message) (SandstormApi_schedule_Results, error) {
	root, err := msg.Root()
	return SandstormApi_schedule_Results(root.Struct()), err
}

func (s SandstormApi_schedule_Results) String() string {
	str, _ := text.Marshal(0x8dc8d4c06855854e, capnp.Struct(s))
	return str
}

func (s SandstormApi_schedule_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SandstormApi_schedule_Results) DecodeFromPtr(p capnp.Ptr) SandstormApi_schedule_Results {
	return SandstormApi_schedule_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SandstormApi_schedule_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SandstormApi_schedule_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SandstormApi_schedule_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SandstormApi_schedule_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SandstormApi_schedule_Results_List is a list of SandstormApi_schedule_Results.
type SandstormApi_schedule_Results_List = capnp.StructList[SandstormApi_schedule_Results]

// NewSandstormApi_schedule_Results creates a new list of SandstormApi_schedule_Results.
func NewSandstormApi_schedule_Results_List(s *capnp.Segment, sz int32) (SandstormApi_schedule_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SandstormApi_schedule_Results](l), err
}

// SandstormApi_schedule_Results_Future is a wrapper for a SandstormApi_schedule_Results promised by a client call.
type SandstormApi_schedule_Results_Future struct{ *capnp.Future }

func (p SandstormApi_schedule_Results_Future) Struct() (SandstormApi_schedule_Results, error) {
	s, err := p.Future.Struct()
	return SandstormApi_schedule_Results(s), err
}

type ScheduledJob capnp.Struct
type ScheduledJob_schedule ScheduledJob
type ScheduledJob_schedule_oneShot ScheduledJob
type ScheduledJob_schedule_Which uint16

const (
	ScheduledJob_schedule_Which_oneShot  ScheduledJob_schedule_Which = 0
	ScheduledJob_schedule_Which_periodic ScheduledJob_schedule_Which = 1
)

func (w ScheduledJob_schedule_Which) String() string {
	const s = "oneShotperiodic"
	switch w {
	case ScheduledJob_schedule_Which_oneShot:
		return s[0:7]
	case ScheduledJob_schedule_Which_periodic:
		return s[7:15]

	}
	return "ScheduledJob_schedule_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ScheduledJob_TypeID is the unique identifier for the type ScheduledJob.
const ScheduledJob_TypeID = 0xa34f0cfe24c69d74

func NewScheduledJob(s *capnp.Segment) (ScheduledJob, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return ScheduledJob(st), err
}

func NewRootScheduledJob(s *capnp.Segment) (ScheduledJob, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return ScheduledJob(st), err
}

func ReadRootScheduledJob(msg *capnp.Message) (ScheduledJob, error) {
	root, err := msg.Root()
	return ScheduledJob(root.Struct()), err
}

func (s ScheduledJob) String() string {
	str, _ := text.Marshal(0xa34f0cfe24c69d74, capnp.Struct(s))
	return str
}

func (s ScheduledJob) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ScheduledJob) DecodeFromPtr(p capnp.Ptr) ScheduledJob {
	return ScheduledJob(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ScheduledJob) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ScheduledJob) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ScheduledJob) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ScheduledJob) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ScheduledJob) Name() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return util.LocalizedText(p.Struct()), err
}

func (s ScheduledJob) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ScheduledJob) SetName(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewName sets the name field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s ScheduledJob) NewName() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ScheduledJob) Callback() ScheduledJob_Callback {
	p, _ := capnp.Struct(s).Ptr(1)
	return ScheduledJob_Callback(p.Interface().Client())
}

func (s ScheduledJob) HasCallback() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ScheduledJob) SetCallback(v ScheduledJob_Callback) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

func (s ScheduledJob) Schedule() ScheduledJob_schedule { return ScheduledJob_schedule(s) }

func (s ScheduledJob_schedule) Which() ScheduledJob_schedule_Which {
	return ScheduledJob_schedule_Which(capnp.Struct(s).Uint16(16))
}
func (s ScheduledJob_schedule) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ScheduledJob_schedule) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ScheduledJob_schedule) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ScheduledJob_schedule) OneShot() ScheduledJob_schedule_oneShot {
	return ScheduledJob_schedule_oneShot(s)
}

func (s ScheduledJob_schedule) SetOneShot() {
	capnp.Struct(s).SetUint16(16, 0)
}

func (s ScheduledJob_schedule_oneShot) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ScheduledJob_schedule_oneShot) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ScheduledJob_schedule_oneShot) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ScheduledJob_schedule_oneShot) When() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s ScheduledJob_schedule_oneShot) SetWhen(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s ScheduledJob_schedule_oneShot) Slack() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s ScheduledJob_schedule_oneShot) SetSlack(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s ScheduledJob_schedule) Periodic() SchedulingPeriod {
	if capnp.Struct(s).Uint16(16) != 1 {
		panic("Which() != periodic")
	}
	return SchedulingPeriod(capnp.Struct(s).Uint16(0))
}

func (s ScheduledJob_schedule) SetPeriodic(v SchedulingPeriod) {
	capnp.Struct(s).SetUint16(16, 1)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// ScheduledJob_List is a list of ScheduledJob.
type ScheduledJob_List = capnp.StructList[ScheduledJob]

// NewScheduledJob creates a new list of ScheduledJob.
func NewScheduledJob_List(s *capnp.Segment, sz int32) (ScheduledJob_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[ScheduledJob](l), err
}

// ScheduledJob_Future is a wrapper for a ScheduledJob promised by a client call.
type ScheduledJob_Future struct{ *capnp.Future }

func (p ScheduledJob_Future) Struct() (ScheduledJob, error) {
	s, err := p.Future.Struct()
	return ScheduledJob(s), err
}

func (p ScheduledJob_Future) Name() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(0, nil)}
}

func (p ScheduledJob_Future) Callback() ScheduledJob_Callback {
	return ScheduledJob_Callback(p.Future.Field(1, nil).Client())
}

func (p ScheduledJob_Future) Schedule() ScheduledJob_schedule_Future {
	return ScheduledJob_schedule_Future{p.Future}
}

// ScheduledJob_schedule_Future is a wrapper for a ScheduledJob_schedule promised by a client call.
type ScheduledJob_schedule_Future struct{ *capnp.Future }

func (p ScheduledJob_schedule_Future) Struct() (ScheduledJob_schedule, error) {
	s, err := p.Future.Struct()
	return ScheduledJob_schedule(s), err
}

func (p ScheduledJob_schedule_Future) OneShot() ScheduledJob_schedule_oneShot_Future {
	return ScheduledJob_schedule_oneShot_Future{p.Future}
}

// ScheduledJob_schedule_oneShot_Future is a wrapper for a ScheduledJob_schedule_oneShot promised by a client call.
type ScheduledJob_schedule_oneShot_Future struct{ *capnp.Future }

func (p ScheduledJob_schedule_oneShot_Future) Struct() (ScheduledJob_schedule_oneShot, error) {
	s, err := p.Future.Struct()
	return ScheduledJob_schedule_oneShot(s), err
}

type ScheduledJob_Callback capnp.Client

// ScheduledJob_Callback_TypeID is the unique identifier for the type ScheduledJob_Callback.
const ScheduledJob_Callback_TypeID = 0xab619ad5a8fb7e11

func (c ScheduledJob_Callback) Run(ctx context.Context, params func(ScheduledJob_Callback_run_Params) error) (ScheduledJob_Callback_run_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xab619ad5a8fb7e11,
			MethodID:      0,
			InterfaceName: "grain.capnp:ScheduledJob.Callback",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ScheduledJob_Callback_run_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ScheduledJob_Callback_run_Results_Future{Future: ans.Future()}, release
}

func (c ScheduledJob_Callback) AddRef() ScheduledJob_Callback {
	return ScheduledJob_Callback(capnp.Client(c).AddRef())
}

func (c ScheduledJob_Callback) Release() {
	capnp.Client(c).Release()
}

func (c ScheduledJob_Callback) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ScheduledJob_Callback) DecodeFromPtr(p capnp.Ptr) ScheduledJob_Callback {
	return ScheduledJob_Callback(capnp.Client{}.DecodeFromPtr(p))
}

func (c ScheduledJob_Callback) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A ScheduledJob_Callback_Server is a ScheduledJob_Callback with a local implementation.
type ScheduledJob_Callback_Server interface {
	Run(context.Context, ScheduledJob_Callback_run) error
}

// ScheduledJob_Callback_NewServer creates a new Server from an implementation of ScheduledJob_Callback_Server.
func ScheduledJob_Callback_NewServer(s ScheduledJob_Callback_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ScheduledJob_Callback_Methods(nil, s), s, c)
}

// ScheduledJob_Callback_ServerToClient creates a new Client from an implementation of ScheduledJob_Callback_Server.
// The caller is responsible for calling Release on the returned Client.
func ScheduledJob_Callback_ServerToClient(s ScheduledJob_Callback_Server) ScheduledJob_Callback {
	return ScheduledJob_Callback(capnp.NewClient(ScheduledJob_Callback_NewServer(s)))
}

// ScheduledJob_Callback_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ScheduledJob_Callback_Methods(methods []server.Method, s ScheduledJob_Callback_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xab619ad5a8fb7e11,
			MethodID:      0,
			InterfaceName: "grain.capnp:ScheduledJob.Callback",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, ScheduledJob_Callback_run{call})
		},
	})

	return methods
}

// ScheduledJob_Callback_run holds the state for a server call to ScheduledJob_Callback.run.
// See server.Call for documentation.
type ScheduledJob_Callback_run struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ScheduledJob_Callback_run) Args() ScheduledJob_Callback_run_Params {
	return ScheduledJob_Callback_run_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ScheduledJob_Callback_run) AllocResults() (ScheduledJob_Callback_run_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ScheduledJob_Callback_run_Results(r), err
}

// ScheduledJob_Callback_List is a list of ScheduledJob_Callback.
type ScheduledJob_Callback_List = capnp.CapList[ScheduledJob_Callback]

// NewScheduledJob_Callback creates a new list of ScheduledJob_Callback.
func NewScheduledJob_Callback_List(s *capnp.Segment, sz int32) (ScheduledJob_Callback_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ScheduledJob_Callback](l), err
}

type ScheduledJob_Callback_run_Params capnp.Struct

// ScheduledJob_Callback_run_Params_TypeID is the unique identifier for the type ScheduledJob_Callback_run_Params.
const ScheduledJob_Callback_run_Params_TypeID = 0xc0dde7310fa94a2b

func NewScheduledJob_Callback_run_Params(s *capnp.Segment) (ScheduledJob_Callback_run_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ScheduledJob_Callback_run_Params(st), err
}

func NewRootScheduledJob_Callback_run_Params(s *capnp.Segment) (ScheduledJob_Callback_run_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ScheduledJob_Callback_run_Params(st), err
}

func ReadRootScheduledJob_Callback_run_Params(msg *capnp.Message) (ScheduledJob_Callback_run_Params, error) {
	root, err := msg.Root()
	return ScheduledJob_Callback_run_Params(root.Struct()), err
}

func (s ScheduledJob_Callback_run_Params) String() string {
	str, _ := text.Marshal(0xc0dde7310fa94a2b, capnp.Struct(s))
	return str
}

func (s ScheduledJob_Callback_run_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ScheduledJob_Callback_run_Params) DecodeFromPtr(p capnp.Ptr) ScheduledJob_Callback_run_Params {
	return ScheduledJob_Callback_run_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ScheduledJob_Callback_run_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ScheduledJob_Callback_run_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ScheduledJob_Callback_run_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ScheduledJob_Callback_run_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ScheduledJob_Callback_run_Params_List is a list of ScheduledJob_Callback_run_Params.
type ScheduledJob_Callback_run_Params_List = capnp.StructList[ScheduledJob_Callback_run_Params]

// NewScheduledJob_Callback_run_Params creates a new list of ScheduledJob_Callback_run_Params.
func NewScheduledJob_Callback_run_Params_List(s *capnp.Segment, sz int32) (ScheduledJob_Callback_run_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ScheduledJob_Callback_run_Params](l), err
}

// ScheduledJob_Callback_run_Params_Future is a wrapper for a ScheduledJob_Callback_run_Params promised by a client call.
type ScheduledJob_Callback_run_Params_Future struct{ *capnp.Future }

func (p ScheduledJob_Callback_run_Params_Future) Struct() (ScheduledJob_Callback_run_Params, error) {
	s, err := p.Future.Struct()
	return ScheduledJob_Callback_run_Params(s), err
}

type ScheduledJob_Callback_run_Results capnp.Struct

// ScheduledJob_Callback_run_Results_TypeID is the unique identifier for the type ScheduledJob_Callback_run_Results.
const ScheduledJob_Callback_run_Results_TypeID = 0x8b89acc0133457cf

func NewScheduledJob_Callback_run_Results(s *capnp.Segment) (ScheduledJob_Callback_run_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ScheduledJob_Callback_run_Results(st), err
}

func NewRootScheduledJob_Callback_run_Results(s *capnp.Segment) (ScheduledJob_Callback_run_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ScheduledJob_Callback_run_Results(st), err
}

func ReadRootScheduledJob_Callback_run_Results(msg *capnp.Message) (ScheduledJob_Callback_run_Results, error) {
	root, err := msg.Root()
	return ScheduledJob_Callback_run_Results(root.Struct()), err
}

func (s ScheduledJob_Callback_run_Results) String() string {
	str, _ := text.Marshal(0x8b89acc0133457cf, capnp.Struct(s))
	return str
}

func (s ScheduledJob_Callback_run_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ScheduledJob_Callback_run_Results) DecodeFromPtr(p capnp.Ptr) ScheduledJob_Callback_run_Results {
	return ScheduledJob_Callback_run_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ScheduledJob_Callback_run_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ScheduledJob_Callback_run_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ScheduledJob_Callback_run_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ScheduledJob_Callback_run_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ScheduledJob_Callback_run_Results) CancelFutureRuns() bool {
	return capnp.Struct(s).Bit(0)
}

func (s ScheduledJob_Callback_run_Results) SetCancelFutureRuns(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// ScheduledJob_Callback_run_Results_List is a list of ScheduledJob_Callback_run_Results.
type ScheduledJob_Callback_run_Results_List = capnp.StructList[ScheduledJob_Callback_run_Results]

// NewScheduledJob_Callback_run_Results creates a new list of ScheduledJob_Callback_run_Results.
func NewScheduledJob_Callback_run_Results_List(s *capnp.Segment, sz int32) (ScheduledJob_Callback_run_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ScheduledJob_Callback_run_Results](l), err
}

// ScheduledJob_Callback_run_Results_Future is a wrapper for a ScheduledJob_Callback_run_Results promised by a client call.
type ScheduledJob_Callback_run_Results_Future struct{ *capnp.Future }

func (p ScheduledJob_Callback_run_Results_Future) Struct() (ScheduledJob_Callback_run_Results, error) {
	s, err := p.Future.Struct()
	return ScheduledJob_Callback_run_Results(s), err
}

type SchedulingPeriod uint16

// SchedulingPeriod_TypeID is the unique identifier for the type SchedulingPeriod.
const SchedulingPeriod_TypeID = 0x8478a37e9456409d

// Values of SchedulingPeriod.
const (
	SchedulingPeriod_annually SchedulingPeriod = 3
	SchedulingPeriod_monthly  SchedulingPeriod = 2
	SchedulingPeriod_weekly   SchedulingPeriod = 4
	SchedulingPeriod_daily    SchedulingPeriod = 1
	SchedulingPeriod_hourly   SchedulingPeriod = 0
)

// String returns the enum's constant name.
func (c SchedulingPeriod) String() string {
	switch c {
	case SchedulingPeriod_annually:
		return "annually"
	case SchedulingPeriod_monthly:
		return "monthly"
	case SchedulingPeriod_weekly:
		return "weekly"
	case SchedulingPeriod_daily:
		return "daily"
	case SchedulingPeriod_hourly:
		return "hourly"

	default:
		return ""
	}
}

// SchedulingPeriodFromString returns the enum value with a name,
// or the zero value if there's no such value.
func SchedulingPeriodFromString(c string) SchedulingPeriod {
	switch c {
	case "annually":
		return SchedulingPeriod_annually
	case "monthly":
		return SchedulingPeriod_monthly
	case "weekly":
		return SchedulingPeriod_weekly
	case "daily":
		return SchedulingPeriod_daily
	case "hourly":
		return SchedulingPeriod_hourly

	default:
		return 0
	}
}

type SchedulingPeriod_List = capnp.EnumList[SchedulingPeriod]

func NewSchedulingPeriod_List(s *capnp.Segment, sz int32) (SchedulingPeriod_List, error) {
	return capnp.NewEnumList[SchedulingPeriod](s, sz)
}

type UiView capnp.Client

// UiView_TypeID is the unique identifier for the type UiView.
const UiView_TypeID = 0xdbb4d798ea67e2e7

func (c UiView) GetViewInfo(ctx context.Context, params func(UiView_getViewInfo_Params) error) (UiView_ViewInfo_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      0,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "getViewInfo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UiView_getViewInfo_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UiView_ViewInfo_Future{Future: ans.Future()}, release
}
func (c UiView) NewSession(ctx context.Context, params func(UiView_newSession_Params) error) (UiView_newSession_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      1,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newSession",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UiView_newSession_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UiView_newSession_Results_Future{Future: ans.Future()}, release
}
func (c UiView) NewRequestSession(ctx context.Context, params func(UiView_newRequestSession_Params) error) (UiView_newRequestSession_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      2,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newRequestSession",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 5}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UiView_newRequestSession_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UiView_newRequestSession_Results_Future{Future: ans.Future()}, release
}
func (c UiView) NewOfferSession(ctx context.Context, params func(UiView_newOfferSession_Params) error) (UiView_newOfferSession_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      3,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newOfferSession",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 6}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UiView_newOfferSession_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UiView_newOfferSession_Results_Future{Future: ans.Future()}, release
}

func (c UiView) AddRef() UiView {
	return UiView(capnp.Client(c).AddRef())
}

func (c UiView) Release() {
	capnp.Client(c).Release()
}

func (c UiView) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (UiView) DecodeFromPtr(p capnp.Ptr) UiView {
	return UiView(capnp.Client{}.DecodeFromPtr(p))
}

func (c UiView) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A UiView_Server is a UiView with a local implementation.
type UiView_Server interface {
	GetViewInfo(context.Context, UiView_getViewInfo) error

	NewSession(context.Context, UiView_newSession) error

	NewRequestSession(context.Context, UiView_newRequestSession) error

	NewOfferSession(context.Context, UiView_newOfferSession) error
}

// UiView_NewServer creates a new Server from an implementation of UiView_Server.
func UiView_NewServer(s UiView_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(UiView_Methods(nil, s), s, c)
}

// UiView_ServerToClient creates a new Client from an implementation of UiView_Server.
// The caller is responsible for calling Release on the returned Client.
func UiView_ServerToClient(s UiView_Server) UiView {
	return UiView(capnp.NewClient(UiView_NewServer(s)))
}

// UiView_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func UiView_Methods(methods []server.Method, s UiView_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      0,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "getViewInfo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetViewInfo(ctx, UiView_getViewInfo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      1,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newSession",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewSession(ctx, UiView_newSession{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      2,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newRequestSession",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewRequestSession(ctx, UiView_newRequestSession{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      3,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newOfferSession",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewOfferSession(ctx, UiView_newOfferSession{call})
		},
	})

	return methods
}

// UiView_getViewInfo holds the state for a server call to UiView.getViewInfo.
// See server.Call for documentation.
type UiView_getViewInfo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UiView_getViewInfo) Args() UiView_getViewInfo_Params {
	return UiView_getViewInfo_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UiView_getViewInfo) AllocResults() (UiView_ViewInfo, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 8})
	return UiView_ViewInfo(r), err
}

// UiView_newSession holds the state for a server call to UiView.newSession.
// See server.Call for documentation.
type UiView_newSession struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UiView_newSession) Args() UiView_newSession_Params {
	return UiView_newSession_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UiView_newSession) AllocResults() (UiView_newSession_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_newSession_Results(r), err
}

// UiView_newRequestSession holds the state for a server call to UiView.newRequestSession.
// See server.Call for documentation.
type UiView_newRequestSession struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UiView_newRequestSession) Args() UiView_newRequestSession_Params {
	return UiView_newRequestSession_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UiView_newRequestSession) AllocResults() (UiView_newRequestSession_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_newRequestSession_Results(r), err
}

// UiView_newOfferSession holds the state for a server call to UiView.newOfferSession.
// See server.Call for documentation.
type UiView_newOfferSession struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UiView_newOfferSession) Args() UiView_newOfferSession_Params {
	return UiView_newOfferSession_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UiView_newOfferSession) AllocResults() (UiView_newOfferSession_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_newOfferSession_Results(r), err
}

// UiView_List is a list of UiView.
type UiView_List = capnp.CapList[UiView]

// NewUiView creates a new list of UiView.
func NewUiView_List(s *capnp.Segment, sz int32) (UiView_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[UiView](l), err
}

type UiView_ViewInfo capnp.Struct

// UiView_ViewInfo_TypeID is the unique identifier for the type UiView_ViewInfo.
const UiView_ViewInfo_TypeID = 0xbc5e354741a8e665

func NewUiView_ViewInfo(s *capnp.Segment) (UiView_ViewInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 8})
	return UiView_ViewInfo(st), err
}

func NewRootUiView_ViewInfo(s *capnp.Segment) (UiView_ViewInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 8})
	return UiView_ViewInfo(st), err
}

func ReadRootUiView_ViewInfo(msg *capnp.Message) (UiView_ViewInfo, error) {
	root, err := msg.Root()
	return UiView_ViewInfo(root.Struct()), err
}

func (s UiView_ViewInfo) String() string {
	str, _ := text.Marshal(0xbc5e354741a8e665, capnp.Struct(s))
	return str
}

func (s UiView_ViewInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_ViewInfo) DecodeFromPtr(p capnp.Ptr) UiView_ViewInfo {
	return UiView_ViewInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_ViewInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_ViewInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_ViewInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_ViewInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiView_ViewInfo) Permissions() (PermissionDef_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return PermissionDef_List(p.List()), err
}

func (s UiView_ViewInfo) HasPermissions() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiView_ViewInfo) SetPermissions(v PermissionDef_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPermissions sets the permissions field to a newly
// allocated PermissionDef_List, preferring placement in s's segment.
func (s UiView_ViewInfo) NewPermissions(n int32) (PermissionDef_List, error) {
	l, err := NewPermissionDef_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PermissionDef_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

func (s UiView_ViewInfo) Roles() (RoleDef_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return RoleDef_List(p.List()), err
}

func (s UiView_ViewInfo) HasRoles() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UiView_ViewInfo) SetRoles(v RoleDef_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewRoles sets the roles field to a newly
// allocated RoleDef_List, preferring placement in s's segment.
func (s UiView_ViewInfo) NewRoles(n int32) (RoleDef_List, error) {
	l, err := NewRoleDef_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return RoleDef_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

func (s UiView_ViewInfo) DeniedPermissions() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.BitList(p.List()), err
}

func (s UiView_ViewInfo) HasDeniedPermissions() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s UiView_ViewInfo) SetDeniedPermissions(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewDeniedPermissions sets the deniedPermissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s UiView_ViewInfo) NewDeniedPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

func (s UiView_ViewInfo) MatchRequests() (powerbox.PowerboxDescriptor_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return powerbox.PowerboxDescriptor_List(p.List()), err
}

func (s UiView_ViewInfo) HasMatchRequests() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s UiView_ViewInfo) SetMatchRequests(v powerbox.PowerboxDescriptor_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewMatchRequests sets the matchRequests field to a newly
// allocated powerbox.PowerboxDescriptor_List, preferring placement in s's segment.
func (s UiView_ViewInfo) NewMatchRequests(n int32) (powerbox.PowerboxDescriptor_List, error) {
	l, err := powerbox.NewPowerboxDescriptor_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return powerbox.PowerboxDescriptor_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

func (s UiView_ViewInfo) MatchOffers() (powerbox.PowerboxDescriptor_List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return powerbox.PowerboxDescriptor_List(p.List()), err
}

func (s UiView_ViewInfo) HasMatchOffers() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s UiView_ViewInfo) SetMatchOffers(v powerbox.PowerboxDescriptor_List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewMatchOffers sets the matchOffers field to a newly
// allocated powerbox.PowerboxDescriptor_List, preferring placement in s's segment.
func (s UiView_ViewInfo) NewMatchOffers(n int32) (powerbox.PowerboxDescriptor_List, error) {
	l, err := powerbox.NewPowerboxDescriptor_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return powerbox.PowerboxDescriptor_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}

func (s UiView_ViewInfo) AppTitle() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return util.LocalizedText(p.Struct()), err
}

func (s UiView_ViewInfo) HasAppTitle() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s UiView_ViewInfo) SetAppTitle(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewAppTitle sets the appTitle field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s UiView_ViewInfo) NewAppTitle() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s UiView_ViewInfo) GrainIcon() util.StaticAsset {
	p, _ := capnp.Struct(s).Ptr(6)
	return util.StaticAsset(p.Interface().Client())
}

func (s UiView_ViewInfo) HasGrainIcon() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s UiView_ViewInfo) SetGrainIcon(v util.StaticAsset) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(6, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(6, in.ToPtr())
}

func (s UiView_ViewInfo) EventTypes() (activity.ActivityTypeDef_List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return activity.ActivityTypeDef_List(p.List()), err
}

func (s UiView_ViewInfo) HasEventTypes() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s UiView_ViewInfo) SetEventTypes(v activity.ActivityTypeDef_List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewEventTypes sets the eventTypes field to a newly
// allocated activity.ActivityTypeDef_List, preferring placement in s's segment.
func (s UiView_ViewInfo) NewEventTypes(n int32) (activity.ActivityTypeDef_List, error) {
	l, err := activity.NewActivityTypeDef_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return activity.ActivityTypeDef_List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}

// UiView_ViewInfo_List is a list of UiView_ViewInfo.
type UiView_ViewInfo_List = capnp.StructList[UiView_ViewInfo]

// NewUiView_ViewInfo creates a new list of UiView_ViewInfo.
func NewUiView_ViewInfo_List(s *capnp.Segment, sz int32) (UiView_ViewInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 8}, sz)
	return capnp.StructList[UiView_ViewInfo](l), err
}

// UiView_ViewInfo_Future is a wrapper for a UiView_ViewInfo promised by a client call.
type UiView_ViewInfo_Future struct{ *capnp.Future }

func (p UiView_ViewInfo_Future) Struct() (UiView_ViewInfo, error) {
	s, err := p.Future.Struct()
	return UiView_ViewInfo(s), err
}

func (p UiView_ViewInfo_Future) AppTitle() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(5, nil)}
}

func (p UiView_ViewInfo_Future) GrainIcon() util.StaticAsset {
	return util.StaticAsset(p.Future.Field(6, nil).Client())
}

type UiView_PowerboxTag capnp.Struct

// UiView_PowerboxTag_TypeID is the unique identifier for the type UiView_PowerboxTag.
const UiView_PowerboxTag_TypeID = 0x982790c08b1958ec

func NewUiView_PowerboxTag(s *capnp.Segment) (UiView_PowerboxTag, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_PowerboxTag(st), err
}

func NewRootUiView_PowerboxTag(s *capnp.Segment) (UiView_PowerboxTag, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_PowerboxTag(st), err
}

func ReadRootUiView_PowerboxTag(msg *capnp.Message) (UiView_PowerboxTag, error) {
	root, err := msg.Root()
	return UiView_PowerboxTag(root.Struct()), err
}

func (s UiView_PowerboxTag) String() string {
	str, _ := text.Marshal(0x982790c08b1958ec, capnp.Struct(s))
	return str
}

func (s UiView_PowerboxTag) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_PowerboxTag) DecodeFromPtr(p capnp.Ptr) UiView_PowerboxTag {
	return UiView_PowerboxTag(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_PowerboxTag) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_PowerboxTag) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_PowerboxTag) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_PowerboxTag) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiView_PowerboxTag) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UiView_PowerboxTag) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiView_PowerboxTag) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UiView_PowerboxTag) SetTitle(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// UiView_PowerboxTag_List is a list of UiView_PowerboxTag.
type UiView_PowerboxTag_List = capnp.StructList[UiView_PowerboxTag]

// NewUiView_PowerboxTag creates a new list of UiView_PowerboxTag.
func NewUiView_PowerboxTag_List(s *capnp.Segment, sz int32) (UiView_PowerboxTag_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UiView_PowerboxTag](l), err
}

// UiView_PowerboxTag_Future is a wrapper for a UiView_PowerboxTag promised by a client call.
type UiView_PowerboxTag_Future struct{ *capnp.Future }

func (p UiView_PowerboxTag_Future) Struct() (UiView_PowerboxTag, error) {
	s, err := p.Future.Struct()
	return UiView_PowerboxTag(s), err
}

type UiView_getViewInfo_Params capnp.Struct

// UiView_getViewInfo_Params_TypeID is the unique identifier for the type UiView_getViewInfo_Params.
const UiView_getViewInfo_Params_TypeID = 0x8f2ef49549d64e86

func NewUiView_getViewInfo_Params(s *capnp.Segment) (UiView_getViewInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UiView_getViewInfo_Params(st), err
}

func NewRootUiView_getViewInfo_Params(s *capnp.Segment) (UiView_getViewInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UiView_getViewInfo_Params(st), err
}

func ReadRootUiView_getViewInfo_Params(msg *capnp.Message) (UiView_getViewInfo_Params, error) {
	root, err := msg.Root()
	return UiView_getViewInfo_Params(root.Struct()), err
}

func (s UiView_getViewInfo_Params) String() string {
	str, _ := text.Marshal(0x8f2ef49549d64e86, capnp.Struct(s))
	return str
}

func (s UiView_getViewInfo_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_getViewInfo_Params) DecodeFromPtr(p capnp.Ptr) UiView_getViewInfo_Params {
	return UiView_getViewInfo_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_getViewInfo_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_getViewInfo_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_getViewInfo_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_getViewInfo_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// UiView_getViewInfo_Params_List is a list of UiView_getViewInfo_Params.
type UiView_getViewInfo_Params_List = capnp.StructList[UiView_getViewInfo_Params]

// NewUiView_getViewInfo_Params creates a new list of UiView_getViewInfo_Params.
func NewUiView_getViewInfo_Params_List(s *capnp.Segment, sz int32) (UiView_getViewInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[UiView_getViewInfo_Params](l), err
}

// UiView_getViewInfo_Params_Future is a wrapper for a UiView_getViewInfo_Params promised by a client call.
type UiView_getViewInfo_Params_Future struct{ *capnp.Future }

func (p UiView_getViewInfo_Params_Future) Struct() (UiView_getViewInfo_Params, error) {
	s, err := p.Future.Struct()
	return UiView_getViewInfo_Params(s), err
}

type UiView_newSession_Params capnp.Struct

// UiView_newSession_Params_TypeID is the unique identifier for the type UiView_newSession_Params.
const UiView_newSession_Params_TypeID = 0xf87a2c5a9f996828

func NewUiView_newSession_Params(s *capnp.Segment) (UiView_newSession_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return UiView_newSession_Params(st), err
}

func NewRootUiView_newSession_Params(s *capnp.Segment) (UiView_newSession_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return UiView_newSession_Params(st), err
}

func ReadRootUiView_newSession_Params(msg *capnp.Message) (UiView_newSession_Params, error) {
	root, err := msg.Root()
	return UiView_newSession_Params(root.Struct()), err
}

func (s UiView_newSession_Params) String() string {
	str, _ := text.Marshal(0xf87a2c5a9f996828, capnp.Struct(s))
	return str
}

func (s UiView_newSession_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_newSession_Params) DecodeFromPtr(p capnp.Ptr) UiView_newSession_Params {
	return UiView_newSession_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_newSession_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_newSession_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_newSession_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_newSession_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiView_newSession_Params) UserInfo() (identity.UserInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return identity.UserInfo(p.Struct()), err
}

func (s UiView_newSession_Params) HasUserInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiView_newSession_Params) SetUserInfo(v identity.UserInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUserInfo sets the userInfo field to a newly
// allocated identity.UserInfo struct, preferring placement in s's segment.
func (s UiView_newSession_Params) NewUserInfo() (identity.UserInfo, error) {
	ss, err := identity.NewUserInfo(capnp.Struct(s).Segment())
	if err != nil {
		return identity.UserInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s UiView_newSession_Params) Context() SessionContext {
	p, _ := capnp.Struct(s).Ptr(1)
	return SessionContext(p.Interface().Client())
}

func (s UiView_newSession_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UiView_newSession_Params) SetContext(v SessionContext) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

func (s UiView_newSession_Params) SessionType() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s UiView_newSession_Params) SetSessionType(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s UiView_newSession_Params) SessionParams() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(2)
}

func (s UiView_newSession_Params) HasSessionParams() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s UiView_newSession_Params) SetSessionParams(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(2, v)
}

func (s UiView_newSession_Params) TabId() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return []byte(p.Data()), err
}

func (s UiView_newSession_Params) HasTabId() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s UiView_newSession_Params) SetTabId(v []byte) error {
	return capnp.Struct(s).SetData(3, v)
}

// UiView_newSession_Params_List is a list of UiView_newSession_Params.
type UiView_newSession_Params_List = capnp.StructList[UiView_newSession_Params]

// NewUiView_newSession_Params creates a new list of UiView_newSession_Params.
func NewUiView_newSession_Params_List(s *capnp.Segment, sz int32) (UiView_newSession_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[UiView_newSession_Params](l), err
}

// UiView_newSession_Params_Future is a wrapper for a UiView_newSession_Params promised by a client call.
type UiView_newSession_Params_Future struct{ *capnp.Future }

func (p UiView_newSession_Params_Future) Struct() (UiView_newSession_Params, error) {
	s, err := p.Future.Struct()
	return UiView_newSession_Params(s), err
}

func (p UiView_newSession_Params_Future) UserInfo() identity.UserInfo_Future {
	return identity.UserInfo_Future{Future: p.Future.Field(0, nil)}
}

func (p UiView_newSession_Params_Future) Context() SessionContext {
	return SessionContext(p.Future.Field(1, nil).Client())
}

func (p UiView_newSession_Params_Future) SessionParams() *capnp.Future {
	return p.Future.Field(2, nil)
}

type UiView_newSession_Results capnp.Struct

// UiView_newSession_Results_TypeID is the unique identifier for the type UiView_newSession_Results.
const UiView_newSession_Results_TypeID = 0xa8f4ff97289294c7

func NewUiView_newSession_Results(s *capnp.Segment) (UiView_newSession_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_newSession_Results(st), err
}

func NewRootUiView_newSession_Results(s *capnp.Segment) (UiView_newSession_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_newSession_Results(st), err
}

func ReadRootUiView_newSession_Results(msg *capnp.Message) (UiView_newSession_Results, error) {
	root, err := msg.Root()
	return UiView_newSession_Results(root.Struct()), err
}

func (s UiView_newSession_Results) String() string {
	str, _ := text.Marshal(0xa8f4ff97289294c7, capnp.Struct(s))
	return str
}

func (s UiView_newSession_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_newSession_Results) DecodeFromPtr(p capnp.Ptr) UiView_newSession_Results {
	return UiView_newSession_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_newSession_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_newSession_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_newSession_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_newSession_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiView_newSession_Results) Session() UiSession {
	p, _ := capnp.Struct(s).Ptr(0)
	return UiSession(p.Interface().Client())
}

func (s UiView_newSession_Results) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiView_newSession_Results) SetSession(v UiSession) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// UiView_newSession_Results_List is a list of UiView_newSession_Results.
type UiView_newSession_Results_List = capnp.StructList[UiView_newSession_Results]

// NewUiView_newSession_Results creates a new list of UiView_newSession_Results.
func NewUiView_newSession_Results_List(s *capnp.Segment, sz int32) (UiView_newSession_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UiView_newSession_Results](l), err
}

// UiView_newSession_Results_Future is a wrapper for a UiView_newSession_Results promised by a client call.
type UiView_newSession_Results_Future struct{ *capnp.Future }

func (p UiView_newSession_Results_Future) Struct() (UiView_newSession_Results, error) {
	s, err := p.Future.Struct()
	return UiView_newSession_Results(s), err
}

func (p UiView_newSession_Results_Future) Session() UiSession {
	return UiSession(p.Future.Field(0, nil).Client())
}

type UiView_newRequestSession_Params capnp.Struct

// UiView_newRequestSession_Params_TypeID is the unique identifier for the type UiView_newRequestSession_Params.
const UiView_newRequestSession_Params_TypeID = 0xbc193a4219598bcb

func NewUiView_newRequestSession_Params(s *capnp.Segment) (UiView_newRequestSession_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return UiView_newRequestSession_Params(st), err
}

func NewRootUiView_newRequestSession_Params(s *capnp.Segment) (UiView_newRequestSession_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return UiView_newRequestSession_Params(st), err
}

func ReadRootUiView_newRequestSession_Params(msg *capnp.Message) (UiView_newRequestSession_Params, error) {
	root, err := msg.Root()
	return UiView_newRequestSession_Params(root.Struct()), err
}

func (s UiView_newRequestSession_Params) String() string {
	str, _ := text.Marshal(0xbc193a4219598bcb, capnp.Struct(s))
	return str
}

func (s UiView_newRequestSession_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_newRequestSession_Params) DecodeFromPtr(p capnp.Ptr) UiView_newRequestSession_Params {
	return UiView_newRequestSession_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_newRequestSession_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_newRequestSession_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_newRequestSession_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_newRequestSession_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiView_newRequestSession_Params) UserInfo() (identity.UserInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return identity.UserInfo(p.Struct()), err
}

func (s UiView_newRequestSession_Params) HasUserInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiView_newRequestSession_Params) SetUserInfo(v identity.UserInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUserInfo sets the userInfo field to a newly
// allocated identity.UserInfo struct, preferring placement in s's segment.
func (s UiView_newRequestSession_Params) NewUserInfo() (identity.UserInfo, error) {
	ss, err := identity.NewUserInfo(capnp.Struct(s).Segment())
	if err != nil {
		return identity.UserInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s UiView_newRequestSession_Params) Context() SessionContext {
	p, _ := capnp.Struct(s).Ptr(1)
	return SessionContext(p.Interface().Client())
}

func (s UiView_newRequestSession_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UiView_newRequestSession_Params) SetContext(v SessionContext) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

func (s UiView_newRequestSession_Params) SessionType() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s UiView_newRequestSession_Params) SetSessionType(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s UiView_newRequestSession_Params) SessionParams() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(2)
}

func (s UiView_newRequestSession_Params) HasSessionParams() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s UiView_newRequestSession_Params) SetSessionParams(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(2, v)
}

func (s UiView_newRequestSession_Params) RequestInfo() (powerbox.PowerboxDescriptor_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return powerbox.PowerboxDescriptor_List(p.List()), err
}

func (s UiView_newRequestSession_Params) HasRequestInfo() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s UiView_newRequestSession_Params) SetRequestInfo(v powerbox.PowerboxDescriptor_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewRequestInfo sets the requestInfo field to a newly
// allocated powerbox.PowerboxDescriptor_List, preferring placement in s's segment.
func (s UiView_newRequestSession_Params) NewRequestInfo(n int32) (powerbox.PowerboxDescriptor_List, error) {
	l, err := powerbox.NewPowerboxDescriptor_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return powerbox.PowerboxDescriptor_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

func (s UiView_newRequestSession_Params) TabId() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return []byte(p.Data()), err
}

func (s UiView_newRequestSession_Params) HasTabId() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s UiView_newRequestSession_Params) SetTabId(v []byte) error {
	return capnp.Struct(s).SetData(4, v)
}

// UiView_newRequestSession_Params_List is a list of UiView_newRequestSession_Params.
type UiView_newRequestSession_Params_List = capnp.StructList[UiView_newRequestSession_Params]

// NewUiView_newRequestSession_Params creates a new list of UiView_newRequestSession_Params.
func NewUiView_newRequestSession_Params_List(s *capnp.Segment, sz int32) (UiView_newRequestSession_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return capnp.StructList[UiView_newRequestSession_Params](l), err
}

// UiView_newRequestSession_Params_Future is a wrapper for a UiView_newRequestSession_Params promised by a client call.
type UiView_newRequestSession_Params_Future struct{ *capnp.Future }

func (p UiView_newRequestSession_Params_Future) Struct() (UiView_newRequestSession_Params, error) {
	s, err := p.Future.Struct()
	return UiView_newRequestSession_Params(s), err
}

func (p UiView_newRequestSession_Params_Future) UserInfo() identity.UserInfo_Future {
	return identity.UserInfo_Future{Future: p.Future.Field(0, nil)}
}

func (p UiView_newRequestSession_Params_Future) Context() SessionContext {
	return SessionContext(p.Future.Field(1, nil).Client())
}

func (p UiView_newRequestSession_Params_Future) SessionParams() *capnp.Future {
	return p.Future.Field(2, nil)
}

type UiView_newRequestSession_Results capnp.Struct

// UiView_newRequestSession_Results_TypeID is the unique identifier for the type UiView_newRequestSession_Results.
const UiView_newRequestSession_Results_TypeID = 0xa22a2d1cf9579778

func NewUiView_newRequestSession_Results(s *capnp.Segment) (UiView_newRequestSession_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_newRequestSession_Results(st), err
}

func NewRootUiView_newRequestSession_Results(s *capnp.Segment) (UiView_newRequestSession_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_newRequestSession_Results(st), err
}

func ReadRootUiView_newRequestSession_Results(msg *capnp.Message) (UiView_newRequestSession_Results, error) {
	root, err := msg.Root()
	return UiView_newRequestSession_Results(root.Struct()), err
}

func (s UiView_newRequestSession_Results) String() string {
	str, _ := text.Marshal(0xa22a2d1cf9579778, capnp.Struct(s))
	return str
}

func (s UiView_newRequestSession_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_newRequestSession_Results) DecodeFromPtr(p capnp.Ptr) UiView_newRequestSession_Results {
	return UiView_newRequestSession_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_newRequestSession_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_newRequestSession_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_newRequestSession_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_newRequestSession_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiView_newRequestSession_Results) Session() UiSession {
	p, _ := capnp.Struct(s).Ptr(0)
	return UiSession(p.Interface().Client())
}

func (s UiView_newRequestSession_Results) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiView_newRequestSession_Results) SetSession(v UiSession) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// UiView_newRequestSession_Results_List is a list of UiView_newRequestSession_Results.
type UiView_newRequestSession_Results_List = capnp.StructList[UiView_newRequestSession_Results]

// NewUiView_newRequestSession_Results creates a new list of UiView_newRequestSession_Results.
func NewUiView_newRequestSession_Results_List(s *capnp.Segment, sz int32) (UiView_newRequestSession_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UiView_newRequestSession_Results](l), err
}

// UiView_newRequestSession_Results_Future is a wrapper for a UiView_newRequestSession_Results promised by a client call.
type UiView_newRequestSession_Results_Future struct{ *capnp.Future }

func (p UiView_newRequestSession_Results_Future) Struct() (UiView_newRequestSession_Results, error) {
	s, err := p.Future.Struct()
	return UiView_newRequestSession_Results(s), err
}

func (p UiView_newRequestSession_Results_Future) Session() UiSession {
	return UiSession(p.Future.Field(0, nil).Client())
}

type UiView_newOfferSession_Params capnp.Struct

// UiView_newOfferSession_Params_TypeID is the unique identifier for the type UiView_newOfferSession_Params.
const UiView_newOfferSession_Params_TypeID = 0xa53aedb3ce8994df

func NewUiView_newOfferSession_Params(s *capnp.Segment) (UiView_newOfferSession_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return UiView_newOfferSession_Params(st), err
}

func NewRootUiView_newOfferSession_Params(s *capnp.Segment) (UiView_newOfferSession_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return UiView_newOfferSession_Params(st), err
}

func ReadRootUiView_newOfferSession_Params(msg *capnp.Message) (UiView_newOfferSession_Params, error) {
	root, err := msg.Root()
	return UiView_newOfferSession_Params(root.Struct()), err
}

func (s UiView_newOfferSession_Params) String() string {
	str, _ := text.Marshal(0xa53aedb3ce8994df, capnp.Struct(s))
	return str
}

func (s UiView_newOfferSession_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_newOfferSession_Params) DecodeFromPtr(p capnp.Ptr) UiView_newOfferSession_Params {
	return UiView_newOfferSession_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_newOfferSession_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_newOfferSession_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_newOfferSession_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_newOfferSession_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiView_newOfferSession_Params) UserInfo() (identity.UserInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return identity.UserInfo(p.Struct()), err
}

func (s UiView_newOfferSession_Params) HasUserInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiView_newOfferSession_Params) SetUserInfo(v identity.UserInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUserInfo sets the userInfo field to a newly
// allocated identity.UserInfo struct, preferring placement in s's segment.
func (s UiView_newOfferSession_Params) NewUserInfo() (identity.UserInfo, error) {
	ss, err := identity.NewUserInfo(capnp.Struct(s).Segment())
	if err != nil {
		return identity.UserInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s UiView_newOfferSession_Params) Context() SessionContext {
	p, _ := capnp.Struct(s).Ptr(1)
	return SessionContext(p.Interface().Client())
}

func (s UiView_newOfferSession_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UiView_newOfferSession_Params) SetContext(v SessionContext) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

func (s UiView_newOfferSession_Params) SessionType() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s UiView_newOfferSession_Params) SetSessionType(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s UiView_newOfferSession_Params) SessionParams() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(2)
}

func (s UiView_newOfferSession_Params) HasSessionParams() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s UiView_newOfferSession_Params) SetSessionParams(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(2, v)
}

func (s UiView_newOfferSession_Params) Offer() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(3)
	return p.Interface().Client()
}

func (s UiView_newOfferSession_Params) HasOffer() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s UiView_newOfferSession_Params) SetOffer(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(c))
	return capnp.Struct(s).SetPtr(3, in.ToPtr())
}
func (s UiView_newOfferSession_Params) Descriptor() (powerbox.PowerboxDescriptor, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return powerbox.PowerboxDescriptor(p.Struct()), err
}

func (s UiView_newOfferSession_Params) HasDescriptor() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s UiView_newOfferSession_Params) SetDescriptor(v powerbox.PowerboxDescriptor) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewDescriptor sets the descriptor field to a newly
// allocated powerbox.PowerboxDescriptor struct, preferring placement in s's segment.
func (s UiView_newOfferSession_Params) NewDescriptor() (powerbox.PowerboxDescriptor, error) {
	ss, err := powerbox.NewPowerboxDescriptor(capnp.Struct(s).Segment())
	if err != nil {
		return powerbox.PowerboxDescriptor{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s UiView_newOfferSession_Params) TabId() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return []byte(p.Data()), err
}

func (s UiView_newOfferSession_Params) HasTabId() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s UiView_newOfferSession_Params) SetTabId(v []byte) error {
	return capnp.Struct(s).SetData(5, v)
}

// UiView_newOfferSession_Params_List is a list of UiView_newOfferSession_Params.
type UiView_newOfferSession_Params_List = capnp.StructList[UiView_newOfferSession_Params]

// NewUiView_newOfferSession_Params creates a new list of UiView_newOfferSession_Params.
func NewUiView_newOfferSession_Params_List(s *capnp.Segment, sz int32) (UiView_newOfferSession_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6}, sz)
	return capnp.StructList[UiView_newOfferSession_Params](l), err
}

// UiView_newOfferSession_Params_Future is a wrapper for a UiView_newOfferSession_Params promised by a client call.
type UiView_newOfferSession_Params_Future struct{ *capnp.Future }

func (p UiView_newOfferSession_Params_Future) Struct() (UiView_newOfferSession_Params, error) {
	s, err := p.Future.Struct()
	return UiView_newOfferSession_Params(s), err
}

func (p UiView_newOfferSession_Params_Future) UserInfo() identity.UserInfo_Future {
	return identity.UserInfo_Future{Future: p.Future.Field(0, nil)}
}

func (p UiView_newOfferSession_Params_Future) Context() SessionContext {
	return SessionContext(p.Future.Field(1, nil).Client())
}

func (p UiView_newOfferSession_Params_Future) SessionParams() *capnp.Future {
	return p.Future.Field(2, nil)
}

func (p UiView_newOfferSession_Params_Future) Offer() *capnp.Future {
	return p.Future.Field(3, nil)
}

func (p UiView_newOfferSession_Params_Future) Descriptor() powerbox.PowerboxDescriptor_Future {
	return powerbox.PowerboxDescriptor_Future{Future: p.Future.Field(4, nil)}
}

type UiView_newOfferSession_Results capnp.Struct

// UiView_newOfferSession_Results_TypeID is the unique identifier for the type UiView_newOfferSession_Results.
const UiView_newOfferSession_Results_TypeID = 0x9eb6708c01ec2079

func NewUiView_newOfferSession_Results(s *capnp.Segment) (UiView_newOfferSession_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_newOfferSession_Results(st), err
}

func NewRootUiView_newOfferSession_Results(s *capnp.Segment) (UiView_newOfferSession_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UiView_newOfferSession_Results(st), err
}

func ReadRootUiView_newOfferSession_Results(msg *capnp.Message) (UiView_newOfferSession_Results, error) {
	root, err := msg.Root()
	return UiView_newOfferSession_Results(root.Struct()), err
}

func (s UiView_newOfferSession_Results) String() string {
	str, _ := text.Marshal(0x9eb6708c01ec2079, capnp.Struct(s))
	return str
}

func (s UiView_newOfferSession_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiView_newOfferSession_Results) DecodeFromPtr(p capnp.Ptr) UiView_newOfferSession_Results {
	return UiView_newOfferSession_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiView_newOfferSession_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiView_newOfferSession_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiView_newOfferSession_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiView_newOfferSession_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiView_newOfferSession_Results) Session() UiSession {
	p, _ := capnp.Struct(s).Ptr(0)
	return UiSession(p.Interface().Client())
}

func (s UiView_newOfferSession_Results) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiView_newOfferSession_Results) SetSession(v UiSession) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// UiView_newOfferSession_Results_List is a list of UiView_newOfferSession_Results.
type UiView_newOfferSession_Results_List = capnp.StructList[UiView_newOfferSession_Results]

// NewUiView_newOfferSession_Results creates a new list of UiView_newOfferSession_Results.
func NewUiView_newOfferSession_Results_List(s *capnp.Segment, sz int32) (UiView_newOfferSession_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UiView_newOfferSession_Results](l), err
}

// UiView_newOfferSession_Results_Future is a wrapper for a UiView_newOfferSession_Results promised by a client call.
type UiView_newOfferSession_Results_Future struct{ *capnp.Future }

func (p UiView_newOfferSession_Results_Future) Struct() (UiView_newOfferSession_Results, error) {
	s, err := p.Future.Struct()
	return UiView_newOfferSession_Results(s), err
}

func (p UiView_newOfferSession_Results_Future) Session() UiSession {
	return UiSession(p.Future.Field(0, nil).Client())
}

type UiSession capnp.Client

// UiSession_TypeID is the unique identifier for the type UiSession.
const UiSession_TypeID = 0xf63241ee58b5166f

func (c UiSession) AddRef() UiSession {
	return UiSession(capnp.Client(c).AddRef())
}

func (c UiSession) Release() {
	capnp.Client(c).Release()
}

func (c UiSession) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (UiSession) DecodeFromPtr(p capnp.Ptr) UiSession {
	return UiSession(capnp.Client{}.DecodeFromPtr(p))
}

func (c UiSession) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A UiSession_Server is a UiSession with a local implementation.
type UiSession_Server interface {
}

// UiSession_NewServer creates a new Server from an implementation of UiSession_Server.
func UiSession_NewServer(s UiSession_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(UiSession_Methods(nil, s), s, c)
}

// UiSession_ServerToClient creates a new Client from an implementation of UiSession_Server.
// The caller is responsible for calling Release on the returned Client.
func UiSession_ServerToClient(s UiSession_Server) UiSession {
	return UiSession(capnp.NewClient(UiSession_NewServer(s)))
}

// UiSession_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func UiSession_Methods(methods []server.Method, s UiSession_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 0)
	}

	return methods
}

// UiSession_List is a list of UiSession.
type UiSession_List = capnp.CapList[UiSession]

// NewUiSession creates a new list of UiSession.
func NewUiSession_List(s *capnp.Segment, sz int32) (UiSession_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[UiSession](l), err
}

type SessionContext capnp.Client

// SessionContext_TypeID is the unique identifier for the type SessionContext.
const SessionContext_TypeID = 0xbf3e401d5a63f336

func (c SessionContext) GetSharedPermissions(ctx context.Context, params func(SessionContext_getSharedPermissions_Params) error) (SessionContext_getSharedPermissions_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      0,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "getSharedPermissions",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SessionContext_getSharedPermissions_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SessionContext_getSharedPermissions_Results_Future{Future: ans.Future()}, release
}
func (c SessionContext) TieToUser(ctx context.Context, params func(SessionContext_tieToUser_Params) error) (SessionContext_tieToUser_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      1,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "tieToUser",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SessionContext_tieToUser_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SessionContext_tieToUser_Results_Future{Future: ans.Future()}, release
}
func (c SessionContext) Offer(ctx context.Context, params func(SessionContext_offer_Params) error) (SessionContext_offer_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      2,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "offer",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SessionContext_offer_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SessionContext_offer_Results_Future{Future: ans.Future()}, release
}
func (c SessionContext) Request(ctx context.Context, params func(SessionContext_request_Params) error) (SessionContext_request_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      3,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "request",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SessionContext_request_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SessionContext_request_Results_Future{Future: ans.Future()}, release
}
func (c SessionContext) FulfillRequest(ctx context.Context, params func(SessionContext_fulfillRequest_Params) error) (SessionContext_fulfillRequest_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      4,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "fulfillRequest",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SessionContext_fulfillRequest_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SessionContext_fulfillRequest_Results_Future{Future: ans.Future()}, release
}
func (c SessionContext) Close(ctx context.Context, params func(SessionContext_close_Params) error) (SessionContext_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      5,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SessionContext_close_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SessionContext_close_Results_Future{Future: ans.Future()}, release
}
func (c SessionContext) OpenView(ctx context.Context, params func(SessionContext_openView_Params) error) (SessionContext_openView_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      6,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "openView",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SessionContext_openView_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SessionContext_openView_Results_Future{Future: ans.Future()}, release
}
func (c SessionContext) ClaimRequest(ctx context.Context, params func(SessionContext_claimRequest_Params) error) (SessionContext_claimRequest_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      7,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "claimRequest",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SessionContext_claimRequest_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SessionContext_claimRequest_Results_Future{Future: ans.Future()}, release
}
func (c SessionContext) Activity(ctx context.Context, params func(SessionContext_activity_Params) error) (SessionContext_activity_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      8,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "activity",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SessionContext_activity_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SessionContext_activity_Results_Future{Future: ans.Future()}, release
}

func (c SessionContext) AddRef() SessionContext {
	return SessionContext(capnp.Client(c).AddRef())
}

func (c SessionContext) Release() {
	capnp.Client(c).Release()
}

func (c SessionContext) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (SessionContext) DecodeFromPtr(p capnp.Ptr) SessionContext {
	return SessionContext(capnp.Client{}.DecodeFromPtr(p))
}

func (c SessionContext) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A SessionContext_Server is a SessionContext with a local implementation.
type SessionContext_Server interface {
	GetSharedPermissions(context.Context, SessionContext_getSharedPermissions) error

	TieToUser(context.Context, SessionContext_tieToUser) error

	Offer(context.Context, SessionContext_offer) error

	Request(context.Context, SessionContext_request) error

	FulfillRequest(context.Context, SessionContext_fulfillRequest) error

	Close(context.Context, SessionContext_close) error

	OpenView(context.Context, SessionContext_openView) error

	ClaimRequest(context.Context, SessionContext_claimRequest) error

	Activity(context.Context, SessionContext_activity) error
}

// SessionContext_NewServer creates a new Server from an implementation of SessionContext_Server.
func SessionContext_NewServer(s SessionContext_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(SessionContext_Methods(nil, s), s, c)
}

// SessionContext_ServerToClient creates a new Client from an implementation of SessionContext_Server.
// The caller is responsible for calling Release on the returned Client.
func SessionContext_ServerToClient(s SessionContext_Server) SessionContext {
	return SessionContext(capnp.NewClient(SessionContext_NewServer(s)))
}

// SessionContext_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func SessionContext_Methods(methods []server.Method, s SessionContext_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 9)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      0,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "getSharedPermissions",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetSharedPermissions(ctx, SessionContext_getSharedPermissions{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      1,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "tieToUser",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.TieToUser(ctx, SessionContext_tieToUser{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      2,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "offer",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Offer(ctx, SessionContext_offer{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      3,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "request",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Request(ctx, SessionContext_request{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      4,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "fulfillRequest",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.FulfillRequest(ctx, SessionContext_fulfillRequest{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      5,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, SessionContext_close{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      6,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "openView",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.OpenView(ctx, SessionContext_openView{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      7,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "claimRequest",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ClaimRequest(ctx, SessionContext_claimRequest{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3e401d5a63f336,
			MethodID:      8,
			InterfaceName: "grain.capnp:SessionContext",
			MethodName:    "activity",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Activity(ctx, SessionContext_activity{call})
		},
	})

	return methods
}

// SessionContext_getSharedPermissions holds the state for a server call to SessionContext.getSharedPermissions.
// See server.Call for documentation.
type SessionContext_getSharedPermissions struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SessionContext_getSharedPermissions) Args() SessionContext_getSharedPermissions_Params {
	return SessionContext_getSharedPermissions_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SessionContext_getSharedPermissions) AllocResults() (SessionContext_getSharedPermissions_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_getSharedPermissions_Results(r), err
}

// SessionContext_tieToUser holds the state for a server call to SessionContext.tieToUser.
// See server.Call for documentation.
type SessionContext_tieToUser struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SessionContext_tieToUser) Args() SessionContext_tieToUser_Params {
	return SessionContext_tieToUser_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SessionContext_tieToUser) AllocResults() (SessionContext_tieToUser_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_tieToUser_Results(r), err
}

// SessionContext_offer holds the state for a server call to SessionContext.offer.
// See server.Call for documentation.
type SessionContext_offer struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SessionContext_offer) Args() SessionContext_offer_Params {
	return SessionContext_offer_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SessionContext_offer) AllocResults() (SessionContext_offer_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_offer_Results(r), err
}

// SessionContext_request holds the state for a server call to SessionContext.request.
// See server.Call for documentation.
type SessionContext_request struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SessionContext_request) Args() SessionContext_request_Params {
	return SessionContext_request_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SessionContext_request) AllocResults() (SessionContext_request_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SessionContext_request_Results(r), err
}

// SessionContext_fulfillRequest holds the state for a server call to SessionContext.fulfillRequest.
// See server.Call for documentation.
type SessionContext_fulfillRequest struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SessionContext_fulfillRequest) Args() SessionContext_fulfillRequest_Params {
	return SessionContext_fulfillRequest_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SessionContext_fulfillRequest) AllocResults() (SessionContext_fulfillRequest_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_fulfillRequest_Results(r), err
}

// SessionContext_close holds the state for a server call to SessionContext.close.
// See server.Call for documentation.
type SessionContext_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SessionContext_close) Args() SessionContext_close_Params {
	return SessionContext_close_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SessionContext_close) AllocResults() (SessionContext_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_close_Results(r), err
}

// SessionContext_openView holds the state for a server call to SessionContext.openView.
// See server.Call for documentation.
type SessionContext_openView struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SessionContext_openView) Args() SessionContext_openView_Params {
	return SessionContext_openView_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SessionContext_openView) AllocResults() (SessionContext_openView_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_openView_Results(r), err
}

// SessionContext_claimRequest holds the state for a server call to SessionContext.claimRequest.
// See server.Call for documentation.
type SessionContext_claimRequest struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SessionContext_claimRequest) Args() SessionContext_claimRequest_Params {
	return SessionContext_claimRequest_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SessionContext_claimRequest) AllocResults() (SessionContext_claimRequest_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_claimRequest_Results(r), err
}

// SessionContext_activity holds the state for a server call to SessionContext.activity.
// See server.Call for documentation.
type SessionContext_activity struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SessionContext_activity) Args() SessionContext_activity_Params {
	return SessionContext_activity_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SessionContext_activity) AllocResults() (SessionContext_activity_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_activity_Results(r), err
}

// SessionContext_List is a list of SessionContext.
type SessionContext_List = capnp.CapList[SessionContext]

// NewSessionContext creates a new list of SessionContext.
func NewSessionContext_List(s *capnp.Segment, sz int32) (SessionContext_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[SessionContext](l), err
}

type SessionContext_getSharedPermissions_Params capnp.Struct

// SessionContext_getSharedPermissions_Params_TypeID is the unique identifier for the type SessionContext_getSharedPermissions_Params.
const SessionContext_getSharedPermissions_Params_TypeID = 0xe96859cf77da6e6b

func NewSessionContext_getSharedPermissions_Params(s *capnp.Segment) (SessionContext_getSharedPermissions_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_getSharedPermissions_Params(st), err
}

func NewRootSessionContext_getSharedPermissions_Params(s *capnp.Segment) (SessionContext_getSharedPermissions_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_getSharedPermissions_Params(st), err
}

func ReadRootSessionContext_getSharedPermissions_Params(msg *capnp.Message) (SessionContext_getSharedPermissions_Params, error) {
	root, err := msg.Root()
	return SessionContext_getSharedPermissions_Params(root.Struct()), err
}

func (s SessionContext_getSharedPermissions_Params) String() string {
	str, _ := text.Marshal(0xe96859cf77da6e6b, capnp.Struct(s))
	return str
}

func (s SessionContext_getSharedPermissions_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_getSharedPermissions_Params) DecodeFromPtr(p capnp.Ptr) SessionContext_getSharedPermissions_Params {
	return SessionContext_getSharedPermissions_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_getSharedPermissions_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_getSharedPermissions_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_getSharedPermissions_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_getSharedPermissions_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SessionContext_getSharedPermissions_Params_List is a list of SessionContext_getSharedPermissions_Params.
type SessionContext_getSharedPermissions_Params_List = capnp.StructList[SessionContext_getSharedPermissions_Params]

// NewSessionContext_getSharedPermissions_Params creates a new list of SessionContext_getSharedPermissions_Params.
func NewSessionContext_getSharedPermissions_Params_List(s *capnp.Segment, sz int32) (SessionContext_getSharedPermissions_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SessionContext_getSharedPermissions_Params](l), err
}

// SessionContext_getSharedPermissions_Params_Future is a wrapper for a SessionContext_getSharedPermissions_Params promised by a client call.
type SessionContext_getSharedPermissions_Params_Future struct{ *capnp.Future }

func (p SessionContext_getSharedPermissions_Params_Future) Struct() (SessionContext_getSharedPermissions_Params, error) {
	s, err := p.Future.Struct()
	return SessionContext_getSharedPermissions_Params(s), err
}

type SessionContext_getSharedPermissions_Results capnp.Struct

// SessionContext_getSharedPermissions_Results_TypeID is the unique identifier for the type SessionContext_getSharedPermissions_Results.
const SessionContext_getSharedPermissions_Results_TypeID = 0xb70bd877cecb7b88

func NewSessionContext_getSharedPermissions_Results(s *capnp.Segment) (SessionContext_getSharedPermissions_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_getSharedPermissions_Results(st), err
}

func NewRootSessionContext_getSharedPermissions_Results(s *capnp.Segment) (SessionContext_getSharedPermissions_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_getSharedPermissions_Results(st), err
}

func ReadRootSessionContext_getSharedPermissions_Results(msg *capnp.Message) (SessionContext_getSharedPermissions_Results, error) {
	root, err := msg.Root()
	return SessionContext_getSharedPermissions_Results(root.Struct()), err
}

func (s SessionContext_getSharedPermissions_Results) String() string {
	str, _ := text.Marshal(0xb70bd877cecb7b88, capnp.Struct(s))
	return str
}

func (s SessionContext_getSharedPermissions_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_getSharedPermissions_Results) DecodeFromPtr(p capnp.Ptr) SessionContext_getSharedPermissions_Results {
	return SessionContext_getSharedPermissions_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_getSharedPermissions_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_getSharedPermissions_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_getSharedPermissions_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_getSharedPermissions_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_getSharedPermissions_Results) Var() util.Assignable_Getter {
	p, _ := capnp.Struct(s).Ptr(0)
	return util.Assignable_Getter(p.Interface().Client())
}

func (s SessionContext_getSharedPermissions_Results) HasVar() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_getSharedPermissions_Results) SetVar(v util.Assignable_Getter) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// SessionContext_getSharedPermissions_Results_List is a list of SessionContext_getSharedPermissions_Results.
type SessionContext_getSharedPermissions_Results_List = capnp.StructList[SessionContext_getSharedPermissions_Results]

// NewSessionContext_getSharedPermissions_Results creates a new list of SessionContext_getSharedPermissions_Results.
func NewSessionContext_getSharedPermissions_Results_List(s *capnp.Segment, sz int32) (SessionContext_getSharedPermissions_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SessionContext_getSharedPermissions_Results](l), err
}

// SessionContext_getSharedPermissions_Results_Future is a wrapper for a SessionContext_getSharedPermissions_Results promised by a client call.
type SessionContext_getSharedPermissions_Results_Future struct{ *capnp.Future }

func (p SessionContext_getSharedPermissions_Results_Future) Struct() (SessionContext_getSharedPermissions_Results, error) {
	s, err := p.Future.Struct()
	return SessionContext_getSharedPermissions_Results(s), err
}

func (p SessionContext_getSharedPermissions_Results_Future) Var() util.Assignable_Getter {
	return util.Assignable_Getter(p.Future.Field(0, nil).Client())
}

type SessionContext_tieToUser_Params capnp.Struct

// SessionContext_tieToUser_Params_TypeID is the unique identifier for the type SessionContext_tieToUser_Params.
const SessionContext_tieToUser_Params_TypeID = 0xc41e71e8d893086c

func NewSessionContext_tieToUser_Params(s *capnp.Segment) (SessionContext_tieToUser_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return SessionContext_tieToUser_Params(st), err
}

func NewRootSessionContext_tieToUser_Params(s *capnp.Segment) (SessionContext_tieToUser_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return SessionContext_tieToUser_Params(st), err
}

func ReadRootSessionContext_tieToUser_Params(msg *capnp.Message) (SessionContext_tieToUser_Params, error) {
	root, err := msg.Root()
	return SessionContext_tieToUser_Params(root.Struct()), err
}

func (s SessionContext_tieToUser_Params) String() string {
	str, _ := text.Marshal(0xc41e71e8d893086c, capnp.Struct(s))
	return str
}

func (s SessionContext_tieToUser_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_tieToUser_Params) DecodeFromPtr(p capnp.Ptr) SessionContext_tieToUser_Params {
	return SessionContext_tieToUser_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_tieToUser_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_tieToUser_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_tieToUser_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_tieToUser_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_tieToUser_Params) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s SessionContext_tieToUser_Params) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_tieToUser_Params) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}
func (s SessionContext_tieToUser_Params) RequiredPermissions() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.BitList(p.List()), err
}

func (s SessionContext_tieToUser_Params) HasRequiredPermissions() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SessionContext_tieToUser_Params) SetRequiredPermissions(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewRequiredPermissions sets the requiredPermissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s SessionContext_tieToUser_Params) NewRequiredPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

func (s SessionContext_tieToUser_Params) DisplayInfo() (powerbox.PowerboxDisplayInfo, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return powerbox.PowerboxDisplayInfo(p.Struct()), err
}

func (s SessionContext_tieToUser_Params) HasDisplayInfo() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SessionContext_tieToUser_Params) SetDisplayInfo(v powerbox.PowerboxDisplayInfo) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewDisplayInfo sets the displayInfo field to a newly
// allocated powerbox.PowerboxDisplayInfo struct, preferring placement in s's segment.
func (s SessionContext_tieToUser_Params) NewDisplayInfo() (powerbox.PowerboxDisplayInfo, error) {
	ss, err := powerbox.NewPowerboxDisplayInfo(capnp.Struct(s).Segment())
	if err != nil {
		return powerbox.PowerboxDisplayInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SessionContext_tieToUser_Params_List is a list of SessionContext_tieToUser_Params.
type SessionContext_tieToUser_Params_List = capnp.StructList[SessionContext_tieToUser_Params]

// NewSessionContext_tieToUser_Params creates a new list of SessionContext_tieToUser_Params.
func NewSessionContext_tieToUser_Params_List(s *capnp.Segment, sz int32) (SessionContext_tieToUser_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[SessionContext_tieToUser_Params](l), err
}

// SessionContext_tieToUser_Params_Future is a wrapper for a SessionContext_tieToUser_Params promised by a client call.
type SessionContext_tieToUser_Params_Future struct{ *capnp.Future }

func (p SessionContext_tieToUser_Params_Future) Struct() (SessionContext_tieToUser_Params, error) {
	s, err := p.Future.Struct()
	return SessionContext_tieToUser_Params(s), err
}

func (p SessionContext_tieToUser_Params_Future) Cap() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p SessionContext_tieToUser_Params_Future) DisplayInfo() powerbox.PowerboxDisplayInfo_Future {
	return powerbox.PowerboxDisplayInfo_Future{Future: p.Future.Field(2, nil)}
}

type SessionContext_tieToUser_Results capnp.Struct

// SessionContext_tieToUser_Results_TypeID is the unique identifier for the type SessionContext_tieToUser_Results.
const SessionContext_tieToUser_Results_TypeID = 0xf6f911c4804ba7e5

func NewSessionContext_tieToUser_Results(s *capnp.Segment) (SessionContext_tieToUser_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_tieToUser_Results(st), err
}

func NewRootSessionContext_tieToUser_Results(s *capnp.Segment) (SessionContext_tieToUser_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_tieToUser_Results(st), err
}

func ReadRootSessionContext_tieToUser_Results(msg *capnp.Message) (SessionContext_tieToUser_Results, error) {
	root, err := msg.Root()
	return SessionContext_tieToUser_Results(root.Struct()), err
}

func (s SessionContext_tieToUser_Results) String() string {
	str, _ := text.Marshal(0xf6f911c4804ba7e5, capnp.Struct(s))
	return str
}

func (s SessionContext_tieToUser_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_tieToUser_Results) DecodeFromPtr(p capnp.Ptr) SessionContext_tieToUser_Results {
	return SessionContext_tieToUser_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_tieToUser_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_tieToUser_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_tieToUser_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_tieToUser_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_tieToUser_Results) TiedCap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s SessionContext_tieToUser_Results) HasTiedCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_tieToUser_Results) SetTiedCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// SessionContext_tieToUser_Results_List is a list of SessionContext_tieToUser_Results.
type SessionContext_tieToUser_Results_List = capnp.StructList[SessionContext_tieToUser_Results]

// NewSessionContext_tieToUser_Results creates a new list of SessionContext_tieToUser_Results.
func NewSessionContext_tieToUser_Results_List(s *capnp.Segment, sz int32) (SessionContext_tieToUser_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SessionContext_tieToUser_Results](l), err
}

// SessionContext_tieToUser_Results_Future is a wrapper for a SessionContext_tieToUser_Results promised by a client call.
type SessionContext_tieToUser_Results_Future struct{ *capnp.Future }

func (p SessionContext_tieToUser_Results_Future) Struct() (SessionContext_tieToUser_Results, error) {
	s, err := p.Future.Struct()
	return SessionContext_tieToUser_Results(s), err
}

func (p SessionContext_tieToUser_Results_Future) TiedCap() *capnp.Future {
	return p.Future.Field(0, nil)
}

type SessionContext_offer_Params capnp.Struct

// SessionContext_offer_Params_TypeID is the unique identifier for the type SessionContext_offer_Params.
const SessionContext_offer_Params_TypeID = 0xfb3d38da0c9eaee6

func NewSessionContext_offer_Params(s *capnp.Segment) (SessionContext_offer_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return SessionContext_offer_Params(st), err
}

func NewRootSessionContext_offer_Params(s *capnp.Segment) (SessionContext_offer_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return SessionContext_offer_Params(st), err
}

func ReadRootSessionContext_offer_Params(msg *capnp.Message) (SessionContext_offer_Params, error) {
	root, err := msg.Root()
	return SessionContext_offer_Params(root.Struct()), err
}

func (s SessionContext_offer_Params) String() string {
	str, _ := text.Marshal(0xfb3d38da0c9eaee6, capnp.Struct(s))
	return str
}

func (s SessionContext_offer_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_offer_Params) DecodeFromPtr(p capnp.Ptr) SessionContext_offer_Params {
	return SessionContext_offer_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_offer_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_offer_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_offer_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_offer_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_offer_Params) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s SessionContext_offer_Params) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_offer_Params) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}
func (s SessionContext_offer_Params) RequiredPermissions() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.BitList(p.List()), err
}

func (s SessionContext_offer_Params) HasRequiredPermissions() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SessionContext_offer_Params) SetRequiredPermissions(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewRequiredPermissions sets the requiredPermissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s SessionContext_offer_Params) NewRequiredPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

func (s SessionContext_offer_Params) Descriptor() (powerbox.PowerboxDescriptor, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return powerbox.PowerboxDescriptor(p.Struct()), err
}

func (s SessionContext_offer_Params) HasDescriptor() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SessionContext_offer_Params) SetDescriptor(v powerbox.PowerboxDescriptor) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewDescriptor sets the descriptor field to a newly
// allocated powerbox.PowerboxDescriptor struct, preferring placement in s's segment.
func (s SessionContext_offer_Params) NewDescriptor() (powerbox.PowerboxDescriptor, error) {
	ss, err := powerbox.NewPowerboxDescriptor(capnp.Struct(s).Segment())
	if err != nil {
		return powerbox.PowerboxDescriptor{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SessionContext_offer_Params) DisplayInfo() (powerbox.PowerboxDisplayInfo, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return powerbox.PowerboxDisplayInfo(p.Struct()), err
}

func (s SessionContext_offer_Params) HasDisplayInfo() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SessionContext_offer_Params) SetDisplayInfo(v powerbox.PowerboxDisplayInfo) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewDisplayInfo sets the displayInfo field to a newly
// allocated powerbox.PowerboxDisplayInfo struct, preferring placement in s's segment.
func (s SessionContext_offer_Params) NewDisplayInfo() (powerbox.PowerboxDisplayInfo, error) {
	ss, err := powerbox.NewPowerboxDisplayInfo(capnp.Struct(s).Segment())
	if err != nil {
		return powerbox.PowerboxDisplayInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SessionContext_offer_Params_List is a list of SessionContext_offer_Params.
type SessionContext_offer_Params_List = capnp.StructList[SessionContext_offer_Params]

// NewSessionContext_offer_Params creates a new list of SessionContext_offer_Params.
func NewSessionContext_offer_Params_List(s *capnp.Segment, sz int32) (SessionContext_offer_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[SessionContext_offer_Params](l), err
}

// SessionContext_offer_Params_Future is a wrapper for a SessionContext_offer_Params promised by a client call.
type SessionContext_offer_Params_Future struct{ *capnp.Future }

func (p SessionContext_offer_Params_Future) Struct() (SessionContext_offer_Params, error) {
	s, err := p.Future.Struct()
	return SessionContext_offer_Params(s), err
}

func (p SessionContext_offer_Params_Future) Cap() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p SessionContext_offer_Params_Future) Descriptor() powerbox.PowerboxDescriptor_Future {
	return powerbox.PowerboxDescriptor_Future{Future: p.Future.Field(2, nil)}
}

func (p SessionContext_offer_Params_Future) DisplayInfo() powerbox.PowerboxDisplayInfo_Future {
	return powerbox.PowerboxDisplayInfo_Future{Future: p.Future.Field(3, nil)}
}

type SessionContext_offer_Results capnp.Struct

// SessionContext_offer_Results_TypeID is the unique identifier for the type SessionContext_offer_Results.
const SessionContext_offer_Results_TypeID = 0xfe7135f15d39bd5b

func NewSessionContext_offer_Results(s *capnp.Segment) (SessionContext_offer_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_offer_Results(st), err
}

func NewRootSessionContext_offer_Results(s *capnp.Segment) (SessionContext_offer_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_offer_Results(st), err
}

func ReadRootSessionContext_offer_Results(msg *capnp.Message) (SessionContext_offer_Results, error) {
	root, err := msg.Root()
	return SessionContext_offer_Results(root.Struct()), err
}

func (s SessionContext_offer_Results) String() string {
	str, _ := text.Marshal(0xfe7135f15d39bd5b, capnp.Struct(s))
	return str
}

func (s SessionContext_offer_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_offer_Results) DecodeFromPtr(p capnp.Ptr) SessionContext_offer_Results {
	return SessionContext_offer_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_offer_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_offer_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_offer_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_offer_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SessionContext_offer_Results_List is a list of SessionContext_offer_Results.
type SessionContext_offer_Results_List = capnp.StructList[SessionContext_offer_Results]

// NewSessionContext_offer_Results creates a new list of SessionContext_offer_Results.
func NewSessionContext_offer_Results_List(s *capnp.Segment, sz int32) (SessionContext_offer_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SessionContext_offer_Results](l), err
}

// SessionContext_offer_Results_Future is a wrapper for a SessionContext_offer_Results promised by a client call.
type SessionContext_offer_Results_Future struct{ *capnp.Future }

func (p SessionContext_offer_Results_Future) Struct() (SessionContext_offer_Results, error) {
	s, err := p.Future.Struct()
	return SessionContext_offer_Results(s), err
}

type SessionContext_request_Params capnp.Struct

// SessionContext_request_Params_TypeID is the unique identifier for the type SessionContext_request_Params.
const SessionContext_request_Params_TypeID = 0xf63b8546288ee8e1

func NewSessionContext_request_Params(s *capnp.Segment) (SessionContext_request_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SessionContext_request_Params(st), err
}

func NewRootSessionContext_request_Params(s *capnp.Segment) (SessionContext_request_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SessionContext_request_Params(st), err
}

func ReadRootSessionContext_request_Params(msg *capnp.Message) (SessionContext_request_Params, error) {
	root, err := msg.Root()
	return SessionContext_request_Params(root.Struct()), err
}

func (s SessionContext_request_Params) String() string {
	str, _ := text.Marshal(0xf63b8546288ee8e1, capnp.Struct(s))
	return str
}

func (s SessionContext_request_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_request_Params) DecodeFromPtr(p capnp.Ptr) SessionContext_request_Params {
	return SessionContext_request_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_request_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_request_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_request_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_request_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_request_Params) Query() (powerbox.PowerboxDescriptor_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return powerbox.PowerboxDescriptor_List(p.List()), err
}

func (s SessionContext_request_Params) HasQuery() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_request_Params) SetQuery(v powerbox.PowerboxDescriptor_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewQuery sets the query field to a newly
// allocated powerbox.PowerboxDescriptor_List, preferring placement in s's segment.
func (s SessionContext_request_Params) NewQuery(n int32) (powerbox.PowerboxDescriptor_List, error) {
	l, err := powerbox.NewPowerboxDescriptor_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return powerbox.PowerboxDescriptor_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

func (s SessionContext_request_Params) RequiredPermissions() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.BitList(p.List()), err
}

func (s SessionContext_request_Params) HasRequiredPermissions() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SessionContext_request_Params) SetRequiredPermissions(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewRequiredPermissions sets the requiredPermissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s SessionContext_request_Params) NewRequiredPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// SessionContext_request_Params_List is a list of SessionContext_request_Params.
type SessionContext_request_Params_List = capnp.StructList[SessionContext_request_Params]

// NewSessionContext_request_Params creates a new list of SessionContext_request_Params.
func NewSessionContext_request_Params_List(s *capnp.Segment, sz int32) (SessionContext_request_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SessionContext_request_Params](l), err
}

// SessionContext_request_Params_Future is a wrapper for a SessionContext_request_Params promised by a client call.
type SessionContext_request_Params_Future struct{ *capnp.Future }

func (p SessionContext_request_Params_Future) Struct() (SessionContext_request_Params, error) {
	s, err := p.Future.Struct()
	return SessionContext_request_Params(s), err
}

type SessionContext_request_Results capnp.Struct

// SessionContext_request_Results_TypeID is the unique identifier for the type SessionContext_request_Results.
const SessionContext_request_Results_TypeID = 0xd42684f756e09afd

func NewSessionContext_request_Results(s *capnp.Segment) (SessionContext_request_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SessionContext_request_Results(st), err
}

func NewRootSessionContext_request_Results(s *capnp.Segment) (SessionContext_request_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SessionContext_request_Results(st), err
}

func ReadRootSessionContext_request_Results(msg *capnp.Message) (SessionContext_request_Results, error) {
	root, err := msg.Root()
	return SessionContext_request_Results(root.Struct()), err
}

func (s SessionContext_request_Results) String() string {
	str, _ := text.Marshal(0xd42684f756e09afd, capnp.Struct(s))
	return str
}

func (s SessionContext_request_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_request_Results) DecodeFromPtr(p capnp.Ptr) SessionContext_request_Results {
	return SessionContext_request_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_request_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_request_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_request_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_request_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_request_Results) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s SessionContext_request_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_request_Results) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}
func (s SessionContext_request_Results) Descriptor() (powerbox.PowerboxDescriptor, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return powerbox.PowerboxDescriptor(p.Struct()), err
}

func (s SessionContext_request_Results) HasDescriptor() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SessionContext_request_Results) SetDescriptor(v powerbox.PowerboxDescriptor) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewDescriptor sets the descriptor field to a newly
// allocated powerbox.PowerboxDescriptor struct, preferring placement in s's segment.
func (s SessionContext_request_Results) NewDescriptor() (powerbox.PowerboxDescriptor, error) {
	ss, err := powerbox.NewPowerboxDescriptor(capnp.Struct(s).Segment())
	if err != nil {
		return powerbox.PowerboxDescriptor{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SessionContext_request_Results_List is a list of SessionContext_request_Results.
type SessionContext_request_Results_List = capnp.StructList[SessionContext_request_Results]

// NewSessionContext_request_Results creates a new list of SessionContext_request_Results.
func NewSessionContext_request_Results_List(s *capnp.Segment, sz int32) (SessionContext_request_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SessionContext_request_Results](l), err
}

// SessionContext_request_Results_Future is a wrapper for a SessionContext_request_Results promised by a client call.
type SessionContext_request_Results_Future struct{ *capnp.Future }

func (p SessionContext_request_Results_Future) Struct() (SessionContext_request_Results, error) {
	s, err := p.Future.Struct()
	return SessionContext_request_Results(s), err
}

func (p SessionContext_request_Results_Future) Cap() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p SessionContext_request_Results_Future) Descriptor() powerbox.PowerboxDescriptor_Future {
	return powerbox.PowerboxDescriptor_Future{Future: p.Future.Field(1, nil)}
}

type SessionContext_fulfillRequest_Params capnp.Struct

// SessionContext_fulfillRequest_Params_TypeID is the unique identifier for the type SessionContext_fulfillRequest_Params.
const SessionContext_fulfillRequest_Params_TypeID = 0x9f6c36ef490dfd92

func NewSessionContext_fulfillRequest_Params(s *capnp.Segment) (SessionContext_fulfillRequest_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return SessionContext_fulfillRequest_Params(st), err
}

func NewRootSessionContext_fulfillRequest_Params(s *capnp.Segment) (SessionContext_fulfillRequest_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return SessionContext_fulfillRequest_Params(st), err
}

func ReadRootSessionContext_fulfillRequest_Params(msg *capnp.Message) (SessionContext_fulfillRequest_Params, error) {
	root, err := msg.Root()
	return SessionContext_fulfillRequest_Params(root.Struct()), err
}

func (s SessionContext_fulfillRequest_Params) String() string {
	str, _ := text.Marshal(0x9f6c36ef490dfd92, capnp.Struct(s))
	return str
}

func (s SessionContext_fulfillRequest_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_fulfillRequest_Params) DecodeFromPtr(p capnp.Ptr) SessionContext_fulfillRequest_Params {
	return SessionContext_fulfillRequest_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_fulfillRequest_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_fulfillRequest_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_fulfillRequest_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_fulfillRequest_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_fulfillRequest_Params) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s SessionContext_fulfillRequest_Params) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_fulfillRequest_Params) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}
func (s SessionContext_fulfillRequest_Params) RequiredPermissions() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.BitList(p.List()), err
}

func (s SessionContext_fulfillRequest_Params) HasRequiredPermissions() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SessionContext_fulfillRequest_Params) SetRequiredPermissions(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewRequiredPermissions sets the requiredPermissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s SessionContext_fulfillRequest_Params) NewRequiredPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

func (s SessionContext_fulfillRequest_Params) Descriptor() (powerbox.PowerboxDescriptor, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return powerbox.PowerboxDescriptor(p.Struct()), err
}

func (s SessionContext_fulfillRequest_Params) HasDescriptor() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SessionContext_fulfillRequest_Params) SetDescriptor(v powerbox.PowerboxDescriptor) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewDescriptor sets the descriptor field to a newly
// allocated powerbox.PowerboxDescriptor struct, preferring placement in s's segment.
func (s SessionContext_fulfillRequest_Params) NewDescriptor() (powerbox.PowerboxDescriptor, error) {
	ss, err := powerbox.NewPowerboxDescriptor(capnp.Struct(s).Segment())
	if err != nil {
		return powerbox.PowerboxDescriptor{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SessionContext_fulfillRequest_Params) DisplayInfo() (powerbox.PowerboxDisplayInfo, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return powerbox.PowerboxDisplayInfo(p.Struct()), err
}

func (s SessionContext_fulfillRequest_Params) HasDisplayInfo() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SessionContext_fulfillRequest_Params) SetDisplayInfo(v powerbox.PowerboxDisplayInfo) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewDisplayInfo sets the displayInfo field to a newly
// allocated powerbox.PowerboxDisplayInfo struct, preferring placement in s's segment.
func (s SessionContext_fulfillRequest_Params) NewDisplayInfo() (powerbox.PowerboxDisplayInfo, error) {
	ss, err := powerbox.NewPowerboxDisplayInfo(capnp.Struct(s).Segment())
	if err != nil {
		return powerbox.PowerboxDisplayInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SessionContext_fulfillRequest_Params_List is a list of SessionContext_fulfillRequest_Params.
type SessionContext_fulfillRequest_Params_List = capnp.StructList[SessionContext_fulfillRequest_Params]

// NewSessionContext_fulfillRequest_Params creates a new list of SessionContext_fulfillRequest_Params.
func NewSessionContext_fulfillRequest_Params_List(s *capnp.Segment, sz int32) (SessionContext_fulfillRequest_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[SessionContext_fulfillRequest_Params](l), err
}

// SessionContext_fulfillRequest_Params_Future is a wrapper for a SessionContext_fulfillRequest_Params promised by a client call.
type SessionContext_fulfillRequest_Params_Future struct{ *capnp.Future }

func (p SessionContext_fulfillRequest_Params_Future) Struct() (SessionContext_fulfillRequest_Params, error) {
	s, err := p.Future.Struct()
	return SessionContext_fulfillRequest_Params(s), err
}

func (p SessionContext_fulfillRequest_Params_Future) Cap() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p SessionContext_fulfillRequest_Params_Future) Descriptor() powerbox.PowerboxDescriptor_Future {
	return powerbox.PowerboxDescriptor_Future{Future: p.Future.Field(2, nil)}
}

func (p SessionContext_fulfillRequest_Params_Future) DisplayInfo() powerbox.PowerboxDisplayInfo_Future {
	return powerbox.PowerboxDisplayInfo_Future{Future: p.Future.Field(3, nil)}
}

type SessionContext_fulfillRequest_Results capnp.Struct

// SessionContext_fulfillRequest_Results_TypeID is the unique identifier for the type SessionContext_fulfillRequest_Results.
const SessionContext_fulfillRequest_Results_TypeID = 0xb4ecd69ac97e2de8

func NewSessionContext_fulfillRequest_Results(s *capnp.Segment) (SessionContext_fulfillRequest_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_fulfillRequest_Results(st), err
}

func NewRootSessionContext_fulfillRequest_Results(s *capnp.Segment) (SessionContext_fulfillRequest_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_fulfillRequest_Results(st), err
}

func ReadRootSessionContext_fulfillRequest_Results(msg *capnp.Message) (SessionContext_fulfillRequest_Results, error) {
	root, err := msg.Root()
	return SessionContext_fulfillRequest_Results(root.Struct()), err
}

func (s SessionContext_fulfillRequest_Results) String() string {
	str, _ := text.Marshal(0xb4ecd69ac97e2de8, capnp.Struct(s))
	return str
}

func (s SessionContext_fulfillRequest_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_fulfillRequest_Results) DecodeFromPtr(p capnp.Ptr) SessionContext_fulfillRequest_Results {
	return SessionContext_fulfillRequest_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_fulfillRequest_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_fulfillRequest_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_fulfillRequest_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_fulfillRequest_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SessionContext_fulfillRequest_Results_List is a list of SessionContext_fulfillRequest_Results.
type SessionContext_fulfillRequest_Results_List = capnp.StructList[SessionContext_fulfillRequest_Results]

// NewSessionContext_fulfillRequest_Results creates a new list of SessionContext_fulfillRequest_Results.
func NewSessionContext_fulfillRequest_Results_List(s *capnp.Segment, sz int32) (SessionContext_fulfillRequest_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SessionContext_fulfillRequest_Results](l), err
}

// SessionContext_fulfillRequest_Results_Future is a wrapper for a SessionContext_fulfillRequest_Results promised by a client call.
type SessionContext_fulfillRequest_Results_Future struct{ *capnp.Future }

func (p SessionContext_fulfillRequest_Results_Future) Struct() (SessionContext_fulfillRequest_Results, error) {
	s, err := p.Future.Struct()
	return SessionContext_fulfillRequest_Results(s), err
}

type SessionContext_close_Params capnp.Struct

// SessionContext_close_Params_TypeID is the unique identifier for the type SessionContext_close_Params.
const SessionContext_close_Params_TypeID = 0xf12c60ebc67984d4

func NewSessionContext_close_Params(s *capnp.Segment) (SessionContext_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_close_Params(st), err
}

func NewRootSessionContext_close_Params(s *capnp.Segment) (SessionContext_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_close_Params(st), err
}

func ReadRootSessionContext_close_Params(msg *capnp.Message) (SessionContext_close_Params, error) {
	root, err := msg.Root()
	return SessionContext_close_Params(root.Struct()), err
}

func (s SessionContext_close_Params) String() string {
	str, _ := text.Marshal(0xf12c60ebc67984d4, capnp.Struct(s))
	return str
}

func (s SessionContext_close_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_close_Params) DecodeFromPtr(p capnp.Ptr) SessionContext_close_Params {
	return SessionContext_close_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_close_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_close_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_close_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_close_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SessionContext_close_Params_List is a list of SessionContext_close_Params.
type SessionContext_close_Params_List = capnp.StructList[SessionContext_close_Params]

// NewSessionContext_close_Params creates a new list of SessionContext_close_Params.
func NewSessionContext_close_Params_List(s *capnp.Segment, sz int32) (SessionContext_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SessionContext_close_Params](l), err
}

// SessionContext_close_Params_Future is a wrapper for a SessionContext_close_Params promised by a client call.
type SessionContext_close_Params_Future struct{ *capnp.Future }

func (p SessionContext_close_Params_Future) Struct() (SessionContext_close_Params, error) {
	s, err := p.Future.Struct()
	return SessionContext_close_Params(s), err
}

type SessionContext_close_Results capnp.Struct

// SessionContext_close_Results_TypeID is the unique identifier for the type SessionContext_close_Results.
const SessionContext_close_Results_TypeID = 0x9d4102fadb4f069c

func NewSessionContext_close_Results(s *capnp.Segment) (SessionContext_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_close_Results(st), err
}

func NewRootSessionContext_close_Results(s *capnp.Segment) (SessionContext_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_close_Results(st), err
}

func ReadRootSessionContext_close_Results(msg *capnp.Message) (SessionContext_close_Results, error) {
	root, err := msg.Root()
	return SessionContext_close_Results(root.Struct()), err
}

func (s SessionContext_close_Results) String() string {
	str, _ := text.Marshal(0x9d4102fadb4f069c, capnp.Struct(s))
	return str
}

func (s SessionContext_close_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_close_Results) DecodeFromPtr(p capnp.Ptr) SessionContext_close_Results {
	return SessionContext_close_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_close_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_close_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_close_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_close_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SessionContext_close_Results_List is a list of SessionContext_close_Results.
type SessionContext_close_Results_List = capnp.StructList[SessionContext_close_Results]

// NewSessionContext_close_Results creates a new list of SessionContext_close_Results.
func NewSessionContext_close_Results_List(s *capnp.Segment, sz int32) (SessionContext_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SessionContext_close_Results](l), err
}

// SessionContext_close_Results_Future is a wrapper for a SessionContext_close_Results promised by a client call.
type SessionContext_close_Results_Future struct{ *capnp.Future }

func (p SessionContext_close_Results_Future) Struct() (SessionContext_close_Results, error) {
	s, err := p.Future.Struct()
	return SessionContext_close_Results(s), err
}

type SessionContext_openView_Params capnp.Struct

// SessionContext_openView_Params_TypeID is the unique identifier for the type SessionContext_openView_Params.
const SessionContext_openView_Params_TypeID = 0xf37f5e08534c68aa

func NewSessionContext_openView_Params(s *capnp.Segment) (SessionContext_openView_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SessionContext_openView_Params(st), err
}

func NewRootSessionContext_openView_Params(s *capnp.Segment) (SessionContext_openView_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SessionContext_openView_Params(st), err
}

func ReadRootSessionContext_openView_Params(msg *capnp.Message) (SessionContext_openView_Params, error) {
	root, err := msg.Root()
	return SessionContext_openView_Params(root.Struct()), err
}

func (s SessionContext_openView_Params) String() string {
	str, _ := text.Marshal(0xf37f5e08534c68aa, capnp.Struct(s))
	return str
}

func (s SessionContext_openView_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_openView_Params) DecodeFromPtr(p capnp.Ptr) SessionContext_openView_Params {
	return SessionContext_openView_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_openView_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_openView_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_openView_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_openView_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_openView_Params) View() UiView {
	p, _ := capnp.Struct(s).Ptr(0)
	return UiView(p.Interface().Client())
}

func (s SessionContext_openView_Params) HasView() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_openView_Params) SetView(v UiView) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s SessionContext_openView_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s SessionContext_openView_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SessionContext_openView_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s SessionContext_openView_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s SessionContext_openView_Params) NewTab() bool {
	return capnp.Struct(s).Bit(0)
}

func (s SessionContext_openView_Params) SetNewTab(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// SessionContext_openView_Params_List is a list of SessionContext_openView_Params.
type SessionContext_openView_Params_List = capnp.StructList[SessionContext_openView_Params]

// NewSessionContext_openView_Params creates a new list of SessionContext_openView_Params.
func NewSessionContext_openView_Params_List(s *capnp.Segment, sz int32) (SessionContext_openView_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[SessionContext_openView_Params](l), err
}

// SessionContext_openView_Params_Future is a wrapper for a SessionContext_openView_Params promised by a client call.
type SessionContext_openView_Params_Future struct{ *capnp.Future }

func (p SessionContext_openView_Params_Future) Struct() (SessionContext_openView_Params, error) {
	s, err := p.Future.Struct()
	return SessionContext_openView_Params(s), err
}

func (p SessionContext_openView_Params_Future) View() UiView {
	return UiView(p.Future.Field(0, nil).Client())
}

type SessionContext_openView_Results capnp.Struct

// SessionContext_openView_Results_TypeID is the unique identifier for the type SessionContext_openView_Results.
const SessionContext_openView_Results_TypeID = 0xf9d6c8c6d207c123

func NewSessionContext_openView_Results(s *capnp.Segment) (SessionContext_openView_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_openView_Results(st), err
}

func NewRootSessionContext_openView_Results(s *capnp.Segment) (SessionContext_openView_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_openView_Results(st), err
}

func ReadRootSessionContext_openView_Results(msg *capnp.Message) (SessionContext_openView_Results, error) {
	root, err := msg.Root()
	return SessionContext_openView_Results(root.Struct()), err
}

func (s SessionContext_openView_Results) String() string {
	str, _ := text.Marshal(0xf9d6c8c6d207c123, capnp.Struct(s))
	return str
}

func (s SessionContext_openView_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_openView_Results) DecodeFromPtr(p capnp.Ptr) SessionContext_openView_Results {
	return SessionContext_openView_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_openView_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_openView_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_openView_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_openView_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SessionContext_openView_Results_List is a list of SessionContext_openView_Results.
type SessionContext_openView_Results_List = capnp.StructList[SessionContext_openView_Results]

// NewSessionContext_openView_Results creates a new list of SessionContext_openView_Results.
func NewSessionContext_openView_Results_List(s *capnp.Segment, sz int32) (SessionContext_openView_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SessionContext_openView_Results](l), err
}

// SessionContext_openView_Results_Future is a wrapper for a SessionContext_openView_Results promised by a client call.
type SessionContext_openView_Results_Future struct{ *capnp.Future }

func (p SessionContext_openView_Results_Future) Struct() (SessionContext_openView_Results, error) {
	s, err := p.Future.Struct()
	return SessionContext_openView_Results(s), err
}

type SessionContext_claimRequest_Params capnp.Struct

// SessionContext_claimRequest_Params_TypeID is the unique identifier for the type SessionContext_claimRequest_Params.
const SessionContext_claimRequest_Params_TypeID = 0xda13a4f2919ce2cf

func NewSessionContext_claimRequest_Params(s *capnp.Segment) (SessionContext_claimRequest_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SessionContext_claimRequest_Params(st), err
}

func NewRootSessionContext_claimRequest_Params(s *capnp.Segment) (SessionContext_claimRequest_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SessionContext_claimRequest_Params(st), err
}

func ReadRootSessionContext_claimRequest_Params(msg *capnp.Message) (SessionContext_claimRequest_Params, error) {
	root, err := msg.Root()
	return SessionContext_claimRequest_Params(root.Struct()), err
}

func (s SessionContext_claimRequest_Params) String() string {
	str, _ := text.Marshal(0xda13a4f2919ce2cf, capnp.Struct(s))
	return str
}

func (s SessionContext_claimRequest_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_claimRequest_Params) DecodeFromPtr(p capnp.Ptr) SessionContext_claimRequest_Params {
	return SessionContext_claimRequest_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_claimRequest_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_claimRequest_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_claimRequest_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_claimRequest_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_claimRequest_Params) RequestToken() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SessionContext_claimRequest_Params) HasRequestToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_claimRequest_Params) RequestTokenBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SessionContext_claimRequest_Params) SetRequestToken(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SessionContext_claimRequest_Params) RequiredPermissions() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.BitList(p.List()), err
}

func (s SessionContext_claimRequest_Params) HasRequiredPermissions() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SessionContext_claimRequest_Params) SetRequiredPermissions(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewRequiredPermissions sets the requiredPermissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s SessionContext_claimRequest_Params) NewRequiredPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// SessionContext_claimRequest_Params_List is a list of SessionContext_claimRequest_Params.
type SessionContext_claimRequest_Params_List = capnp.StructList[SessionContext_claimRequest_Params]

// NewSessionContext_claimRequest_Params creates a new list of SessionContext_claimRequest_Params.
func NewSessionContext_claimRequest_Params_List(s *capnp.Segment, sz int32) (SessionContext_claimRequest_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SessionContext_claimRequest_Params](l), err
}

// SessionContext_claimRequest_Params_Future is a wrapper for a SessionContext_claimRequest_Params promised by a client call.
type SessionContext_claimRequest_Params_Future struct{ *capnp.Future }

func (p SessionContext_claimRequest_Params_Future) Struct() (SessionContext_claimRequest_Params, error) {
	s, err := p.Future.Struct()
	return SessionContext_claimRequest_Params(s), err
}

type SessionContext_claimRequest_Results capnp.Struct

// SessionContext_claimRequest_Results_TypeID is the unique identifier for the type SessionContext_claimRequest_Results.
const SessionContext_claimRequest_Results_TypeID = 0xefea656d4b56b756

func NewSessionContext_claimRequest_Results(s *capnp.Segment) (SessionContext_claimRequest_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_claimRequest_Results(st), err
}

func NewRootSessionContext_claimRequest_Results(s *capnp.Segment) (SessionContext_claimRequest_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_claimRequest_Results(st), err
}

func ReadRootSessionContext_claimRequest_Results(msg *capnp.Message) (SessionContext_claimRequest_Results, error) {
	root, err := msg.Root()
	return SessionContext_claimRequest_Results(root.Struct()), err
}

func (s SessionContext_claimRequest_Results) String() string {
	str, _ := text.Marshal(0xefea656d4b56b756, capnp.Struct(s))
	return str
}

func (s SessionContext_claimRequest_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_claimRequest_Results) DecodeFromPtr(p capnp.Ptr) SessionContext_claimRequest_Results {
	return SessionContext_claimRequest_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_claimRequest_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_claimRequest_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_claimRequest_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_claimRequest_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_claimRequest_Results) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s SessionContext_claimRequest_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_claimRequest_Results) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// SessionContext_claimRequest_Results_List is a list of SessionContext_claimRequest_Results.
type SessionContext_claimRequest_Results_List = capnp.StructList[SessionContext_claimRequest_Results]

// NewSessionContext_claimRequest_Results creates a new list of SessionContext_claimRequest_Results.
func NewSessionContext_claimRequest_Results_List(s *capnp.Segment, sz int32) (SessionContext_claimRequest_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SessionContext_claimRequest_Results](l), err
}

// SessionContext_claimRequest_Results_Future is a wrapper for a SessionContext_claimRequest_Results promised by a client call.
type SessionContext_claimRequest_Results_Future struct{ *capnp.Future }

func (p SessionContext_claimRequest_Results_Future) Struct() (SessionContext_claimRequest_Results, error) {
	s, err := p.Future.Struct()
	return SessionContext_claimRequest_Results(s), err
}

func (p SessionContext_claimRequest_Results_Future) Cap() *capnp.Future {
	return p.Future.Field(0, nil)
}

type SessionContext_activity_Params capnp.Struct

// SessionContext_activity_Params_TypeID is the unique identifier for the type SessionContext_activity_Params.
const SessionContext_activity_Params_TypeID = 0x85e320f14a5d23e0

func NewSessionContext_activity_Params(s *capnp.Segment) (SessionContext_activity_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_activity_Params(st), err
}

func NewRootSessionContext_activity_Params(s *capnp.Segment) (SessionContext_activity_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionContext_activity_Params(st), err
}

func ReadRootSessionContext_activity_Params(msg *capnp.Message) (SessionContext_activity_Params, error) {
	root, err := msg.Root()
	return SessionContext_activity_Params(root.Struct()), err
}

func (s SessionContext_activity_Params) String() string {
	str, _ := text.Marshal(0x85e320f14a5d23e0, capnp.Struct(s))
	return str
}

func (s SessionContext_activity_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_activity_Params) DecodeFromPtr(p capnp.Ptr) SessionContext_activity_Params {
	return SessionContext_activity_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_activity_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_activity_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_activity_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_activity_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SessionContext_activity_Params) Event() (activity.ActivityEvent, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return activity.ActivityEvent(p.Struct()), err
}

func (s SessionContext_activity_Params) HasEvent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SessionContext_activity_Params) SetEvent(v activity.ActivityEvent) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEvent sets the event field to a newly
// allocated activity.ActivityEvent struct, preferring placement in s's segment.
func (s SessionContext_activity_Params) NewEvent() (activity.ActivityEvent, error) {
	ss, err := activity.NewActivityEvent(capnp.Struct(s).Segment())
	if err != nil {
		return activity.ActivityEvent{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SessionContext_activity_Params_List is a list of SessionContext_activity_Params.
type SessionContext_activity_Params_List = capnp.StructList[SessionContext_activity_Params]

// NewSessionContext_activity_Params creates a new list of SessionContext_activity_Params.
func NewSessionContext_activity_Params_List(s *capnp.Segment, sz int32) (SessionContext_activity_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SessionContext_activity_Params](l), err
}

// SessionContext_activity_Params_Future is a wrapper for a SessionContext_activity_Params promised by a client call.
type SessionContext_activity_Params_Future struct{ *capnp.Future }

func (p SessionContext_activity_Params_Future) Struct() (SessionContext_activity_Params, error) {
	s, err := p.Future.Struct()
	return SessionContext_activity_Params(s), err
}

func (p SessionContext_activity_Params_Future) Event() activity.ActivityEvent_Future {
	return activity.ActivityEvent_Future{Future: p.Future.Field(0, nil)}
}

type SessionContext_activity_Results capnp.Struct

// SessionContext_activity_Results_TypeID is the unique identifier for the type SessionContext_activity_Results.
const SessionContext_activity_Results_TypeID = 0xa93eadc9671ea08b

func NewSessionContext_activity_Results(s *capnp.Segment) (SessionContext_activity_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_activity_Results(st), err
}

func NewRootSessionContext_activity_Results(s *capnp.Segment) (SessionContext_activity_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SessionContext_activity_Results(st), err
}

func ReadRootSessionContext_activity_Results(msg *capnp.Message) (SessionContext_activity_Results, error) {
	root, err := msg.Root()
	return SessionContext_activity_Results(root.Struct()), err
}

func (s SessionContext_activity_Results) String() string {
	str, _ := text.Marshal(0xa93eadc9671ea08b, capnp.Struct(s))
	return str
}

func (s SessionContext_activity_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SessionContext_activity_Results) DecodeFromPtr(p capnp.Ptr) SessionContext_activity_Results {
	return SessionContext_activity_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SessionContext_activity_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SessionContext_activity_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SessionContext_activity_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SessionContext_activity_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SessionContext_activity_Results_List is a list of SessionContext_activity_Results.
type SessionContext_activity_Results_List = capnp.StructList[SessionContext_activity_Results]

// NewSessionContext_activity_Results creates a new list of SessionContext_activity_Results.
func NewSessionContext_activity_Results_List(s *capnp.Segment, sz int32) (SessionContext_activity_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SessionContext_activity_Results](l), err
}

// SessionContext_activity_Results_Future is a wrapper for a SessionContext_activity_Results promised by a client call.
type SessionContext_activity_Results_Future struct{ *capnp.Future }

func (p SessionContext_activity_Results_Future) Struct() (SessionContext_activity_Results, error) {
	s, err := p.Future.Struct()
	return SessionContext_activity_Results(s), err
}

type PermissionDef capnp.Struct

// PermissionDef_TypeID is the unique identifier for the type PermissionDef.
const PermissionDef_TypeID = 0xf144a5e58889dafb

func NewPermissionDef(s *capnp.Segment) (PermissionDef, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return PermissionDef(st), err
}

func NewRootPermissionDef(s *capnp.Segment) (PermissionDef, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return PermissionDef(st), err
}

func ReadRootPermissionDef(msg *capnp.Message) (PermissionDef, error) {
	root, err := msg.Root()
	return PermissionDef(root.Struct()), err
}

func (s PermissionDef) String() string {
	str, _ := text.Marshal(0xf144a5e58889dafb, capnp.Struct(s))
	return str
}

func (s PermissionDef) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PermissionDef) DecodeFromPtr(p capnp.Ptr) PermissionDef {
	return PermissionDef(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PermissionDef) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PermissionDef) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PermissionDef) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PermissionDef) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PermissionDef) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s PermissionDef) HasName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s PermissionDef) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s PermissionDef) SetName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s PermissionDef) Title() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return util.LocalizedText(p.Struct()), err
}

func (s PermissionDef) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PermissionDef) SetTitle(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTitle sets the title field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s PermissionDef) NewTitle() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s PermissionDef) Description() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return util.LocalizedText(p.Struct()), err
}

func (s PermissionDef) HasDescription() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s PermissionDef) SetDescription(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewDescription sets the description field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s PermissionDef) NewDescription() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s PermissionDef) Obsolete() bool {
	return capnp.Struct(s).Bit(0)
}

func (s PermissionDef) SetObsolete(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// PermissionDef_List is a list of PermissionDef.
type PermissionDef_List = capnp.StructList[PermissionDef]

// NewPermissionDef creates a new list of PermissionDef.
func NewPermissionDef_List(s *capnp.Segment, sz int32) (PermissionDef_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[PermissionDef](l), err
}

// PermissionDef_Future is a wrapper for a PermissionDef promised by a client call.
type PermissionDef_Future struct{ *capnp.Future }

func (p PermissionDef_Future) Struct() (PermissionDef, error) {
	s, err := p.Future.Struct()
	return PermissionDef(s), err
}

func (p PermissionDef_Future) Title() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(0, nil)}
}

func (p PermissionDef_Future) Description() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(1, nil)}
}

type RoleDef capnp.Struct

// RoleDef_TypeID is the unique identifier for the type RoleDef.
const RoleDef_TypeID = 0xcb3f7064eae4dc5a

func NewRoleDef(s *capnp.Segment) (RoleDef, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return RoleDef(st), err
}

func NewRootRoleDef(s *capnp.Segment) (RoleDef, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return RoleDef(st), err
}

func ReadRootRoleDef(msg *capnp.Message) (RoleDef, error) {
	root, err := msg.Root()
	return RoleDef(root.Struct()), err
}

func (s RoleDef) String() string {
	str, _ := text.Marshal(0xcb3f7064eae4dc5a, capnp.Struct(s))
	return str
}

func (s RoleDef) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RoleDef) DecodeFromPtr(p capnp.Ptr) RoleDef {
	return RoleDef(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RoleDef) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RoleDef) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RoleDef) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RoleDef) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RoleDef) Title() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return util.LocalizedText(p.Struct()), err
}

func (s RoleDef) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RoleDef) SetTitle(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTitle sets the title field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s RoleDef) NewTitle() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RoleDef) VerbPhrase() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return util.LocalizedText(p.Struct()), err
}

func (s RoleDef) HasVerbPhrase() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RoleDef) SetVerbPhrase(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewVerbPhrase sets the verbPhrase field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s RoleDef) NewVerbPhrase() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RoleDef) Description() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return util.LocalizedText(p.Struct()), err
}

func (s RoleDef) HasDescription() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s RoleDef) SetDescription(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewDescription sets the description field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s RoleDef) NewDescription() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RoleDef) Permissions() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.BitList(p.List()), err
}

func (s RoleDef) HasPermissions() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s RoleDef) SetPermissions(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewPermissions sets the permissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s RoleDef) NewPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

func (s RoleDef) Obsolete() bool {
	return capnp.Struct(s).Bit(0)
}

func (s RoleDef) SetObsolete(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s RoleDef) Default() bool {
	return capnp.Struct(s).Bit(1)
}

func (s RoleDef) SetDefault(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

// RoleDef_List is a list of RoleDef.
type RoleDef_List = capnp.StructList[RoleDef]

// NewRoleDef creates a new list of RoleDef.
func NewRoleDef_List(s *capnp.Segment, sz int32) (RoleDef_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[RoleDef](l), err
}

// RoleDef_Future is a wrapper for a RoleDef promised by a client call.
type RoleDef_Future struct{ *capnp.Future }

func (p RoleDef_Future) Struct() (RoleDef, error) {
	s, err := p.Future.Struct()
	return RoleDef(s), err
}

func (p RoleDef_Future) Title() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(0, nil)}
}

func (p RoleDef_Future) VerbPhrase() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(1, nil)}
}

func (p RoleDef_Future) Description() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(2, nil)}
}

type SharingLink capnp.Client

// SharingLink_TypeID is the unique identifier for the type SharingLink.
const SharingLink_TypeID = 0xc05520c9b0994ad3

func (c SharingLink) GetPetname(ctx context.Context, params func(SharingLink_getPetname_Params) error) (SharingLink_getPetname_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc05520c9b0994ad3,
			MethodID:      0,
			InterfaceName: "grain.capnp:SharingLink",
			MethodName:    "getPetname",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SharingLink_getPetname_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SharingLink_getPetname_Results_Future{Future: ans.Future()}, release
}

func (c SharingLink) AddRef() SharingLink {
	return SharingLink(capnp.Client(c).AddRef())
}

func (c SharingLink) Release() {
	capnp.Client(c).Release()
}

func (c SharingLink) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (SharingLink) DecodeFromPtr(p capnp.Ptr) SharingLink {
	return SharingLink(capnp.Client{}.DecodeFromPtr(p))
}

func (c SharingLink) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A SharingLink_Server is a SharingLink with a local implementation.
type SharingLink_Server interface {
	GetPetname(context.Context, SharingLink_getPetname) error
}

// SharingLink_NewServer creates a new Server from an implementation of SharingLink_Server.
func SharingLink_NewServer(s SharingLink_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(SharingLink_Methods(nil, s), s, c)
}

// SharingLink_ServerToClient creates a new Client from an implementation of SharingLink_Server.
// The caller is responsible for calling Release on the returned Client.
func SharingLink_ServerToClient(s SharingLink_Server) SharingLink {
	return SharingLink(capnp.NewClient(SharingLink_NewServer(s)))
}

// SharingLink_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func SharingLink_Methods(methods []server.Method, s SharingLink_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc05520c9b0994ad3,
			MethodID:      0,
			InterfaceName: "grain.capnp:SharingLink",
			MethodName:    "getPetname",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetPetname(ctx, SharingLink_getPetname{call})
		},
	})

	return methods
}

// SharingLink_getPetname holds the state for a server call to SharingLink.getPetname.
// See server.Call for documentation.
type SharingLink_getPetname struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SharingLink_getPetname) Args() SharingLink_getPetname_Params {
	return SharingLink_getPetname_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SharingLink_getPetname) AllocResults() (SharingLink_getPetname_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SharingLink_getPetname_Results(r), err
}

// SharingLink_List is a list of SharingLink.
type SharingLink_List = capnp.CapList[SharingLink]

// NewSharingLink creates a new list of SharingLink.
func NewSharingLink_List(s *capnp.Segment, sz int32) (SharingLink_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[SharingLink](l), err
}

type SharingLink_getPetname_Params capnp.Struct

// SharingLink_getPetname_Params_TypeID is the unique identifier for the type SharingLink_getPetname_Params.
const SharingLink_getPetname_Params_TypeID = 0xf0931856093654c1

func NewSharingLink_getPetname_Params(s *capnp.Segment) (SharingLink_getPetname_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SharingLink_getPetname_Params(st), err
}

func NewRootSharingLink_getPetname_Params(s *capnp.Segment) (SharingLink_getPetname_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SharingLink_getPetname_Params(st), err
}

func ReadRootSharingLink_getPetname_Params(msg *capnp.Message) (SharingLink_getPetname_Params, error) {
	root, err := msg.Root()
	return SharingLink_getPetname_Params(root.Struct()), err
}

func (s SharingLink_getPetname_Params) String() string {
	str, _ := text.Marshal(0xf0931856093654c1, capnp.Struct(s))
	return str
}

func (s SharingLink_getPetname_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SharingLink_getPetname_Params) DecodeFromPtr(p capnp.Ptr) SharingLink_getPetname_Params {
	return SharingLink_getPetname_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SharingLink_getPetname_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SharingLink_getPetname_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SharingLink_getPetname_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SharingLink_getPetname_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SharingLink_getPetname_Params_List is a list of SharingLink_getPetname_Params.
type SharingLink_getPetname_Params_List = capnp.StructList[SharingLink_getPetname_Params]

// NewSharingLink_getPetname_Params creates a new list of SharingLink_getPetname_Params.
func NewSharingLink_getPetname_Params_List(s *capnp.Segment, sz int32) (SharingLink_getPetname_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SharingLink_getPetname_Params](l), err
}

// SharingLink_getPetname_Params_Future is a wrapper for a SharingLink_getPetname_Params promised by a client call.
type SharingLink_getPetname_Params_Future struct{ *capnp.Future }

func (p SharingLink_getPetname_Params_Future) Struct() (SharingLink_getPetname_Params, error) {
	s, err := p.Future.Struct()
	return SharingLink_getPetname_Params(s), err
}

type SharingLink_getPetname_Results capnp.Struct

// SharingLink_getPetname_Results_TypeID is the unique identifier for the type SharingLink_getPetname_Results.
const SharingLink_getPetname_Results_TypeID = 0x9ad927034671cad1

func NewSharingLink_getPetname_Results(s *capnp.Segment) (SharingLink_getPetname_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SharingLink_getPetname_Results(st), err
}

func NewRootSharingLink_getPetname_Results(s *capnp.Segment) (SharingLink_getPetname_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SharingLink_getPetname_Results(st), err
}

func ReadRootSharingLink_getPetname_Results(msg *capnp.Message) (SharingLink_getPetname_Results, error) {
	root, err := msg.Root()
	return SharingLink_getPetname_Results(root.Struct()), err
}

func (s SharingLink_getPetname_Results) String() string {
	str, _ := text.Marshal(0x9ad927034671cad1, capnp.Struct(s))
	return str
}

func (s SharingLink_getPetname_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SharingLink_getPetname_Results) DecodeFromPtr(p capnp.Ptr) SharingLink_getPetname_Results {
	return SharingLink_getPetname_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SharingLink_getPetname_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SharingLink_getPetname_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SharingLink_getPetname_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SharingLink_getPetname_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SharingLink_getPetname_Results) Name() util.Assignable {
	p, _ := capnp.Struct(s).Ptr(0)
	return util.Assignable(p.Interface().Client())
}

func (s SharingLink_getPetname_Results) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SharingLink_getPetname_Results) SetName(v util.Assignable) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// SharingLink_getPetname_Results_List is a list of SharingLink_getPetname_Results.
type SharingLink_getPetname_Results_List = capnp.StructList[SharingLink_getPetname_Results]

// NewSharingLink_getPetname_Results creates a new list of SharingLink_getPetname_Results.
func NewSharingLink_getPetname_Results_List(s *capnp.Segment, sz int32) (SharingLink_getPetname_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SharingLink_getPetname_Results](l), err
}

// SharingLink_getPetname_Results_Future is a wrapper for a SharingLink_getPetname_Results promised by a client call.
type SharingLink_getPetname_Results_Future struct{ *capnp.Future }

func (p SharingLink_getPetname_Results_Future) Struct() (SharingLink_getPetname_Results, error) {
	s, err := p.Future.Struct()
	return SharingLink_getPetname_Results(s), err
}

func (p SharingLink_getPetname_Results_Future) Name() util.Assignable {
	return util.Assignable(p.Future.Field(0, nil).Client())
}

type ViewSharingLink capnp.Client

// ViewSharingLink_TypeID is the unique identifier for the type ViewSharingLink.
const ViewSharingLink_TypeID = 0xa4f82f764dc3fee8

func (c ViewSharingLink) GetRoleAssignment(ctx context.Context, params func(ViewSharingLink_getRoleAssignment_Params) error) (ViewSharingLink_getRoleAssignment_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa4f82f764dc3fee8,
			MethodID:      0,
			InterfaceName: "grain.capnp:ViewSharingLink",
			MethodName:    "getRoleAssignment",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ViewSharingLink_getRoleAssignment_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ViewSharingLink_getRoleAssignment_Results_Future{Future: ans.Future()}, release
}
func (c ViewSharingLink) GetPetname(ctx context.Context, params func(SharingLink_getPetname_Params) error) (SharingLink_getPetname_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc05520c9b0994ad3,
			MethodID:      0,
			InterfaceName: "grain.capnp:SharingLink",
			MethodName:    "getPetname",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SharingLink_getPetname_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SharingLink_getPetname_Results_Future{Future: ans.Future()}, release
}

func (c ViewSharingLink) AddRef() ViewSharingLink {
	return ViewSharingLink(capnp.Client(c).AddRef())
}

func (c ViewSharingLink) Release() {
	capnp.Client(c).Release()
}

func (c ViewSharingLink) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ViewSharingLink) DecodeFromPtr(p capnp.Ptr) ViewSharingLink {
	return ViewSharingLink(capnp.Client{}.DecodeFromPtr(p))
}

func (c ViewSharingLink) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A ViewSharingLink_Server is a ViewSharingLink with a local implementation.
type ViewSharingLink_Server interface {
	GetRoleAssignment(context.Context, ViewSharingLink_getRoleAssignment) error

	GetPetname(context.Context, SharingLink_getPetname) error
}

// ViewSharingLink_NewServer creates a new Server from an implementation of ViewSharingLink_Server.
func ViewSharingLink_NewServer(s ViewSharingLink_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ViewSharingLink_Methods(nil, s), s, c)
}

// ViewSharingLink_ServerToClient creates a new Client from an implementation of ViewSharingLink_Server.
// The caller is responsible for calling Release on the returned Client.
func ViewSharingLink_ServerToClient(s ViewSharingLink_Server) ViewSharingLink {
	return ViewSharingLink(capnp.NewClient(ViewSharingLink_NewServer(s)))
}

// ViewSharingLink_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ViewSharingLink_Methods(methods []server.Method, s ViewSharingLink_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa4f82f764dc3fee8,
			MethodID:      0,
			InterfaceName: "grain.capnp:ViewSharingLink",
			MethodName:    "getRoleAssignment",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetRoleAssignment(ctx, ViewSharingLink_getRoleAssignment{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc05520c9b0994ad3,
			MethodID:      0,
			InterfaceName: "grain.capnp:SharingLink",
			MethodName:    "getPetname",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetPetname(ctx, SharingLink_getPetname{call})
		},
	})

	return methods
}

// ViewSharingLink_getRoleAssignment holds the state for a server call to ViewSharingLink.getRoleAssignment.
// See server.Call for documentation.
type ViewSharingLink_getRoleAssignment struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ViewSharingLink_getRoleAssignment) Args() ViewSharingLink_getRoleAssignment_Params {
	return ViewSharingLink_getRoleAssignment_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ViewSharingLink_getRoleAssignment) AllocResults() (ViewSharingLink_getRoleAssignment_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ViewSharingLink_getRoleAssignment_Results(r), err
}

// ViewSharingLink_List is a list of ViewSharingLink.
type ViewSharingLink_List = capnp.CapList[ViewSharingLink]

// NewViewSharingLink creates a new list of ViewSharingLink.
func NewViewSharingLink_List(s *capnp.Segment, sz int32) (ViewSharingLink_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ViewSharingLink](l), err
}

type ViewSharingLink_RoleAssignment capnp.Struct
type ViewSharingLink_RoleAssignment_Which uint16

const (
	ViewSharingLink_RoleAssignment_Which_none      ViewSharingLink_RoleAssignment_Which = 0
	ViewSharingLink_RoleAssignment_Which_allAccess ViewSharingLink_RoleAssignment_Which = 1
	ViewSharingLink_RoleAssignment_Which_roleId    ViewSharingLink_RoleAssignment_Which = 2
)

func (w ViewSharingLink_RoleAssignment_Which) String() string {
	const s = "noneallAccessroleId"
	switch w {
	case ViewSharingLink_RoleAssignment_Which_none:
		return s[0:4]
	case ViewSharingLink_RoleAssignment_Which_allAccess:
		return s[4:13]
	case ViewSharingLink_RoleAssignment_Which_roleId:
		return s[13:19]

	}
	return "ViewSharingLink_RoleAssignment_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ViewSharingLink_RoleAssignment_TypeID is the unique identifier for the type ViewSharingLink_RoleAssignment.
const ViewSharingLink_RoleAssignment_TypeID = 0xf020f2be35e8e2b5

func NewViewSharingLink_RoleAssignment(s *capnp.Segment) (ViewSharingLink_RoleAssignment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ViewSharingLink_RoleAssignment(st), err
}

func NewRootViewSharingLink_RoleAssignment(s *capnp.Segment) (ViewSharingLink_RoleAssignment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ViewSharingLink_RoleAssignment(st), err
}

func ReadRootViewSharingLink_RoleAssignment(msg *capnp.Message) (ViewSharingLink_RoleAssignment, error) {
	root, err := msg.Root()
	return ViewSharingLink_RoleAssignment(root.Struct()), err
}

func (s ViewSharingLink_RoleAssignment) String() string {
	str, _ := text.Marshal(0xf020f2be35e8e2b5, capnp.Struct(s))
	return str
}

func (s ViewSharingLink_RoleAssignment) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ViewSharingLink_RoleAssignment) DecodeFromPtr(p capnp.Ptr) ViewSharingLink_RoleAssignment {
	return ViewSharingLink_RoleAssignment(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ViewSharingLink_RoleAssignment) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s ViewSharingLink_RoleAssignment) Which() ViewSharingLink_RoleAssignment_Which {
	return ViewSharingLink_RoleAssignment_Which(capnp.Struct(s).Uint16(0))
}
func (s ViewSharingLink_RoleAssignment) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ViewSharingLink_RoleAssignment) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ViewSharingLink_RoleAssignment) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ViewSharingLink_RoleAssignment) SetNone() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s ViewSharingLink_RoleAssignment) SetAllAccess() {
	capnp.Struct(s).SetUint16(0, 1)

}

func (s ViewSharingLink_RoleAssignment) RoleId() uint16 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != roleId")
	}
	return capnp.Struct(s).Uint16(2)
}

func (s ViewSharingLink_RoleAssignment) SetRoleId(v uint16) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint16(2, v)
}

func (s ViewSharingLink_RoleAssignment) AddPermissions() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.BitList(p.List()), err
}

func (s ViewSharingLink_RoleAssignment) HasAddPermissions() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ViewSharingLink_RoleAssignment) SetAddPermissions(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAddPermissions sets the addPermissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s ViewSharingLink_RoleAssignment) NewAddPermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

func (s ViewSharingLink_RoleAssignment) RemovePermissions() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.BitList(p.List()), err
}

func (s ViewSharingLink_RoleAssignment) HasRemovePermissions() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ViewSharingLink_RoleAssignment) SetRemovePermissions(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewRemovePermissions sets the removePermissions field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s ViewSharingLink_RoleAssignment) NewRemovePermissions(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// ViewSharingLink_RoleAssignment_List is a list of ViewSharingLink_RoleAssignment.
type ViewSharingLink_RoleAssignment_List = capnp.StructList[ViewSharingLink_RoleAssignment]

// NewViewSharingLink_RoleAssignment creates a new list of ViewSharingLink_RoleAssignment.
func NewViewSharingLink_RoleAssignment_List(s *capnp.Segment, sz int32) (ViewSharingLink_RoleAssignment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[ViewSharingLink_RoleAssignment](l), err
}

// ViewSharingLink_RoleAssignment_Future is a wrapper for a ViewSharingLink_RoleAssignment promised by a client call.
type ViewSharingLink_RoleAssignment_Future struct{ *capnp.Future }

func (p ViewSharingLink_RoleAssignment_Future) Struct() (ViewSharingLink_RoleAssignment, error) {
	s, err := p.Future.Struct()
	return ViewSharingLink_RoleAssignment(s), err
}

type ViewSharingLink_getRoleAssignment_Params capnp.Struct

// ViewSharingLink_getRoleAssignment_Params_TypeID is the unique identifier for the type ViewSharingLink_getRoleAssignment_Params.
const ViewSharingLink_getRoleAssignment_Params_TypeID = 0xb8083dd65a24c770

func NewViewSharingLink_getRoleAssignment_Params(s *capnp.Segment) (ViewSharingLink_getRoleAssignment_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ViewSharingLink_getRoleAssignment_Params(st), err
}

func NewRootViewSharingLink_getRoleAssignment_Params(s *capnp.Segment) (ViewSharingLink_getRoleAssignment_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ViewSharingLink_getRoleAssignment_Params(st), err
}

func ReadRootViewSharingLink_getRoleAssignment_Params(msg *capnp.Message) (ViewSharingLink_getRoleAssignment_Params, error) {
	root, err := msg.Root()
	return ViewSharingLink_getRoleAssignment_Params(root.Struct()), err
}

func (s ViewSharingLink_getRoleAssignment_Params) String() string {
	str, _ := text.Marshal(0xb8083dd65a24c770, capnp.Struct(s))
	return str
}

func (s ViewSharingLink_getRoleAssignment_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ViewSharingLink_getRoleAssignment_Params) DecodeFromPtr(p capnp.Ptr) ViewSharingLink_getRoleAssignment_Params {
	return ViewSharingLink_getRoleAssignment_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ViewSharingLink_getRoleAssignment_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ViewSharingLink_getRoleAssignment_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ViewSharingLink_getRoleAssignment_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ViewSharingLink_getRoleAssignment_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ViewSharingLink_getRoleAssignment_Params_List is a list of ViewSharingLink_getRoleAssignment_Params.
type ViewSharingLink_getRoleAssignment_Params_List = capnp.StructList[ViewSharingLink_getRoleAssignment_Params]

// NewViewSharingLink_getRoleAssignment_Params creates a new list of ViewSharingLink_getRoleAssignment_Params.
func NewViewSharingLink_getRoleAssignment_Params_List(s *capnp.Segment, sz int32) (ViewSharingLink_getRoleAssignment_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ViewSharingLink_getRoleAssignment_Params](l), err
}

// ViewSharingLink_getRoleAssignment_Params_Future is a wrapper for a ViewSharingLink_getRoleAssignment_Params promised by a client call.
type ViewSharingLink_getRoleAssignment_Params_Future struct{ *capnp.Future }

func (p ViewSharingLink_getRoleAssignment_Params_Future) Struct() (ViewSharingLink_getRoleAssignment_Params, error) {
	s, err := p.Future.Struct()
	return ViewSharingLink_getRoleAssignment_Params(s), err
}

type ViewSharingLink_getRoleAssignment_Results capnp.Struct

// ViewSharingLink_getRoleAssignment_Results_TypeID is the unique identifier for the type ViewSharingLink_getRoleAssignment_Results.
const ViewSharingLink_getRoleAssignment_Results_TypeID = 0x9d159666de73f39d

func NewViewSharingLink_getRoleAssignment_Results(s *capnp.Segment) (ViewSharingLink_getRoleAssignment_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ViewSharingLink_getRoleAssignment_Results(st), err
}

func NewRootViewSharingLink_getRoleAssignment_Results(s *capnp.Segment) (ViewSharingLink_getRoleAssignment_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ViewSharingLink_getRoleAssignment_Results(st), err
}

func ReadRootViewSharingLink_getRoleAssignment_Results(msg *capnp.Message) (ViewSharingLink_getRoleAssignment_Results, error) {
	root, err := msg.Root()
	return ViewSharingLink_getRoleAssignment_Results(root.Struct()), err
}

func (s ViewSharingLink_getRoleAssignment_Results) String() string {
	str, _ := text.Marshal(0x9d159666de73f39d, capnp.Struct(s))
	return str
}

func (s ViewSharingLink_getRoleAssignment_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ViewSharingLink_getRoleAssignment_Results) DecodeFromPtr(p capnp.Ptr) ViewSharingLink_getRoleAssignment_Results {
	return ViewSharingLink_getRoleAssignment_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ViewSharingLink_getRoleAssignment_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ViewSharingLink_getRoleAssignment_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ViewSharingLink_getRoleAssignment_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ViewSharingLink_getRoleAssignment_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ViewSharingLink_getRoleAssignment_Results) Var() util.Assignable {
	p, _ := capnp.Struct(s).Ptr(0)
	return util.Assignable(p.Interface().Client())
}

func (s ViewSharingLink_getRoleAssignment_Results) HasVar() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ViewSharingLink_getRoleAssignment_Results) SetVar(v util.Assignable) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ViewSharingLink_getRoleAssignment_Results_List is a list of ViewSharingLink_getRoleAssignment_Results.
type ViewSharingLink_getRoleAssignment_Results_List = capnp.StructList[ViewSharingLink_getRoleAssignment_Results]

// NewViewSharingLink_getRoleAssignment_Results creates a new list of ViewSharingLink_getRoleAssignment_Results.
func NewViewSharingLink_getRoleAssignment_Results_List(s *capnp.Segment, sz int32) (ViewSharingLink_getRoleAssignment_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ViewSharingLink_getRoleAssignment_Results](l), err
}

// ViewSharingLink_getRoleAssignment_Results_Future is a wrapper for a ViewSharingLink_getRoleAssignment_Results promised by a client call.
type ViewSharingLink_getRoleAssignment_Results_Future struct{ *capnp.Future }

func (p ViewSharingLink_getRoleAssignment_Results_Future) Struct() (ViewSharingLink_getRoleAssignment_Results, error) {
	s, err := p.Future.Struct()
	return ViewSharingLink_getRoleAssignment_Results(s), err
}

func (p ViewSharingLink_getRoleAssignment_Results_Future) Var() util.Assignable {
	return util.Assignable(p.Future.Field(0, nil).Client())
}

type GrainInfo capnp.Struct

// GrainInfo_TypeID is the unique identifier for the type GrainInfo.
const GrainInfo_TypeID = 0xb5fcc0e153671d68

func NewGrainInfo(s *capnp.Segment) (GrainInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return GrainInfo(st), err
}

func NewRootGrainInfo(s *capnp.Segment) (GrainInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return GrainInfo(st), err
}

func ReadRootGrainInfo(msg *capnp.Message) (GrainInfo, error) {
	root, err := msg.Root()
	return GrainInfo(root.Struct()), err
}

func (s GrainInfo) String() string {
	str, _ := text.Marshal(0xb5fcc0e153671d68, capnp.Struct(s))
	return str
}

func (s GrainInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GrainInfo) DecodeFromPtr(p capnp.Ptr) GrainInfo {
	return GrainInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GrainInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GrainInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GrainInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GrainInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GrainInfo) AppId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GrainInfo) HasAppId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GrainInfo) AppIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GrainInfo) SetAppId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GrainInfo) AppVersion() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s GrainInfo) SetAppVersion(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s GrainInfo) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GrainInfo) HasTitle() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GrainInfo) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GrainInfo) SetTitle(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GrainInfo) OwnerIdentityId() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s GrainInfo) HasOwnerIdentityId() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GrainInfo) OwnerIdentityIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s GrainInfo) SetOwnerIdentityId(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s GrainInfo) Users() (GrainInfo_User_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return GrainInfo_User_List(p.List()), err
}

func (s GrainInfo) HasUsers() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s GrainInfo) SetUsers(v GrainInfo_User_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewUsers sets the users field to a newly
// allocated GrainInfo_User_List, preferring placement in s's segment.
func (s GrainInfo) NewUsers(n int32) (GrainInfo_User_List, error) {
	l, err := NewGrainInfo_User_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return GrainInfo_User_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

func (s GrainInfo) OriginalGrainId() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s GrainInfo) HasOriginalGrainId() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s GrainInfo) OriginalGrainIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s GrainInfo) SetOriginalGrainId(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

// GrainInfo_List is a list of GrainInfo.
type GrainInfo_List = capnp.StructList[GrainInfo]

// NewGrainInfo creates a new list of GrainInfo.
func NewGrainInfo_List(s *capnp.Segment, sz int32) (GrainInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return capnp.StructList[GrainInfo](l), err
}

// GrainInfo_Future is a wrapper for a GrainInfo promised by a client call.
type GrainInfo_Future struct{ *capnp.Future }

func (p GrainInfo_Future) Struct() (GrainInfo, error) {
	s, err := p.Future.Struct()
	return GrainInfo(s), err
}

type GrainInfo_User capnp.Struct

// GrainInfo_User_TypeID is the unique identifier for the type GrainInfo_User.
const GrainInfo_User_TypeID = 0x9f07b75928ba4e20

func NewGrainInfo_User(s *capnp.Segment) (GrainInfo_User, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GrainInfo_User(st), err
}

func NewRootGrainInfo_User(s *capnp.Segment) (GrainInfo_User, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GrainInfo_User(st), err
}

func ReadRootGrainInfo_User(msg *capnp.Message) (GrainInfo_User, error) {
	root, err := msg.Root()
	return GrainInfo_User(root.Struct()), err
}

func (s GrainInfo_User) String() string {
	str, _ := text.Marshal(0x9f07b75928ba4e20, capnp.Struct(s))
	return str
}

func (s GrainInfo_User) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GrainInfo_User) DecodeFromPtr(p capnp.Ptr) GrainInfo_User {
	return GrainInfo_User(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GrainInfo_User) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GrainInfo_User) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GrainInfo_User) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GrainInfo_User) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GrainInfo_User) IdentityId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GrainInfo_User) HasIdentityId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GrainInfo_User) IdentityIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GrainInfo_User) SetIdentityId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GrainInfo_User) CredentialIds() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s GrainInfo_User) HasCredentialIds() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GrainInfo_User) SetCredentialIds(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewCredentialIds sets the credentialIds field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s GrainInfo_User) NewCredentialIds(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

func (s GrainInfo_User) Profile() (identity.Profile, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return identity.Profile(p.Struct()), err
}

func (s GrainInfo_User) HasProfile() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GrainInfo_User) SetProfile(v identity.Profile) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewProfile sets the profile field to a newly
// allocated identity.Profile struct, preferring placement in s's segment.
func (s GrainInfo_User) NewProfile() (identity.Profile, error) {
	ss, err := identity.NewProfile(capnp.Struct(s).Segment())
	if err != nil {
		return identity.Profile{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// GrainInfo_User_List is a list of GrainInfo_User.
type GrainInfo_User_List = capnp.StructList[GrainInfo_User]

// NewGrainInfo_User creates a new list of GrainInfo_User.
func NewGrainInfo_User_List(s *capnp.Segment, sz int32) (GrainInfo_User_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[GrainInfo_User](l), err
}

// GrainInfo_User_Future is a wrapper for a GrainInfo_User promised by a client call.
type GrainInfo_User_Future struct{ *capnp.Future }

func (p GrainInfo_User_Future) Struct() (GrainInfo_User, error) {
	s, err := p.Future.Struct()
	return GrainInfo_User(s), err
}

func (p GrainInfo_User_Future) Profile() identity.Profile_Future {
	return identity.Profile_Future{Future: p.Future.Field(2, nil)}
}

type AppPersistent capnp.Client

// AppPersistent_TypeID is the unique identifier for the type AppPersistent.
const AppPersistent_TypeID = 0xaffa789add8747b8

func (c AppPersistent) Save(ctx context.Context, params func(AppPersistent_save_Params) error) (AppPersistent_save_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaffa789add8747b8,
			MethodID:      0,
			InterfaceName: "grain.capnp:AppPersistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AppPersistent_save_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AppPersistent_save_Results_Future{Future: ans.Future()}, release
}

func (c AppPersistent) AddRef() AppPersistent {
	return AppPersistent(capnp.Client(c).AddRef())
}

func (c AppPersistent) Release() {
	capnp.Client(c).Release()
}

func (c AppPersistent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (AppPersistent) DecodeFromPtr(p capnp.Ptr) AppPersistent {
	return AppPersistent(capnp.Client{}.DecodeFromPtr(p))
}

func (c AppPersistent) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A AppPersistent_Server is a AppPersistent with a local implementation.
type AppPersistent_Server interface {
	Save(context.Context, AppPersistent_save) error
}

// AppPersistent_NewServer creates a new Server from an implementation of AppPersistent_Server.
func AppPersistent_NewServer(s AppPersistent_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(AppPersistent_Methods(nil, s), s, c)
}

// AppPersistent_ServerToClient creates a new Client from an implementation of AppPersistent_Server.
// The caller is responsible for calling Release on the returned Client.
func AppPersistent_ServerToClient(s AppPersistent_Server) AppPersistent {
	return AppPersistent(capnp.NewClient(AppPersistent_NewServer(s)))
}

// AppPersistent_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func AppPersistent_Methods(methods []server.Method, s AppPersistent_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaffa789add8747b8,
			MethodID:      0,
			InterfaceName: "grain.capnp:AppPersistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, AppPersistent_save{call})
		},
	})

	return methods
}

// AppPersistent_save holds the state for a server call to AppPersistent.save.
// See server.Call for documentation.
type AppPersistent_save struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AppPersistent_save) Args() AppPersistent_save_Params {
	return AppPersistent_save_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AppPersistent_save) AllocResults() (AppPersistent_save_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AppPersistent_save_Results(r), err
}

// AppPersistent_List is a list of AppPersistent.
type AppPersistent_List = capnp.CapList[AppPersistent]

// NewAppPersistent creates a new list of AppPersistent.
func NewAppPersistent_List(s *capnp.Segment, sz int32) (AppPersistent_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[AppPersistent](l), err
}

type AppPersistent_save_Params capnp.Struct

// AppPersistent_save_Params_TypeID is the unique identifier for the type AppPersistent_save_Params.
const AppPersistent_save_Params_TypeID = 0xf0136e14d8019d3c

func NewAppPersistent_save_Params(s *capnp.Segment) (AppPersistent_save_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AppPersistent_save_Params(st), err
}

func NewRootAppPersistent_save_Params(s *capnp.Segment) (AppPersistent_save_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AppPersistent_save_Params(st), err
}

func ReadRootAppPersistent_save_Params(msg *capnp.Message) (AppPersistent_save_Params, error) {
	root, err := msg.Root()
	return AppPersistent_save_Params(root.Struct()), err
}

func (s AppPersistent_save_Params) String() string {
	str, _ := text.Marshal(0xf0136e14d8019d3c, capnp.Struct(s))
	return str
}

func (s AppPersistent_save_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AppPersistent_save_Params) DecodeFromPtr(p capnp.Ptr) AppPersistent_save_Params {
	return AppPersistent_save_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AppPersistent_save_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AppPersistent_save_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AppPersistent_save_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AppPersistent_save_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// AppPersistent_save_Params_List is a list of AppPersistent_save_Params.
type AppPersistent_save_Params_List = capnp.StructList[AppPersistent_save_Params]

// NewAppPersistent_save_Params creates a new list of AppPersistent_save_Params.
func NewAppPersistent_save_Params_List(s *capnp.Segment, sz int32) (AppPersistent_save_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[AppPersistent_save_Params](l), err
}

// AppPersistent_save_Params_Future is a wrapper for a AppPersistent_save_Params promised by a client call.
type AppPersistent_save_Params_Future struct{ *capnp.Future }

func (p AppPersistent_save_Params_Future) Struct() (AppPersistent_save_Params, error) {
	s, err := p.Future.Struct()
	return AppPersistent_save_Params(s), err
}

type AppPersistent_save_Results capnp.Struct

// AppPersistent_save_Results_TypeID is the unique identifier for the type AppPersistent_save_Results.
const AppPersistent_save_Results_TypeID = 0xba36a34b4eeb483f

func NewAppPersistent_save_Results(s *capnp.Segment) (AppPersistent_save_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AppPersistent_save_Results(st), err
}

func NewRootAppPersistent_save_Results(s *capnp.Segment) (AppPersistent_save_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AppPersistent_save_Results(st), err
}

func ReadRootAppPersistent_save_Results(msg *capnp.Message) (AppPersistent_save_Results, error) {
	root, err := msg.Root()
	return AppPersistent_save_Results(root.Struct()), err
}

func (s AppPersistent_save_Results) String() string {
	str, _ := text.Marshal(0xba36a34b4eeb483f, capnp.Struct(s))
	return str
}

func (s AppPersistent_save_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AppPersistent_save_Results) DecodeFromPtr(p capnp.Ptr) AppPersistent_save_Results {
	return AppPersistent_save_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AppPersistent_save_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AppPersistent_save_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AppPersistent_save_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AppPersistent_save_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AppPersistent_save_Results) ObjectId() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s AppPersistent_save_Results) HasObjectId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AppPersistent_save_Results) SetObjectId(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

func (s AppPersistent_save_Results) Label() (util.LocalizedText, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return util.LocalizedText(p.Struct()), err
}

func (s AppPersistent_save_Results) HasLabel() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s AppPersistent_save_Results) SetLabel(v util.LocalizedText) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewLabel sets the label field to a newly
// allocated util.LocalizedText struct, preferring placement in s's segment.
func (s AppPersistent_save_Results) NewLabel() (util.LocalizedText, error) {
	ss, err := util.NewLocalizedText(capnp.Struct(s).Segment())
	if err != nil {
		return util.LocalizedText{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// AppPersistent_save_Results_List is a list of AppPersistent_save_Results.
type AppPersistent_save_Results_List = capnp.StructList[AppPersistent_save_Results]

// NewAppPersistent_save_Results creates a new list of AppPersistent_save_Results.
func NewAppPersistent_save_Results_List(s *capnp.Segment, sz int32) (AppPersistent_save_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[AppPersistent_save_Results](l), err
}

// AppPersistent_save_Results_Future is a wrapper for a AppPersistent_save_Results promised by a client call.
type AppPersistent_save_Results_Future struct{ *capnp.Future }

func (p AppPersistent_save_Results_Future) Struct() (AppPersistent_save_Results, error) {
	s, err := p.Future.Struct()
	return AppPersistent_save_Results(s), err
}

func (p AppPersistent_save_Results_Future) ObjectId() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p AppPersistent_save_Results_Future) Label() util.LocalizedText_Future {
	return util.LocalizedText_Future{Future: p.Future.Field(1, nil)}
}

type MainView capnp.Client

// MainView_TypeID is the unique identifier for the type MainView.
const MainView_TypeID = 0xc277e9822ae2c8fc

func (c MainView) Restore(ctx context.Context, params func(MainView_restore_Params) error) (MainView_restore_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc277e9822ae2c8fc,
			MethodID:      0,
			InterfaceName: "grain.capnp:MainView",
			MethodName:    "restore",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(MainView_restore_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return MainView_restore_Results_Future{Future: ans.Future()}, release
}
func (c MainView) Drop(ctx context.Context, params func(MainView_drop_Params) error) (MainView_drop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc277e9822ae2c8fc,
			MethodID:      1,
			InterfaceName: "grain.capnp:MainView",
			MethodName:    "drop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(MainView_drop_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return MainView_drop_Results_Future{Future: ans.Future()}, release
}
func (c MainView) GetViewInfo(ctx context.Context, params func(UiView_getViewInfo_Params) error) (UiView_ViewInfo_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      0,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "getViewInfo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UiView_getViewInfo_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UiView_ViewInfo_Future{Future: ans.Future()}, release
}
func (c MainView) NewSession(ctx context.Context, params func(UiView_newSession_Params) error) (UiView_newSession_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      1,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newSession",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UiView_newSession_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UiView_newSession_Results_Future{Future: ans.Future()}, release
}
func (c MainView) NewRequestSession(ctx context.Context, params func(UiView_newRequestSession_Params) error) (UiView_newRequestSession_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      2,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newRequestSession",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 5}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UiView_newRequestSession_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UiView_newRequestSession_Results_Future{Future: ans.Future()}, release
}
func (c MainView) NewOfferSession(ctx context.Context, params func(UiView_newOfferSession_Params) error) (UiView_newOfferSession_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      3,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newOfferSession",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 6}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UiView_newOfferSession_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UiView_newOfferSession_Results_Future{Future: ans.Future()}, release
}

func (c MainView) AddRef() MainView {
	return MainView(capnp.Client(c).AddRef())
}

func (c MainView) Release() {
	capnp.Client(c).Release()
}

func (c MainView) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (MainView) DecodeFromPtr(p capnp.Ptr) MainView {
	return MainView(capnp.Client{}.DecodeFromPtr(p))
}

func (c MainView) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A MainView_Server is a MainView with a local implementation.
type MainView_Server interface {
	Restore(context.Context, MainView_restore) error

	Drop(context.Context, MainView_drop) error

	GetViewInfo(context.Context, UiView_getViewInfo) error

	NewSession(context.Context, UiView_newSession) error

	NewRequestSession(context.Context, UiView_newRequestSession) error

	NewOfferSession(context.Context, UiView_newOfferSession) error
}

// MainView_NewServer creates a new Server from an implementation of MainView_Server.
func MainView_NewServer(s MainView_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(MainView_Methods(nil, s), s, c)
}

// MainView_ServerToClient creates a new Client from an implementation of MainView_Server.
// The caller is responsible for calling Release on the returned Client.
func MainView_ServerToClient(s MainView_Server) MainView {
	return MainView(capnp.NewClient(MainView_NewServer(s)))
}

// MainView_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func MainView_Methods(methods []server.Method, s MainView_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc277e9822ae2c8fc,
			MethodID:      0,
			InterfaceName: "grain.capnp:MainView",
			MethodName:    "restore",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Restore(ctx, MainView_restore{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc277e9822ae2c8fc,
			MethodID:      1,
			InterfaceName: "grain.capnp:MainView",
			MethodName:    "drop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Drop(ctx, MainView_drop{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      0,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "getViewInfo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetViewInfo(ctx, UiView_getViewInfo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      1,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newSession",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewSession(ctx, UiView_newSession{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      2,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newRequestSession",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewRequestSession(ctx, UiView_newRequestSession{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdbb4d798ea67e2e7,
			MethodID:      3,
			InterfaceName: "grain.capnp:UiView",
			MethodName:    "newOfferSession",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewOfferSession(ctx, UiView_newOfferSession{call})
		},
	})

	return methods
}

// MainView_restore holds the state for a server call to MainView.restore.
// See server.Call for documentation.
type MainView_restore struct {
	*server.Call
}

// Args returns the call's arguments.
func (c MainView_restore) Args() MainView_restore_Params {
	return MainView_restore_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c MainView_restore) AllocResults() (MainView_restore_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MainView_restore_Results(r), err
}

// MainView_drop holds the state for a server call to MainView.drop.
// See server.Call for documentation.
type MainView_drop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c MainView_drop) Args() MainView_drop_Params {
	return MainView_drop_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c MainView_drop) AllocResults() (MainView_drop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MainView_drop_Results(r), err
}

// MainView_List is a list of MainView.
type MainView_List = capnp.CapList[MainView]

// NewMainView creates a new list of MainView.
func NewMainView_List(s *capnp.Segment, sz int32) (MainView_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[MainView](l), err
}

type MainView_restore_Params capnp.Struct

// MainView_restore_Params_TypeID is the unique identifier for the type MainView_restore_Params.
const MainView_restore_Params_TypeID = 0x9ad62de07dfc6419

func NewMainView_restore_Params(s *capnp.Segment) (MainView_restore_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MainView_restore_Params(st), err
}

func NewRootMainView_restore_Params(s *capnp.Segment) (MainView_restore_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MainView_restore_Params(st), err
}

func ReadRootMainView_restore_Params(msg *capnp.Message) (MainView_restore_Params, error) {
	root, err := msg.Root()
	return MainView_restore_Params(root.Struct()), err
}

func (s MainView_restore_Params) String() string {
	str, _ := text.Marshal(0x9ad62de07dfc6419, capnp.Struct(s))
	return str
}

func (s MainView_restore_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MainView_restore_Params) DecodeFromPtr(p capnp.Ptr) MainView_restore_Params {
	return MainView_restore_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MainView_restore_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MainView_restore_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MainView_restore_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MainView_restore_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MainView_restore_Params) ObjectId() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s MainView_restore_Params) HasObjectId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MainView_restore_Params) SetObjectId(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// MainView_restore_Params_List is a list of MainView_restore_Params.
type MainView_restore_Params_List = capnp.StructList[MainView_restore_Params]

// NewMainView_restore_Params creates a new list of MainView_restore_Params.
func NewMainView_restore_Params_List(s *capnp.Segment, sz int32) (MainView_restore_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[MainView_restore_Params](l), err
}

// MainView_restore_Params_Future is a wrapper for a MainView_restore_Params promised by a client call.
type MainView_restore_Params_Future struct{ *capnp.Future }

func (p MainView_restore_Params_Future) Struct() (MainView_restore_Params, error) {
	s, err := p.Future.Struct()
	return MainView_restore_Params(s), err
}

func (p MainView_restore_Params_Future) ObjectId() *capnp.Future {
	return p.Future.Field(0, nil)
}

type MainView_restore_Results capnp.Struct

// MainView_restore_Results_TypeID is the unique identifier for the type MainView_restore_Results.
const MainView_restore_Results_TypeID = 0x99efcebf23bbae35

func NewMainView_restore_Results(s *capnp.Segment) (MainView_restore_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MainView_restore_Results(st), err
}

func NewRootMainView_restore_Results(s *capnp.Segment) (MainView_restore_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MainView_restore_Results(st), err
}

func ReadRootMainView_restore_Results(msg *capnp.Message) (MainView_restore_Results, error) {
	root, err := msg.Root()
	return MainView_restore_Results(root.Struct()), err
}

func (s MainView_restore_Results) String() string {
	str, _ := text.Marshal(0x99efcebf23bbae35, capnp.Struct(s))
	return str
}

func (s MainView_restore_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MainView_restore_Results) DecodeFromPtr(p capnp.Ptr) MainView_restore_Results {
	return MainView_restore_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MainView_restore_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MainView_restore_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MainView_restore_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MainView_restore_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MainView_restore_Results) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s MainView_restore_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MainView_restore_Results) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// MainView_restore_Results_List is a list of MainView_restore_Results.
type MainView_restore_Results_List = capnp.StructList[MainView_restore_Results]

// NewMainView_restore_Results creates a new list of MainView_restore_Results.
func NewMainView_restore_Results_List(s *capnp.Segment, sz int32) (MainView_restore_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[MainView_restore_Results](l), err
}

// MainView_restore_Results_Future is a wrapper for a MainView_restore_Results promised by a client call.
type MainView_restore_Results_Future struct{ *capnp.Future }

func (p MainView_restore_Results_Future) Struct() (MainView_restore_Results, error) {
	s, err := p.Future.Struct()
	return MainView_restore_Results(s), err
}

func (p MainView_restore_Results_Future) Cap() *capnp.Future {
	return p.Future.Field(0, nil)
}

type MainView_drop_Params capnp.Struct

// MainView_drop_Params_TypeID is the unique identifier for the type MainView_drop_Params.
const MainView_drop_Params_TypeID = 0x8c519e0dedc17d73

func NewMainView_drop_Params(s *capnp.Segment) (MainView_drop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MainView_drop_Params(st), err
}

func NewRootMainView_drop_Params(s *capnp.Segment) (MainView_drop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MainView_drop_Params(st), err
}

func ReadRootMainView_drop_Params(msg *capnp.Message) (MainView_drop_Params, error) {
	root, err := msg.Root()
	return MainView_drop_Params(root.Struct()), err
}

func (s MainView_drop_Params) String() string {
	str, _ := text.Marshal(0x8c519e0dedc17d73, capnp.Struct(s))
	return str
}

func (s MainView_drop_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MainView_drop_Params) DecodeFromPtr(p capnp.Ptr) MainView_drop_Params {
	return MainView_drop_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MainView_drop_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MainView_drop_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MainView_drop_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MainView_drop_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MainView_drop_Params) ObjectId() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s MainView_drop_Params) HasObjectId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MainView_drop_Params) SetObjectId(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// MainView_drop_Params_List is a list of MainView_drop_Params.
type MainView_drop_Params_List = capnp.StructList[MainView_drop_Params]

// NewMainView_drop_Params creates a new list of MainView_drop_Params.
func NewMainView_drop_Params_List(s *capnp.Segment, sz int32) (MainView_drop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[MainView_drop_Params](l), err
}

// MainView_drop_Params_Future is a wrapper for a MainView_drop_Params promised by a client call.
type MainView_drop_Params_Future struct{ *capnp.Future }

func (p MainView_drop_Params_Future) Struct() (MainView_drop_Params, error) {
	s, err := p.Future.Struct()
	return MainView_drop_Params(s), err
}

func (p MainView_drop_Params_Future) ObjectId() *capnp.Future {
	return p.Future.Field(0, nil)
}

type MainView_drop_Results capnp.Struct

// MainView_drop_Results_TypeID is the unique identifier for the type MainView_drop_Results.
const MainView_drop_Results_TypeID = 0x9210d9e69d14fa35

func NewMainView_drop_Results(s *capnp.Segment) (MainView_drop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MainView_drop_Results(st), err
}

func NewRootMainView_drop_Results(s *capnp.Segment) (MainView_drop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MainView_drop_Results(st), err
}

func ReadRootMainView_drop_Results(msg *capnp.Message) (MainView_drop_Results, error) {
	root, err := msg.Root()
	return MainView_drop_Results(root.Struct()), err
}

func (s MainView_drop_Results) String() string {
	str, _ := text.Marshal(0x9210d9e69d14fa35, capnp.Struct(s))
	return str
}

func (s MainView_drop_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MainView_drop_Results) DecodeFromPtr(p capnp.Ptr) MainView_drop_Results {
	return MainView_drop_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MainView_drop_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MainView_drop_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MainView_drop_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MainView_drop_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// MainView_drop_Results_List is a list of MainView_drop_Results.
type MainView_drop_Results_List = capnp.StructList[MainView_drop_Results]

// NewMainView_drop_Results creates a new list of MainView_drop_Results.
func NewMainView_drop_Results_List(s *capnp.Segment, sz int32) (MainView_drop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[MainView_drop_Results](l), err
}

// MainView_drop_Results_Future is a wrapper for a MainView_drop_Results promised by a client call.
type MainView_drop_Results_Future struct{ *capnp.Future }

func (p MainView_drop_Results_Future) Struct() (MainView_drop_Results, error) {
	s, err := p.Future.Struct()
	return MainView_drop_Results(s), err
}

const schema_c8d91463cfc4fb4a = "x\xda\xdcz{x\x14\xe5\xb9\xf8\xfb\xced\xd9\xc4&" +
	"\xdd\x0c\x13$\x91\x90p\x89?b*\x81$\x80J\xa5" +
	"\xb9I1\x114\x93\x00\x05~\xd2\x87\xd9\xddI2f" +
	"\xb3\xbb\xcc\xee\x12B\x8b\x88\x07\x8eR\xf1T)\x9e*" +
	"\x8fxA9\x15\x0bmm\xa1\x82\xd5\x0a\xadV\xc0\xe2" +
	"\x05\x11\xc5\x1eZ\xc1jQAE\xad\x8a\x17\xe6<\xef" +
	"7\xf3\xcdN6\x9b\x0b>\xe7\xe9\x1f\xe7\x0f\x1f\xc3\xec" +
	"\xfb}\xdf{\xbfO\x9c&\xd5dT\xe4\x0c/\x07\xa1" +
	"%_\xf0\x0c17\xd6\xcc]\x7f\xfd\x03KW\x81\x94" +
	"-\x98\x8d_<\xf5| \xef\xc8^\x00\x94O\x9f\xff" +
	"\x8e\xfc\xd5\xf9^\x00\xf9\xcc\xf9+\x00\xcd\xd7\xc7.l" +
	"<=\xea\x8d\xd5 \x8d@\x00\x0fz\x01\xaa*\x86/" +
	"@@y\xda\xf0j@\xf3\xa8z\xf9ss\x1a\x8e\xdc" +
	"\x04R\x81\x05\x90\x8bU\x0b\x87\xd7\x11\x80\xc6\x00\x9e\xff" +
	"\xde$y\xf7\xd65\xb7\x802\x06\x11 \x83nX=" +
	"\xdc \x80\xdb\x19\xc0\xb5/\x89\xc3\x1f\x886\xaeu\xdf" +
	"\xb0k\xf82\x02x\x9a\x01\xc4\x96\xef9\x95s\x8f\xb2" +
	"\x16\xa4a\x0e\xc0\x9b\xc3\xcf#\x80S\x0c\xa0\xc4_\xfb" +
	"\xee\xc1\xc9\xa1\xb5\xf4\x84h\xae<\x95\x13Z\x13)}" +
	"\x1c\x86\x09^\x04\xa8\x92\xf2\x9b\x09td~\x17\xa0y" +
	"\xf5\xea9\xed\xbb\x0f\xed\xbd\xd5z,\x83\xae\xea\xa6\xdf" +
	"3\xcc\x7f\xbf\xfap\xc3\x1d\x1f\x97\xff\x18$\x99\xa3\xa9" +
	"\xe5W\xd2/\xd7\xff\xf9\x8d\x97\x1e\xda?d\x9d\x1b\xc1" +
	"Y\xf4\x13\xcas\xf2\xe9\xfd\xc9\x9f\xe7m|\xebH\xee" +
	":\x0bAvi\"\x7f(\x1d=9\xaf\xe0\x96\xdd\xb7" +
	"\x8d\xbb\x93.5\xffq\xbc\xed\x9d;_\xd9\xfe\x17\x8b" +
	"\x8d\xf2\xc2\xfc\xcfe=\x9f\xfe\xd2\xac[~\xf1\xbb\xb1" +
	"O>\xf7\xfe]n2W\xe7\x97\xd13\xb72\x80\x82" +
	"\xe0\x97\xcb_\x1f\x7fx\x83\x1b`[\xfe\x18\x02\xd8\xc1" +
	"\x00^\xdc\xbf\xf8\xbb\xe2\xb8#\x1b@\xcaw\x84u$" +
	"\x9f\x09\xebM\x06\xb0\xf1\xa3\xd8_[\xffs\xd8F\x90" +
	"\x0a\x1d\x80\xc9\x05\xbf&\x80\xe9\x05\x04p\xf7\x90k\xfe" +
	"\xf2\xb9P\xbb\xd1\x127c\xc2\x1d\x05\x8dDI\xf7\xa8" +
	"\x93\xb86\xfa\xdb{,\xf6XGW\x16\xb0\xbboe" +
	"GG]\xfdX\xe9\xfcG\xbd\xf7\x82t>\x9a\xed#" +
	"\xdbZ\x8e\xed\xfer\x07xD\"p[\xc1k\xf2\xae" +
	"\x02\xfakG\xc1/\x01\xcdu_\xe54\xbc?%t" +
	"\xaf\xadU\x16\xb3/\xf8\x11]\x96\xb8\xe0\x1f\x80\xe6\xe8" +
	"\x85\xef\x1e[\xe7;t\xaf\x9b\xe5\xfa\x08\xf6Zb\x04" +
	"\xbd\xb6\xf4\xa7\xdf;S8\xbel\x93\x1b\x9d;F\\" +
	"G\x00\xf73\x80ko\xee\xfc\xdb\xfc\xa97mr\x09" +
	"z\xcf\x88uDI|\xe3\x9fJ\xcef_\xf3\x00(" +
	"\xd9(&\x95\xdf#\x10~\x8f\x8c\xd8/?1b8" +
	"\x80\xbco\x04az\xe2\xec\x1fg-\x99\xf0\xd9\x83 " +
	"e\x8b=\x0ceV\xe1qy~!\x01j\x853\xe4" +
	";\xe8/3Z\xda1=k\xeb\xe4\xcd\xae7W\x17" +
	"n\xa27\xff\xb6~\xcds\xbf95u3(2\x19" +
	"\x81g\x08\xe1\x9b($\xc5\xacZY\xf8c\x044\x9f" +
	"Y\xbf\xae\xf4\xa7\xe6\xc7\x0f\xb9)*(bZ6\xba" +
	"\x88(\xba\xe5\xbe\xa2\xb6}\xdb\xbe\xb3\xc5%\x9b\xda\"" +
	"?\xdd.]\xff\xc5C/oP\x7f\x0eR\x81\x98$" +
	"\x0f\xb0j|\xd1P\x94\xa7\x15\x11a\x97\x15\xcd\x90U" +
	"\xfa\xcb\xd4\xae-]\xbdb\xcc\xd6mn\xde6\x141" +
	"=S\xd8C;g\xdctt\xc3\xd2\xcf\x7f\x99B3" +
	"\xe4\xa2\xbc\xb8\xe8\xa0\xbc\x9c\xdd\xd7]4C\xdeW\xe4" +
	"\x95\xf7\x15\xf9\xccW\xb6\xdf\xb3h\xeb'o<\xe2\xbe" +
	"qO\x11\xb3\xba\x03\xec\xc6e\xd5\x0b>~\xf8\xf9\x8b" +
	"\xb7\xbb\x18s\xaah\x03\xa1>\xe2\x9e\x9dc_~S" +
	"\xb7\x7f\xf1\x08\xf4\xd3Q\xeb\xe8\xdbEd\xb0'\xc6_" +
	"\xbfo\xc3\xe1\x93\xdb]T\xcf*frttL\xc9" +
	"Ft\xc9\xd1C\xe8M+\xfe\xb5<\xbdx8\x83\xfe" +
	"\x1e\xb1\xf7\xe6\x1f<\xfb\\\xd7\xab\xdfx\xd4\xed\xc8v" +
	"\x8c\xfa\x03\xf32\xa3\x08\xc7\xe83%\x0b\x0eO\xcb\xdc" +
	"i\xd9\x06{\xe8\xc2\xd1\x0f\xd3C\x9e\x9f]\xb2\xf2\x8b" +
	"\xa7#\xbb\xdc8\x0e\x1b\xcdp\x1c=\x9ap\xbc\xe8\xcb" +
	"\xb3\xef]5\xe1\xf0.\x17y+G\x1f\xa4\xa3\xd5W" +
	"\xbe{\xf5U\x0fLy\x0c\xa4\x0b\x9c\xa3\x89\xd1S\xe9" +
	"\xe8rv\xf4\xd9[\xe6\x17\xd4M-x\x9c+\x06!" +
	"_ut\xb4\x9f\x14\xe3\xed\xd1\x0cs\xc7\x9f)\x05\xe8" +
	"\x12\xef\x1c\xc1\x8b\x02fV\xcd\x19;\x94\xae[8\x96" +
	"\xae\xd3\xdez\xa8v\xc6\xe4\xef?\x9e\xe2o2\x89%" +
	"\xf7\x8f=.o\x1bK\xf7o\x19\xfb\x0c]<\xe5\xa3" +
	"\xc0\x82\x915\xdfy\xb2\x97n\x9f\xba\xf05\xf9\xcc\x85" +
	"\x04\xf9\xcf\x0bg\x08r\xf78R\x9b\x97\x1a\xef\xfa\xd5" +
	"\xbeQsv\xf7\x82V\xc7\xfdA\xd6\xc71?6n" +
	"\x86|;\x03\xfeV\xe3\x16_\xc5?\x8e\xee\x06i\x0c" +
	"gf\xf7\xb8\xeb\x88#_\xee=^v\xe3\xdb]\x7f" +
	"H\xa3\\\xda\xb8\x87\xe5Nv\x91>\xee&9\xabt" +
	"\xb8,\x95\xfa\xccP\xe6O^=\xb1\xb8\xe8)[p" +
	"\xe4O\xaa\xb2J\x89A\xf2\xb0R2\xd1\x05\xff\xfd\xf7" +
	"w\x82\xd1\xeagS\xf5\x80^\x95\xf7\x95n\x92_," +
	"\xa53\x07J\x197\x9f\x15\xa2e\xcf_\xa3\x1dL\xf3" +
	"\xfeee\xfb\xe5\xe9e\xcc\xae\xca\xbc\xa2<\xb2\xdc+" +
	"\x8f,\xf7\x99\xdf\xde\xee?y\xb5\xb8\xf8\xa0K\xba\xc3" +
	"\xca\xf7\x13-\x1f\x14\\\xb2j\xc7\xc6{\x0e\xba\xf5>" +
	"\xab\x9c\xc5>\xa9\x9ct\xea\xab\x0d\xaf\xcf\xfdt\xd5\xff" +
	";d\xe3.\xb0\xe8YnE\xcfr\x92\xd7\xbc\xe2\x1f" +
	"=V\xff_\xeb\x0e\xbbUkc9\xb3\xc5\xcd\x0c\xe0" +
	"\x9fO\x1e\x0e\x06B\x1d\xaf\xb8\x9f\xc0\x09,z\xe6L" +
	"`\xe1\xf5\xf8\xdd\xb7\x7f\xf8\xa0\xfcZ\x8f'&\xb0\xe8" +
	"9m\x02\xdd\xe0hA\xaa\xdcvL\xd8 ?1a" +
	"\x1c\xc5\x88\x09^\x94o\x9dH\x82[\xf8\xd1\xaa\xa9\xab" +
	"\x9e\xfc\xf9[n\x84\x12\x13\x19\xc6+'\xd2u\x1d\xe1" +
	"\xd7\xba\x9e\x9f\xdf\xfe\xb6\xcb\x1e\x8fM|\x8c\xb8\xf1\x9d" +
	"\x937|\xf0\xcb\x8b.\x7f\xd7}\xf4\xc5\x89\x8dt\xf4" +
	"(;:\xef\xd2\x9b\xe6\xfe\xad\xf5\xe6\x93nZ\xa6U" +
	"l \x80Y\x15DK\xc53Yu3O\x9f\xee\x01" +
	"\xd0Y\xc1n\xe8f\x00WV~z\xe1\xef\xf7\xec\x7f" +
	"\x0f\xa4\xec\x0c7-UwU\\\x80\xf2\x96\x0a/@" +
	"\xcb\x83\x15\"\xb6\xfc\xaaB@\x00s\xee\xa3s\xaf\xea" +
	"\xd4\xdey\xdfm\xf4\xf7W\xdcH\x17nc\x17^\xbe" +
	"\x11_\xcd\x0b\xcb\x1fX\xf6\xc9d{\xa0\x82\x05\xfd\x1d" +
	"\xc7OL\xfe\xfd\x87\xa3>\x00\xa5\x10]a`\xba\xe0" +
	"\x15\xc9sT,@y\x1f\xbdW\xf5tE1\xe9\xd5" +
	"\x9e\xd9S\xb2\xe6\xe6\xff\xe4\x03+\xf62\xbex\xaaX" +
	"bqhU\xf7\x9f\xde]t\xf1i\x17\xc7NW\xd6" +
	"\xd1/_\xbc\xb6\xe6\xe677_q:UsY\xcc" +
	"<RyP~\xb3\x92\xfe:VI!\xf1\xe1\xf6\x99" +
	"-\x99\xdf_\xf1\x11(#\xd0\x91\xf4\x13UL4\xfb" +
	"\xaa\xc8\x10\"\xe7\xef\x98\xf7^m\xe5'\xbd$\xadM" +
	"\xfa\xb5\xdc9\x89\x19\xd6$/\xfd\x07`\x1e;\xf1\x1f" +
	"\xa5\xdf]\xfd\xedO\xdcz\xa3LbNm\xe1$\x92" +
	"\xd6\x9b?\xbb\xea\x86\xa7\xa43\x9f\xb8ywl\x12\x8b" +
	"\xb0\xa7&\x11\xefJ\xdb\xef\xbaw\xc1\xc5\xcb>\xe3\xae" +
	"\x8bQ\x963\x99\x94\xb7j\xd8d\xc6\x94O\x17mY" +
	"\x7fu\xc7\xd9\xcf\\\xa6S1\x85\xa5\x13c\xf7x\x0f" +
	"\xfei\xef\xe13.\xa6\x8c\x9c\xc2\x82\xd9[\xbf\xb8'" +
	"\xfb\xb5K\xa7}\xe1\xce\x0d\xb2\xa6XF5\x85\x181" +
	"\xffq\xe3\x87SF=\xfe\x85\xebR\xcf%Lf\xff" +
	"\xff\x89\xcb\x16\x9e\x9e\xbc\xf8\xac\xeb\xd2S\xf4\x9c\x09&" +
	"\\e\xb6\x19\xaa\x1e.\x0f\xa8B4\x1c\x9d\xda\x12h" +
	"\xd7\x82\x89\x90\x1enk\xd2|\x86\x1e\x096!*y" +
	"(`\x864y*\x00\x8a\xd2\xf8J\x00D\xe9\xc2:" +
	"@id#\x00\x0aR\xc1T\x80\xea\xf6H\xc2\x08u" +
	"\x17\x07U=\xd4\xbd\xa23\x12\x8e\xb7\x87\xbaM5\x1c" +
	"N\xa8\xa1P7\x00TwiZG\xa8\xdby.\x83" +
	"=\xa7\xc5bz$\\\x1f\x09\xc7\xb5\xa5\xf1r5\x10" +
	"\xd7\x97\xe8\xf1\xee\x92&\xd5P\xc5\xce\x98\x92!f\x00" +
	"d \x80\x94S\x09\xa0d\x8a\xa8\xe4\x09X\xac-\xd1" +
	"\xc2q\xcc5\xaf\x0a\xad\xdd\xf2\xceow\xff\x8c0\xca" +
	"\x05L\xb9[\x0d\x07c\xf1\x88\xd1Y\x1b\xd5\xcb\x83Z" +
	"H\x8bkAvqg\x0c\xdc\x17\x8fI^\xec5\xb4" +
	"V\x1c\x8a.o\x08\x80C{]l\xf1H\x0b6F" +
	"\xfc\xe5\xf5j(\xe4W\x03\x1d\xe5F\"\\\xd2\xac\x15" +
	"\xc7\x12\xa1\xb8\x837\xa2\x94\xf3#\x00%WD\xa5P" +
	"@3\xa0\x86\x03Z\xe8\xbb\x09\x8c'\x0c\xad9\x11\x8e" +
	"\x11\xe2  \xf6\x8b{\x9b\x16o\x08j\xe1\xb8\x1e\xef" +
	"n\x08\x964Wk=\xde \x12.H\x92 \xeaA" +
	"\xcc\x01\x01s\\W\x8at\xe5,U\x0f\xcf\xd5\xb5\xae" +
	"\xf2\xa0\x11\x89r>\xf4`D#\x80\x92-\xa2\x92/" +
	"\xa0\x19\xf1_\xa7\x05\xe2\x0dA\xc6\x00\xc4dx\x1a\x90" +
	"!1\xfb\x1f\xe5\x91\xb0\xd6\xd2\x1e\xc1\xb8\x92IO\xe4" +
	"\xa1\x00 ]T\x06\xa0\x94\x88\xa8L\x14PB\xccC" +
	"\x11\x80i\x94R*\xa22I@_W\xbb\x16F\x0f" +
	"\x08\xe8\x01,\x8e\x85\xd4@\x07f\x81\x80Y\xfdr\x88" +
	"\xbfY\xd2\xccx\x83\xb1\x9e\xa4\xcf\xd1\x19\xe1mZ\x9c" +
	"\xfe\xdf\x10n\x8d\x944\x153\x06\xf4\x84\xeby\xa7\xba" +
	"D\xeb%\xd0TE\x8cG:\xb4\xf0`\xf8\xdd\x0b1" +
	"\xc1\x85XS\xa4K3\xaa\xfd\x91\xa5\xb3\xd56\xb2\xb7" +
	"\xbe\x1e\xd3\xe3!\x0d\xb3A\xc0\xec>\x1f34\"\x80" +
	"1\xc2\x97\x8a\xb8[\xd1\x03j\x14\x87f\x88\x80=\xa4" +
	"\x99\xfe\xae&\xd5\xf0\xaa=\x8d\xf1\xeb\xabJ\xbbj\xe8" +
	"\xe1\xb6\x99z\xb8\x83\xe4\xd1\xa4\xc5\xc3j\xa7-7\xb1" +
	"'\xbae6\xbaW\x08\xe8# \x94\xcc\xbbn\x1fs" +
	"\xe7\xf69\x1f\xbe\x03\x005(a\xb1\x92!\xa0\xfb\xa3" +
	"\x84\xc3\x15\xb2:l\x12\x11s\xcd\x86\xe3?\xb8\xc4x" +
	"t\xe1-\xcca\xb90\xf1\x10&Db\x0a6\xcd\x91" +
	"\x90V\x1b\x8b\xe9m\xe1N-\x1cO+\xfc1I\xa4" +
	"\xbcKT\xe3\xdcqr\xe2g\x0aN\xe9\xdca \x14" +
	"\x89q\x9d\x8e\x01\xf4\x84\xb5u'\xacu]\xd3\xda\xaa" +
	"\x19\xf6\xd1\xb4\x9c\xacK\x0a~E\xcc\x82C)\x19\x16" +
	"S0a\x9a9\x83\xfeA\x96R>'&j\x06i" +
	"e\xb6s\xe1\xf4\x05\x00\xca\x15\"*M\xb6\x15\xd3\xc7" +
	"Y\x06\x802SD\xa5]@I\x10,{\xd7\xe8\xe9" +
	"E\"*!\x01M\xddvb 6\x04\x1d5\x0e\x18" +
	"\x1a\xfb\x0c\xc5j\xa8!\x18\xc3o\x02c\x14\xfd\xfcM" +
	"\xc0\x15Q#\xd2\xaa\x874\xcc5\xdf\xff\x12\x8dY\x7f" +
	"|\xe1\xa5T_\xefI\xc3\xb8\xd6D\xa8U\x0f\x85\x9a" +
	"\xb5\xc5\x09-\x16O:\xbb\\\x87\x04\x95\x04y\xad\x8d" +
	"-'A\xdb\x04\xa0\xb4\x8b\xa8\xacr\x91\xb0\x92\x88\xbd" +
	"ADe\xad\x80\x92(Z.k\x8d\x1f@\xb9YD" +
	"e}/[2\xb4\xc5\x09\xdd\xd0\x82\xd8\xa4\x19\x9dz" +
	",\xa6{#a\x87,\xb4\xc82\x83Z,`\xe8\xd1" +
	"8\x88\x11\x03s\xcdy\x85\xcf<\xf9\x80\xef\xf9S\x9c" +
	"\xb6\xa0\x1e\x8b\x86\xd4\xee\x06\xf0\x86[#\x98k\x9e\xfc" +
	"\xd6\x1b\xbf\xcf\xda\xd4\xb2y\xe08\x17\x8b\xab\xdd\xb5]" +
	"jGz\x93\x9a\x9aT\x84\xeav5\x1c\x0c\x91Q\xbd" +
	"^\xb7h\xd1\xd6\x92\x8f\xefL\xab\x91I-\xb3\x99\xe9" +
	"\xd2\xb3^\x0e\xe6\xdc\xf4\xcc\x93&HG\x0d-\xa0\xc6" +
	"\xb5`S\xc2\x1f\xd2c\xed\x96\xe4R\xbd\xa6;\xdcP" +
	"\x04CtU\xfa\xd8h\xf2\x90\x0c\xccI9JK\xfe" +
	"\xa4FDe\xa6K\xe2\x0d\xe4\xc8\xae\x14Q\x99- " +
	"\x0a\xe8**%\xa5\x11\x04\xcb\xef\xf4t$\xc4\xff@" +
	"\xf2\x05\x94\x92\x8f\xdb\x04\xf2h\x04.\x93\x15R]\x8e" +
	"W\x0fw0\xd4\x1d\x87 \xe12\x93{ \xa8\xb6|" +
	"\x90\x92!z\x00\x9c\x1a\x1cy\xa3J\x92\xd6\x81 \xe5" +
	"xM\xee\xb5\x90\xbb-\x8c\xd7 \xbb\xd7\xa9K]X" +
	"\xf4f9Q\xd1fD\x12\xe1`-\xcf\xbdHq\xbc" +
	"\xa1xlP\xee\xc6\x16\x90R\xe8\xf0y\x07\xb1t\xbb" +
	"\x88\xcan\x17\x9f\x9f \xd5\xd8)\xa2\xf2\x14\xf1\xd92" +
	"\xac=$\xbc\xdd\"*\x7f&\xc3\x12,\xc3\xdaG^" +
	"d\xaf\x88\xca!\x01\xa5\x0c1\x0f3\x00\xa4\x17)\x0a" +
	"\xfeYD\xe5U\x01%OF\x1ez\x00\xa4\x97\xc9." +
	"\x0f\x89\xa8\xbc.\xa04\xc4\x93\x87C\x00\xa4\xa3\x04\xf9" +
	"\xaa\x88\xca\xdf\x054\x131\xcd \x17FR\xca5_" +
	"\x92\x16\xfe\xe6\xfd\x17w\xad\xb7e\xb8\"`\xf9\x0a\x94" +
	"\x92\xf5>\x97\x9fE\xdbl\xf0vG5'\xfb\xb0\xbf" +
	"6\x81\x959\xe0P\x10\xc8\xde\x8b#\xc4\x0e\x97\xfd\xf7" +
	"o\xda\xc5q\xd5\xdf\xd0G\x86\x96dq\xd2\xc8zG" +
	"\xa0s3\xb2~\xb3\xec^\x92\x16\xfbJo\xb1\xc3\xca" +
	"K<\xae\x1e\x06\xf2\x0e\xb6$\x8d\x01A\xf2x\xbdF" +
	"\"\\\x83M\x88\xfddUv\xf2\xe93\xd4\xcesL" +
	"\xaa\x98\x05\xd5F\xa3M\x9a\x11\xd3cq\xd2\xf4$N" +
	"\xbc^E\xdeX\x92\xa42\x80\xdal\xac-Di\xbc" +
	"\xd7G\xc9\x1c\x8f\xcdN\x1b\x8fif\xba\x8f\x8c\x88\xda" +
	"\x0c\x94\xd0o\xd6F\xa3\xd7P\x82\x03\xdexC\xb0?" +
	"\xc7\xdb\xae\x1a\x1a\xc9\xcf1\x894\xa9L\x9e\x80\xbe%" +
	"\xba\xd6\x85R\xb2\xfd\xf05\xbc\"w\xed\x83\x8a\x03\x1c" +
	"\x9dL\x07\x9d\x8b\xfc\xc9|\xdb\xb1\xd0\x8a\xeb\x00\x94\x89" +
	"\"*\x97\x0b\xbd\xe3\xcf\xbf}z\xa8n\xff\x87\xbb\x9c" +
	"\xd8\x1b\x8e\xc4\xf5V=\xa0\x82/n\xa9\xdf\x81\x9a5" +
	";\xff2r\xf5\xd9\xf4\xd4\xf4\x1b\x9c{e\xc6\xc8\xf3" +
	"\x8fb\x96\x800g\x96l\xa2c\x99oNL3\x94" +
	"|\x87\x9c\xbbHw\xd6\x8b\xa8\xdc' \xa7f#9" +
	"\x87\xbbET\x1e\xa2H\x8e\x96\xc3\xd9L\x80\xf7\x89\xa8" +
	"lu9\x9c-7\x02(\x0f\x89\xa8lw9\x9cG" +
	"\x08r\xab\x88\xca^\x97\xc3y\x9a \x9f\x12QyA" +
	"\xc0b5\x1au%1j4:\x97\xd4\x12\xc4H\x18" +
	"3A\xc0LHM\xd7#]a\xcdh\x08jh\xd7" +
	"q\xc0\x7f)&7\xe5$\x08\xb9IR\x01Y\xaa\x10" +
	"1\xf46=\xac\x86\xd0J\xc9\x92\x07\x1d\x86\x0dI\xc3" +
	"\xe46-N\x91F\x0b\xf2,$\x12\x8e9\x99d\xba" +
	"\x84v\xb6\x93\xd0\x96\xd4\x1d^\xd4\xf2\xc9\x877\x0c*" +
	"\xa1u\xe55_#\xc3\xb6\x1d\xc1@fU\xaf&\x0b" +
	"(\xb7\x1e7\xa7\xd3c\xb2\xb5\x8bET.\x15\xd0d" +
	"\xa7\x83\xf5*\xa0+C\xf3\x85\xf4p\x07J\xae\x00\xd9" +
	"Sg\x87\xf4c\x81\xcdZ\x1b\xf9\x1e\x83\x82%O\xb6" +
	"{\x95\x9bn'\x15\xb7\xebH^\xb4\xbb\xb0oL\x87" +
	"}\xa5\x0b\xfb\xd4\xc2\xca\xf1QVaU\x1cR\xfdZ" +
	"(Mv2\xb8\x04\x8eWu.C\"\x8c\xee\x14Q" +
	"y\xd0\x85\xd1\xfduIK\xe2\x91{39\x90\x07E" +
	"T~\xe52\xa4m\x86m3;]\x86\xb4\xc3o'" +
	"\x03/\xb8\x0c\xe9@e2\xc6\xffk\x824K\xca\xb5" +
	"X\xdcvh\x8e\xad\xb9\x83\xf37\xfb\x0f\xce\xe9z\x1c" +
	"\xa8\x91<\xb3M\x13]\xb3V\xe9\xa2:\x10r\xf0\xac" +
	"iq@jL\xf6\x7fVX-\x91\xb8\x19\xd5\x0c=" +
	"\x12\xd4\x03D\xb4/9t\x06D_j\xc4\xb3\xe5\xc7" +
	"\x1a\x17\x84<\xc5\xbcQ\x8e\xc8^$\xfe\xbe \xa2r" +
	"\xd2%\xb2\xb7\x89\xbf\x7f\x17\xb1\x19]e\xccW\xeb\x00" +
	"\x9aQ\xc4\x96BL\xd61r\x01\x1a\x00-\xf9\xf4}" +
	"\x12}\xcf\xc8`X\xcb\x15\xe8\x07h\x99H\xdfg\xd2" +
	"w\x8f\x87\x89Nn\xc0F\x80\x96+\xe9\xfbl\xfa>" +
	"d\x08\xcb\xbbd\x05\x9b\x01Z\x9a\xe8\xfb\xb5\xf4\xdd\xeb" +
	"\xcdc\xb3\xdc\xf9\xb8\x00\xa0e\x1e}\x8f\xa3\x80D8" +
	"\xf3F\xe0.\x8ar\x93\x0d_[\x0eF$\xa4\xb9~" +
	"v&\x19\xb6K\x0cja\x9d<\x1br\xd7\x86\xbd\x0a" +
	"\xacN5\x1eho\xd6\x16C1\xc9=\xd6\xa7\xc8-" +
	"\xc0kZ[\xc1\xdb\xc3\x0b\xa7\x82\xa9\xd1\xe8l\xf2\xe7" +
	"\x96\x9a\xa6\xb5\xb8\x86@\x04\x90\x82a\xf5\xa6-\xc5\xfe" +
	"\xef\xff\xees\xae\xaa\xac[9\xbb;\x0a\xa2\x9b\xa8o" +
	"m\xd8\xfb\xcay\x7f\xbd\xf4-\xfeB\xcf\x12\xc7\xe5\xcd" +
	"\xc5\xa5,\xd1)a\x89\x0e\x1f3 \x9f\xdb\xc9\x12>" +
	"\x0c\x82\x9c\x83^Dg&\x84\xbcI-#6\x83 " +
	"\x9d\xf1\xa2\xe04\x90\x91\xb7\x83\xa5S\x95 H\xc7\xbc" +
	"(:]o\xe4\x93\x19\xe9\xe5:\x10\xa4}^\xf48" +
	"Ci\xe4#G\xe9\x89e H;\xbc8\xc4\xe9\xe1" +
	"#\x1f\x90K[\xe8\xce\x8d^\xf4:\x8dy\xe4=m" +
	"\xe9\xf6F\x10\xa45^\xccp\xa63\xc8'\x11\xd2\xf2" +
	"\xeb@\x90\x12^\xcctV+\x90\x0fv%\x9d\xce\xa9" +
	"\xac\xd8aA\x0dyT\xf3QX\xabA3\xaek\xb3" +
	"#sb\x1a\xa0Qcg\xe45\xb8\xc26\xfa\x1a4" +
	"y\xca\x01\xd5\xfcS1\xeb\xad\xd4\xa0\x19\x89j\xac\xdb" +
	"\xc5\xa2\x9d\x19\x08\xa9z'\xa9\x8d\xcf>\xc9se\xb0" +
	"\xb3\xc2\x141%\xa3\x1b$\x93Q>\xf2@\xbew " +
	"I\x0b@\x90\xb2\x18\x01\xac\xe3\x05b\xa7\xd6\xf3\xba\x01" +
	"\x1a\xcb\xa9\x81\x12y\xa3\xceG\xb8\xd3\xd3\x99\xeci\xbe" +
	"\x0a\x81|iB\xaa\xa8\x03\xa8\xbd\x18k/Gi\x16" +
	"\xa9\x08_\x1aA\xbe\x9c!\xd5R\xa6|9\xd6\xceD" +
	"i\xa1w\x85\xdd\xf4\xe3q\xdfi\xe6\xb9\x93\xe5\x1e\x1f" +
	"k\xd0GI\xfd\xb9\x1c`)]2\x01\x86A\xa4\xda" +
	"=\xb3\x1b.o\xc3\x89b\xae:\x7fL\xba:\x7fS" +
	"\xba\xe6\x149\xcf\xa0\x88J\xf4k6q\x06\xd9\xa5a" +
	"\xc2\xa2\xcc\xc7{\x85\xd6J\xb2J\x9f\xbbJ\xe9\x93\xd7" +
	"\xb41\xd7nCm\xf3'\xf3T$\xd7\x8d(=\xdd" +
	"\x98LS%\x0f\xe6\xa1\x07Q:P\x97\x0c\xb9vb" +
	"\xda\xdb\x8b-\xd1\x0c\x7fS\xbb\xa1\x82\x18K\xf7\xb3S" +
	"\xd8z\xc9\xe3\xf6\xfe=\xado\xe7\xbc\x8a\xf8c\x91\x90" +
	"\x16g\xfe\xd3\x9ex\xac\x08j\xad*\xa5O\xa9\x13\x10" +
	"!5\x01\x03f\\\x13\x99\x86\xf3\xfd\x15\xe4\xbb\x13\xf2" +
	"b\\\x07P\x1fG\xac_\x85(\xdf\xc1\x1c!\x9fM" +
	"#_A\x90\xd7\xe0~\x80\xfa\xdb\x10\xeb\xefC\x94\x1f" +
	"A\xf2\x88|2\x8b|\x93A\xdeL\xf1\xad\xfeA\xc4" +
	"\xfa\xed\x88\xf2\xd3H\xbe\x91oq \x9f\x01\xcb\xbb(" +
	"\xda\xd5\xefD\xac\xdf\x8b(\x1fA\xf2\x92|\xe6\x8d|" +
	"X+\x1f\xc0:\x00\x82\xa8\x7f\x15Q~\x1b\xc9_\xf2" +
	"\x1d\x13\xe4\xc3:\xf9(\x96\x01\x10D\xfd\x09D\xf9\x0c" +
	"\x92\xe7\xe4\xbbc\xc8\xe7\x84\xf2)v\xd7\x09\xc4\xfa\xcf" +
	"\x10\xe5,\x81\xfc$_\x11A\xbe\x14$\x7f\xc5\xf0\xfa" +
	"\x12\xb1>[@y\xa4@\x9e\x96O\xd2\x91ok\xc9" +
	"\x92@/f\x0bX_(\xa0<^\xf0b\x963\x82" +
	"F\xbe\xaa#\x8f\x166\x00\xd4\x97\x08X?I@y" +
	"\xba\xe0\xc5\xf3\x9c\xa1;\xf2\xd54\xf92\xc1\x00\xa8\xbf" +
	"T\xc0\xfa+\x05\x94\xe7\x0b^\xfc\x86\xb3\x89\x81|\xa7" +
	"L\x9e%4\x82\x03a\xf2l\x1ayA\x8b\xed\xdcO" +
	"8c7\xb7\xf3\xe8\xf1\xb1\x06\x9d\xf3Bj:\xde\xc7" +
	"\x91\xbe\xee\xe1\xa5\x05|\x9dssu\x0d\xb0\xeb\\\xce" +
	"\xa5z\xd6\xc1\x9c\xe9\xe1Y\x07\xf5\x88=\xe7<7\x82" +
	"\xec^\x01\xe0\xb9!\xe7n\xaa\x0c\xea!\xdelD\xde" +
	"m\x14\xe3\xdd\xe7t\x01\x9f\x84B1\xab\xa1\xcf\x8d\xca" +
	"dW\xb6\x0f\x90\x81\x9a>\xe7P\x18\xf2\x89C?\x95" +
	"\xadk\xba\x96:\x91\x1e\xb8\x19\x96.(\x1a\xee\x86\x8a" +
	"\xd8\xb3\xd6\x1c\x932v\xa5\x8f\xe3\x17$k\xcd\x94\xf0" +
	"7\xc0xb\x80\xa1)o\xef\x0d\xf4\xbek\xec\xdb\xf3" +
	"\xfd\xc1U\xb6\xfd\xcc\xc8\xed\xe9n_\x13Kg\x10\xc5" +
	"\xda\xf7\xf9G\x95-\xcb\xee\\\xb5{p\x139+?" +
	"d\x8c\xae\xb6D\xe7\xa6\xf3\xbat5=\xe5\x1e\x93\xac" +
	"i\x19/Dg\x83\x8f\xc9\x95\xb7r\x06\x95o\xf4\xc8" +
	"'\xa8.\x14\xb5.%\x13\xdd\xdbmY\x8d\xae\xd5\xda" +
	",\xbf\xc9\xe7\xdd\x00`\xb2)\xb3?\xb2\x14\xbc\xb3\xd5" +
	"6%\x97ES\xbe\xdc\x8b\xfc\x0ai\xb1\x1f\x04I\xa7" +
	"\x18\xca\xf7X\x90o`J\x0b)\x8d\x9dC\x91\x93\xaf" +
	"\xe7!\xdf7\x95\x1a\xd6\x81 M\xa7x\xc9w:\x91" +
	"\xaf\xc6J\x97\xdd\x08\x82T\xc1\xd2_\x86\x10K\x98j" +
	"\xd0\xe4\x9dn\x10#a\xeb\x9f\x8c\xb5\xc8\x9b\x14h\x7f" +
	"e\x13\x07\xb4E\x01\xe9\x12\xe7\xf4\x9d\xd8t\x96\xb0`" +
	"p=\xa3\xb9:\x88\xe9\xfa\xb4\xbcy\xe4,>\x0d\xa2" +
	"\xe1\x99\xb6\x17g+\xcf`Z_\xce\xf8r \x83\xf2" +
	"\xf7m\xd0\x83LU\x075 \xfa__\xceq--" +
	"X\x93\xee\xaf\xb1\xb5\xd0\xa9\x87\xf5\xceDgr\x7f\xa9" +
	"%\xa4\x8a\x81\x8e&D\xab9T\xb43xdz\xaf" +
	"QX?\xd6\xdd_\xb3t\x00\\\xd24\x00S\xf7M" +
	"2\xd25H\xdd\xddQ1\xcc\xaa\xfe<\xd6_b\xaf" +
	"/'-]jM\xa7\xad\xfe\x12}]\xd9\x9c\x1cO" +
	"\x8f\x14\xbe2\xed^\xf7\x9a\xa9\x00\xca*\x11\x95\xdb\x04" +
	"D\xbbZ\xb8u\x19\x80\xb2\xd6\xae+2\xd0\xeaOm" +
	"^g\xf7\xbf\x9f\x12\xd0\x17\x8e\x845\x18b\xaa\xa1P" +
	"m \xa0\xc5\x00c0\xa4\xda\x88\x84\xb4\x86 zA" +
	"@/\xa0\xa9\x06-=\x86jK\x93S\xbd\x94\xa1u" +
	"F\x96h\xfd6g\x06\xb3\x11\x92:\xf9\xf5\xf6\xb9\x1f" +
	"a\x9b\x07\x07$\xb8\xa4\xa1]\xa1!+\xb9r\xc5\x0c" +
	"Dk\xf2_\xe9\x9a\xfc\x0b|\xf2\xef*\x05\x89]\x02" +
	"\xa2\xd4I!#$\xa2\xb2T\xc0\\\xbb\xc9\x99 \x19" +
	"DET~\xd8O\x1d5P\xa1\x94\xa6\x16\xb2\x06\xcd" +
	"\xa9\x8d\xfdt\x11\x88\xf7+\x1c+\xeco\xc2\x8d(5" +
	"\x94%w5X\xff\x16QR\xa6\xda\xd5\xf0\xbc>\xe7" +
	"Q\xbe\xa8\x1ao\xb7\x11\x02\x09\xcf\x03\xa8\x0ek]\xb3" +
	"U\x7f\xafj\xcd\x8eF-Z\xb1\xd5zEl\x12=" +
	"\xbd=t\xfa\\%\xcdp\xaa\xd2\xf6l5.\xcf6" +
	"m\x93M\xd9\xb5\x02\x16/NhFw\xdf\x9d\xbas" +
	"\x0a\xa5\xfd7\x17\x06\xdaq\x88\xebZ\xb0\xbeo7\xd0" +
	"{\x9e\xcb3\xa3<\xe7\xbe\xe5\xa4d?\x14Q\xb9\xd9" +
	"E\xee\xea\xba\xa4M\xf3\x9e\xbb{\xe3\xc4\xe9\xb9\xdfn" +
	"\x00(\xb7\x89\xa8\xdc\xed\xea\xb9\xbb{\x0a\xff\xa2\x19x" +
	"\xfa\xbey\xdf[\x98}\xac4\xf5\xa5\xea\xe97\x12R" +
	"\xa1)Ip\xb2\xe9\xffk\x9b>}L\xd2\xf9\x82\xc0" +
	" 8\xe3\xf0\xfc\x7f\x02\x00\x00\xff\xff\xc9\xc3\x82\xb3"

func init() {
	schemas.Register(schema_c8d91463cfc4fb4a,
		0x8478a37e9456409d,
		0x85e320f14a5d23e0,
		0x87d94955ce3c61dd,
		0x8b89acc0133457cf,
		0x8c4a70a31703d35c,
		0x8c519e0dedc17d73,
		0x8c6c35d2eb416224,
		0x8dc8d4c06855854e,
		0x8f2ef49549d64e86,
		0x9206caa8d3e3cc7e,
		0x9210d9e69d14fa35,
		0x982790c08b1958ec,
		0x99efcebf23bbae35,
		0x9ad62de07dfc6419,
		0x9ad927034671cad1,
		0x9d159666de73f39d,
		0x9d4102fadb4f069c,
		0x9eb6708c01ec2079,
		0x9f07b75928ba4e20,
		0x9f6c36ef490dfd92,
		0x9fd40f92e1eb5d21,
		0xa22a2d1cf9579778,
		0xa2873a59df6d885c,
		0xa34f0cfe24c69d74,
		0xa4f82f764dc3fee8,
		0xa535ac09456b2870,
		0xa53aedb3ce8994df,
		0xa8f4ff97289294c7,
		0xa93eadc9671ea08b,
		0xab619ad5a8fb7e11,
		0xadac227f85285c65,
		0xaffa789add8747b8,
		0xb1e3f6ac609eb4d7,
		0xb42ccfaaf45a3f7a,
		0xb469e5d523b89e1b,
		0xb4ecd69ac97e2de8,
		0xb5fcc0e153671d68,
		0xb70bd877cecb7b88,
		0xb8083dd65a24c770,
		0xb96fc5fb8137a705,
		0xb9d62f4beefefc29,
		0xba36a34b4eeb483f,
		0xbc193a4219598bcb,
		0xbc286f896c0ded81,
		0xbc5e354741a8e665,
		0xbf3e401d5a63f336,
		0xc05520c9b0994ad3,
		0xc0dde7310fa94a2b,
		0xc277e9822ae2c8fc,
		0xc41e71e8d893086c,
		0xcb3f7064eae4dc5a,
		0xd2654fcf2a7002cb,
		0xd271034eec62b43b,
		0xd29e9db5843719f0,
		0xd42684f756e09afd,
		0xd692a643ba8a1f58,
		0xd76b6c6364d6bff5,
		0xda13a4f2919ce2cf,
		0xdbb4d798ea67e2e7,
		0xe6abbf843a84f35d,
		0xe96859cf77da6e6b,
		0xeb3c29aff080ec3e,
		0xec8866df56873858,
		0xecf1f14c4209c731,
		0xeecac1be25f73248,
		0xefea656d4b56b756,
		0xf0136e14d8019d3c,
		0xf020f2be35e8e2b5,
		0xf0931856093654c1,
		0xf12c60ebc67984d4,
		0xf144a5e58889dafb,
		0xf37f5e08534c68aa,
		0xf63241ee58b5166f,
		0xf63b8546288ee8e1,
		0xf6f911c4804ba7e5,
		0xf87a2c5a9f996828,
		0xf8fe6b4e94a960f7,
		0xf9d6c8c6d207c123,
		0xfb3d38da0c9eaee6,
		0xfbbc20367c72bc59,
		0xfe7135f15d39bd5b)
}
