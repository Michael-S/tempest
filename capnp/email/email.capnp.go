// Code generated by capnpc-go. DO NOT EDIT.

package email

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	util "zenhack.net/go/sandstorm/capnp/util"
)

type EmailAddress struct{ capnp.Struct }

// EmailAddress_TypeID is the unique identifier for the type EmailAddress.
const EmailAddress_TypeID = 0xacaddcee86563ee1

func NewEmailAddress(s *capnp.Segment) (EmailAddress, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return EmailAddress{st}, err
}

func NewRootEmailAddress(s *capnp.Segment) (EmailAddress, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return EmailAddress{st}, err
}

func ReadRootEmailAddress(msg *capnp.Message) (EmailAddress, error) {
	root, err := msg.Root()
	return EmailAddress{root.Struct()}, err
}

func (s EmailAddress) String() string {
	str, _ := text.Marshal(0xacaddcee86563ee1, s.Struct)
	return str
}

func (s EmailAddress) Address() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s EmailAddress) HasAddress() bool {
	return s.Struct.HasPtr(0)
}

func (s EmailAddress) AddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s EmailAddress) SetAddress(v string) error {
	return s.Struct.SetText(0, v)
}

func (s EmailAddress) Name() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s EmailAddress) HasName() bool {
	return s.Struct.HasPtr(1)
}

func (s EmailAddress) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s EmailAddress) SetName(v string) error {
	return s.Struct.SetText(1, v)
}

// EmailAddress_List is a list of EmailAddress.
type EmailAddress_List struct{ capnp.List }

// NewEmailAddress creates a new list of EmailAddress.
func NewEmailAddress_List(s *capnp.Segment, sz int32) (EmailAddress_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return EmailAddress_List{l}, err
}

func (s EmailAddress_List) At(i int) EmailAddress { return EmailAddress{s.List.Struct(i)} }

func (s EmailAddress_List) Set(i int, v EmailAddress) error { return s.List.SetStruct(i, v.Struct) }

func (s EmailAddress_List) String() string {
	str, _ := text.MarshalList(0xacaddcee86563ee1, s.List)
	return str
}

// EmailAddress_Future is a wrapper for a EmailAddress promised by a client call.
type EmailAddress_Future struct{ *capnp.Future }

func (p EmailAddress_Future) Struct() (EmailAddress, error) {
	s, err := p.Future.Struct()
	return EmailAddress{s}, err
}

type EmailAttachment struct{ capnp.Struct }

// EmailAttachment_TypeID is the unique identifier for the type EmailAttachment.
const EmailAttachment_TypeID = 0xb309c51a9d28244f

func NewEmailAttachment(s *capnp.Segment) (EmailAttachment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return EmailAttachment{st}, err
}

func NewRootEmailAttachment(s *capnp.Segment) (EmailAttachment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return EmailAttachment{st}, err
}

func ReadRootEmailAttachment(msg *capnp.Message) (EmailAttachment, error) {
	root, err := msg.Root()
	return EmailAttachment{root.Struct()}, err
}

func (s EmailAttachment) String() string {
	str, _ := text.Marshal(0xb309c51a9d28244f, s.Struct)
	return str
}

func (s EmailAttachment) ContentType() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s EmailAttachment) HasContentType() bool {
	return s.Struct.HasPtr(0)
}

func (s EmailAttachment) ContentTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s EmailAttachment) SetContentType(v string) error {
	return s.Struct.SetText(0, v)
}

func (s EmailAttachment) ContentDisposition() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s EmailAttachment) HasContentDisposition() bool {
	return s.Struct.HasPtr(1)
}

func (s EmailAttachment) ContentDispositionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s EmailAttachment) SetContentDisposition(v string) error {
	return s.Struct.SetText(1, v)
}

func (s EmailAttachment) ContentId() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s EmailAttachment) HasContentId() bool {
	return s.Struct.HasPtr(2)
}

func (s EmailAttachment) ContentIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s EmailAttachment) SetContentId(v string) error {
	return s.Struct.SetText(2, v)
}

func (s EmailAttachment) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s EmailAttachment) HasContent() bool {
	return s.Struct.HasPtr(3)
}

func (s EmailAttachment) SetContent(v []byte) error {
	return s.Struct.SetData(3, v)
}

// EmailAttachment_List is a list of EmailAttachment.
type EmailAttachment_List struct{ capnp.List }

// NewEmailAttachment creates a new list of EmailAttachment.
func NewEmailAttachment_List(s *capnp.Segment, sz int32) (EmailAttachment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return EmailAttachment_List{l}, err
}

func (s EmailAttachment_List) At(i int) EmailAttachment { return EmailAttachment{s.List.Struct(i)} }

func (s EmailAttachment_List) Set(i int, v EmailAttachment) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EmailAttachment_List) String() string {
	str, _ := text.MarshalList(0xb309c51a9d28244f, s.List)
	return str
}

// EmailAttachment_Future is a wrapper for a EmailAttachment promised by a client call.
type EmailAttachment_Future struct{ *capnp.Future }

func (p EmailAttachment_Future) Struct() (EmailAttachment, error) {
	s, err := p.Future.Struct()
	return EmailAttachment{s}, err
}

type EmailMessage struct{ capnp.Struct }

// EmailMessage_TypeID is the unique identifier for the type EmailMessage.
const EmailMessage_TypeID = 0xcff459e769562d2f

func NewEmailMessage(s *capnp.Segment) (EmailMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 12})
	return EmailMessage{st}, err
}

func NewRootEmailMessage(s *capnp.Segment) (EmailMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 12})
	return EmailMessage{st}, err
}

func ReadRootEmailMessage(msg *capnp.Message) (EmailMessage, error) {
	root, err := msg.Root()
	return EmailMessage{root.Struct()}, err
}

func (s EmailMessage) String() string {
	str, _ := text.Marshal(0xcff459e769562d2f, s.Struct)
	return str
}

func (s EmailMessage) Date() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s EmailMessage) SetDate(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s EmailMessage) From() (EmailAddress, error) {
	p, err := s.Struct.Ptr(0)
	return EmailAddress{Struct: p.Struct()}, err
}

func (s EmailMessage) HasFrom() bool {
	return s.Struct.HasPtr(0)
}

func (s EmailMessage) SetFrom(v EmailAddress) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewFrom sets the from field to a newly
// allocated EmailAddress struct, preferring placement in s's segment.
func (s EmailMessage) NewFrom() (EmailAddress, error) {
	ss, err := NewEmailAddress(s.Struct.Segment())
	if err != nil {
		return EmailAddress{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s EmailMessage) To() (EmailAddress_List, error) {
	p, err := s.Struct.Ptr(1)
	return EmailAddress_List{List: p.List()}, err
}

func (s EmailMessage) HasTo() bool {
	return s.Struct.HasPtr(1)
}

func (s EmailMessage) SetTo(v EmailAddress_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewTo sets the to field to a newly
// allocated EmailAddress_List, preferring placement in s's segment.
func (s EmailMessage) NewTo(n int32) (EmailAddress_List, error) {
	l, err := NewEmailAddress_List(s.Struct.Segment(), n)
	if err != nil {
		return EmailAddress_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s EmailMessage) Cc() (EmailAddress_List, error) {
	p, err := s.Struct.Ptr(2)
	return EmailAddress_List{List: p.List()}, err
}

func (s EmailMessage) HasCc() bool {
	return s.Struct.HasPtr(2)
}

func (s EmailMessage) SetCc(v EmailAddress_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewCc sets the cc field to a newly
// allocated EmailAddress_List, preferring placement in s's segment.
func (s EmailMessage) NewCc(n int32) (EmailAddress_List, error) {
	l, err := NewEmailAddress_List(s.Struct.Segment(), n)
	if err != nil {
		return EmailAddress_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s EmailMessage) Bcc() (EmailAddress_List, error) {
	p, err := s.Struct.Ptr(3)
	return EmailAddress_List{List: p.List()}, err
}

func (s EmailMessage) HasBcc() bool {
	return s.Struct.HasPtr(3)
}

func (s EmailMessage) SetBcc(v EmailAddress_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewBcc sets the bcc field to a newly
// allocated EmailAddress_List, preferring placement in s's segment.
func (s EmailMessage) NewBcc(n int32) (EmailAddress_List, error) {
	l, err := NewEmailAddress_List(s.Struct.Segment(), n)
	if err != nil {
		return EmailAddress_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s EmailMessage) ReplyTo() (EmailAddress, error) {
	p, err := s.Struct.Ptr(4)
	return EmailAddress{Struct: p.Struct()}, err
}

func (s EmailMessage) HasReplyTo() bool {
	return s.Struct.HasPtr(4)
}

func (s EmailMessage) SetReplyTo(v EmailAddress) error {
	return s.Struct.SetPtr(4, v.Struct.ToPtr())
}

// NewReplyTo sets the replyTo field to a newly
// allocated EmailAddress struct, preferring placement in s's segment.
func (s EmailMessage) NewReplyTo() (EmailAddress, error) {
	ss, err := NewEmailAddress(s.Struct.Segment())
	if err != nil {
		return EmailAddress{}, err
	}
	err = s.Struct.SetPtr(4, ss.Struct.ToPtr())
	return ss, err
}

func (s EmailMessage) MessageId() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s EmailMessage) HasMessageId() bool {
	return s.Struct.HasPtr(5)
}

func (s EmailMessage) MessageIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s EmailMessage) SetMessageId(v string) error {
	return s.Struct.SetText(5, v)
}

func (s EmailMessage) References() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(6)
	return capnp.TextList{List: p.List()}, err
}

func (s EmailMessage) HasReferences() bool {
	return s.Struct.HasPtr(6)
}

func (s EmailMessage) SetReferences(v capnp.TextList) error {
	return s.Struct.SetPtr(6, v.List.ToPtr())
}

// NewReferences sets the references field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s EmailMessage) NewReferences(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(6, l.List.ToPtr())
	return l, err
}

func (s EmailMessage) InReplyTo() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(7)
	return capnp.TextList{List: p.List()}, err
}

func (s EmailMessage) HasInReplyTo() bool {
	return s.Struct.HasPtr(7)
}

func (s EmailMessage) SetInReplyTo(v capnp.TextList) error {
	return s.Struct.SetPtr(7, v.List.ToPtr())
}

// NewInReplyTo sets the inReplyTo field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s EmailMessage) NewInReplyTo(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(7, l.List.ToPtr())
	return l, err
}

func (s EmailMessage) Subject() (string, error) {
	p, err := s.Struct.Ptr(8)
	return p.Text(), err
}

func (s EmailMessage) HasSubject() bool {
	return s.Struct.HasPtr(8)
}

func (s EmailMessage) SubjectBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(8)
	return p.TextBytes(), err
}

func (s EmailMessage) SetSubject(v string) error {
	return s.Struct.SetText(8, v)
}

func (s EmailMessage) Text() (string, error) {
	p, err := s.Struct.Ptr(9)
	return p.Text(), err
}

func (s EmailMessage) HasText() bool {
	return s.Struct.HasPtr(9)
}

func (s EmailMessage) TextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(9)
	return p.TextBytes(), err
}

func (s EmailMessage) SetText(v string) error {
	return s.Struct.SetText(9, v)
}

func (s EmailMessage) Html() (string, error) {
	p, err := s.Struct.Ptr(10)
	return p.Text(), err
}

func (s EmailMessage) HasHtml() bool {
	return s.Struct.HasPtr(10)
}

func (s EmailMessage) HtmlBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(10)
	return p.TextBytes(), err
}

func (s EmailMessage) SetHtml(v string) error {
	return s.Struct.SetText(10, v)
}

func (s EmailMessage) Attachments() (EmailAttachment_List, error) {
	p, err := s.Struct.Ptr(11)
	return EmailAttachment_List{List: p.List()}, err
}

func (s EmailMessage) HasAttachments() bool {
	return s.Struct.HasPtr(11)
}

func (s EmailMessage) SetAttachments(v EmailAttachment_List) error {
	return s.Struct.SetPtr(11, v.List.ToPtr())
}

// NewAttachments sets the attachments field to a newly
// allocated EmailAttachment_List, preferring placement in s's segment.
func (s EmailMessage) NewAttachments(n int32) (EmailAttachment_List, error) {
	l, err := NewEmailAttachment_List(s.Struct.Segment(), n)
	if err != nil {
		return EmailAttachment_List{}, err
	}
	err = s.Struct.SetPtr(11, l.List.ToPtr())
	return l, err
}

// EmailMessage_List is a list of EmailMessage.
type EmailMessage_List struct{ capnp.List }

// NewEmailMessage creates a new list of EmailMessage.
func NewEmailMessage_List(s *capnp.Segment, sz int32) (EmailMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 12}, sz)
	return EmailMessage_List{l}, err
}

func (s EmailMessage_List) At(i int) EmailMessage { return EmailMessage{s.List.Struct(i)} }

func (s EmailMessage_List) Set(i int, v EmailMessage) error { return s.List.SetStruct(i, v.Struct) }

func (s EmailMessage_List) String() string {
	str, _ := text.MarshalList(0xcff459e769562d2f, s.List)
	return str
}

// EmailMessage_Future is a wrapper for a EmailMessage promised by a client call.
type EmailMessage_Future struct{ *capnp.Future }

func (p EmailMessage_Future) Struct() (EmailMessage, error) {
	s, err := p.Future.Struct()
	return EmailMessage{s}, err
}

func (p EmailMessage_Future) From() EmailAddress_Future {
	return EmailAddress_Future{Future: p.Future.Field(0, nil)}
}

func (p EmailMessage_Future) ReplyTo() EmailAddress_Future {
	return EmailAddress_Future{Future: p.Future.Field(4, nil)}
}

type EmailSendPort struct{ Client *capnp.Client }

// EmailSendPort_TypeID is the unique identifier for the type EmailSendPort.
const EmailSendPort_TypeID = 0xec831dbf4cc9bcca

func (c EmailSendPort) Send(ctx context.Context, params func(EmailSendPort_send_Params) error) (EmailSendPort_send_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xec831dbf4cc9bcca,
			MethodID:      0,
			InterfaceName: "email.capnp:EmailSendPort",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EmailSendPort_send_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EmailSendPort_send_Results_Future{Future: ans.Future()}, release
}
func (c EmailSendPort) HintAddress(ctx context.Context, params func(EmailSendPort_hintAddress_Params) error) (EmailSendPort_hintAddress_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xec831dbf4cc9bcca,
			MethodID:      1,
			InterfaceName: "email.capnp:EmailSendPort",
			MethodName:    "hintAddress",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EmailSendPort_hintAddress_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EmailSendPort_hintAddress_Results_Future{Future: ans.Future()}, release
}

func (c EmailSendPort) AddRef() EmailSendPort {
	return EmailSendPort{
		Client: c.Client.AddRef(),
	}
}

func (c EmailSendPort) Release() {
	c.Client.Release()
}

// A EmailSendPort_Server is a EmailSendPort with a local implementation.
type EmailSendPort_Server interface {
	Send(context.Context, EmailSendPort_send) error

	HintAddress(context.Context, EmailSendPort_hintAddress) error
}

// EmailSendPort_NewServer creates a new Server from an implementation of EmailSendPort_Server.
func EmailSendPort_NewServer(s EmailSendPort_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EmailSendPort_Methods(nil, s), s, c, policy)
}

// EmailSendPort_ServerToClient creates a new Client from an implementation of EmailSendPort_Server.
// The caller is responsible for calling Release on the returned Client.
func EmailSendPort_ServerToClient(s EmailSendPort_Server, policy *server.Policy) EmailSendPort {
	return EmailSendPort{Client: capnp.NewClient(EmailSendPort_NewServer(s, policy))}
}

// EmailSendPort_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EmailSendPort_Methods(methods []server.Method, s EmailSendPort_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xec831dbf4cc9bcca,
			MethodID:      0,
			InterfaceName: "email.capnp:EmailSendPort",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, EmailSendPort_send{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xec831dbf4cc9bcca,
			MethodID:      1,
			InterfaceName: "email.capnp:EmailSendPort",
			MethodName:    "hintAddress",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.HintAddress(ctx, EmailSendPort_hintAddress{call})
		},
	})

	return methods
}

// EmailSendPort_send holds the state for a server call to EmailSendPort.send.
// See server.Call for documentation.
type EmailSendPort_send struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EmailSendPort_send) Args() EmailSendPort_send_Params {
	return EmailSendPort_send_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c EmailSendPort_send) AllocResults() (EmailSendPort_send_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EmailSendPort_send_Results{Struct: r}, err
}

// EmailSendPort_hintAddress holds the state for a server call to EmailSendPort.hintAddress.
// See server.Call for documentation.
type EmailSendPort_hintAddress struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EmailSendPort_hintAddress) Args() EmailSendPort_hintAddress_Params {
	return EmailSendPort_hintAddress_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c EmailSendPort_hintAddress) AllocResults() (EmailSendPort_hintAddress_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EmailSendPort_hintAddress_Results{Struct: r}, err
}

type EmailSendPort_PowerboxTag struct{ capnp.Struct }

// EmailSendPort_PowerboxTag_TypeID is the unique identifier for the type EmailSendPort_PowerboxTag.
const EmailSendPort_PowerboxTag_TypeID = 0x90790c61fc899dd3

func NewEmailSendPort_PowerboxTag(s *capnp.Segment) (EmailSendPort_PowerboxTag, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return EmailSendPort_PowerboxTag{st}, err
}

func NewRootEmailSendPort_PowerboxTag(s *capnp.Segment) (EmailSendPort_PowerboxTag, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return EmailSendPort_PowerboxTag{st}, err
}

func ReadRootEmailSendPort_PowerboxTag(msg *capnp.Message) (EmailSendPort_PowerboxTag, error) {
	root, err := msg.Root()
	return EmailSendPort_PowerboxTag{root.Struct()}, err
}

func (s EmailSendPort_PowerboxTag) String() string {
	str, _ := text.Marshal(0x90790c61fc899dd3, s.Struct)
	return str
}

func (s EmailSendPort_PowerboxTag) FromHint() (EmailAddress, error) {
	p, err := s.Struct.Ptr(0)
	return EmailAddress{Struct: p.Struct()}, err
}

func (s EmailSendPort_PowerboxTag) HasFromHint() bool {
	return s.Struct.HasPtr(0)
}

func (s EmailSendPort_PowerboxTag) SetFromHint(v EmailAddress) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewFromHint sets the fromHint field to a newly
// allocated EmailAddress struct, preferring placement in s's segment.
func (s EmailSendPort_PowerboxTag) NewFromHint() (EmailAddress, error) {
	ss, err := NewEmailAddress(s.Struct.Segment())
	if err != nil {
		return EmailAddress{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s EmailSendPort_PowerboxTag) ListIdHint() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s EmailSendPort_PowerboxTag) HasListIdHint() bool {
	return s.Struct.HasPtr(1)
}

func (s EmailSendPort_PowerboxTag) ListIdHintBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s EmailSendPort_PowerboxTag) SetListIdHint(v string) error {
	return s.Struct.SetText(1, v)
}

// EmailSendPort_PowerboxTag_List is a list of EmailSendPort_PowerboxTag.
type EmailSendPort_PowerboxTag_List struct{ capnp.List }

// NewEmailSendPort_PowerboxTag creates a new list of EmailSendPort_PowerboxTag.
func NewEmailSendPort_PowerboxTag_List(s *capnp.Segment, sz int32) (EmailSendPort_PowerboxTag_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return EmailSendPort_PowerboxTag_List{l}, err
}

func (s EmailSendPort_PowerboxTag_List) At(i int) EmailSendPort_PowerboxTag {
	return EmailSendPort_PowerboxTag{s.List.Struct(i)}
}

func (s EmailSendPort_PowerboxTag_List) Set(i int, v EmailSendPort_PowerboxTag) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EmailSendPort_PowerboxTag_List) String() string {
	str, _ := text.MarshalList(0x90790c61fc899dd3, s.List)
	return str
}

// EmailSendPort_PowerboxTag_Future is a wrapper for a EmailSendPort_PowerboxTag promised by a client call.
type EmailSendPort_PowerboxTag_Future struct{ *capnp.Future }

func (p EmailSendPort_PowerboxTag_Future) Struct() (EmailSendPort_PowerboxTag, error) {
	s, err := p.Future.Struct()
	return EmailSendPort_PowerboxTag{s}, err
}

func (p EmailSendPort_PowerboxTag_Future) FromHint() EmailAddress_Future {
	return EmailAddress_Future{Future: p.Future.Field(0, nil)}
}

type EmailSendPort_send_Params struct{ capnp.Struct }

// EmailSendPort_send_Params_TypeID is the unique identifier for the type EmailSendPort_send_Params.
const EmailSendPort_send_Params_TypeID = 0xa5adb72b4ccc59ee

func NewEmailSendPort_send_Params(s *capnp.Segment) (EmailSendPort_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EmailSendPort_send_Params{st}, err
}

func NewRootEmailSendPort_send_Params(s *capnp.Segment) (EmailSendPort_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EmailSendPort_send_Params{st}, err
}

func ReadRootEmailSendPort_send_Params(msg *capnp.Message) (EmailSendPort_send_Params, error) {
	root, err := msg.Root()
	return EmailSendPort_send_Params{root.Struct()}, err
}

func (s EmailSendPort_send_Params) String() string {
	str, _ := text.Marshal(0xa5adb72b4ccc59ee, s.Struct)
	return str
}

func (s EmailSendPort_send_Params) Email() (EmailMessage, error) {
	p, err := s.Struct.Ptr(0)
	return EmailMessage{Struct: p.Struct()}, err
}

func (s EmailSendPort_send_Params) HasEmail() bool {
	return s.Struct.HasPtr(0)
}

func (s EmailSendPort_send_Params) SetEmail(v EmailMessage) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEmail sets the email field to a newly
// allocated EmailMessage struct, preferring placement in s's segment.
func (s EmailSendPort_send_Params) NewEmail() (EmailMessage, error) {
	ss, err := NewEmailMessage(s.Struct.Segment())
	if err != nil {
		return EmailMessage{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// EmailSendPort_send_Params_List is a list of EmailSendPort_send_Params.
type EmailSendPort_send_Params_List struct{ capnp.List }

// NewEmailSendPort_send_Params creates a new list of EmailSendPort_send_Params.
func NewEmailSendPort_send_Params_List(s *capnp.Segment, sz int32) (EmailSendPort_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EmailSendPort_send_Params_List{l}, err
}

func (s EmailSendPort_send_Params_List) At(i int) EmailSendPort_send_Params {
	return EmailSendPort_send_Params{s.List.Struct(i)}
}

func (s EmailSendPort_send_Params_List) Set(i int, v EmailSendPort_send_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EmailSendPort_send_Params_List) String() string {
	str, _ := text.MarshalList(0xa5adb72b4ccc59ee, s.List)
	return str
}

// EmailSendPort_send_Params_Future is a wrapper for a EmailSendPort_send_Params promised by a client call.
type EmailSendPort_send_Params_Future struct{ *capnp.Future }

func (p EmailSendPort_send_Params_Future) Struct() (EmailSendPort_send_Params, error) {
	s, err := p.Future.Struct()
	return EmailSendPort_send_Params{s}, err
}

func (p EmailSendPort_send_Params_Future) Email() EmailMessage_Future {
	return EmailMessage_Future{Future: p.Future.Field(0, nil)}
}

type EmailSendPort_send_Results struct{ capnp.Struct }

// EmailSendPort_send_Results_TypeID is the unique identifier for the type EmailSendPort_send_Results.
const EmailSendPort_send_Results_TypeID = 0xd063b4e6c91bf8d8

func NewEmailSendPort_send_Results(s *capnp.Segment) (EmailSendPort_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EmailSendPort_send_Results{st}, err
}

func NewRootEmailSendPort_send_Results(s *capnp.Segment) (EmailSendPort_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EmailSendPort_send_Results{st}, err
}

func ReadRootEmailSendPort_send_Results(msg *capnp.Message) (EmailSendPort_send_Results, error) {
	root, err := msg.Root()
	return EmailSendPort_send_Results{root.Struct()}, err
}

func (s EmailSendPort_send_Results) String() string {
	str, _ := text.Marshal(0xd063b4e6c91bf8d8, s.Struct)
	return str
}

// EmailSendPort_send_Results_List is a list of EmailSendPort_send_Results.
type EmailSendPort_send_Results_List struct{ capnp.List }

// NewEmailSendPort_send_Results creates a new list of EmailSendPort_send_Results.
func NewEmailSendPort_send_Results_List(s *capnp.Segment, sz int32) (EmailSendPort_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return EmailSendPort_send_Results_List{l}, err
}

func (s EmailSendPort_send_Results_List) At(i int) EmailSendPort_send_Results {
	return EmailSendPort_send_Results{s.List.Struct(i)}
}

func (s EmailSendPort_send_Results_List) Set(i int, v EmailSendPort_send_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EmailSendPort_send_Results_List) String() string {
	str, _ := text.MarshalList(0xd063b4e6c91bf8d8, s.List)
	return str
}

// EmailSendPort_send_Results_Future is a wrapper for a EmailSendPort_send_Results promised by a client call.
type EmailSendPort_send_Results_Future struct{ *capnp.Future }

func (p EmailSendPort_send_Results_Future) Struct() (EmailSendPort_send_Results, error) {
	s, err := p.Future.Struct()
	return EmailSendPort_send_Results{s}, err
}

type EmailSendPort_hintAddress_Params struct{ capnp.Struct }

// EmailSendPort_hintAddress_Params_TypeID is the unique identifier for the type EmailSendPort_hintAddress_Params.
const EmailSendPort_hintAddress_Params_TypeID = 0x9c78c3c5de56e4d4

func NewEmailSendPort_hintAddress_Params(s *capnp.Segment) (EmailSendPort_hintAddress_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EmailSendPort_hintAddress_Params{st}, err
}

func NewRootEmailSendPort_hintAddress_Params(s *capnp.Segment) (EmailSendPort_hintAddress_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EmailSendPort_hintAddress_Params{st}, err
}

func ReadRootEmailSendPort_hintAddress_Params(msg *capnp.Message) (EmailSendPort_hintAddress_Params, error) {
	root, err := msg.Root()
	return EmailSendPort_hintAddress_Params{root.Struct()}, err
}

func (s EmailSendPort_hintAddress_Params) String() string {
	str, _ := text.Marshal(0x9c78c3c5de56e4d4, s.Struct)
	return str
}

func (s EmailSendPort_hintAddress_Params) Address() (EmailAddress, error) {
	p, err := s.Struct.Ptr(0)
	return EmailAddress{Struct: p.Struct()}, err
}

func (s EmailSendPort_hintAddress_Params) HasAddress() bool {
	return s.Struct.HasPtr(0)
}

func (s EmailSendPort_hintAddress_Params) SetAddress(v EmailAddress) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddress sets the address field to a newly
// allocated EmailAddress struct, preferring placement in s's segment.
func (s EmailSendPort_hintAddress_Params) NewAddress() (EmailAddress, error) {
	ss, err := NewEmailAddress(s.Struct.Segment())
	if err != nil {
		return EmailAddress{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// EmailSendPort_hintAddress_Params_List is a list of EmailSendPort_hintAddress_Params.
type EmailSendPort_hintAddress_Params_List struct{ capnp.List }

// NewEmailSendPort_hintAddress_Params creates a new list of EmailSendPort_hintAddress_Params.
func NewEmailSendPort_hintAddress_Params_List(s *capnp.Segment, sz int32) (EmailSendPort_hintAddress_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EmailSendPort_hintAddress_Params_List{l}, err
}

func (s EmailSendPort_hintAddress_Params_List) At(i int) EmailSendPort_hintAddress_Params {
	return EmailSendPort_hintAddress_Params{s.List.Struct(i)}
}

func (s EmailSendPort_hintAddress_Params_List) Set(i int, v EmailSendPort_hintAddress_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EmailSendPort_hintAddress_Params_List) String() string {
	str, _ := text.MarshalList(0x9c78c3c5de56e4d4, s.List)
	return str
}

// EmailSendPort_hintAddress_Params_Future is a wrapper for a EmailSendPort_hintAddress_Params promised by a client call.
type EmailSendPort_hintAddress_Params_Future struct{ *capnp.Future }

func (p EmailSendPort_hintAddress_Params_Future) Struct() (EmailSendPort_hintAddress_Params, error) {
	s, err := p.Future.Struct()
	return EmailSendPort_hintAddress_Params{s}, err
}

func (p EmailSendPort_hintAddress_Params_Future) Address() EmailAddress_Future {
	return EmailAddress_Future{Future: p.Future.Field(0, nil)}
}

type EmailSendPort_hintAddress_Results struct{ capnp.Struct }

// EmailSendPort_hintAddress_Results_TypeID is the unique identifier for the type EmailSendPort_hintAddress_Results.
const EmailSendPort_hintAddress_Results_TypeID = 0xbd727a009329aabc

func NewEmailSendPort_hintAddress_Results(s *capnp.Segment) (EmailSendPort_hintAddress_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EmailSendPort_hintAddress_Results{st}, err
}

func NewRootEmailSendPort_hintAddress_Results(s *capnp.Segment) (EmailSendPort_hintAddress_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EmailSendPort_hintAddress_Results{st}, err
}

func ReadRootEmailSendPort_hintAddress_Results(msg *capnp.Message) (EmailSendPort_hintAddress_Results, error) {
	root, err := msg.Root()
	return EmailSendPort_hintAddress_Results{root.Struct()}, err
}

func (s EmailSendPort_hintAddress_Results) String() string {
	str, _ := text.Marshal(0xbd727a009329aabc, s.Struct)
	return str
}

// EmailSendPort_hintAddress_Results_List is a list of EmailSendPort_hintAddress_Results.
type EmailSendPort_hintAddress_Results_List struct{ capnp.List }

// NewEmailSendPort_hintAddress_Results creates a new list of EmailSendPort_hintAddress_Results.
func NewEmailSendPort_hintAddress_Results_List(s *capnp.Segment, sz int32) (EmailSendPort_hintAddress_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return EmailSendPort_hintAddress_Results_List{l}, err
}

func (s EmailSendPort_hintAddress_Results_List) At(i int) EmailSendPort_hintAddress_Results {
	return EmailSendPort_hintAddress_Results{s.List.Struct(i)}
}

func (s EmailSendPort_hintAddress_Results_List) Set(i int, v EmailSendPort_hintAddress_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EmailSendPort_hintAddress_Results_List) String() string {
	str, _ := text.MarshalList(0xbd727a009329aabc, s.List)
	return str
}

// EmailSendPort_hintAddress_Results_Future is a wrapper for a EmailSendPort_hintAddress_Results promised by a client call.
type EmailSendPort_hintAddress_Results_Future struct{ *capnp.Future }

func (p EmailSendPort_hintAddress_Results_Future) Struct() (EmailSendPort_hintAddress_Results, error) {
	s, err := p.Future.Struct()
	return EmailSendPort_hintAddress_Results{s}, err
}

type VerifiedEmail struct{ Client *capnp.Client }

// VerifiedEmail_TypeID is the unique identifier for the type VerifiedEmail.
const VerifiedEmail_TypeID = 0xf88bf102464dfa5a

func (c VerifiedEmail) AddRef() VerifiedEmail {
	return VerifiedEmail{
		Client: c.Client.AddRef(),
	}
}

func (c VerifiedEmail) Release() {
	c.Client.Release()
}

// A VerifiedEmail_Server is a VerifiedEmail with a local implementation.
type VerifiedEmail_Server interface {
}

// VerifiedEmail_NewServer creates a new Server from an implementation of VerifiedEmail_Server.
func VerifiedEmail_NewServer(s VerifiedEmail_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(VerifiedEmail_Methods(nil, s), s, c, policy)
}

// VerifiedEmail_ServerToClient creates a new Client from an implementation of VerifiedEmail_Server.
// The caller is responsible for calling Release on the returned Client.
func VerifiedEmail_ServerToClient(s VerifiedEmail_Server, policy *server.Policy) VerifiedEmail {
	return VerifiedEmail{Client: capnp.NewClient(VerifiedEmail_NewServer(s, policy))}
}

// VerifiedEmail_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func VerifiedEmail_Methods(methods []server.Method, s VerifiedEmail_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 0)
	}

	return methods
}

type VerifiedEmail_PowerboxTag struct{ capnp.Struct }

// VerifiedEmail_PowerboxTag_TypeID is the unique identifier for the type VerifiedEmail_PowerboxTag.
const VerifiedEmail_PowerboxTag_TypeID = 0x97469291ac5bb892

func NewVerifiedEmail_PowerboxTag(s *capnp.Segment) (VerifiedEmail_PowerboxTag, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return VerifiedEmail_PowerboxTag{st}, err
}

func NewRootVerifiedEmail_PowerboxTag(s *capnp.Segment) (VerifiedEmail_PowerboxTag, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return VerifiedEmail_PowerboxTag{st}, err
}

func ReadRootVerifiedEmail_PowerboxTag(msg *capnp.Message) (VerifiedEmail_PowerboxTag, error) {
	root, err := msg.Root()
	return VerifiedEmail_PowerboxTag{root.Struct()}, err
}

func (s VerifiedEmail_PowerboxTag) String() string {
	str, _ := text.Marshal(0x97469291ac5bb892, s.Struct)
	return str
}

func (s VerifiedEmail_PowerboxTag) VerifierId() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s VerifiedEmail_PowerboxTag) HasVerifierId() bool {
	return s.Struct.HasPtr(0)
}

func (s VerifiedEmail_PowerboxTag) SetVerifierId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s VerifiedEmail_PowerboxTag) Address() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s VerifiedEmail_PowerboxTag) HasAddress() bool {
	return s.Struct.HasPtr(1)
}

func (s VerifiedEmail_PowerboxTag) AddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s VerifiedEmail_PowerboxTag) SetAddress(v string) error {
	return s.Struct.SetText(1, v)
}

func (s VerifiedEmail_PowerboxTag) Domain() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s VerifiedEmail_PowerboxTag) HasDomain() bool {
	return s.Struct.HasPtr(2)
}

func (s VerifiedEmail_PowerboxTag) DomainBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s VerifiedEmail_PowerboxTag) SetDomain(v string) error {
	return s.Struct.SetText(2, v)
}

// VerifiedEmail_PowerboxTag_List is a list of VerifiedEmail_PowerboxTag.
type VerifiedEmail_PowerboxTag_List struct{ capnp.List }

// NewVerifiedEmail_PowerboxTag creates a new list of VerifiedEmail_PowerboxTag.
func NewVerifiedEmail_PowerboxTag_List(s *capnp.Segment, sz int32) (VerifiedEmail_PowerboxTag_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return VerifiedEmail_PowerboxTag_List{l}, err
}

func (s VerifiedEmail_PowerboxTag_List) At(i int) VerifiedEmail_PowerboxTag {
	return VerifiedEmail_PowerboxTag{s.List.Struct(i)}
}

func (s VerifiedEmail_PowerboxTag_List) Set(i int, v VerifiedEmail_PowerboxTag) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VerifiedEmail_PowerboxTag_List) String() string {
	str, _ := text.MarshalList(0x97469291ac5bb892, s.List)
	return str
}

// VerifiedEmail_PowerboxTag_Future is a wrapper for a VerifiedEmail_PowerboxTag promised by a client call.
type VerifiedEmail_PowerboxTag_Future struct{ *capnp.Future }

func (p VerifiedEmail_PowerboxTag_Future) Struct() (VerifiedEmail_PowerboxTag, error) {
	s, err := p.Future.Struct()
	return VerifiedEmail_PowerboxTag{s}, err
}

type VerifiedEmailSendPort struct{ Client *capnp.Client }

// VerifiedEmailSendPort_TypeID is the unique identifier for the type VerifiedEmailSendPort.
const VerifiedEmailSendPort_TypeID = 0xa3cc885445aed8e9

func (c VerifiedEmailSendPort) Send(ctx context.Context, params func(EmailSendPort_send_Params) error) (EmailSendPort_send_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xec831dbf4cc9bcca,
			MethodID:      0,
			InterfaceName: "email.capnp:EmailSendPort",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EmailSendPort_send_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EmailSendPort_send_Results_Future{Future: ans.Future()}, release
}
func (c VerifiedEmailSendPort) HintAddress(ctx context.Context, params func(EmailSendPort_hintAddress_Params) error) (EmailSendPort_hintAddress_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xec831dbf4cc9bcca,
			MethodID:      1,
			InterfaceName: "email.capnp:EmailSendPort",
			MethodName:    "hintAddress",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EmailSendPort_hintAddress_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EmailSendPort_hintAddress_Results_Future{Future: ans.Future()}, release
}

func (c VerifiedEmailSendPort) AddRef() VerifiedEmailSendPort {
	return VerifiedEmailSendPort{
		Client: c.Client.AddRef(),
	}
}

func (c VerifiedEmailSendPort) Release() {
	c.Client.Release()
}

// A VerifiedEmailSendPort_Server is a VerifiedEmailSendPort with a local implementation.
type VerifiedEmailSendPort_Server interface {
	Send(context.Context, EmailSendPort_send) error

	HintAddress(context.Context, EmailSendPort_hintAddress) error
}

// VerifiedEmailSendPort_NewServer creates a new Server from an implementation of VerifiedEmailSendPort_Server.
func VerifiedEmailSendPort_NewServer(s VerifiedEmailSendPort_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(VerifiedEmailSendPort_Methods(nil, s), s, c, policy)
}

// VerifiedEmailSendPort_ServerToClient creates a new Client from an implementation of VerifiedEmailSendPort_Server.
// The caller is responsible for calling Release on the returned Client.
func VerifiedEmailSendPort_ServerToClient(s VerifiedEmailSendPort_Server, policy *server.Policy) VerifiedEmailSendPort {
	return VerifiedEmailSendPort{Client: capnp.NewClient(VerifiedEmailSendPort_NewServer(s, policy))}
}

// VerifiedEmailSendPort_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func VerifiedEmailSendPort_Methods(methods []server.Method, s VerifiedEmailSendPort_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xec831dbf4cc9bcca,
			MethodID:      0,
			InterfaceName: "email.capnp:EmailSendPort",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, EmailSendPort_send{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xec831dbf4cc9bcca,
			MethodID:      1,
			InterfaceName: "email.capnp:EmailSendPort",
			MethodName:    "hintAddress",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.HintAddress(ctx, EmailSendPort_hintAddress{call})
		},
	})

	return methods
}

type VerifiedEmailSendPort_PowerboxTag struct{ capnp.Struct }

// VerifiedEmailSendPort_PowerboxTag_TypeID is the unique identifier for the type VerifiedEmailSendPort_PowerboxTag.
const VerifiedEmailSendPort_PowerboxTag_TypeID = 0x8f555bd4141fbb3b

func NewVerifiedEmailSendPort_PowerboxTag(s *capnp.Segment) (VerifiedEmailSendPort_PowerboxTag, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VerifiedEmailSendPort_PowerboxTag{st}, err
}

func NewRootVerifiedEmailSendPort_PowerboxTag(s *capnp.Segment) (VerifiedEmailSendPort_PowerboxTag, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VerifiedEmailSendPort_PowerboxTag{st}, err
}

func ReadRootVerifiedEmailSendPort_PowerboxTag(msg *capnp.Message) (VerifiedEmailSendPort_PowerboxTag, error) {
	root, err := msg.Root()
	return VerifiedEmailSendPort_PowerboxTag{root.Struct()}, err
}

func (s VerifiedEmailSendPort_PowerboxTag) String() string {
	str, _ := text.Marshal(0x8f555bd4141fbb3b, s.Struct)
	return str
}

func (s VerifiedEmailSendPort_PowerboxTag) Verification() (VerifiedEmail_PowerboxTag, error) {
	p, err := s.Struct.Ptr(0)
	return VerifiedEmail_PowerboxTag{Struct: p.Struct()}, err
}

func (s VerifiedEmailSendPort_PowerboxTag) HasVerification() bool {
	return s.Struct.HasPtr(0)
}

func (s VerifiedEmailSendPort_PowerboxTag) SetVerification(v VerifiedEmail_PowerboxTag) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVerification sets the verification field to a newly
// allocated VerifiedEmail_PowerboxTag struct, preferring placement in s's segment.
func (s VerifiedEmailSendPort_PowerboxTag) NewVerification() (VerifiedEmail_PowerboxTag, error) {
	ss, err := NewVerifiedEmail_PowerboxTag(s.Struct.Segment())
	if err != nil {
		return VerifiedEmail_PowerboxTag{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s VerifiedEmailSendPort_PowerboxTag) Port() (EmailSendPort_PowerboxTag, error) {
	p, err := s.Struct.Ptr(1)
	return EmailSendPort_PowerboxTag{Struct: p.Struct()}, err
}

func (s VerifiedEmailSendPort_PowerboxTag) HasPort() bool {
	return s.Struct.HasPtr(1)
}

func (s VerifiedEmailSendPort_PowerboxTag) SetPort(v EmailSendPort_PowerboxTag) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewPort sets the port field to a newly
// allocated EmailSendPort_PowerboxTag struct, preferring placement in s's segment.
func (s VerifiedEmailSendPort_PowerboxTag) NewPort() (EmailSendPort_PowerboxTag, error) {
	ss, err := NewEmailSendPort_PowerboxTag(s.Struct.Segment())
	if err != nil {
		return EmailSendPort_PowerboxTag{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// VerifiedEmailSendPort_PowerboxTag_List is a list of VerifiedEmailSendPort_PowerboxTag.
type VerifiedEmailSendPort_PowerboxTag_List struct{ capnp.List }

// NewVerifiedEmailSendPort_PowerboxTag creates a new list of VerifiedEmailSendPort_PowerboxTag.
func NewVerifiedEmailSendPort_PowerboxTag_List(s *capnp.Segment, sz int32) (VerifiedEmailSendPort_PowerboxTag_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return VerifiedEmailSendPort_PowerboxTag_List{l}, err
}

func (s VerifiedEmailSendPort_PowerboxTag_List) At(i int) VerifiedEmailSendPort_PowerboxTag {
	return VerifiedEmailSendPort_PowerboxTag{s.List.Struct(i)}
}

func (s VerifiedEmailSendPort_PowerboxTag_List) Set(i int, v VerifiedEmailSendPort_PowerboxTag) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VerifiedEmailSendPort_PowerboxTag_List) String() string {
	str, _ := text.MarshalList(0x8f555bd4141fbb3b, s.List)
	return str
}

// VerifiedEmailSendPort_PowerboxTag_Future is a wrapper for a VerifiedEmailSendPort_PowerboxTag promised by a client call.
type VerifiedEmailSendPort_PowerboxTag_Future struct{ *capnp.Future }

func (p VerifiedEmailSendPort_PowerboxTag_Future) Struct() (VerifiedEmailSendPort_PowerboxTag, error) {
	s, err := p.Future.Struct()
	return VerifiedEmailSendPort_PowerboxTag{s}, err
}

func (p VerifiedEmailSendPort_PowerboxTag_Future) Verification() VerifiedEmail_PowerboxTag_Future {
	return VerifiedEmail_PowerboxTag_Future{Future: p.Future.Field(0, nil)}
}

func (p VerifiedEmailSendPort_PowerboxTag_Future) Port() EmailSendPort_PowerboxTag_Future {
	return EmailSendPort_PowerboxTag_Future{Future: p.Future.Field(1, nil)}
}

type EmailVerifier struct{ Client *capnp.Client }

// EmailVerifier_TypeID is the unique identifier for the type EmailVerifier.
const EmailVerifier_TypeID = 0xd458f7ca9d1ba9ff

func (c EmailVerifier) GetId(ctx context.Context, params func(EmailVerifier_getId_Params) error) (EmailVerifier_getId_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd458f7ca9d1ba9ff,
			MethodID:      0,
			InterfaceName: "email.capnp:EmailVerifier",
			MethodName:    "getId",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EmailVerifier_getId_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EmailVerifier_getId_Results_Future{Future: ans.Future()}, release
}
func (c EmailVerifier) VerifyEmail(ctx context.Context, params func(EmailVerifier_verifyEmail_Params) error) (EmailVerifier_verifyEmail_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd458f7ca9d1ba9ff,
			MethodID:      1,
			InterfaceName: "email.capnp:EmailVerifier",
			MethodName:    "verifyEmail",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EmailVerifier_verifyEmail_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EmailVerifier_verifyEmail_Results_Future{Future: ans.Future()}, release
}

func (c EmailVerifier) AddRef() EmailVerifier {
	return EmailVerifier{
		Client: c.Client.AddRef(),
	}
}

func (c EmailVerifier) Release() {
	c.Client.Release()
}

// A EmailVerifier_Server is a EmailVerifier with a local implementation.
type EmailVerifier_Server interface {
	GetId(context.Context, EmailVerifier_getId) error

	VerifyEmail(context.Context, EmailVerifier_verifyEmail) error
}

// EmailVerifier_NewServer creates a new Server from an implementation of EmailVerifier_Server.
func EmailVerifier_NewServer(s EmailVerifier_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EmailVerifier_Methods(nil, s), s, c, policy)
}

// EmailVerifier_ServerToClient creates a new Client from an implementation of EmailVerifier_Server.
// The caller is responsible for calling Release on the returned Client.
func EmailVerifier_ServerToClient(s EmailVerifier_Server, policy *server.Policy) EmailVerifier {
	return EmailVerifier{Client: capnp.NewClient(EmailVerifier_NewServer(s, policy))}
}

// EmailVerifier_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EmailVerifier_Methods(methods []server.Method, s EmailVerifier_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd458f7ca9d1ba9ff,
			MethodID:      0,
			InterfaceName: "email.capnp:EmailVerifier",
			MethodName:    "getId",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetId(ctx, EmailVerifier_getId{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd458f7ca9d1ba9ff,
			MethodID:      1,
			InterfaceName: "email.capnp:EmailVerifier",
			MethodName:    "verifyEmail",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.VerifyEmail(ctx, EmailVerifier_verifyEmail{call})
		},
	})

	return methods
}

// EmailVerifier_getId holds the state for a server call to EmailVerifier.getId.
// See server.Call for documentation.
type EmailVerifier_getId struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EmailVerifier_getId) Args() EmailVerifier_getId_Params {
	return EmailVerifier_getId_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c EmailVerifier_getId) AllocResults() (EmailVerifier_getId_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EmailVerifier_getId_Results{Struct: r}, err
}

// EmailVerifier_verifyEmail holds the state for a server call to EmailVerifier.verifyEmail.
// See server.Call for documentation.
type EmailVerifier_verifyEmail struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EmailVerifier_verifyEmail) Args() EmailVerifier_verifyEmail_Params {
	return EmailVerifier_verifyEmail_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c EmailVerifier_verifyEmail) AllocResults() (EmailVerifier_verifyEmail_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EmailVerifier_verifyEmail_Results{Struct: r}, err
}

type EmailVerifier_getId_Params struct{ capnp.Struct }

// EmailVerifier_getId_Params_TypeID is the unique identifier for the type EmailVerifier_getId_Params.
const EmailVerifier_getId_Params_TypeID = 0xe5927352f65eba5c

func NewEmailVerifier_getId_Params(s *capnp.Segment) (EmailVerifier_getId_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EmailVerifier_getId_Params{st}, err
}

func NewRootEmailVerifier_getId_Params(s *capnp.Segment) (EmailVerifier_getId_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EmailVerifier_getId_Params{st}, err
}

func ReadRootEmailVerifier_getId_Params(msg *capnp.Message) (EmailVerifier_getId_Params, error) {
	root, err := msg.Root()
	return EmailVerifier_getId_Params{root.Struct()}, err
}

func (s EmailVerifier_getId_Params) String() string {
	str, _ := text.Marshal(0xe5927352f65eba5c, s.Struct)
	return str
}

// EmailVerifier_getId_Params_List is a list of EmailVerifier_getId_Params.
type EmailVerifier_getId_Params_List struct{ capnp.List }

// NewEmailVerifier_getId_Params creates a new list of EmailVerifier_getId_Params.
func NewEmailVerifier_getId_Params_List(s *capnp.Segment, sz int32) (EmailVerifier_getId_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return EmailVerifier_getId_Params_List{l}, err
}

func (s EmailVerifier_getId_Params_List) At(i int) EmailVerifier_getId_Params {
	return EmailVerifier_getId_Params{s.List.Struct(i)}
}

func (s EmailVerifier_getId_Params_List) Set(i int, v EmailVerifier_getId_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EmailVerifier_getId_Params_List) String() string {
	str, _ := text.MarshalList(0xe5927352f65eba5c, s.List)
	return str
}

// EmailVerifier_getId_Params_Future is a wrapper for a EmailVerifier_getId_Params promised by a client call.
type EmailVerifier_getId_Params_Future struct{ *capnp.Future }

func (p EmailVerifier_getId_Params_Future) Struct() (EmailVerifier_getId_Params, error) {
	s, err := p.Future.Struct()
	return EmailVerifier_getId_Params{s}, err
}

type EmailVerifier_getId_Results struct{ capnp.Struct }

// EmailVerifier_getId_Results_TypeID is the unique identifier for the type EmailVerifier_getId_Results.
const EmailVerifier_getId_Results_TypeID = 0xc7e287c5d3518c34

func NewEmailVerifier_getId_Results(s *capnp.Segment) (EmailVerifier_getId_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EmailVerifier_getId_Results{st}, err
}

func NewRootEmailVerifier_getId_Results(s *capnp.Segment) (EmailVerifier_getId_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EmailVerifier_getId_Results{st}, err
}

func ReadRootEmailVerifier_getId_Results(msg *capnp.Message) (EmailVerifier_getId_Results, error) {
	root, err := msg.Root()
	return EmailVerifier_getId_Results{root.Struct()}, err
}

func (s EmailVerifier_getId_Results) String() string {
	str, _ := text.Marshal(0xc7e287c5d3518c34, s.Struct)
	return str
}

func (s EmailVerifier_getId_Results) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s EmailVerifier_getId_Results) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s EmailVerifier_getId_Results) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

// EmailVerifier_getId_Results_List is a list of EmailVerifier_getId_Results.
type EmailVerifier_getId_Results_List struct{ capnp.List }

// NewEmailVerifier_getId_Results creates a new list of EmailVerifier_getId_Results.
func NewEmailVerifier_getId_Results_List(s *capnp.Segment, sz int32) (EmailVerifier_getId_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EmailVerifier_getId_Results_List{l}, err
}

func (s EmailVerifier_getId_Results_List) At(i int) EmailVerifier_getId_Results {
	return EmailVerifier_getId_Results{s.List.Struct(i)}
}

func (s EmailVerifier_getId_Results_List) Set(i int, v EmailVerifier_getId_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EmailVerifier_getId_Results_List) String() string {
	str, _ := text.MarshalList(0xc7e287c5d3518c34, s.List)
	return str
}

// EmailVerifier_getId_Results_Future is a wrapper for a EmailVerifier_getId_Results promised by a client call.
type EmailVerifier_getId_Results_Future struct{ *capnp.Future }

func (p EmailVerifier_getId_Results_Future) Struct() (EmailVerifier_getId_Results, error) {
	s, err := p.Future.Struct()
	return EmailVerifier_getId_Results{s}, err
}

type EmailVerifier_verifyEmail_Params struct{ capnp.Struct }

// EmailVerifier_verifyEmail_Params_TypeID is the unique identifier for the type EmailVerifier_verifyEmail_Params.
const EmailVerifier_verifyEmail_Params_TypeID = 0x93ee926bb1bd4eea

func NewEmailVerifier_verifyEmail_Params(s *capnp.Segment) (EmailVerifier_verifyEmail_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return EmailVerifier_verifyEmail_Params{st}, err
}

func NewRootEmailVerifier_verifyEmail_Params(s *capnp.Segment) (EmailVerifier_verifyEmail_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return EmailVerifier_verifyEmail_Params{st}, err
}

func ReadRootEmailVerifier_verifyEmail_Params(msg *capnp.Message) (EmailVerifier_verifyEmail_Params, error) {
	root, err := msg.Root()
	return EmailVerifier_verifyEmail_Params{root.Struct()}, err
}

func (s EmailVerifier_verifyEmail_Params) String() string {
	str, _ := text.Marshal(0x93ee926bb1bd4eea, s.Struct)
	return str
}

func (s EmailVerifier_verifyEmail_Params) TabId() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s EmailVerifier_verifyEmail_Params) HasTabId() bool {
	return s.Struct.HasPtr(0)
}

func (s EmailVerifier_verifyEmail_Params) SetTabId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s EmailVerifier_verifyEmail_Params) Verification() VerifiedEmail {
	p, _ := s.Struct.Ptr(1)
	return VerifiedEmail{Client: p.Interface().Client()}
}

func (s EmailVerifier_verifyEmail_Params) HasVerification() bool {
	return s.Struct.HasPtr(1)
}

func (s EmailVerifier_verifyEmail_Params) SetVerification(v VerifiedEmail) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// EmailVerifier_verifyEmail_Params_List is a list of EmailVerifier_verifyEmail_Params.
type EmailVerifier_verifyEmail_Params_List struct{ capnp.List }

// NewEmailVerifier_verifyEmail_Params creates a new list of EmailVerifier_verifyEmail_Params.
func NewEmailVerifier_verifyEmail_Params_List(s *capnp.Segment, sz int32) (EmailVerifier_verifyEmail_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return EmailVerifier_verifyEmail_Params_List{l}, err
}

func (s EmailVerifier_verifyEmail_Params_List) At(i int) EmailVerifier_verifyEmail_Params {
	return EmailVerifier_verifyEmail_Params{s.List.Struct(i)}
}

func (s EmailVerifier_verifyEmail_Params_List) Set(i int, v EmailVerifier_verifyEmail_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EmailVerifier_verifyEmail_Params_List) String() string {
	str, _ := text.MarshalList(0x93ee926bb1bd4eea, s.List)
	return str
}

// EmailVerifier_verifyEmail_Params_Future is a wrapper for a EmailVerifier_verifyEmail_Params promised by a client call.
type EmailVerifier_verifyEmail_Params_Future struct{ *capnp.Future }

func (p EmailVerifier_verifyEmail_Params_Future) Struct() (EmailVerifier_verifyEmail_Params, error) {
	s, err := p.Future.Struct()
	return EmailVerifier_verifyEmail_Params{s}, err
}

func (p EmailVerifier_verifyEmail_Params_Future) Verification() VerifiedEmail {
	return VerifiedEmail{Client: p.Future.Field(1, nil).Client()}
}

type EmailVerifier_verifyEmail_Results struct{ capnp.Struct }

// EmailVerifier_verifyEmail_Results_TypeID is the unique identifier for the type EmailVerifier_verifyEmail_Results.
const EmailVerifier_verifyEmail_Results_TypeID = 0xcc99614322e49040

func NewEmailVerifier_verifyEmail_Results(s *capnp.Segment) (EmailVerifier_verifyEmail_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EmailVerifier_verifyEmail_Results{st}, err
}

func NewRootEmailVerifier_verifyEmail_Results(s *capnp.Segment) (EmailVerifier_verifyEmail_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EmailVerifier_verifyEmail_Results{st}, err
}

func ReadRootEmailVerifier_verifyEmail_Results(msg *capnp.Message) (EmailVerifier_verifyEmail_Results, error) {
	root, err := msg.Root()
	return EmailVerifier_verifyEmail_Results{root.Struct()}, err
}

func (s EmailVerifier_verifyEmail_Results) String() string {
	str, _ := text.Marshal(0xcc99614322e49040, s.Struct)
	return str
}

func (s EmailVerifier_verifyEmail_Results) Address() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s EmailVerifier_verifyEmail_Results) HasAddress() bool {
	return s.Struct.HasPtr(0)
}

func (s EmailVerifier_verifyEmail_Results) AddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s EmailVerifier_verifyEmail_Results) SetAddress(v string) error {
	return s.Struct.SetText(0, v)
}

// EmailVerifier_verifyEmail_Results_List is a list of EmailVerifier_verifyEmail_Results.
type EmailVerifier_verifyEmail_Results_List struct{ capnp.List }

// NewEmailVerifier_verifyEmail_Results creates a new list of EmailVerifier_verifyEmail_Results.
func NewEmailVerifier_verifyEmail_Results_List(s *capnp.Segment, sz int32) (EmailVerifier_verifyEmail_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EmailVerifier_verifyEmail_Results_List{l}, err
}

func (s EmailVerifier_verifyEmail_Results_List) At(i int) EmailVerifier_verifyEmail_Results {
	return EmailVerifier_verifyEmail_Results{s.List.Struct(i)}
}

func (s EmailVerifier_verifyEmail_Results_List) Set(i int, v EmailVerifier_verifyEmail_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EmailVerifier_verifyEmail_Results_List) String() string {
	str, _ := text.MarshalList(0xcc99614322e49040, s.List)
	return str
}

// EmailVerifier_verifyEmail_Results_Future is a wrapper for a EmailVerifier_verifyEmail_Results promised by a client call.
type EmailVerifier_verifyEmail_Results_Future struct{ *capnp.Future }

func (p EmailVerifier_verifyEmail_Results_Future) Struct() (EmailVerifier_verifyEmail_Results, error) {
	s, err := p.Future.Struct()
	return EmailVerifier_verifyEmail_Results{s}, err
}

type EmailAgent struct{ Client *capnp.Client }

// EmailAgent_TypeID is the unique identifier for the type EmailAgent.
const EmailAgent_TypeID = 0x8b6f158d70cbc773

func (c EmailAgent) Send(ctx context.Context, params func(EmailAgent_send_Params) error) (EmailAgent_send_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8b6f158d70cbc773,
			MethodID:      0,
			InterfaceName: "email.capnp:EmailAgent",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EmailAgent_send_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EmailAgent_send_Results_Future{Future: ans.Future()}, release
}
func (c EmailAgent) AddReceiver(ctx context.Context, params func(EmailAgent_addReceiver_Params) error) (EmailAgent_addReceiver_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8b6f158d70cbc773,
			MethodID:      1,
			InterfaceName: "email.capnp:EmailAgent",
			MethodName:    "addReceiver",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EmailAgent_addReceiver_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EmailAgent_addReceiver_Results_Future{Future: ans.Future()}, release
}

func (c EmailAgent) AddRef() EmailAgent {
	return EmailAgent{
		Client: c.Client.AddRef(),
	}
}

func (c EmailAgent) Release() {
	c.Client.Release()
}

// A EmailAgent_Server is a EmailAgent with a local implementation.
type EmailAgent_Server interface {
	Send(context.Context, EmailAgent_send) error

	AddReceiver(context.Context, EmailAgent_addReceiver) error
}

// EmailAgent_NewServer creates a new Server from an implementation of EmailAgent_Server.
func EmailAgent_NewServer(s EmailAgent_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EmailAgent_Methods(nil, s), s, c, policy)
}

// EmailAgent_ServerToClient creates a new Client from an implementation of EmailAgent_Server.
// The caller is responsible for calling Release on the returned Client.
func EmailAgent_ServerToClient(s EmailAgent_Server, policy *server.Policy) EmailAgent {
	return EmailAgent{Client: capnp.NewClient(EmailAgent_NewServer(s, policy))}
}

// EmailAgent_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EmailAgent_Methods(methods []server.Method, s EmailAgent_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8b6f158d70cbc773,
			MethodID:      0,
			InterfaceName: "email.capnp:EmailAgent",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, EmailAgent_send{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8b6f158d70cbc773,
			MethodID:      1,
			InterfaceName: "email.capnp:EmailAgent",
			MethodName:    "addReceiver",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddReceiver(ctx, EmailAgent_addReceiver{call})
		},
	})

	return methods
}

// EmailAgent_send holds the state for a server call to EmailAgent.send.
// See server.Call for documentation.
type EmailAgent_send struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EmailAgent_send) Args() EmailAgent_send_Params {
	return EmailAgent_send_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c EmailAgent_send) AllocResults() (EmailAgent_send_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EmailAgent_send_Results{Struct: r}, err
}

// EmailAgent_addReceiver holds the state for a server call to EmailAgent.addReceiver.
// See server.Call for documentation.
type EmailAgent_addReceiver struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EmailAgent_addReceiver) Args() EmailAgent_addReceiver_Params {
	return EmailAgent_addReceiver_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c EmailAgent_addReceiver) AllocResults() (EmailAgent_addReceiver_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EmailAgent_addReceiver_Results{Struct: r}, err
}

type EmailAgent_send_Params struct{ capnp.Struct }

// EmailAgent_send_Params_TypeID is the unique identifier for the type EmailAgent_send_Params.
const EmailAgent_send_Params_TypeID = 0xa8eb16da45ad8f97

func NewEmailAgent_send_Params(s *capnp.Segment) (EmailAgent_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EmailAgent_send_Params{st}, err
}

func NewRootEmailAgent_send_Params(s *capnp.Segment) (EmailAgent_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EmailAgent_send_Params{st}, err
}

func ReadRootEmailAgent_send_Params(msg *capnp.Message) (EmailAgent_send_Params, error) {
	root, err := msg.Root()
	return EmailAgent_send_Params{root.Struct()}, err
}

func (s EmailAgent_send_Params) String() string {
	str, _ := text.Marshal(0xa8eb16da45ad8f97, s.Struct)
	return str
}

func (s EmailAgent_send_Params) Email() (EmailMessage, error) {
	p, err := s.Struct.Ptr(0)
	return EmailMessage{Struct: p.Struct()}, err
}

func (s EmailAgent_send_Params) HasEmail() bool {
	return s.Struct.HasPtr(0)
}

func (s EmailAgent_send_Params) SetEmail(v EmailMessage) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEmail sets the email field to a newly
// allocated EmailMessage struct, preferring placement in s's segment.
func (s EmailAgent_send_Params) NewEmail() (EmailMessage, error) {
	ss, err := NewEmailMessage(s.Struct.Segment())
	if err != nil {
		return EmailMessage{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// EmailAgent_send_Params_List is a list of EmailAgent_send_Params.
type EmailAgent_send_Params_List struct{ capnp.List }

// NewEmailAgent_send_Params creates a new list of EmailAgent_send_Params.
func NewEmailAgent_send_Params_List(s *capnp.Segment, sz int32) (EmailAgent_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EmailAgent_send_Params_List{l}, err
}

func (s EmailAgent_send_Params_List) At(i int) EmailAgent_send_Params {
	return EmailAgent_send_Params{s.List.Struct(i)}
}

func (s EmailAgent_send_Params_List) Set(i int, v EmailAgent_send_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EmailAgent_send_Params_List) String() string {
	str, _ := text.MarshalList(0xa8eb16da45ad8f97, s.List)
	return str
}

// EmailAgent_send_Params_Future is a wrapper for a EmailAgent_send_Params promised by a client call.
type EmailAgent_send_Params_Future struct{ *capnp.Future }

func (p EmailAgent_send_Params_Future) Struct() (EmailAgent_send_Params, error) {
	s, err := p.Future.Struct()
	return EmailAgent_send_Params{s}, err
}

func (p EmailAgent_send_Params_Future) Email() EmailMessage_Future {
	return EmailMessage_Future{Future: p.Future.Field(0, nil)}
}

type EmailAgent_send_Results struct{ capnp.Struct }

// EmailAgent_send_Results_TypeID is the unique identifier for the type EmailAgent_send_Results.
const EmailAgent_send_Results_TypeID = 0x81f33f1803485545

func NewEmailAgent_send_Results(s *capnp.Segment) (EmailAgent_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EmailAgent_send_Results{st}, err
}

func NewRootEmailAgent_send_Results(s *capnp.Segment) (EmailAgent_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EmailAgent_send_Results{st}, err
}

func ReadRootEmailAgent_send_Results(msg *capnp.Message) (EmailAgent_send_Results, error) {
	root, err := msg.Root()
	return EmailAgent_send_Results{root.Struct()}, err
}

func (s EmailAgent_send_Results) String() string {
	str, _ := text.Marshal(0x81f33f1803485545, s.Struct)
	return str
}

// EmailAgent_send_Results_List is a list of EmailAgent_send_Results.
type EmailAgent_send_Results_List struct{ capnp.List }

// NewEmailAgent_send_Results creates a new list of EmailAgent_send_Results.
func NewEmailAgent_send_Results_List(s *capnp.Segment, sz int32) (EmailAgent_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return EmailAgent_send_Results_List{l}, err
}

func (s EmailAgent_send_Results_List) At(i int) EmailAgent_send_Results {
	return EmailAgent_send_Results{s.List.Struct(i)}
}

func (s EmailAgent_send_Results_List) Set(i int, v EmailAgent_send_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EmailAgent_send_Results_List) String() string {
	str, _ := text.MarshalList(0x81f33f1803485545, s.List)
	return str
}

// EmailAgent_send_Results_Future is a wrapper for a EmailAgent_send_Results promised by a client call.
type EmailAgent_send_Results_Future struct{ *capnp.Future }

func (p EmailAgent_send_Results_Future) Struct() (EmailAgent_send_Results, error) {
	s, err := p.Future.Struct()
	return EmailAgent_send_Results{s}, err
}

type EmailAgent_addReceiver_Params struct{ capnp.Struct }

// EmailAgent_addReceiver_Params_TypeID is the unique identifier for the type EmailAgent_addReceiver_Params.
const EmailAgent_addReceiver_Params_TypeID = 0xfacf412b11767e9e

func NewEmailAgent_addReceiver_Params(s *capnp.Segment) (EmailAgent_addReceiver_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EmailAgent_addReceiver_Params{st}, err
}

func NewRootEmailAgent_addReceiver_Params(s *capnp.Segment) (EmailAgent_addReceiver_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EmailAgent_addReceiver_Params{st}, err
}

func ReadRootEmailAgent_addReceiver_Params(msg *capnp.Message) (EmailAgent_addReceiver_Params, error) {
	root, err := msg.Root()
	return EmailAgent_addReceiver_Params{root.Struct()}, err
}

func (s EmailAgent_addReceiver_Params) String() string {
	str, _ := text.Marshal(0xfacf412b11767e9e, s.Struct)
	return str
}

func (s EmailAgent_addReceiver_Params) Port() EmailSendPort {
	p, _ := s.Struct.Ptr(0)
	return EmailSendPort{Client: p.Interface().Client()}
}

func (s EmailAgent_addReceiver_Params) HasPort() bool {
	return s.Struct.HasPtr(0)
}

func (s EmailAgent_addReceiver_Params) SetPort(v EmailSendPort) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// EmailAgent_addReceiver_Params_List is a list of EmailAgent_addReceiver_Params.
type EmailAgent_addReceiver_Params_List struct{ capnp.List }

// NewEmailAgent_addReceiver_Params creates a new list of EmailAgent_addReceiver_Params.
func NewEmailAgent_addReceiver_Params_List(s *capnp.Segment, sz int32) (EmailAgent_addReceiver_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EmailAgent_addReceiver_Params_List{l}, err
}

func (s EmailAgent_addReceiver_Params_List) At(i int) EmailAgent_addReceiver_Params {
	return EmailAgent_addReceiver_Params{s.List.Struct(i)}
}

func (s EmailAgent_addReceiver_Params_List) Set(i int, v EmailAgent_addReceiver_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EmailAgent_addReceiver_Params_List) String() string {
	str, _ := text.MarshalList(0xfacf412b11767e9e, s.List)
	return str
}

// EmailAgent_addReceiver_Params_Future is a wrapper for a EmailAgent_addReceiver_Params promised by a client call.
type EmailAgent_addReceiver_Params_Future struct{ *capnp.Future }

func (p EmailAgent_addReceiver_Params_Future) Struct() (EmailAgent_addReceiver_Params, error) {
	s, err := p.Future.Struct()
	return EmailAgent_addReceiver_Params{s}, err
}

func (p EmailAgent_addReceiver_Params_Future) Port() EmailSendPort {
	return EmailSendPort{Client: p.Future.Field(0, nil).Client()}
}

type EmailAgent_addReceiver_Results struct{ capnp.Struct }

// EmailAgent_addReceiver_Results_TypeID is the unique identifier for the type EmailAgent_addReceiver_Results.
const EmailAgent_addReceiver_Results_TypeID = 0x8e8e3d68615d430c

func NewEmailAgent_addReceiver_Results(s *capnp.Segment) (EmailAgent_addReceiver_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EmailAgent_addReceiver_Results{st}, err
}

func NewRootEmailAgent_addReceiver_Results(s *capnp.Segment) (EmailAgent_addReceiver_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EmailAgent_addReceiver_Results{st}, err
}

func ReadRootEmailAgent_addReceiver_Results(msg *capnp.Message) (EmailAgent_addReceiver_Results, error) {
	root, err := msg.Root()
	return EmailAgent_addReceiver_Results{root.Struct()}, err
}

func (s EmailAgent_addReceiver_Results) String() string {
	str, _ := text.Marshal(0x8e8e3d68615d430c, s.Struct)
	return str
}

func (s EmailAgent_addReceiver_Results) Handle() util.Handle {
	p, _ := s.Struct.Ptr(0)
	return util.Handle{Client: p.Interface().Client()}
}

func (s EmailAgent_addReceiver_Results) HasHandle() bool {
	return s.Struct.HasPtr(0)
}

func (s EmailAgent_addReceiver_Results) SetHandle(v util.Handle) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// EmailAgent_addReceiver_Results_List is a list of EmailAgent_addReceiver_Results.
type EmailAgent_addReceiver_Results_List struct{ capnp.List }

// NewEmailAgent_addReceiver_Results creates a new list of EmailAgent_addReceiver_Results.
func NewEmailAgent_addReceiver_Results_List(s *capnp.Segment, sz int32) (EmailAgent_addReceiver_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EmailAgent_addReceiver_Results_List{l}, err
}

func (s EmailAgent_addReceiver_Results_List) At(i int) EmailAgent_addReceiver_Results {
	return EmailAgent_addReceiver_Results{s.List.Struct(i)}
}

func (s EmailAgent_addReceiver_Results_List) Set(i int, v EmailAgent_addReceiver_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EmailAgent_addReceiver_Results_List) String() string {
	str, _ := text.MarshalList(0x8e8e3d68615d430c, s.List)
	return str
}

// EmailAgent_addReceiver_Results_Future is a wrapper for a EmailAgent_addReceiver_Results promised by a client call.
type EmailAgent_addReceiver_Results_Future struct{ *capnp.Future }

func (p EmailAgent_addReceiver_Results_Future) Struct() (EmailAgent_addReceiver_Results, error) {
	s, err := p.Future.Struct()
	return EmailAgent_addReceiver_Results{s}, err
}

func (p EmailAgent_addReceiver_Results_Future) Handle() util.Handle {
	return util.Handle{Client: p.Future.Field(0, nil).Client()}
}

const schema_dd10df585a82c6d8 = "x\xda\x9cW}\x8c\x1ce\x19\x7f\x9eywvf\xaf" +
	"\xbb\xdd\x1b\xdfU\xe4\x08\xb9\xa4\xb9F8\xa4\xb6GM" +
	"L\xfd\xd8\xeb\xc1\x92\xd6\xf4tg\xf7\xda\xb4\x07hg" +
	"w\xdf\xf6\xa6\xee\xce\\f\xe6\xca\xad\x11+J-\x06" +
	"\x81\xb6\xc4\xa0\x86\x9a\x18!\xa1\xa6U\x89&\x1a\xa4\xf1" +
	"\x0f\xad\xd8Z\x82\x94\x92\xb4\x86\x93BZ\xe1\x94\xd4\x18" +
	"\x89\"\x91\x8cy\xdf\xdd\xf9\xb8\xb9\xbd\xa3\xe1\xbf\xdd\xdf" +
	"<\xf3{~\xef\xf3\xf5>\xb3v\x7fjTZ'\x7f" +
	"q\x05\x80~\x9f\x9c\xf6K[7\x91\x0f\x17\xffu/" +
	"h\xd7 @J\x01\xb8\xe5;\xf2*\x84\x94\xef>\xfb" +
	"\xc7\xe9\x07?h?\x00Z\x96\xf8\xe7\x7f\xff\xf5\xc9\xed" +
	"\xaf\xf4\xcf\x01 \xbdG~\x9a\xee\x97\x15\x00z\xaf|" +
	"\x80\xbe\xc4\x7f\xf9\xd9[\xef2\xa6>\xfd\xd0C\x1d\x1a" +
	"\x199\xcf\x09y\x12\x01\xe9)\xb9\x08\xe8\x7f\xf2\xd7\x83" +
	"\x85swl}\x18\xb4U\xe8\xcf\x9f\xffIi\xe2\xfe" +
	"3?\x02Y\xe2\x86\xf3\xb2\x83\xf4]\xc1\xf8_\xf9n" +
	"@\xff\xc5#\xdf\xfa\x9f\x91m\x1f\x04m\x00\xfd\xd3\xcf" +
	"\x9c\xda\xf2\x9b\xeb\xbf\xf1f\xd7xGz\x04\xa9\x99\xe6" +
	"\xc6,\xcd\x8d\xff\xf6\xb9\x13O}\xe9\xf0\x95G\xb81" +
	"t\x8dN\xa5\xf7p\xd7/\x09\x83\xc3\xbf\xba\xe3\xd8\xa1" +
	"\xc3\xb7?*\xd8&\xdf\x19\xbf]\xfa\xe7\x03o\x83L" +
	"\xb8\xe1\xc7\x95\x11\xa4%\x85\xb3mT~\x0a\xe8\x9f\xbb" +
	"\xb4\xed/'\x7f;\xfbX\x97M\x1cdN\x11l\xf3" +
	"\x0a?H\xa8=\x11\x96[2\xea\x07\x90^\xab^\x03" +
	"@W\xab\x0a]\xad~\x04\xc0\xbf\xb2\xe3\xcc\x96\x9b~" +
	"y\xfc\x898\xdd\xf5\xea\x08\xa7[\xadr\xbaG\x1f>" +
	"^\xfa\xf3\x87\xfe\xfed<p%u\x80\x1b\x8c\x0b\x83" +
	"W?\xb3\xed\x9bW^>~\x0c\xb4,F\xfe\xc41" +
	"iK=M\xdb*\xff5\xa3\xf2\x93~~\xe8\x86#" +
	"\x03'3?O\xd8\xf2\xac\xd2\x17\xd4\xd7\xe8\x9c\xb0\xbd" +
	"\xa0\xbe\x0e\xf8\x8fg~|\xe3#_vN\x08]\"" +
	"\xed'2\x0eO\xfb\xfao\xeb/\x9e<\xf0\xda\xb3q" +
	"\xc5G3c\\\xd0S\x19.h\xf4\xe0\xa5U\xb7\x1a" +
	"\xdf;\x137x\x81\xbf\x8btN\x18|\xec\xe6m\xe6" +
	"\xeb;\xdez\x1e\xf4,\xc6ed\xb9\xf3w3\xa7i" +
	"\xa6\x8f\xbf#\xf7\xbd\"\x01\xfa\xe7\xdf\xbe\xee\xd4_\x7f" +
	"Q\xff\x13DJXn\x03W\xe2\x1f\xbd\xee\xc8\xe9\xff" +
	"l?\xb7\xa8\x00\xc7sg\xe9\x8e\x1cg\xdb\x9a;@" +
	"\x8f\xf2_\xfe\x9dO\x7f\xe1\xdf\x15\xf7\xf0\xe5\x18\xcd\xa1" +
	"\x0eMX?I\x9av\xee,\xdd\x9f\xe3\xf9:\x94;" +
	"@/\x0b\x9a\xb0<\x92\xc6\xcf\xe5\xce\xd2\x0b\xc2\xf8r" +
	"N\xe9\x1a\xff\xe0\xab{\xb5\x9b6>\xffN<w\xcf" +
	"\xe5*<\x12\x17rE\xb0}\xd62\xcc\xe6\x9a\xbaA" +
	"\xa6\xad\xe9\x0d%\xfeg\xe3nfyk\\f5\x86" +
	"*\xcc\x9dQ\x9a\x9e\x1bZa`U\xec\x98\x95\x11u" +
	"\x95\xc8\x00a\x91`\xd0\xad\xda\xbaa\x90\xb4\xd5\x0ab" +
	"(\x02\x83\x16\xd4\xae\xad\x81\xa4iJ\x9e{\x19E\xdf" +
	"h4*\xac\xceLP\xf62g\x14\xcb\x88\xa1\xc7T" +
	"BW`\xba\x979B^\x93x\xae\x9e\")\x80\x14" +
	"\x02h\xb9\x0d\x00\xbaJP/HX\x9c2\xacF\x93" +
	"\xa1\xe6_\x1c\xdb\xb9\xf3\xd8\xd0[\xdf\x05@\xd4 A" +
	"\xbe\x8d9\xe6.\x935\x84\x93*\xb3\x1ae\xdb\xf1\xd6" +
	"\x94\xed\xbb\x99S\x1b\xb4g'\x8c\xdd\x9dS\x06.n" +
	"\xdc\x03\xa0\xdf@P_/\xa1\x86X@\x0e\xae\x1b\x06" +
	"\xd0?JP\xff\x84\x84\xfe^\xc1X7 \xef\x99\xb6" +
	"\x85\xfdQ{\x03b?`~\xdav<\xec\x8ffH" +
	"\x07\xee\x91\x8b\xab\x91\xf3\xd9^r&\x01\xf4\xb5\x04\xf5" +
	"OI\xe8\xefr\xec\xd6&\xd3\xf2\x00\x00\xfb\xa3f\xed" +
	":m\x9a\xae\xb7\xb9\xb1\xc9\x04by\x98\x05\x09\xb3\xd0" +
	"+\xfa\xdd(9k\xc4\xe1\xda\x02\x1b*\x1by\xc7h" +
	"\xb9q5#\x00\xfa\x10A}mL\xcd\xcd{\xa2\xe0" +
	"\x0czFms\x03s a\x0e\x16\x85J\x8b\xaa;" +
	"\x91*\xb2(U\x8bb\x92\x0dU\x94\xf8\xf1o#\xa8" +
	"\x97c*\xc6\xc7\x00\xf4M\x04\xf5\x09\x095I*\xa0" +
	"\x04\xa0\xe9\xbc^\xb6\x10\xd4\xb7\x87yc\x0e\x90H\xe1" +
	">\xa3\xd1p\x98\xeb\x06\xa1)6\xec\x96aZ\xcbD" +
	"*\xcc\xd9\x94iy\x1b;o\x87\x91\x8aU\xeaXT" +
	"\xa9\xa1\x93\xc5\xe9Y\xfa\xfc]?\xe8\xe9)\x8c_^" +
	"X\xf3;\x91\xb1gA\xe1\xa1!\xb2\xaeb\xecZ\x01" +
	"\x88\x06\x0e\xc0rU'\x86@y\xd0HJ\x1f\x89\xa4" +
	"\x0f\x8a\xd7\xb1?\x1a\xa9K\x16sl\xb0\x94\x0d\xc7 " +
	"\xef\x9fS\x8a8;\x81\x03H4\xc5X\xaf2\x1c\x8e" +
	":%\x99\xd6\xbce\xb4\xd8\xa2\xa4\xc6\xfcx\x9eQ\x9f" +
	"j)\xdd\x99\xd7\x1fz2j\x00\xfaN\x82z3\xe6" +
	"\xc9\xfc>\x80\xde$\xa8\xcf\xc6Jm\xa6\x02\xa0{\x04" +
	"\xf5\xafI\xa8\x11R@\x02\xa0\xdd\xc3\x85\xce\x12\xd4\xef" +
	"\x93\xd0\xaf\xdb\x96\xc7,o\x02\x94\xf6t$\xa6\x8b\xde" +
	"\x86\xa6;m\xbb\xa6g\x12\xdbJ>\xdc\x0c\xd8\x08\xb0" +
	"}],\xec\xb1\xab,\xd1\x0a\x1btg\xe2\xc3\xbeG" +
	"\xf3\xeff\xde\xe6\xce\xb5\xd0\xf4\\\x88\xa7o J\x1f" +
	"1\x1b\xcb\xf8\xee9H\x02\xdf\xef\xd5\x1fK'h\x9c" +
	"\xb9\xae\xb1\x9bu\x0aa}\xc0B\xef\xc2a\x80\xeav" +
	"$Xm\xa0\x84\xdd\x04QC\xc0wrx\x0ay\x8e" +
	"P\xe4\x882\x1c\x00\xa8\xee\xe4\xf8W8N$\x91&" +
	"\xda\x16\xb8\xc7\xf1\x83\x1cO\x91\x02\xa6\x00\xe8\x83\xb8\x0a" +
	"\xa0z?\xc7\x1f\xe7\xb8\x9c*\xa0\x0c@\x7f\x88c\x00" +
	"\xd5\xc78\xfe$\xc7\xd3r\x01\xd3\x00\xf4\x09\xac\x00T" +
	"\x1f\xe7\xf8\xcf8\xae\xa4\x0b\xfcJ\xa6\xc7q\x12\xa0z" +
	"\x8c\xe3\x7f\xe0\xb8\xaa\x14P\x05\xa0'\x85\xfd\xef8~" +
	"\x91\xe3\x19\xb5\x80\x19\x00:'\xf8\xcfs\xfc\x12\xc7\xfb" +
	"2\x05\xec\x03\xa0\xaf\x8as\xbd\xcc\xf178\xbe\xa2\xaf" +
	"\x80+\xf8B \xf0\x8b\x1c\x7f\x93\xe3\xd9\x15\x05\xcc\x02" +
	"\xd0y\xac\x01T\xdf\xe0xJ\x920\xdf0<\x862" +
	"H(\x03\xe6\xf9\xbd\xb1x\"\x11\xcf\xc6\x95\x80e\x82" +
	"\x89g+\x01I\xbd\xbe\xe43\xa5\xb6\xcc\xc3}\x0e\x9b" +
	"n\xb6'\xec\x1e\x03\xb0\xd5Il\xbc\xc2}\x87\xedb" +
	"\x0e\xb3\xea@\x98\x1bp\xf2g+\x01}\xd3\xaa\x08." +
	"@;\xf1h\x9f;S\xdb\xc3\xea\xe1-\x97\xf7\xd8l" +
	"\xf4g\xcak5C\x07F\xa7\xdd\x19(\x96\xe7F\xaa" +
	"\xc3\xe5\xb5\xa3\xfa=Gg\xa5\xc8\x16\xb6\x94\x94l\x03" +
	"t\xa2\x15*\xd8\x0f1\xd8o\xb5u#\xc1\x0a\x15|" +
	"A`\xb0\xda\x06+\xd4\xa0h\xc9\xd1\xee\xe5\xd5.\xb5" +
	"@1\xcc\xe6\xc2\x1d\x8a,\xd5\xc8\xc5\xb2\x18\xed=\xe4" +
	"-\xbc\\\xa2\x8f\x9d\xe4\xe5\xd2\x95\x1e|C`\xb0*" +
	"\xc7\xb6\xbf\xe0s\x05\xf9:\x0f|\x9fOl\x7f\xc1\x10" +
	"\x02\x85\xb9\xeeB\xe5R\xf2\xd6\xc3\xa6\x10\x14}/\xf5" +
	"\xb8\xed\xaev}\x14\x87\xc7\x053g8\x9a9\x9d%" +
	"M\x8b]\x95b!\xf9\x7f\x00\x00\x00\xff\xff\x9c\x8a\xf4" +
	"8"

func init() {
	schemas.Register(schema_dd10df585a82c6d8,
		0x81f33f1803485545,
		0x8b6f158d70cbc773,
		0x8e8e3d68615d430c,
		0x8f555bd4141fbb3b,
		0x90790c61fc899dd3,
		0x93ee926bb1bd4eea,
		0x97469291ac5bb892,
		0x9c78c3c5de56e4d4,
		0xa3cc885445aed8e9,
		0xa5adb72b4ccc59ee,
		0xa8eb16da45ad8f97,
		0xacaddcee86563ee1,
		0xb309c51a9d28244f,
		0xbd727a009329aabc,
		0xc7e287c5d3518c34,
		0xcc99614322e49040,
		0xcff459e769562d2f,
		0xd063b4e6c91bf8d8,
		0xd458f7ca9d1ba9ff,
		0xe5927352f65eba5c,
		0xec831dbf4cc9bcca,
		0xf88bf102464dfa5a,
		0xfacf412b11767e9e)
}
