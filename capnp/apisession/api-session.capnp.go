// Code generated by capnpc-go. DO NOT EDIT.

package apisession

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	ip "zenhack.net/go/sandstorm/capnp/ip"
	websession "zenhack.net/go/sandstorm/capnp/websession"
)

type ApiSession capnp.Client

// ApiSession_TypeID is the unique identifier for the type ApiSession.
const ApiSession_TypeID = 0xc879e379c625cdc7

func (c ApiSession) Get(ctx context.Context, params func(websession.WebSession_get_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_get_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Post(ctx context.Context, params func(websession.WebSession_post_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_post_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) OpenWebSocket(ctx context.Context, params func(websession.WebSession_openWebSocket_Params) error) (websession.WebSession_openWebSocket_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_openWebSocket_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_openWebSocket_Results_Future{Future: ans.Future()}, release
}
func (c ApiSession) Put(ctx context.Context, params func(websession.WebSession_put_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_put_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Delete(ctx context.Context, params func(websession.WebSession_delete_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_delete_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) PostStreaming(ctx context.Context, params func(websession.WebSession_postStreaming_Params) error) (websession.WebSession_postStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_postStreaming_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_postStreaming_Results_Future{Future: ans.Future()}, release
}
func (c ApiSession) PutStreaming(ctx context.Context, params func(websession.WebSession_putStreaming_Params) error) (websession.WebSession_putStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_putStreaming_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_putStreaming_Results_Future{Future: ans.Future()}, release
}
func (c ApiSession) Propfind(ctx context.Context, params func(websession.WebSession_propfind_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_propfind_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Proppatch(ctx context.Context, params func(websession.WebSession_proppatch_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_proppatch_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Mkcol(ctx context.Context, params func(websession.WebSession_mkcol_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_mkcol_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Copy(ctx context.Context, params func(websession.WebSession_copy_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_copy_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Move(ctx context.Context, params func(websession.WebSession_move_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_move_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Lock(ctx context.Context, params func(websession.WebSession_lock_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_lock_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Unlock(ctx context.Context, params func(websession.WebSession_unlock_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_unlock_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Acl(ctx context.Context, params func(websession.WebSession_acl_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_acl_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Report(ctx context.Context, params func(websession.WebSession_report_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_report_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Options(ctx context.Context, params func(websession.WebSession_options_Params) error) (websession.WebSession_Options_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_options_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Options_Future{Future: ans.Future()}, release
}
func (c ApiSession) Patch(ctx context.Context, params func(websession.WebSession_patch_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_patch_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ApiSession) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ApiSession) AddRef() ApiSession {
	return ApiSession(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ApiSession) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ApiSession) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ApiSession) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ApiSession) DecodeFromPtr(p capnp.Ptr) ApiSession {
	return ApiSession(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ApiSession) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ApiSession) IsSame(other ApiSession) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ApiSession) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ApiSession) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A ApiSession_Server is a ApiSession with a local implementation.
type ApiSession_Server interface {
	Get(context.Context, websession.WebSession_get) error

	Post(context.Context, websession.WebSession_post) error

	OpenWebSocket(context.Context, websession.WebSession_openWebSocket) error

	Put(context.Context, websession.WebSession_put) error

	Delete(context.Context, websession.WebSession_delete) error

	PostStreaming(context.Context, websession.WebSession_postStreaming) error

	PutStreaming(context.Context, websession.WebSession_putStreaming) error

	Propfind(context.Context, websession.WebSession_propfind) error

	Proppatch(context.Context, websession.WebSession_proppatch) error

	Mkcol(context.Context, websession.WebSession_mkcol) error

	Copy(context.Context, websession.WebSession_copy) error

	Move(context.Context, websession.WebSession_move) error

	Lock(context.Context, websession.WebSession_lock) error

	Unlock(context.Context, websession.WebSession_unlock) error

	Acl(context.Context, websession.WebSession_acl) error

	Report(context.Context, websession.WebSession_report) error

	Options(context.Context, websession.WebSession_options) error

	Patch(context.Context, websession.WebSession_patch) error
}

// ApiSession_NewServer creates a new Server from an implementation of ApiSession_Server.
func ApiSession_NewServer(s ApiSession_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ApiSession_Methods(nil, s), s, c)
}

// ApiSession_ServerToClient creates a new Client from an implementation of ApiSession_Server.
// The caller is responsible for calling Release on the returned Client.
func ApiSession_ServerToClient(s ApiSession_Server) ApiSession {
	return ApiSession(capnp.NewClient(ApiSession_NewServer(s)))
}

// ApiSession_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ApiSession_Methods(methods []server.Method, s ApiSession_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 18)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, websession.WebSession_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Post(ctx, websession.WebSession_post{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.OpenWebSocket(ctx, websession.WebSession_openWebSocket{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, websession.WebSession_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Delete(ctx, websession.WebSession_delete{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PostStreaming(ctx, websession.WebSession_postStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PutStreaming(ctx, websession.WebSession_putStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Propfind(ctx, websession.WebSession_propfind{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Proppatch(ctx, websession.WebSession_proppatch{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Mkcol(ctx, websession.WebSession_mkcol{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Copy(ctx, websession.WebSession_copy{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Move(ctx, websession.WebSession_move{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lock(ctx, websession.WebSession_lock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unlock(ctx, websession.WebSession_unlock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Acl(ctx, websession.WebSession_acl{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Report(ctx, websession.WebSession_report{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Options(ctx, websession.WebSession_options{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Patch(ctx, websession.WebSession_patch{call})
		},
	})

	return methods
}

// ApiSession_List is a list of ApiSession.
type ApiSession_List = capnp.CapList[ApiSession]

// NewApiSession creates a new list of ApiSession.
func NewApiSession_List(s *capnp.Segment, sz int32) (ApiSession_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ApiSession](l), err
}

type ApiSession_Params capnp.Struct

// ApiSession_Params_TypeID is the unique identifier for the type ApiSession_Params.
const ApiSession_Params_TypeID = 0xfee82d8d4c4ff597

func NewApiSession_Params(s *capnp.Segment) (ApiSession_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ApiSession_Params(st), err
}

func NewRootApiSession_Params(s *capnp.Segment) (ApiSession_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ApiSession_Params(st), err
}

func ReadRootApiSession_Params(msg *capnp.Message) (ApiSession_Params, error) {
	root, err := msg.Root()
	return ApiSession_Params(root.Struct()), err
}

func (s ApiSession_Params) String() string {
	str, _ := text.Marshal(0xfee82d8d4c4ff597, capnp.Struct(s))
	return str
}

func (s ApiSession_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ApiSession_Params) DecodeFromPtr(p capnp.Ptr) ApiSession_Params {
	return ApiSession_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ApiSession_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ApiSession_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ApiSession_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ApiSession_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ApiSession_Params) RemoteAddress() (ip.IpAddress, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ip.IpAddress(p.Struct()), err
}

func (s ApiSession_Params) HasRemoteAddress() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ApiSession_Params) SetRemoteAddress(v ip.IpAddress) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRemoteAddress sets the remoteAddress field to a newly
// allocated ip.IpAddress struct, preferring placement in s's segment.
func (s ApiSession_Params) NewRemoteAddress() (ip.IpAddress, error) {
	ss, err := ip.NewIpAddress(capnp.Struct(s).Segment())
	if err != nil {
		return ip.IpAddress{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ApiSession_Params_List is a list of ApiSession_Params.
type ApiSession_Params_List = capnp.StructList[ApiSession_Params]

// NewApiSession_Params creates a new list of ApiSession_Params.
func NewApiSession_Params_List(s *capnp.Segment, sz int32) (ApiSession_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ApiSession_Params](l), err
}

// ApiSession_Params_Future is a wrapper for a ApiSession_Params promised by a client call.
type ApiSession_Params_Future struct{ *capnp.Future }

func (f ApiSession_Params_Future) Struct() (ApiSession_Params, error) {
	p, err := f.Future.Ptr()
	return ApiSession_Params(p.Struct()), err
}
func (p ApiSession_Params_Future) RemoteAddress() ip.IpAddress_Future {
	return ip.IpAddress_Future{Future: p.Future.Field(0, nil)}
}

type ApiSession_PowerboxTag capnp.Struct

// ApiSession_PowerboxTag_TypeID is the unique identifier for the type ApiSession_PowerboxTag.
const ApiSession_PowerboxTag_TypeID = 0x93e1f7ca567dee32

func NewApiSession_PowerboxTag(s *capnp.Segment) (ApiSession_PowerboxTag, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ApiSession_PowerboxTag(st), err
}

func NewRootApiSession_PowerboxTag(s *capnp.Segment) (ApiSession_PowerboxTag, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ApiSession_PowerboxTag(st), err
}

func ReadRootApiSession_PowerboxTag(msg *capnp.Message) (ApiSession_PowerboxTag, error) {
	root, err := msg.Root()
	return ApiSession_PowerboxTag(root.Struct()), err
}

func (s ApiSession_PowerboxTag) String() string {
	str, _ := text.Marshal(0x93e1f7ca567dee32, capnp.Struct(s))
	return str
}

func (s ApiSession_PowerboxTag) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ApiSession_PowerboxTag) DecodeFromPtr(p capnp.Ptr) ApiSession_PowerboxTag {
	return ApiSession_PowerboxTag(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ApiSession_PowerboxTag) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ApiSession_PowerboxTag) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ApiSession_PowerboxTag) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ApiSession_PowerboxTag) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ApiSession_PowerboxTag) CanonicalUrl() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ApiSession_PowerboxTag) HasCanonicalUrl() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ApiSession_PowerboxTag) CanonicalUrlBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ApiSession_PowerboxTag) SetCanonicalUrl(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ApiSession_PowerboxTag) OauthScopes() (ApiSession_PowerboxTag_OAuthScope_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return ApiSession_PowerboxTag_OAuthScope_List(p.List()), err
}

func (s ApiSession_PowerboxTag) HasOauthScopes() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ApiSession_PowerboxTag) SetOauthScopes(v ApiSession_PowerboxTag_OAuthScope_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewOauthScopes sets the oauthScopes field to a newly
// allocated ApiSession_PowerboxTag_OAuthScope_List, preferring placement in s's segment.
func (s ApiSession_PowerboxTag) NewOauthScopes(n int32) (ApiSession_PowerboxTag_OAuthScope_List, error) {
	l, err := NewApiSession_PowerboxTag_OAuthScope_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ApiSession_PowerboxTag_OAuthScope_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s ApiSession_PowerboxTag) Authentication() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ApiSession_PowerboxTag) HasAuthentication() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ApiSession_PowerboxTag) AuthenticationBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ApiSession_PowerboxTag) SetAuthentication(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// ApiSession_PowerboxTag_List is a list of ApiSession_PowerboxTag.
type ApiSession_PowerboxTag_List = capnp.StructList[ApiSession_PowerboxTag]

// NewApiSession_PowerboxTag creates a new list of ApiSession_PowerboxTag.
func NewApiSession_PowerboxTag_List(s *capnp.Segment, sz int32) (ApiSession_PowerboxTag_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[ApiSession_PowerboxTag](l), err
}

// ApiSession_PowerboxTag_Future is a wrapper for a ApiSession_PowerboxTag promised by a client call.
type ApiSession_PowerboxTag_Future struct{ *capnp.Future }

func (f ApiSession_PowerboxTag_Future) Struct() (ApiSession_PowerboxTag, error) {
	p, err := f.Future.Ptr()
	return ApiSession_PowerboxTag(p.Struct()), err
}

type ApiSession_PowerboxTag_OAuthScope capnp.Struct

// ApiSession_PowerboxTag_OAuthScope_TypeID is the unique identifier for the type ApiSession_PowerboxTag_OAuthScope.
const ApiSession_PowerboxTag_OAuthScope_TypeID = 0xbb95f31093b1fd88

func NewApiSession_PowerboxTag_OAuthScope(s *capnp.Segment) (ApiSession_PowerboxTag_OAuthScope, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ApiSession_PowerboxTag_OAuthScope(st), err
}

func NewRootApiSession_PowerboxTag_OAuthScope(s *capnp.Segment) (ApiSession_PowerboxTag_OAuthScope, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ApiSession_PowerboxTag_OAuthScope(st), err
}

func ReadRootApiSession_PowerboxTag_OAuthScope(msg *capnp.Message) (ApiSession_PowerboxTag_OAuthScope, error) {
	root, err := msg.Root()
	return ApiSession_PowerboxTag_OAuthScope(root.Struct()), err
}

func (s ApiSession_PowerboxTag_OAuthScope) String() string {
	str, _ := text.Marshal(0xbb95f31093b1fd88, capnp.Struct(s))
	return str
}

func (s ApiSession_PowerboxTag_OAuthScope) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ApiSession_PowerboxTag_OAuthScope) DecodeFromPtr(p capnp.Ptr) ApiSession_PowerboxTag_OAuthScope {
	return ApiSession_PowerboxTag_OAuthScope(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ApiSession_PowerboxTag_OAuthScope) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ApiSession_PowerboxTag_OAuthScope) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ApiSession_PowerboxTag_OAuthScope) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ApiSession_PowerboxTag_OAuthScope) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ApiSession_PowerboxTag_OAuthScope) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ApiSession_PowerboxTag_OAuthScope) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ApiSession_PowerboxTag_OAuthScope) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ApiSession_PowerboxTag_OAuthScope) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ApiSession_PowerboxTag_OAuthScope_List is a list of ApiSession_PowerboxTag_OAuthScope.
type ApiSession_PowerboxTag_OAuthScope_List = capnp.StructList[ApiSession_PowerboxTag_OAuthScope]

// NewApiSession_PowerboxTag_OAuthScope creates a new list of ApiSession_PowerboxTag_OAuthScope.
func NewApiSession_PowerboxTag_OAuthScope_List(s *capnp.Segment, sz int32) (ApiSession_PowerboxTag_OAuthScope_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ApiSession_PowerboxTag_OAuthScope](l), err
}

// ApiSession_PowerboxTag_OAuthScope_Future is a wrapper for a ApiSession_PowerboxTag_OAuthScope promised by a client call.
type ApiSession_PowerboxTag_OAuthScope_Future struct{ *capnp.Future }

func (f ApiSession_PowerboxTag_OAuthScope_Future) Struct() (ApiSession_PowerboxTag_OAuthScope, error) {
	p, err := f.Future.Ptr()
	return ApiSession_PowerboxTag_OAuthScope(p.Struct()), err
}

const schema_eb014c0c3413cbfb = "x\xda\x84\x92\xcfk\x13A\x1c\xc5\xdfwf\xd7\xad\x98" +
	"f\xb2n\xa0^\x8a \x88(m\xf1'B/1\xa0" +
	"\x17I\xe9\x0e\x89\x82\xde&\xc9\xd0\xae4\xbb\xebND" +
	"+z\x14\xbc\x14\x0fE$\xc7\x0a\x05/\"9\x8aw" +
	"\x15E/\xfe\x05\xe2E\x14z\x11\xf1 :\xb2\xa1M" +
	"C\x14do\x8f\xf7}\xdf\xf7\xf9\xee\x1c\x9fq\xce9" +
	"'&+\xd3`\xf5\x06\xb9{\xec\xc9\xad\xbb\x97\xdf\xfc" +
	"\xf8\xb8\x0e\x7f\x9a\xec\xabw\x87_\xae~Z}\x0d\x97" +
	"{\xc0\xa9{\xc5\x8b\x14\xf4\x8aS@\xb0Y|\x06\xb2" +
	"\xf7\x7f\xf5\xd7K\xdf\x1e\xbe\x80\x7f\x94v']\xca\xcd" +
	"W\xc4c\x0a\xae\x0b\x0f\x08:\xa2\x82\x910\x7f?\xb7" +
	"?\xdf\x06\xa7\x0b5\xfa\x0aP\xb0&\xbe\x04=q\x04" +
	"\x08\xfa\xc2\x0b\xfab\x0a\xb0\x8f\xbe/\xd6\xd6f?\xff" +
	"\x1e\xab1H\xde\x10\x87(\xb7\x02\xc1SQ\x81\x1d|" +
	"w\xacJ\xa3Y\xa3\x8dq\xa2$\x9ek\xa94N\xe7" +
	"\xabiT\xd7\xc6\xe4B\x98\xdc\xd4Y3\xb9\xd5PK" +
	"\x80th\xb4<]\xb5\x8b\xd5\x1b\xdd\xe5z+\x01O" +
	"\xb5,p\x07p\x08\xf0/\\\x03\xe4yN2d\xe4" +
	"\x13\x95)\x17\x17\x9a\x80\xacq\x92\xcb\x8c|\xc6\xca\xc4" +
	"\x00_\xdf\x06d\x9b\x93L\x19\xd9\x96\x8a\x938j)" +
	"\x88\x95K\xd9\x0a\x15\xc0\xa8\x00\xb2\x89\xda^\xe2\xa5\xda" +
	"P\x11\x14r\xa2\xd2n\x11P.\xda\xdc\xa5\xe3n\x84" +
	"JKu\xa3$\x1e\xce\xef\x10\xba\xff#\x9c\xdb\xc6\xf1" +
	"\x92T\x87D\xd2\x19\x02M\x1e\x03\xe4\x04'Yf$" +
	"b\xd5\xd1\x7f\x85\xb3\xf1p\x91\xa7\xcb\x09\xa2\x91\x9f\xb2" +
	"w~\xe4\xa1\xb8\xcdJ\xa82\xd51v\xa7\x02\xbc\x86" +
	"Z\x0a\xb9;\xb8\xf3\xfb'g\x166|o\x13\xc0p" +
	"\x09\xff7\x81\xca<\xd51c\x8d3@\x168\xc9\x03" +
	"\x8cl\xa6;IWW\xdb8\xd8\xce\xb41T\xb2\xfb" +
	"f>\x9c\xed=x\xbe\x95\x1f\xaf\x04\xfa\x13\x00\x00\xff" +
	"\xff\x0dI\xd9\xc9"

func init() {
	schemas.Register(schema_eb014c0c3413cbfb,
		0x93e1f7ca567dee32,
		0xbb95f31093b1fd88,
		0xc879e379c625cdc7,
		0xfee82d8d4c4ff597)
}
