// Code generated by capnpc-go. DO NOT EDIT.

package apisession

import (
	context "context"
	ip "zenhack.net/go/sandstorm/capnp/ip"
	websession "zenhack.net/go/sandstorm/capnp/websession"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type ApiSession struct{ Client *capnp.Client }

// ApiSession_TypeID is the unique identifier for the type ApiSession.
const ApiSession_TypeID = 0xc879e379c625cdc7

func (c ApiSession) Get(ctx context.Context, params func(websession.WebSession_get_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Post(ctx context.Context, params func(websession.WebSession_post_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_post_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) OpenWebSocket(ctx context.Context, params func(websession.WebSession_openWebSocket_Params) error) (websession.WebSession_openWebSocket_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_openWebSocket_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_openWebSocket_Results_Future{Future: ans.Future()}, release
}
func (c ApiSession) Put(ctx context.Context, params func(websession.WebSession_put_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_put_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Delete(ctx context.Context, params func(websession.WebSession_delete_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_delete_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) PostStreaming(ctx context.Context, params func(websession.WebSession_postStreaming_Params) error) (websession.WebSession_postStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_postStreaming_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_postStreaming_Results_Future{Future: ans.Future()}, release
}
func (c ApiSession) PutStreaming(ctx context.Context, params func(websession.WebSession_putStreaming_Params) error) (websession.WebSession_putStreaming_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_putStreaming_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_putStreaming_Results_Future{Future: ans.Future()}, release
}
func (c ApiSession) Propfind(ctx context.Context, params func(websession.WebSession_propfind_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_propfind_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Proppatch(ctx context.Context, params func(websession.WebSession_proppatch_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_proppatch_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Mkcol(ctx context.Context, params func(websession.WebSession_mkcol_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_mkcol_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Copy(ctx context.Context, params func(websession.WebSession_copy_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_copy_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Move(ctx context.Context, params func(websession.WebSession_move_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_move_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Lock(ctx context.Context, params func(websession.WebSession_lock_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_lock_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Unlock(ctx context.Context, params func(websession.WebSession_unlock_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_unlock_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Acl(ctx context.Context, params func(websession.WebSession_acl_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_acl_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Report(ctx context.Context, params func(websession.WebSession_report_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_report_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}
func (c ApiSession) Options(ctx context.Context, params func(websession.WebSession_options_Params) error) (websession.WebSession_Options_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_options_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Options_Future{Future: ans.Future()}, release
}
func (c ApiSession) Patch(ctx context.Context, params func(websession.WebSession_patch_Params) error) (websession.WebSession_Response_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(websession.WebSession_patch_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return websession.WebSession_Response_Future{Future: ans.Future()}, release
}

// A ApiSession_Server is a ApiSession with a local implementation.
type ApiSession_Server interface {
	Get(context.Context, websession.WebSession_get) error

	Post(context.Context, websession.WebSession_post) error

	OpenWebSocket(context.Context, websession.WebSession_openWebSocket) error

	Put(context.Context, websession.WebSession_put) error

	Delete(context.Context, websession.WebSession_delete) error

	PostStreaming(context.Context, websession.WebSession_postStreaming) error

	PutStreaming(context.Context, websession.WebSession_putStreaming) error

	Propfind(context.Context, websession.WebSession_propfind) error

	Proppatch(context.Context, websession.WebSession_proppatch) error

	Mkcol(context.Context, websession.WebSession_mkcol) error

	Copy(context.Context, websession.WebSession_copy) error

	Move(context.Context, websession.WebSession_move) error

	Lock(context.Context, websession.WebSession_lock) error

	Unlock(context.Context, websession.WebSession_unlock) error

	Acl(context.Context, websession.WebSession_acl) error

	Report(context.Context, websession.WebSession_report) error

	Options(context.Context, websession.WebSession_options) error

	Patch(context.Context, websession.WebSession_patch) error
}

// ApiSession_NewServer creates a new Server from an implementation of ApiSession_Server.
func ApiSession_NewServer(s ApiSession_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ApiSession_Methods(nil, s), s, c, policy)
}

// ApiSession_ServerToClient creates a new Client from an implementation of ApiSession_Server.
// The caller is responsible for calling Release on the returned Client.
func ApiSession_ServerToClient(s ApiSession_Server, policy *server.Policy) ApiSession {
	return ApiSession{Client: capnp.NewClient(ApiSession_NewServer(s, policy))}
}

// ApiSession_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ApiSession_Methods(methods []server.Method, s ApiSession_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 18)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      0,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, websession.WebSession_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      1,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "post",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Post(ctx, websession.WebSession_post{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      2,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "openWebSocket",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.OpenWebSocket(ctx, websession.WebSession_openWebSocket{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      3,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, websession.WebSession_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      4,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "delete",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Delete(ctx, websession.WebSession_delete{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      5,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "postStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PostStreaming(ctx, websession.WebSession_postStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      6,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "putStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PutStreaming(ctx, websession.WebSession_putStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      7,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "propfind",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Propfind(ctx, websession.WebSession_propfind{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      8,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "proppatch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Proppatch(ctx, websession.WebSession_proppatch{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      9,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "mkcol",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Mkcol(ctx, websession.WebSession_mkcol{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      10,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "copy",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Copy(ctx, websession.WebSession_copy{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      11,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "move",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Move(ctx, websession.WebSession_move{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      12,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "lock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lock(ctx, websession.WebSession_lock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      13,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "unlock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unlock(ctx, websession.WebSession_unlock{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      14,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "acl",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Acl(ctx, websession.WebSession_acl{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      15,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "report",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Report(ctx, websession.WebSession_report{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      16,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "options",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Options(ctx, websession.WebSession_options{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa50711a14d35a8ce,
			MethodID:      17,
			InterfaceName: "web-session.capnp:WebSession",
			MethodName:    "patch",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Patch(ctx, websession.WebSession_patch{call})
		},
	})

	return methods
}

type ApiSession_Params struct{ capnp.Struct }

// ApiSession_Params_TypeID is the unique identifier for the type ApiSession_Params.
const ApiSession_Params_TypeID = 0xfee82d8d4c4ff597

func NewApiSession_Params(s *capnp.Segment) (ApiSession_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ApiSession_Params{st}, err
}

func NewRootApiSession_Params(s *capnp.Segment) (ApiSession_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ApiSession_Params{st}, err
}

func ReadRootApiSession_Params(msg *capnp.Message) (ApiSession_Params, error) {
	root, err := msg.Root()
	return ApiSession_Params{root.Struct()}, err
}

func (s ApiSession_Params) String() string {
	str, _ := text.Marshal(0xfee82d8d4c4ff597, s.Struct)
	return str
}

func (s ApiSession_Params) RemoteAddress() (ip.IpAddress, error) {
	p, err := s.Struct.Ptr(0)
	return ip.IpAddress{Struct: p.Struct()}, err
}

func (s ApiSession_Params) HasRemoteAddress() bool {
	return s.Struct.HasPtr(0)
}

func (s ApiSession_Params) SetRemoteAddress(v ip.IpAddress) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRemoteAddress sets the remoteAddress field to a newly
// allocated ip.IpAddress struct, preferring placement in s's segment.
func (s ApiSession_Params) NewRemoteAddress() (ip.IpAddress, error) {
	ss, err := ip.NewIpAddress(s.Struct.Segment())
	if err != nil {
		return ip.IpAddress{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ApiSession_Params_List is a list of ApiSession_Params.
type ApiSession_Params_List struct{ capnp.List }

// NewApiSession_Params creates a new list of ApiSession_Params.
func NewApiSession_Params_List(s *capnp.Segment, sz int32) (ApiSession_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ApiSession_Params_List{l}, err
}

func (s ApiSession_Params_List) At(i int) ApiSession_Params {
	return ApiSession_Params{s.List.Struct(i)}
}

func (s ApiSession_Params_List) Set(i int, v ApiSession_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ApiSession_Params_List) String() string {
	str, _ := text.MarshalList(0xfee82d8d4c4ff597, s.List)
	return str
}

// ApiSession_Params_Future is a wrapper for a ApiSession_Params promised by a client call.
type ApiSession_Params_Future struct{ *capnp.Future }

func (p ApiSession_Params_Future) Struct() (ApiSession_Params, error) {
	s, err := p.Future.Struct()
	return ApiSession_Params{s}, err
}

func (p ApiSession_Params_Future) RemoteAddress() ip.IpAddress_Future {
	return ip.IpAddress_Future{Future: p.Future.Field(0, nil)}
}

type ApiSession_PowerboxTag struct{ capnp.Struct }

// ApiSession_PowerboxTag_TypeID is the unique identifier for the type ApiSession_PowerboxTag.
const ApiSession_PowerboxTag_TypeID = 0x93e1f7ca567dee32

func NewApiSession_PowerboxTag(s *capnp.Segment) (ApiSession_PowerboxTag, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ApiSession_PowerboxTag{st}, err
}

func NewRootApiSession_PowerboxTag(s *capnp.Segment) (ApiSession_PowerboxTag, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ApiSession_PowerboxTag{st}, err
}

func ReadRootApiSession_PowerboxTag(msg *capnp.Message) (ApiSession_PowerboxTag, error) {
	root, err := msg.Root()
	return ApiSession_PowerboxTag{root.Struct()}, err
}

func (s ApiSession_PowerboxTag) String() string {
	str, _ := text.Marshal(0x93e1f7ca567dee32, s.Struct)
	return str
}

func (s ApiSession_PowerboxTag) CanonicalUrl() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ApiSession_PowerboxTag) HasCanonicalUrl() bool {
	return s.Struct.HasPtr(0)
}

func (s ApiSession_PowerboxTag) CanonicalUrlBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ApiSession_PowerboxTag) SetCanonicalUrl(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ApiSession_PowerboxTag) OauthScopes() (ApiSession_PowerboxTag_OAuthScope_List, error) {
	p, err := s.Struct.Ptr(1)
	return ApiSession_PowerboxTag_OAuthScope_List{List: p.List()}, err
}

func (s ApiSession_PowerboxTag) HasOauthScopes() bool {
	return s.Struct.HasPtr(1)
}

func (s ApiSession_PowerboxTag) SetOauthScopes(v ApiSession_PowerboxTag_OAuthScope_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewOauthScopes sets the oauthScopes field to a newly
// allocated ApiSession_PowerboxTag_OAuthScope_List, preferring placement in s's segment.
func (s ApiSession_PowerboxTag) NewOauthScopes(n int32) (ApiSession_PowerboxTag_OAuthScope_List, error) {
	l, err := NewApiSession_PowerboxTag_OAuthScope_List(s.Struct.Segment(), n)
	if err != nil {
		return ApiSession_PowerboxTag_OAuthScope_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s ApiSession_PowerboxTag) Authentication() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s ApiSession_PowerboxTag) HasAuthentication() bool {
	return s.Struct.HasPtr(2)
}

func (s ApiSession_PowerboxTag) AuthenticationBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s ApiSession_PowerboxTag) SetAuthentication(v string) error {
	return s.Struct.SetText(2, v)
}

// ApiSession_PowerboxTag_List is a list of ApiSession_PowerboxTag.
type ApiSession_PowerboxTag_List struct{ capnp.List }

// NewApiSession_PowerboxTag creates a new list of ApiSession_PowerboxTag.
func NewApiSession_PowerboxTag_List(s *capnp.Segment, sz int32) (ApiSession_PowerboxTag_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return ApiSession_PowerboxTag_List{l}, err
}

func (s ApiSession_PowerboxTag_List) At(i int) ApiSession_PowerboxTag {
	return ApiSession_PowerboxTag{s.List.Struct(i)}
}

func (s ApiSession_PowerboxTag_List) Set(i int, v ApiSession_PowerboxTag) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ApiSession_PowerboxTag_List) String() string {
	str, _ := text.MarshalList(0x93e1f7ca567dee32, s.List)
	return str
}

// ApiSession_PowerboxTag_Future is a wrapper for a ApiSession_PowerboxTag promised by a client call.
type ApiSession_PowerboxTag_Future struct{ *capnp.Future }

func (p ApiSession_PowerboxTag_Future) Struct() (ApiSession_PowerboxTag, error) {
	s, err := p.Future.Struct()
	return ApiSession_PowerboxTag{s}, err
}

type ApiSession_PowerboxTag_OAuthScope struct{ capnp.Struct }

// ApiSession_PowerboxTag_OAuthScope_TypeID is the unique identifier for the type ApiSession_PowerboxTag_OAuthScope.
const ApiSession_PowerboxTag_OAuthScope_TypeID = 0xbb95f31093b1fd88

func NewApiSession_PowerboxTag_OAuthScope(s *capnp.Segment) (ApiSession_PowerboxTag_OAuthScope, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ApiSession_PowerboxTag_OAuthScope{st}, err
}

func NewRootApiSession_PowerboxTag_OAuthScope(s *capnp.Segment) (ApiSession_PowerboxTag_OAuthScope, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ApiSession_PowerboxTag_OAuthScope{st}, err
}

func ReadRootApiSession_PowerboxTag_OAuthScope(msg *capnp.Message) (ApiSession_PowerboxTag_OAuthScope, error) {
	root, err := msg.Root()
	return ApiSession_PowerboxTag_OAuthScope{root.Struct()}, err
}

func (s ApiSession_PowerboxTag_OAuthScope) String() string {
	str, _ := text.Marshal(0xbb95f31093b1fd88, s.Struct)
	return str
}

func (s ApiSession_PowerboxTag_OAuthScope) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ApiSession_PowerboxTag_OAuthScope) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s ApiSession_PowerboxTag_OAuthScope) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ApiSession_PowerboxTag_OAuthScope) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// ApiSession_PowerboxTag_OAuthScope_List is a list of ApiSession_PowerboxTag_OAuthScope.
type ApiSession_PowerboxTag_OAuthScope_List struct{ capnp.List }

// NewApiSession_PowerboxTag_OAuthScope creates a new list of ApiSession_PowerboxTag_OAuthScope.
func NewApiSession_PowerboxTag_OAuthScope_List(s *capnp.Segment, sz int32) (ApiSession_PowerboxTag_OAuthScope_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ApiSession_PowerboxTag_OAuthScope_List{l}, err
}

func (s ApiSession_PowerboxTag_OAuthScope_List) At(i int) ApiSession_PowerboxTag_OAuthScope {
	return ApiSession_PowerboxTag_OAuthScope{s.List.Struct(i)}
}

func (s ApiSession_PowerboxTag_OAuthScope_List) Set(i int, v ApiSession_PowerboxTag_OAuthScope) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ApiSession_PowerboxTag_OAuthScope_List) String() string {
	str, _ := text.MarshalList(0xbb95f31093b1fd88, s.List)
	return str
}

// ApiSession_PowerboxTag_OAuthScope_Future is a wrapper for a ApiSession_PowerboxTag_OAuthScope promised by a client call.
type ApiSession_PowerboxTag_OAuthScope_Future struct{ *capnp.Future }

func (p ApiSession_PowerboxTag_OAuthScope_Future) Struct() (ApiSession_PowerboxTag_OAuthScope, error) {
	s, err := p.Future.Struct()
	return ApiSession_PowerboxTag_OAuthScope{s}, err
}

const schema_eb014c0c3413cbfb = "x\xda\x84\x92\xcdk\x13A\x18\xc6\x9fwf\xd7m1" +
	"\xeef\x9d\x94z\xb0\x88\x82H\xc5\x14?)\xf4\x12\x03" +
	"\x0a\")\xdd!\xd5\x83\x9e&\xc9\xd0\xae4\xbb\xcbN" +
	"D+x\xf7\"\x1e\x8a\x88G\x05\xc1\x9bx\x14\xef*" +
	"\x8a^\xc4?@\xbc\xf8\x81\xbd\x88x\x10\x1d\xd9\xd0\xa6" +
	"!\x0a\xb2\xb7\x87\xe7}\xde\xe7\xf7\xee\x1c\x1ewN\xb2" +
	"#\xee\xecn\xa0y\x86\xdcm\xf6\xe8\xfa\xf5\xf3/\x7f" +
	"\xbc_C8E\xf6\xf9\xeb\xfd\xcfV?\xac\xbe\x80\xcb" +
	"=\xe0\x18\xf9gIL\xf8\x93\x80\xd8\xeb?\x02\xd9\x1b" +
	"\xbf\x1e\xaf\x95\xbf\xdd~\x8ap\x9a\xb6&]*\xcc\xef" +
	"\xfc\xfb$\xbe\xfa\x1e >\xf95\x0c\x85\x85;\xb9\xfd" +
	"\xf9J\x1c/5\xe8\x0b@b<\xf8,&\x82\x03\x80" +
	"\xa8\x06\x9e\xa8\x06\x93\x80\xbd\xf3}\xa1q\xb3\xfa\xf1\xf7" +
	"H\x8d~\xf2T\xb0\x8f\x0a+ \xa6\x83\x1al\xff\xbb" +
	"hU\x16W\x8d6\xc6\x89\xd3d\xa6\xad\xb2$\x9b\xab" +
	"gqS\x1bS\x08QzE\xe7\xad\xf4\xea\xa2Z\x02" +
	"\xa4C\xc3\xe5\xe9\x82]\xa8_\xee-7\xdb)x\xa6" +
	"e\x89;\x80C@x\xfa\x12 Oq\x92\x11\xa3\x90" +
	"\xa8B\x858\xdf\x02d\x83\x93\\f\x142V!\x06" +
	"\x84\xfa\x1a ;\x9cd\xc6\xc8\xb6U\x92&q[!" +
	"X9\x97\xafP\x09\x8cJ \x9b\xaa\x8d%^\xa6\x0d" +
	"\xf9\xa0\x88\x13\x95\xb7\x8a\x80\x0a\xd1\x16.\x9d\xf4b\xd4" +
	"\xda\xaa\x17\xa7\xc9`~\x93\xd0\xfd\x1f\xe1\xcc\x06\x8e\x97" +
	"f:\"\x92\xce\x00h\xc7A@\x8eq\x92\x15FA" +
	"\xa2\xba\xfa\xafp6\x1a\x1e\x14\xe9r\x8ch\xe8\xa7\x8c" +
	"\xcf\x0d=\x14\xb7U\x8bT\xae\xba\xc6nV\x80\xb7\xa8" +
	"\x96\"\xee\xf6\xef\xfc\xe6\xe1\x89\xf9{\xa1\xf7\x00\xc0`" +
	"\x09\xff7\x81\xca=\xd55#\x8ds@\x968\xc9]" +
	"\x8cl\xae\xbbiO\xd7;\xd8\xd3\xc9\xb51T\xb6\xdb" +
	"\x0f\xbd\x9d\xbd{\xeb\xc9zq\xbc2\xe8O\x00\x00\x00" +
	"\xff\xff\x9a\xf0\xd5\xad"

func init() {
	schemas.Register(schema_eb014c0c3413cbfb,
		0x93e1f7ca567dee32,
		0xbb95f31093b1fd88,
		0xc879e379c625cdc7,
		0xfee82d8d4c4ff597)
}
